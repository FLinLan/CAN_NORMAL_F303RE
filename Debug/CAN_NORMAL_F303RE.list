
CAN_NORMAL_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003810  08003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003848  08003848  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003848  08003848  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00004848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800384c  0800384c  0000484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003850  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adae  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d6  00000000  00000000  0000fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  000116c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000601  00000000  00000000  00011e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd73  00000000  00000000  00012499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8b0  00000000  00000000  0003220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c23d4  00000000  00000000  0003cabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fee90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f70  00000000  00000000  000feed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00100e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037f8 	.word	0x080037f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080037f8 	.word	0x080037f8

080001d4 <floatToLowerBytes>:
  } u;
  u.var = val;
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
}

void floatToLowerBytes(float val, uint8_t* byteArr) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	ed87 0a01 	vstr	s0, [r7, #4]
 80001de:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr + 4, u.buf, sizeof(float)); // Write to bytes 4–7
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	3304      	adds	r3, #4
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fa96 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f82c 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f8ee 	bl	80003e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000208:	f000 f8bc 	bl	8000384 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800020c:	f000 f884 	bl	8000318 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000210:	480e      	ldr	r0, [pc, #56]	@ (800024c <main+0x54>)
 8000212:	f000 fc10 	bl	8000a36 <HAL_CAN_Start>


  // sending over the CANPacket
  TxHeader.StdId = (NODE_ID << 5) | SET_INPUT_VEL; // 0x00D = setInputVelocity, node_id = 0
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <main+0x58>)
 8000218:	220d      	movs	r2, #13
 800021a:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <main+0x58>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000222:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <main+0x58>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <main+0x58>)
 800022a:	2208      	movs	r2, #8
 800022c:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */
  floatToLowerBytes(3.0f, TxData); // velocity bytes
 800022e:	4809      	ldr	r0, [pc, #36]	@ (8000254 <main+0x5c>)
 8000230:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000234:	f7ff ffce 	bl	80001d4 <floatToLowerBytes>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000238:	4b07      	ldr	r3, [pc, #28]	@ (8000258 <main+0x60>)
 800023a:	4a06      	ldr	r2, [pc, #24]	@ (8000254 <main+0x5c>)
 800023c:	4904      	ldr	r1, [pc, #16]	@ (8000250 <main+0x58>)
 800023e:	4803      	ldr	r0, [pc, #12]	@ (800024c <main+0x54>)
 8000240:	f000 fc3d 	bl	8000abe <HAL_CAN_AddTxMessage>
	  // handle error…
	}
	HAL_Delay(100);
 8000244:	2064      	movs	r0, #100	@ 0x64
 8000246:	f000 fad7 	bl	80007f8 <HAL_Delay>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800024a:	e7f5      	b.n	8000238 <main+0x40>
 800024c:	20000028 	.word	0x20000028
 8000250:	200000d8 	.word	0x200000d8
 8000254:	200000f0 	.word	0x200000f0
 8000258:	200000f8 	.word	0x200000f8

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b0a6      	sub	sp, #152	@ 0x98
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fa97 	bl	800379e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2258      	movs	r2, #88	@ 0x58
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fa89 	bl	800379e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028c:	2301      	movs	r3, #1
 800028e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000294:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f9e0 	bl	8001680 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c6:	f000 f8fb 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 f9ee 	bl	80026c8 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002f2:	f000 f8e5 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f002 fbf3 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800030c:	f000 f8d8 	bl	80004c0 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3798      	adds	r7, #152	@ 0x98
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800031c:	4b17      	ldr	r3, [pc, #92]	@ (800037c <MX_CAN_Init+0x64>)
 800031e:	4a18      	ldr	r2, [pc, #96]	@ (8000380 <MX_CAN_Init+0x68>)
 8000320:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000322:	4b16      	ldr	r3, [pc, #88]	@ (800037c <MX_CAN_Init+0x64>)
 8000324:	2208      	movs	r2, #8
 8000326:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000328:	4b14      	ldr	r3, [pc, #80]	@ (800037c <MX_CAN_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800032e:	4b13      	ldr	r3, [pc, #76]	@ (800037c <MX_CAN_Init+0x64>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_CAN_Init+0x64>)
 8000336:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800033a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_CAN_Init+0x64>)
 800033e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000342:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800034a:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000350:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <MX_CAN_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000356:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_CAN_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800035c:	4b07      	ldr	r3, [pc, #28]	@ (800037c <MX_CAN_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000362:	4b06      	ldr	r3, [pc, #24]	@ (800037c <MX_CAN_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000368:	4804      	ldr	r0, [pc, #16]	@ (800037c <MX_CAN_Init+0x64>)
 800036a:	f000 fa69 	bl	8000840 <HAL_CAN_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000374:	f000 f8a4 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000028 	.word	0x20000028
 8000380:	40006400 	.word	0x40006400

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 800038a:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <MX_USART2_UART_Init+0x5c>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 8000390:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_USART2_UART_Init+0x58>)
 80003c8:	f002 fdac 	bl	8002f24 <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003d2:	f000 f875 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000050 	.word	0x20000050
 80003e0:	40004400 	.word	0x40004400

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	@ 0x28
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b2f      	ldr	r3, [pc, #188]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a2e      	ldr	r2, [pc, #184]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a28      	ldr	r2, [pc, #160]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000418:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_GPIO_Init+0xd4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2120      	movs	r1, #32
 800045e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000462:	f001 f8d1 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800046c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <MX_GPIO_Init+0xd8>)
 800047e:	f000 ff39 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000482:	2320      	movs	r3, #32
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	4619      	mov	r1, r3
 8000498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049c:	f000 ff2a 	bl	80012f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2028      	movs	r0, #40	@ 0x28
 80004a6:	f000 feee 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f000 ff07 	bl	80012be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3728      	adds	r7, #40	@ 0x28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000800 	.word	0x48000800

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x44>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <HAL_MspInit+0x44>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_MspInit+0x44>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000502:	2007      	movs	r0, #7
 8000504:	f000 feb4 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <HAL_CAN_MspInit+0x90>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d131      	bne.n	800059a <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000536:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a1b      	ldr	r2, [pc, #108]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 800053c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <HAL_CAN_MspInit+0x94>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000566:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800056a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000578:	2309      	movs	r3, #9
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 feb5 	bl	80012f4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2014      	movs	r0, #20
 8000590:	f000 fe79 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000594:	2014      	movs	r0, #20
 8000596:	f000 fe92 	bl	80012be <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800059a:	bf00      	nop
 800059c:	3728      	adds	r7, #40	@ 0x28
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40006400 	.word	0x40006400
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	@ (8000628 <HAL_UART_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d128      	bne.n	8000620 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a16      	ldr	r2, [pc, #88]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a10      	ldr	r2, [pc, #64]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <HAL_UART_MspInit+0x80>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005fe:	230c      	movs	r3, #12
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800060e:	2307      	movs	r3, #7
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f000 fe6a 	bl	80012f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	@ 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40004400 	.word	0x40004400
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <MemManage_Handler+0x4>

08000648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <UsageFault_Handler+0x4>

08000658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000686:	f000 f897 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000696:	f000 fae2 	bl	8000c5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028

080006a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006ac:	f000 ffc4 	bl	8001638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000710 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006dc:	f7ff ffea 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e2:	490d      	ldr	r1, [pc, #52]	@ (8000718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e4:	4a0d      	ldr	r2, [pc, #52]	@ (800071c <LoopForever+0xe>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e8:	e002      	b.n	80006f0 <LoopCopyDataInit>

080006ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ee:	3304      	adds	r3, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f4:	d3f9      	bcc.n	80006ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000724 <LoopForever+0x16>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006fc:	e001      	b.n	8000702 <LoopFillZerobss>

080006fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000700:	3204      	adds	r2, #4

08000702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000704:	d3fb      	bcc.n	80006fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000706:	f003 f853 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070a:	f7ff fd75 	bl	80001f8 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	20000100 	.word	0x20000100

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 fd97 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff fec0 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fdaf 	bl	80012da <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 fd77 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_IncTick+0x20>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_IncTick+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_IncTick+0x24>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000008 	.word	0x20000008
 80007dc:	200000fc 	.word	0x200000fc

080007e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e4:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	200000fc 	.word	0x200000fc

080007f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000800:	f7ff ffee 	bl	80007e0 <HAL_GetTick>
 8000804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000810:	d005      	beq.n	800081e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_Delay+0x44>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081e:	bf00      	nop
 8000820:	f7ff ffde 	bl	80007e0 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	429a      	cmp	r2, r3
 800082e:	d8f7      	bhi.n	8000820 <HAL_Delay+0x28>
  {
  }
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008

08000840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e0ed      	b.n	8000a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fe58 	bl	8000514 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f042 0201 	orr.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000874:	f7ff ffb4 	bl	80007e0 <HAL_GetTick>
 8000878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800087a:	e012      	b.n	80008a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800087c:	f7ff ffb0 	bl	80007e0 <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	2b0a      	cmp	r3, #10
 8000888:	d90b      	bls.n	80008a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2205      	movs	r2, #5
 800089a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e0c5      	b.n	8000a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0e5      	beq.n	800087c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0202 	bic.w	r2, r2, #2
 80008be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c0:	f7ff ff8e 	bl	80007e0 <HAL_GetTick>
 80008c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008c6:	e012      	b.n	80008ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008c8:	f7ff ff8a 	bl	80007e0 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2b0a      	cmp	r3, #10
 80008d4:	d90b      	bls.n	80008ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2205      	movs	r2, #5
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e09f      	b.n	8000a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1e5      	bne.n	80008c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7e1b      	ldrb	r3, [r3, #24]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e007      	b.n	8000926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7e5b      	ldrb	r3, [r3, #25]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d108      	bne.n	8000940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e007      	b.n	8000950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800094e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7e9b      	ldrb	r3, [r3, #26]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d108      	bne.n	800096a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 0220 	orr.w	r2, r2, #32
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	e007      	b.n	800097a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0220 	bic.w	r2, r2, #32
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7edb      	ldrb	r3, [r3, #27]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d108      	bne.n	8000994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 0210 	bic.w	r2, r2, #16
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e007      	b.n	80009a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0210 	orr.w	r2, r2, #16
 80009a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7f1b      	ldrb	r3, [r3, #28]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0208 	orr.w	r2, r2, #8
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	e007      	b.n	80009ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0208 	bic.w	r2, r2, #8
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7f5b      	ldrb	r3, [r3, #29]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d108      	bne.n	80009e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f042 0204 	orr.w	r2, r2, #4
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0204 	bic.w	r2, r2, #4
 80009f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	431a      	orrs	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	ea42 0103 	orr.w	r1, r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	1e5a      	subs	r2, r3, #1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d12e      	bne.n	8000aa8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a62:	f7ff febd 	bl	80007e0 <HAL_GetTick>
 8000a66:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a68:	e012      	b.n	8000a90 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a6a:	f7ff feb9 	bl	80007e0 <HAL_GetTick>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2b0a      	cmp	r3, #10
 8000a76:	d90b      	bls.n	8000a90 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2205      	movs	r2, #5
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e012      	b.n	8000ab6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1e5      	bne.n	8000a6a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e006      	b.n	8000ab6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
  }
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b089      	sub	sp, #36	@ 0x24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000adc:	7ffb      	ldrb	r3, [r7, #31]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d003      	beq.n	8000aea <HAL_CAN_AddTxMessage+0x2c>
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	f040 80ad 	bne.w	8000c44 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10a      	bne.n	8000b0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d105      	bne.n	8000b0a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 8095 	beq.w	8000c34 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	0e1b      	lsrs	r3, r3, #24
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b14:	2201      	movs	r2, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10d      	bne.n	8000b42 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b30:	68f9      	ldr	r1, [r7, #12]
 8000b32:	6809      	ldr	r1, [r1, #0]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	440b      	add	r3, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e00f      	b.n	8000b62 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b52:	68f9      	ldr	r1, [r7, #12]
 8000b54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3318      	adds	r3, #24
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	440b      	add	r3, r1
 8000b60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3318      	adds	r3, #24
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	440b      	add	r3, r1
 8000b72:	3304      	adds	r3, #4
 8000b74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	7d1b      	ldrb	r3, [r3, #20]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d111      	bne.n	8000ba2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3318      	adds	r3, #24
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	4413      	add	r3, r2
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3318      	adds	r3, #24
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	061a      	lsls	r2, r3, #24
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3306      	adds	r3, #6
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3305      	adds	r3, #5
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	3204      	adds	r2, #4
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6811      	ldr	r1, [r2, #0]
 8000bca:	ea43 0200 	orr.w	r2, r3, r0
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000bd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3303      	adds	r3, #3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	061a      	lsls	r2, r3, #24
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3302      	adds	r3, #2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	041b      	lsls	r3, r3, #16
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	6811      	ldr	r1, [r2, #0]
 8000c00:	ea43 0200 	orr.w	r2, r3, r0
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	440b      	add	r3, r1
 8000c0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000c0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3318      	adds	r3, #24
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3318      	adds	r3, #24
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	440b      	add	r3, r1
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e00e      	b.n	8000c52 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e006      	b.n	8000c52 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
  }
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b08a      	sub	sp, #40	@ 0x28
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d07c      	beq.n	8000d9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d023      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f983 	bl	8000fcc <HAL_CAN_TxMailbox0CompleteCallback>
 8000cc6:	e016      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cda:	e00c      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cee:	e002      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f989 	bl	8001008 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d024      	beq.n	8000d4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f963 	bl	8000fe0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000d1a:	e016      	b.n	8000d4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d2e:	e00c      	b.n	8000d4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d004      	beq.n	8000d44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d42:	e002      	b.n	8000d4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f969 	bl	800101c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d024      	beq.n	8000d9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f943 	bl	8000ff4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000d6e:	e016      	b.n	8000d9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d82:	e00c      	b.n	8000d9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d96:	e002      	b.n	8000d9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f949 	bl	8001030 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00c      	beq.n	8000dc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00b      	beq.n	8000de4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2208      	movs	r2, #8
 8000ddc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 f93a 	bl	8001058 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d009      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f921 	bl	8001044 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00c      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2210      	movs	r2, #16
 8000e24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00b      	beq.n	8000e48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2208      	movs	r2, #8
 8000e40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f91c 	bl	8001080 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d009      	beq.n	8000e66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f903 	bl	800106c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2210      	movs	r2, #16
 8000e80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f906 	bl	8001094 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f8ff 	bl	80010a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d07b      	beq.n	8000fac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d072      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d008      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d043      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d03e      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000f2c:	2b60      	cmp	r3, #96	@ 0x60
 8000f2e:	d02b      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x32a>
 8000f30:	2b60      	cmp	r3, #96	@ 0x60
 8000f32:	d82e      	bhi.n	8000f92 <HAL_CAN_IRQHandler+0x334>
 8000f34:	2b50      	cmp	r3, #80	@ 0x50
 8000f36:	d022      	beq.n	8000f7e <HAL_CAN_IRQHandler+0x320>
 8000f38:	2b50      	cmp	r3, #80	@ 0x50
 8000f3a:	d82a      	bhi.n	8000f92 <HAL_CAN_IRQHandler+0x334>
 8000f3c:	2b40      	cmp	r3, #64	@ 0x40
 8000f3e:	d019      	beq.n	8000f74 <HAL_CAN_IRQHandler+0x316>
 8000f40:	2b40      	cmp	r3, #64	@ 0x40
 8000f42:	d826      	bhi.n	8000f92 <HAL_CAN_IRQHandler+0x334>
 8000f44:	2b30      	cmp	r3, #48	@ 0x30
 8000f46:	d010      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x30c>
 8000f48:	2b30      	cmp	r3, #48	@ 0x30
 8000f4a:	d822      	bhi.n	8000f92 <HAL_CAN_IRQHandler+0x334>
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d002      	beq.n	8000f56 <HAL_CAN_IRQHandler+0x2f8>
 8000f50:	2b20      	cmp	r3, #32
 8000f52:	d005      	beq.n	8000f60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f54:	e01d      	b.n	8000f92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f5e:	e019      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f68:	e014      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f72:	e00f      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f7c:	e00a      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f86:	e005      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8000f90:	e000      	b.n	8000f94 <HAL_CAN_IRQHandler+0x336>
            break;
 8000f92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000fa2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2204      	movs	r2, #4
 8000faa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d008      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f87c 	bl	80010bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	@ (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e160      	b.n	80015c6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8152 	beq.w	80015c0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0203 	and.w	r2, r3, #3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80ac 	beq.w	80015c0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b5e      	ldr	r3, [pc, #376]	@ (80015e4 <HAL_GPIO_Init+0x2f0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a5d      	ldr	r2, [pc, #372]	@ (80015e4 <HAL_GPIO_Init+0x2f0>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b5b      	ldr	r3, [pc, #364]	@ (80015e4 <HAL_GPIO_Init+0x2f0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001480:	4a59      	ldr	r2, [pc, #356]	@ (80015e8 <HAL_GPIO_Init+0x2f4>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014aa:	d025      	beq.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a4f      	ldr	r2, [pc, #316]	@ (80015ec <HAL_GPIO_Init+0x2f8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d01f      	beq.n	80014f4 <HAL_GPIO_Init+0x200>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4e      	ldr	r2, [pc, #312]	@ (80015f0 <HAL_GPIO_Init+0x2fc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d019      	beq.n	80014f0 <HAL_GPIO_Init+0x1fc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <HAL_GPIO_Init+0x300>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d013      	beq.n	80014ec <HAL_GPIO_Init+0x1f8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4c      	ldr	r2, [pc, #304]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00d      	beq.n	80014e8 <HAL_GPIO_Init+0x1f4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a4b      	ldr	r2, [pc, #300]	@ (80015fc <HAL_GPIO_Init+0x308>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x1f0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001600 <HAL_GPIO_Init+0x30c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d101      	bne.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014dc:	2306      	movs	r3, #6
 80014de:	e00c      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e0:	2307      	movs	r3, #7
 80014e2:	e00a      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	@ (80015e8 <HAL_GPIO_Init+0x2f4>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001518:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_GPIO_Init+0x310>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153c:	4a31      	ldr	r2, [pc, #196]	@ (8001604 <HAL_GPIO_Init+0x310>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <HAL_GPIO_Init+0x310>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001566:	4a27      	ldr	r2, [pc, #156]	@ (8001604 <HAL_GPIO_Init+0x310>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_GPIO_Init+0x310>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001590:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_GPIO_Init+0x310>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_GPIO_Init+0x310>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_GPIO_Init+0x310>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f ae97 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48001000 	.word	0x48001000
 80015fc:	48001400 	.word	0x48001400
 8001600:	48001800 	.word	0x48001800
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001624:	e002      	b.n	800162c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f806 	bl	8001668 <HAL_GPIO_EXTI_Callback>
  }
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001686:	af00      	add	r7, sp, #0
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001690:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f001 b80a 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8161 	beq.w	800197e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016bc:	4bae      	ldr	r3, [pc, #696]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d00c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c8:	4bab      	ldr	r3, [pc, #684]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d157      	bne.n	8001784 <HAL_RCC_OscConfig+0x104>
 80016d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e0:	d150      	bne.n	8001784 <HAL_RCC_OscConfig+0x104>
 80016e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b3f      	cmp	r3, #63	@ 0x3f
 8001702:	d802      	bhi.n	800170a <HAL_RCC_OscConfig+0x8a>
 8001704:	4b9c      	ldr	r3, [pc, #624]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0xb6>
 800170a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800170e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800171e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001722:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001726:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001732:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800173a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800173e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001742:	fa92 f2a2 	rbit	r2, r2
 8001746:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800174a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f042 0220 	orr.w	r2, r2, #32
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f002 021f 	and.w	r2, r2, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8108 	beq.w	800197c <HAL_RCC_OscConfig+0x2fc>
 800176c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001770:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f040 80ff 	bne.w	800197c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f000 bf9b 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x124>
 8001796:	4b78      	ldr	r3, [pc, #480]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a77      	ldr	r2, [pc, #476]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e036      	b.n	8001812 <HAL_RCC_OscConfig+0x192>
 80017a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x14e>
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6f      	ldr	r2, [pc, #444]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e021      	b.n	8001812 <HAL_RCC_OscConfig+0x192>
 80017ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x17a>
 80017e0:	4b65      	ldr	r3, [pc, #404]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a64      	ldr	r2, [pc, #400]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b62      	ldr	r3, [pc, #392]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a61      	ldr	r2, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x192>
 80017fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b5c      	ldr	r3, [pc, #368]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5b      	ldr	r2, [pc, #364]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 800180c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d054      	beq.n	80018cc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7fe ffdd 	bl	80007e0 <HAL_GetTick>
 8001826:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7fe ffd8 	bl	80007e0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	@ 0x64
 800183a:	d902      	bls.n	8001842 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	f000 bf3c 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 8001842:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001846:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001856:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b3f      	cmp	r3, #63	@ 0x3f
 8001862:	d802      	bhi.n	800186a <HAL_RCC_OscConfig+0x1ea>
 8001864:	4b44      	ldr	r3, [pc, #272]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x216>
 800186a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800186e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800187e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001882:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001886:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001892:	4b39      	ldr	r3, [pc, #228]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800189a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800189e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018a2:	fa92 f2a2 	rbit	r2, r2
 80018a6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0220 	orr.w	r2, r2, #32
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0b0      	beq.n	800182c <HAL_RCC_OscConfig+0x1ac>
 80018ca:	e058      	b.n	800197e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7fe ff88 	bl	80007e0 <HAL_GetTick>
 80018d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d6:	f7fe ff83 	bl	80007e0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d902      	bls.n	80018ec <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f000 bee7 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 80018ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001900:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b3f      	cmp	r3, #63	@ 0x3f
 800190c:	d802      	bhi.n	8001914 <HAL_RCC_OscConfig+0x294>
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e015      	b.n	8001940 <HAL_RCC_OscConfig+0x2c0>
 8001914:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001918:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001928:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_RCC_OscConfig+0x2f8>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001944:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001948:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800194c:	fa92 f2a2 	rbit	r2, r2
 8001950:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001954:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f002 021f 	and.w	r2, r2, #31
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1b0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x256>
 8001974:	e003      	b.n	800197e <HAL_RCC_OscConfig+0x2fe>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001982:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 816d 	beq.w	8001c6e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001994:	4bcd      	ldr	r3, [pc, #820]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019a0:	4bca      	ldr	r3, [pc, #808]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d16e      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
 80019ac:	4bc7      	ldr	r3, [pc, #796]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019b8:	d167      	bne.n	8001a8a <HAL_RCC_OscConfig+0x40a>
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80019cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019d8:	d802      	bhi.n	80019e0 <HAL_RCC_OscConfig+0x360>
 80019da:	4bbc      	ldr	r3, [pc, #752]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	e013      	b.n	8001a08 <HAL_RCC_OscConfig+0x388>
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a04:	4bb1      	ldr	r3, [pc, #708]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a0e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a12:	fa92 f2a2 	rbit	r2, r2
 8001a16:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a1a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f042 0220 	orr.w	r2, r2, #32
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f002 021f 	and.w	r2, r2, #31
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3d0>
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f000 be35 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b9e      	ldr	r3, [pc, #632]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	21f8      	movs	r1, #248	@ 0xf8
 8001a66:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a6e:	fa91 f1a1 	rbit	r1, r1
 8001a72:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a76:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a7a:	fab1 f181 	clz	r1, r1
 8001a7e:	b2c9      	uxtb	r1, r1
 8001a80:	408b      	lsls	r3, r1
 8001a82:	4992      	ldr	r1, [pc, #584]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	e0f1      	b.n	8001c6e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8083 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x522>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001aae:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe fe8a 	bl	80007e0 <HAL_GetTick>
 8001acc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7fe fe85 	bl	80007e0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d902      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	f000 bde9 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001afa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b06:	d802      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x48e>
 8001b08:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e013      	b.n	8001b36 <HAL_RCC_OscConfig+0x4b6>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b26:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b32:	4b66      	ldr	r3, [pc, #408]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	2202      	movs	r2, #2
 8001b38:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b40:	fa92 f2a2 	rbit	r2, r2
 8001b44:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b48:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f042 0220 	orr.w	r2, r2, #32
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f002 021f 	and.w	r2, r2, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0b4      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b58      	ldr	r3, [pc, #352]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	21f8      	movs	r1, #248	@ 0xf8
 8001b7e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001b86:	fa91 f1a1 	rbit	r1, r1
 8001b8a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001b8e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b92:	fab1 f181 	clz	r1, r1
 8001b96:	b2c9      	uxtb	r1, r1
 8001b98:	408b      	lsls	r3, r1
 8001b9a:	494c      	ldr	r1, [pc, #304]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e065      	b.n	8001c6e <HAL_RCC_OscConfig+0x5ee>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001bb4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bc2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe fe07 	bl	80007e0 <HAL_GetTick>
 8001bd2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fe02 	bl	80007e0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d902      	bls.n	8001bee <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f000 bd66 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c0c:	d802      	bhi.n	8001c14 <HAL_RCC_OscConfig+0x594>
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_OscConfig+0x5bc>
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c38:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_RCC_OscConfig+0x64c>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c42:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c46:	fa92 f2a2 	rbit	r2, r2
 8001c4a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1b4      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8119 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8082 	beq.w	8001d9a <HAL_RCC_OscConfig+0x71a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_OscConfig+0x650>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fd8e 	bl	80007e0 <HAL_GetTick>
 8001cc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc8:	e00f      	b.n	8001cea <HAL_RCC_OscConfig+0x66a>
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7fe fd84 	bl	80007e0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d902      	bls.n	8001cea <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f000 bce8 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	fa93 f2a3 	rbit	r2, r3
 8001d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	4bb0      	ldr	r3, [pc, #704]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d56:	2102      	movs	r1, #2
 8001d58:	6019      	str	r1, [r3, #0]
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f1a3 	rbit	r1, r3
 8001d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d70:	6019      	str	r1, [r3, #0]
  return result;
 8001d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d09d      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x654>
 8001d98:	e08d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x836>
 8001d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dbc:	601a      	str	r2, [r3, #0]
  return result;
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dc6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8002010 <HAL_RCC_OscConfig+0x990>)
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fd00 	bl	80007e0 <HAL_GetTick>
 8001de0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de6:	f7fe fcfb 	bl	80007e0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d902      	bls.n	8001dfc <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f000 bc5f 	b.w	80026ba <HAL_RCC_OscConfig+0x103a>
 8001dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b68      	ldr	r3, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e74:	2102      	movs	r1, #2
 8001e76:	6019      	str	r1, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f1a3 	rbit	r1, r3
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e8e:	6019      	str	r1, [r3, #0]
  return result;
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d197      	bne.n	8001de6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 819c 	beq.w	8002204 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b4b      	ldr	r3, [pc, #300]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b48      	ldr	r3, [pc, #288]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <HAL_RCC_OscConfig+0x994>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11a      	bne.n	8001f4e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f18:	4b3e      	ldr	r3, [pc, #248]	@ (8002014 <HAL_RCC_OscConfig+0x994>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3d      	ldr	r2, [pc, #244]	@ (8002014 <HAL_RCC_OscConfig+0x994>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7fe fc5c 	bl	80007e0 <HAL_GetTick>
 8001f28:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7fe fc57 	bl	80007e0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e3bb      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <HAL_RCC_OscConfig+0x994>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ef      	beq.n	8001f2e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x8ec>
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	e035      	b.n	8001fd8 <HAL_RCC_OscConfig+0x958>
 8001f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCC_OscConfig+0x916>
 8001f7c:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001f8e:	f023 0304 	bic.w	r3, r3, #4
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e020      	b.n	8001fd8 <HAL_RCC_OscConfig+0x958>
 8001f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x940>
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a15      	ldr	r2, [pc, #84]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x958>
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_RCC_OscConfig+0x98c>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8085 	beq.w	80020f4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fbf9 	bl	80007e0 <HAL_GetTick>
 8001fee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	e011      	b.n	8002018 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fbf4 	bl	80007e0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e356      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 800200c:	40021000 	.word	0x40021000
 8002010:	10908120 	.word	0x10908120
 8002014:	40007000 	.word	0x40007000
 8002018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002040:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800205e:	601a      	str	r2, [r3, #0]
  return result;
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002068:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_RCC_OscConfig+0xa00>
 800207a:	4b98      	ldr	r3, [pc, #608]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0xa28>
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002088:	2202      	movs	r2, #2
 800208a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4b8d      	ldr	r3, [pc, #564]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020ac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020b0:	2102      	movs	r1, #2
 80020b2:	6011      	str	r1, [r2, #0]
 80020b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	fa92 f1a2 	rbit	r1, r2
 80020c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020c6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020ca:	6011      	str	r1, [r2, #0]
  return result;
 80020cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d080      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x974>
 80020f2:	e07d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7fe fb74 	bl	80007e0 <HAL_GetTick>
 80020f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	e00b      	b.n	8002116 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fb6f 	bl	80007e0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e2d1      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002126:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002134:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800215c:	601a      	str	r2, [r3, #0]
  return result;
 800215e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002162:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002166:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0xafe>
 8002178:	4b58      	ldr	r3, [pc, #352]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	e013      	b.n	80021a6 <HAL_RCC_OscConfig+0xb26>
 800217e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002182:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002186:	2202      	movs	r2, #2
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021ae:	2102      	movs	r1, #2
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fa92 f1a2 	rbit	r1, r2
 80021c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021c4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021c8:	6011      	str	r1, [r2, #0]
  return result;
 80021ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ce:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d186      	bne.n	80020fe <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a37      	ldr	r2, [pc, #220]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002202:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002208:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8251 	beq.w	80026b8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002216:	4b31      	ldr	r3, [pc, #196]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	f000 820f 	beq.w	8002642 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f040 8165 	bne.w	8002500 <HAL_RCC_OscConfig+0xe80>
 8002236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800223e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002248:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002256:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800225a:	601a      	str	r2, [r3, #0]
  return result;
 800225c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002260:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002264:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fab0 	bl	80007e0 <HAL_GetTick>
 8002280:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe faab 	bl	80007e0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e20f      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022be:	601a      	str	r2, [r3, #0]
  return result;
 80022c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d2:	d805      	bhi.n	80022e0 <HAL_RCC_OscConfig+0xc60>
 80022d4:	4b01      	ldr	r3, [pc, #4]	@ (80022dc <HAL_RCC_OscConfig+0xc5c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e02a      	b.n	8002330 <HAL_RCC_OscConfig+0xcb0>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002300:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800230e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002318:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002326:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	4bca      	ldr	r3, [pc, #808]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002334:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002338:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800233c:	6011      	str	r1, [r2, #0]
 800233e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002342:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fa92 f1a2 	rbit	r1, r2
 800234c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002350:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002354:	6011      	str	r1, [r2, #0]
  return result;
 8002356:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800235a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d184      	bne.n	8002286 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237c:	4bb6      	ldr	r3, [pc, #728]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 800237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002380:	f023 020f 	bic.w	r2, r3, #15
 8002384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002388:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	49b1      	ldr	r1, [pc, #708]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002396:	4bb0      	ldr	r3, [pc, #704]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800239e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a19      	ldr	r1, [r3, #32]
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	430b      	orrs	r3, r1
 80023b8:	49a7      	ldr	r1, [pc, #668]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023e2:	601a      	str	r2, [r3, #0]
  return result;
 80023e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023ec:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	461a      	mov	r2, r3
 8002400:	2301      	movs	r3, #1
 8002402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe f9ec 	bl	80007e0 <HAL_GetTick>
 8002408:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	e009      	b.n	8002422 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe f9e7 	bl	80007e0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e14b      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 8002422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002426:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800242a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002446:	601a      	str	r2, [r3, #0]
  return result;
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b3f      	cmp	r3, #63	@ 0x3f
 800245a:	d802      	bhi.n	8002462 <HAL_RCC_OscConfig+0xde2>
 800245c:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e027      	b.n	80024b2 <HAL_RCC_OscConfig+0xe32>
 8002462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002466:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800246a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002474:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002482:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024be:	6011      	str	r1, [r2, #0]
 80024c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	fa92 f1a2 	rbit	r1, r2
 80024ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024d2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024d6:	6011      	str	r1, [r2, #0]
  return result;
 80024d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024dc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	fab2 f282 	clz	r2, r2
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f002 021f 	and.w	r2, r2, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d087      	beq.n	800240e <HAL_RCC_OscConfig+0xd8e>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_OscConfig+0x1038>
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002524:	601a      	str	r2, [r3, #0]
  return result;
 8002526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800252e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800253a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	461a      	mov	r2, r3
 8002542:	2300      	movs	r3, #0
 8002544:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe f94b 	bl	80007e0 <HAL_GetTick>
 800254a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	e009      	b.n	8002564 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe f946 	bl	80007e0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0aa      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800256c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002588:	601a      	str	r2, [r3, #0]
  return result;
 800258a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b3f      	cmp	r3, #63	@ 0x3f
 800259c:	d802      	bhi.n	80025a4 <HAL_RCC_OscConfig+0xf24>
 800259e:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e027      	b.n	80025f4 <HAL_RCC_OscConfig+0xf74>
 80025a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ea:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_OscConfig+0xfd8>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002600:	6011      	str	r1, [r2, #0]
 8002602:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002606:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fa92 f1a2 	rbit	r1, r2
 8002610:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002614:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002618:	6011      	str	r1, [r2, #0]
  return result;
 800261a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800261e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d187      	bne.n	8002550 <HAL_RCC_OscConfig+0xed0>
 8002640:	e03a      	b.n	80026b8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002646:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d104      	bne.n	800265c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e031      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_RCC_OscConfig+0x1044>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002664:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_RCC_OscConfig+0x1044>)
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800266c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002670:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	d117      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002684:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002688:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002698:	429a      	cmp	r2, r3
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b09e      	sub	sp, #120	@ 0x78
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e154      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d910      	bls.n	8002710 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b86      	ldr	r3, [pc, #536]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4984      	ldr	r1, [pc, #528]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e13c      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b7b      	ldr	r3, [pc, #492]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4978      	ldr	r1, [pc, #480]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80cd 	beq.w	80028d6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d137      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xec>
 8002744:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002748:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002752:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b3f      	cmp	r3, #63	@ 0x3f
 800275c:	d802      	bhi.n	8002764 <HAL_RCC_ClockConfig+0x9c>
 800275e:	4b6b      	ldr	r3, [pc, #428]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e00f      	b.n	8002784 <HAL_RCC_ClockConfig+0xbc>
 8002764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002768:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	667b      	str	r3, [r7, #100]	@ 0x64
 8002772:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002776:	663b      	str	r3, [r7, #96]	@ 0x60
 8002778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002780:	4b62      	ldr	r3, [pc, #392]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002788:	65ba      	str	r2, [r7, #88]	@ 0x58
 800278a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800278c:	fa92 f2a2 	rbit	r2, r2
 8002790:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002792:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f042 0220 	orr.w	r2, r2, #32
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f002 021f 	and.w	r2, r2, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d171      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0ea      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d137      	bne.n	800282c <HAL_RCC_ClockConfig+0x164>
 80027bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027d4:	d802      	bhi.n	80027dc <HAL_RCC_ClockConfig+0x114>
 80027d6:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e00f      	b.n	80027fc <HAL_RCC_ClockConfig+0x134>
 80027dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80027ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80027f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f8:	4b44      	ldr	r3, [pc, #272]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002800:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800280a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d135      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0ae      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
 800282c:	2302      	movs	r3, #2
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b3f      	cmp	r3, #63	@ 0x3f
 8002842:	d802      	bhi.n	800284a <HAL_RCC_ClockConfig+0x182>
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e00d      	b.n	8002866 <HAL_RCC_ClockConfig+0x19e>
 800284a:	2302      	movs	r3, #2
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
 8002856:	2302      	movs	r3, #2
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2202      	movs	r2, #2
 8002868:	61ba      	str	r2, [r7, #24]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	fa92 f2a2 	rbit	r2, r2
 8002870:	617a      	str	r2, [r7, #20]
  return result;
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e07a      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002894:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 0203 	bic.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	491a      	ldr	r1, [pc, #104]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a6:	f7fd ff9b 	bl	80007e0 <HAL_GetTick>
 80028aa:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7fd ff97 	bl	80007e0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e062      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_RCC_ClockConfig+0x244>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 020c 	and.w	r2, r3, #12
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d1eb      	bne.n	80028ae <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d215      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 0207 	bic.w	r2, r3, #7
 80028ec:	4906      	ldr	r1, [pc, #24]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <HAL_RCC_ClockConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d006      	beq.n	8002910 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <HAL_RCC_ClockConfig+0x2c2>
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_RCC_ClockConfig+0x2cc>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	491a      	ldr	r1, [pc, #104]	@ (8002994 <HAL_RCC_ClockConfig+0x2cc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_RCC_ClockConfig+0x2cc>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4912      	ldr	r1, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x2cc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800294e:	f000 f829 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_RCC_ClockConfig+0x2cc>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800295c:	22f0      	movs	r2, #240	@ 0xf0
 800295e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	fa92 f2a2 	rbit	r2, r2
 8002966:	60fa      	str	r2, [r7, #12]
  return result;
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	40d3      	lsrs	r3, r2
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x2d0>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	fa21 f303 	lsr.w	r3, r1, r3
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_RCC_ClockConfig+0x2d4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800297e:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_RCC_ClockConfig+0x2d8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fee8 	bl	8000758 <HAL_InitTick>
  
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3778      	adds	r7, #120	@ 0x78
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	08003810 	.word	0x08003810
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029be:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x36>
 80029d2:	e029      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	e029      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a00:	4a0f      	ldr	r2, [pc, #60]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e007      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a12:	4a0b      	ldr	r2, [pc, #44]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	613b      	str	r3, [r7, #16]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a2a:	613b      	str	r3, [r7, #16]
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	693b      	ldr	r3, [r7, #16]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	08003828 	.word	0x08003828
 8002a48:	08003838 	.word	0x08003838

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a6a:	f7ff ffef 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a78:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	603a      	str	r2, [r7, #0]
  return result;
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	40d3      	lsrs	r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08003820 	.word	0x08003820

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002aae:	f7ff ffcd 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002abc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ac0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	603a      	str	r2, [r7, #0]
  return result;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	fab2 f282 	clz	r2, r2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	40d3      	lsrs	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08003820 	.word	0x08003820

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b092      	sub	sp, #72	@ 0x48
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80d2 	beq.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b10:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	61d3      	str	r3, [r2, #28]
 8002b28:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d118      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a40      	ldr	r2, [pc, #256]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b52:	f7fd fe45 	bl	80007e0 <HAL_GetTick>
 8002b56:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	e008      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5a:	f7fd fe41 	bl	80007e0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	@ 0x64
 8002b66:	d901      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1d4      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	4b37      	ldr	r3, [pc, #220]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b78:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8082 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d07a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	461a      	mov	r2, r3
 8002be6:	2300      	movs	r3, #0
 8002be8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d049      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fdf1 	bl	80007e0 <HAL_GetTick>
 8002bfe:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fd fded 	bl	80007e0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e17e      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c42:	4b01      	ldr	r3, [pc, #4]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	e00d      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	10908100 	.word	0x10908100
 8002c54:	2302      	movs	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	4b9a      	ldr	r3, [pc, #616]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	2202      	movs	r2, #2
 8002c66:	613a      	str	r2, [r7, #16]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0b9      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c8e:	4b8f      	ldr	r3, [pc, #572]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	498c      	ldr	r1, [pc, #560]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a87      	ldr	r2, [pc, #540]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc0:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	f023 0203 	bic.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	497f      	ldr	r1, [pc, #508]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cde:	4b7b      	ldr	r3, [pc, #492]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4978      	ldr	r1, [pc, #480]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cfc:	4b73      	ldr	r3, [pc, #460]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4970      	ldr	r1, [pc, #448]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f023 0210 	bic.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4969      	ldr	r1, [pc, #420]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d38:	4b64      	ldr	r3, [pc, #400]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	4961      	ldr	r1, [pc, #388]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f023 0220 	bic.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	495a      	ldr	r1, [pc, #360]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d74:	4b55      	ldr	r3, [pc, #340]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	4952      	ldr	r1, [pc, #328]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	494b      	ldr	r1, [pc, #300]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db0:	4b46      	ldr	r3, [pc, #280]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	4943      	ldr	r1, [pc, #268]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	493c      	ldr	r1, [pc, #240]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dec:	4b37      	ldr	r3, [pc, #220]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	4934      	ldr	r1, [pc, #208]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	492d      	ldr	r1, [pc, #180]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e28:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	4925      	ldr	r1, [pc, #148]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e46:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	491e      	ldr	r1, [pc, #120]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	4916      	ldr	r1, [pc, #88]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e82:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8e:	490f      	ldr	r1, [pc, #60]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	4907      	ldr	r1, [pc, #28]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ebe:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	e002      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	4913      	ldr	r1, [pc, #76]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef0:	490b      	ldr	r1, [pc, #44]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0e:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3748      	adds	r7, #72	@ 0x48
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e040      	b.n	8002fb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fb30 	bl	80005ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	@ 0x24
 8002f50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9fc 	bl	8003368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f825 	bl	8002fc0 <UART_SetConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e01b      	b.n	8002fb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa7b 	bl	80034ac <UART_CheckIdleState>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b92      	ldr	r3, [pc, #584]	@ (8003234 <UART_SetConfig+0x274>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a80      	ldr	r2, [pc, #512]	@ (8003238 <UART_SetConfig+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d120      	bne.n	800307e <UART_SetConfig+0xbe>
 800303c:	4b7f      	ldr	r3, [pc, #508]	@ (800323c <UART_SetConfig+0x27c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b03      	cmp	r3, #3
 8003046:	d817      	bhi.n	8003078 <UART_SetConfig+0xb8>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <UART_SetConfig+0x90>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003061 	.word	0x08003061
 8003054:	0800306d 	.word	0x0800306d
 8003058:	08003073 	.word	0x08003073
 800305c:	08003067 	.word	0x08003067
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e0b5      	b.n	80031d2 <UART_SetConfig+0x212>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e0b2      	b.n	80031d2 <UART_SetConfig+0x212>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e0af      	b.n	80031d2 <UART_SetConfig+0x212>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e0ac      	b.n	80031d2 <UART_SetConfig+0x212>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e0a9      	b.n	80031d2 <UART_SetConfig+0x212>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6f      	ldr	r2, [pc, #444]	@ (8003240 <UART_SetConfig+0x280>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d124      	bne.n	80030d2 <UART_SetConfig+0x112>
 8003088:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <UART_SetConfig+0x27c>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003094:	d011      	beq.n	80030ba <UART_SetConfig+0xfa>
 8003096:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800309a:	d817      	bhi.n	80030cc <UART_SetConfig+0x10c>
 800309c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030a0:	d011      	beq.n	80030c6 <UART_SetConfig+0x106>
 80030a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030a6:	d811      	bhi.n	80030cc <UART_SetConfig+0x10c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <UART_SetConfig+0xf4>
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b0:	d006      	beq.n	80030c0 <UART_SetConfig+0x100>
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x10c>
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e08b      	b.n	80031d2 <UART_SetConfig+0x212>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e088      	b.n	80031d2 <UART_SetConfig+0x212>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e085      	b.n	80031d2 <UART_SetConfig+0x212>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e082      	b.n	80031d2 <UART_SetConfig+0x212>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e07f      	b.n	80031d2 <UART_SetConfig+0x212>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003244 <UART_SetConfig+0x284>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d124      	bne.n	8003126 <UART_SetConfig+0x166>
 80030dc:	4b57      	ldr	r3, [pc, #348]	@ (800323c <UART_SetConfig+0x27c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80030e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030e8:	d011      	beq.n	800310e <UART_SetConfig+0x14e>
 80030ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030ee:	d817      	bhi.n	8003120 <UART_SetConfig+0x160>
 80030f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030f4:	d011      	beq.n	800311a <UART_SetConfig+0x15a>
 80030f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030fa:	d811      	bhi.n	8003120 <UART_SetConfig+0x160>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <UART_SetConfig+0x148>
 8003100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003104:	d006      	beq.n	8003114 <UART_SetConfig+0x154>
 8003106:	e00b      	b.n	8003120 <UART_SetConfig+0x160>
 8003108:	2300      	movs	r3, #0
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e061      	b.n	80031d2 <UART_SetConfig+0x212>
 800310e:	2302      	movs	r3, #2
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e05e      	b.n	80031d2 <UART_SetConfig+0x212>
 8003114:	2304      	movs	r3, #4
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e05b      	b.n	80031d2 <UART_SetConfig+0x212>
 800311a:	2308      	movs	r3, #8
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e058      	b.n	80031d2 <UART_SetConfig+0x212>
 8003120:	2310      	movs	r3, #16
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e055      	b.n	80031d2 <UART_SetConfig+0x212>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a47      	ldr	r2, [pc, #284]	@ (8003248 <UART_SetConfig+0x288>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d124      	bne.n	800317a <UART_SetConfig+0x1ba>
 8003130:	4b42      	ldr	r3, [pc, #264]	@ (800323c <UART_SetConfig+0x27c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003138:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800313c:	d011      	beq.n	8003162 <UART_SetConfig+0x1a2>
 800313e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003142:	d817      	bhi.n	8003174 <UART_SetConfig+0x1b4>
 8003144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003148:	d011      	beq.n	800316e <UART_SetConfig+0x1ae>
 800314a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800314e:	d811      	bhi.n	8003174 <UART_SetConfig+0x1b4>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <UART_SetConfig+0x19c>
 8003154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003158:	d006      	beq.n	8003168 <UART_SetConfig+0x1a8>
 800315a:	e00b      	b.n	8003174 <UART_SetConfig+0x1b4>
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e037      	b.n	80031d2 <UART_SetConfig+0x212>
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e034      	b.n	80031d2 <UART_SetConfig+0x212>
 8003168:	2304      	movs	r3, #4
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e031      	b.n	80031d2 <UART_SetConfig+0x212>
 800316e:	2308      	movs	r3, #8
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e02e      	b.n	80031d2 <UART_SetConfig+0x212>
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e02b      	b.n	80031d2 <UART_SetConfig+0x212>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a33      	ldr	r2, [pc, #204]	@ (800324c <UART_SetConfig+0x28c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d124      	bne.n	80031ce <UART_SetConfig+0x20e>
 8003184:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <UART_SetConfig+0x27c>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800318c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003190:	d011      	beq.n	80031b6 <UART_SetConfig+0x1f6>
 8003192:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003196:	d817      	bhi.n	80031c8 <UART_SetConfig+0x208>
 8003198:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800319c:	d011      	beq.n	80031c2 <UART_SetConfig+0x202>
 800319e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031a2:	d811      	bhi.n	80031c8 <UART_SetConfig+0x208>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <UART_SetConfig+0x1f0>
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ac:	d006      	beq.n	80031bc <UART_SetConfig+0x1fc>
 80031ae:	e00b      	b.n	80031c8 <UART_SetConfig+0x208>
 80031b0:	2300      	movs	r3, #0
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e00d      	b.n	80031d2 <UART_SetConfig+0x212>
 80031b6:	2302      	movs	r3, #2
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e00a      	b.n	80031d2 <UART_SetConfig+0x212>
 80031bc:	2304      	movs	r3, #4
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e007      	b.n	80031d2 <UART_SetConfig+0x212>
 80031c2:	2308      	movs	r3, #8
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e004      	b.n	80031d2 <UART_SetConfig+0x212>
 80031c8:	2310      	movs	r3, #16
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e001      	b.n	80031d2 <UART_SetConfig+0x212>
 80031ce:	2310      	movs	r3, #16
 80031d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031da:	d16b      	bne.n	80032b4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80031dc:	7ffb      	ldrb	r3, [r7, #31]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d838      	bhi.n	8003254 <UART_SetConfig+0x294>
 80031e2:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x228>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003215 	.word	0x08003215
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	08003255 	.word	0x08003255
 80031f8:	08003223 	.word	0x08003223
 80031fc:	08003255 	.word	0x08003255
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7ff fc2a 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8003210:	61b8      	str	r0, [r7, #24]
        break;
 8003212:	e024      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7ff fc48 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003218:	61b8      	str	r0, [r7, #24]
        break;
 800321a:	e020      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b0c      	ldr	r3, [pc, #48]	@ (8003250 <UART_SetConfig+0x290>)
 800321e:	61bb      	str	r3, [r7, #24]
        break;
 8003220:	e01d      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7ff fbbf 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8003226:	61b8      	str	r0, [r7, #24]
        break;
 8003228:	e019      	b.n	800325e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e015      	b.n	800325e <UART_SetConfig+0x29e>
 8003232:	bf00      	nop
 8003234:	efff69f3 	.word	0xefff69f3
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	40004800 	.word	0x40004800
 8003248:	40004c00 	.word	0x40004c00
 800324c:	40005000 	.word	0x40005000
 8003250:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	77bb      	strb	r3, [r7, #30]
        break;
 800325c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d073      	beq.n	800334c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	005a      	lsls	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d916      	bls.n	80032ae <UART_SetConfig+0x2ee>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003286:	d212      	bcs.n	80032ae <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f023 030f 	bic.w	r3, r3, #15
 8003290:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b29a      	uxth	r2, r3
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	89fa      	ldrh	r2, [r7, #14]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e04e      	b.n	800334c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77bb      	strb	r3, [r7, #30]
 80032b2:	e04b      	b.n	800334c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d827      	bhi.n	800330a <UART_SetConfig+0x34a>
 80032ba:	a201      	add	r2, pc, #4	@ (adr r2, 80032c0 <UART_SetConfig+0x300>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	0800330b 	.word	0x0800330b
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7ff fbbe 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80032e8:	61b8      	str	r0, [r7, #24]
        break;
 80032ea:	e013      	b.n	8003314 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7ff fbdc 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 80032f0:	61b8      	str	r0, [r7, #24]
        break;
 80032f2:	e00f      	b.n	8003314 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <UART_SetConfig+0x3a4>)
 80032f6:	61bb      	str	r3, [r7, #24]
        break;
 80032f8:	e00c      	b.n	8003314 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7ff fb53 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 80032fe:	61b8      	str	r0, [r7, #24]
        break;
 8003300:	e008      	b.n	8003314 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e004      	b.n	8003314 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77bb      	strb	r3, [r7, #30]
        break;
 8003312:	bf00      	nop
    }

    if (pclk != 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085a      	lsrs	r2, r3, #1
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d909      	bls.n	8003348 <UART_SetConfig+0x388>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333a:	d205      	bcs.n	8003348 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	e001      	b.n	800334c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003358:	7fbb      	ldrb	r3, [r7, #30]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	007a1200 	.word	0x007a1200

08003368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01a      	beq.n	800347e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003466:	d10a      	bne.n	800347e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
  }
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b098      	sub	sp, #96	@ 0x60
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034bc:	f7fd f990 	bl	80007e0 <HAL_GetTick>
 80034c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d12e      	bne.n	800352e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	2200      	movs	r2, #0
 80034da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f88c 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d021      	beq.n	800352e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800350e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e6      	bne.n	80034ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e062      	b.n	80035f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d149      	bne.n	80035d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f856 	bl	80035fc <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03c      	beq.n	80035d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	623b      	str	r3, [r7, #32]
   return(result);
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003574:	633b      	str	r3, [r7, #48]	@ 0x30
 8003576:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800357a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e6      	bne.n	8003556 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3308      	adds	r3, #8
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60fb      	str	r3, [r7, #12]
   return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3308      	adds	r3, #8
 80035a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	617b      	str	r3, [r7, #20]
   return(result);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e5      	bne.n	8003588 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e011      	b.n	80035f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3758      	adds	r7, #88	@ 0x58
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360c:	e04f      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d04b      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fd f8e3 	bl	80007e0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <UART_WaitOnFlagUntilTimeout+0x30>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e04e      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d037      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b80      	cmp	r3, #128	@ 0x80
 8003642:	d034      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b40      	cmp	r3, #64	@ 0x40
 8003648:	d031      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d110      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2208      	movs	r2, #8
 800365e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f838 	bl	80036d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2208      	movs	r2, #8
 800366a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e029      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003688:	d111      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f81e 	bl	80036d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d0a0      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b095      	sub	sp, #84	@ 0x54
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80036fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003748:	2b01      	cmp	r3, #1
 800374a:	d118      	bne.n	800377e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	60bb      	str	r3, [r7, #8]
   return(result);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 0310 	bic.w	r3, r3, #16
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6979      	ldr	r1, [r7, #20]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	613b      	str	r3, [r7, #16]
   return(result);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e6      	bne.n	800374c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003792:	bf00      	nop
 8003794:	3754      	adds	r7, #84	@ 0x54
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <memset>:
 800379e:	4402      	add	r2, r0
 80037a0:	4603      	mov	r3, r0
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d100      	bne.n	80037a8 <memset+0xa>
 80037a6:	4770      	bx	lr
 80037a8:	f803 1b01 	strb.w	r1, [r3], #1
 80037ac:	e7f9      	b.n	80037a2 <memset+0x4>
	...

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4d0d      	ldr	r5, [pc, #52]	@ (80037e8 <__libc_init_array+0x38>)
 80037b4:	4c0d      	ldr	r4, [pc, #52]	@ (80037ec <__libc_init_array+0x3c>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2600      	movs	r6, #0
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	4d0b      	ldr	r5, [pc, #44]	@ (80037f0 <__libc_init_array+0x40>)
 80037c2:	4c0c      	ldr	r4, [pc, #48]	@ (80037f4 <__libc_init_array+0x44>)
 80037c4:	f000 f818 	bl	80037f8 <_init>
 80037c8:	1b64      	subs	r4, r4, r5
 80037ca:	10a4      	asrs	r4, r4, #2
 80037cc:	2600      	movs	r6, #0
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	08003848 	.word	0x08003848
 80037ec:	08003848 	.word	0x08003848
 80037f0:	08003848 	.word	0x08003848
 80037f4:	0800384c 	.word	0x0800384c

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
