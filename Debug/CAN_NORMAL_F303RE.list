
CAN_NORMAL_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003cfc  08003cfc  00004cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00004d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae84  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000189c  00000000  00000000  0000fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00011760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000603  00000000  00000000  00011f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3bd  00000000  00000000  0001253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f86  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee43  00000000  00000000  0003b87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa6c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f74  00000000  00000000  000fa704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000fc678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003ce4 	.word	0x08003ce4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003ce4 	.word	0x08003ce4

080001d4 <HAL_GPIO_EXTI_Callback>:
uint32_t TxMailbox;

int datacheck = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001e4:	d10b      	bne.n	80001fe <HAL_GPIO_EXTI_Callback+0x2a>
	{
		TxData[0] = 100; // 100 ms delay
 80001e6:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <HAL_GPIO_EXTI_Callback+0x34>)
 80001e8:	2264      	movs	r2, #100	@ 0x64
 80001ea:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10; // loop repeat
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <HAL_GPIO_EXTI_Callback+0x34>)
 80001ee:	220a      	movs	r2, #10
 80001f0:	705a      	strb	r2, [r3, #1]

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <HAL_GPIO_EXTI_Callback+0x38>)
 80001f4:	4a04      	ldr	r2, [pc, #16]	@ (8000208 <HAL_GPIO_EXTI_Callback+0x34>)
 80001f6:	4906      	ldr	r1, [pc, #24]	@ (8000210 <HAL_GPIO_EXTI_Callback+0x3c>)
 80001f8:	4806      	ldr	r0, [pc, #24]	@ (8000214 <HAL_GPIO_EXTI_Callback+0x40>)
 80001fa:	f000 fd8a 	bl	8000d12 <HAL_CAN_AddTxMessage>

	}
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000010c 	.word	0x2000010c
 800020c:	2000011c 	.word	0x2000011c
 8000210:	200000d8 	.word	0x200000d8
 8000214:	20000028 	.word	0x20000028

08000218 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000222:	4a09      	ldr	r2, [pc, #36]	@ (8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000224:	2100      	movs	r1, #0
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 fe43 	bl	8000eb2 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 800022c:	4b06      	ldr	r3, [pc, #24]	@ (8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d102      	bne.n	800023a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]
	}
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000114 	.word	0x20000114
 8000248:	200000f0 	.word	0x200000f0
 800024c:	20000120 	.word	0x20000120

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fac9 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f841 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f921 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f8ef 	bl	8000444 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000266:	f000 f899 	bl	800039c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 800026a:	4819      	ldr	r0, [pc, #100]	@ (80002d0 <main+0x80>)
 800026c:	f000 fd0d 	bl	8000c8a <HAL_CAN_Start>

  // activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000270:	2102      	movs	r1, #2
 8000272:	4817      	ldr	r0, [pc, #92]	@ (80002d0 <main+0x80>)
 8000274:	f000 ff3f 	bl	80010f6 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <main+0x84>)
 800027a:	2202      	movs	r2, #2
 800027c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800027e:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <main+0x84>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <main+0x84>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x303;
 800028a:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <main+0x84>)
 800028c:	f240 3203 	movw	r2, #771	@ 0x303
 8000290:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (datacheck)
 8000292:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <main+0x88>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x42>
	{
		for (int i = 0; i < RxData[1]; i++)
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	e00c      	b.n	80002ba <main+0x6a>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // need to check this for nucleo
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 fc2f 	bl	8001b08 <HAL_GPIO_TogglePin>
			HAL_Delay(RxData[0]); // time delay
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <main+0x8c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fb02 	bl	80008b8 <HAL_Delay>
		for (int i = 0; i < RxData[1]; i++)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <main+0x8c>)
 80002bc:	785b      	ldrb	r3, [r3, #1]
 80002be:	461a      	mov	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4293      	cmp	r3, r2
 80002c4:	dbec      	blt.n	80002a0 <main+0x50>

		}
		datacheck = 0;
 80002c6:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <main+0x88>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
	if (datacheck)
 80002cc:	e7e1      	b.n	8000292 <main+0x42>
 80002ce:	bf00      	nop
 80002d0:	20000028 	.word	0x20000028
 80002d4:	200000d8 	.word	0x200000d8
 80002d8:	20000120 	.word	0x20000120
 80002dc:	20000114 	.word	0x20000114

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b0a6      	sub	sp, #152	@ 0x98
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002ea:	2228      	movs	r2, #40	@ 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 fccb 	bl	8003c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2258      	movs	r2, #88	@ 0x58
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fcbd 	bl	8003c8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000310:	2301      	movs	r3, #1
 8000312:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000318:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000328:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fc14 	bl	8001b6c <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034a:	f000 f919 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2302      	movs	r3, #2
 8000354:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800035e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000364:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fc22 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000376:	f000 f903 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800037a:	2302      	movs	r3, #2
 800037c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fe27 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000390:	f000 f8f6 	bl	8000580 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3798      	adds	r7, #152	@ 0x98
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	@ 0x28
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003a2:	4b26      	ldr	r3, [pc, #152]	@ (800043c <MX_CAN_Init+0xa0>)
 80003a4:	4a26      	ldr	r2, [pc, #152]	@ (8000440 <MX_CAN_Init+0xa4>)
 80003a6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80003a8:	4b24      	ldr	r3, [pc, #144]	@ (800043c <MX_CAN_Init+0xa0>)
 80003aa:	2212      	movs	r2, #18
 80003ac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ae:	4b23      	ldr	r3, [pc, #140]	@ (800043c <MX_CAN_Init+0xa0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b4:	4b21      	ldr	r3, [pc, #132]	@ (800043c <MX_CAN_Init+0xa0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003ba:	4b20      	ldr	r3, [pc, #128]	@ (800043c <MX_CAN_Init+0xa0>)
 80003bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003c2:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_CAN_Init+0xa0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <MX_CAN_Init+0xa0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_CAN_Init+0xa0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_CAN_Init+0xa0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003da:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_CAN_Init+0xa0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e0:	4b16      	ldr	r3, [pc, #88]	@ (800043c <MX_CAN_Init+0xa0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_CAN_Init+0xa0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ec:	4813      	ldr	r0, [pc, #76]	@ (800043c <MX_CAN_Init+0xa0>)
 80003ee:	f000 fa87 	bl	8000900 <HAL_CAN_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003f8:	f000 f8c2 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canFilterConfig;

  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80003fc:	2301      	movs	r3, #1
 80003fe:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8000400:	2312      	movs	r3, #18
 8000402:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterIdHigh = 0x407 << 5;
 8000408:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 800040c:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIdLow = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterMaskIdHigh = 0x407 << 5;
 8000412:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8000416:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000420:	2301      	movs	r3, #1
 8000422:	61fb      	str	r3, [r7, #28]
  canFilterConfig.SlaveStartFilterBank = 20;  // how many filters to assign to CAN1 (master can)
 8000424:	2314      	movs	r3, #20
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan, &canFilterConfig);
 8000428:	463b      	mov	r3, r7
 800042a:	4619      	mov	r1, r3
 800042c:	4803      	ldr	r0, [pc, #12]	@ (800043c <MX_CAN_Init+0xa0>)
 800042e:	f000 fb62 	bl	8000af6 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */
}
 8000432:	bf00      	nop
 8000434:	3728      	adds	r7, #40	@ 0x28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40006400 	.word	0x40006400

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	@ (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	@ (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	f002 ffc2 	bl	8003410 <HAL_UART_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f875 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000050 	.word	0x20000050
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	@ 0x28
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a2e      	ldr	r2, [pc, #184]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b29      	ldr	r3, [pc, #164]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a28      	ldr	r2, [pc, #160]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b26      	ldr	r3, [pc, #152]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b23      	ldr	r3, [pc, #140]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a22      	ldr	r2, [pc, #136]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <MX_GPIO_Init+0xd4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <MX_GPIO_Init+0xd4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <MX_GPIO_Init+0xd4>)
 8000508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b1a      	ldr	r3, [pc, #104]	@ (8000578 <MX_GPIO_Init+0xd4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f001 fad9 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <MX_GPIO_Init+0xd8>)
 800053e:	f001 f941 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000542:	2320      	movs	r3, #32
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055c:	f001 f932 	bl	80017c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	2028      	movs	r0, #40	@ 0x28
 8000566:	f001 f8f6 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800056a:	2028      	movs	r0, #40	@ 0x28
 800056c:	f001 f90f 	bl	800178e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	@ 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48000800 	.word	0x48000800

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <Error_Handler+0x8>

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a0e      	ldr	r2, [pc, #56]	@ (80005d0 <HAL_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6193      	str	r3, [r2, #24]
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <HAL_MspInit+0x44>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <HAL_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <HAL_MspInit+0x44>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_MspInit+0x44>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005c2:	2007      	movs	r0, #7
 80005c4:	f001 f8bc 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_CAN_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d131      	bne.n	800065a <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a15      	ldr	r2, [pc, #84]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <HAL_CAN_MspInit+0x94>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000626:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000638:	2309      	movs	r3, #9
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000646:	f001 f8bd 	bl	80017c4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2014      	movs	r0, #20
 8000650:	f001 f881 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000654:	2014      	movs	r0, #20
 8000656:	f001 f89a 	bl	800178e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40006400 	.word	0x40006400
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <HAL_UART_MspInit+0x7c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d128      	bne.n	80006e0 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <HAL_UART_MspInit+0x80>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a16      	ldr	r2, [pc, #88]	@ (80006ec <HAL_UART_MspInit+0x80>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_UART_MspInit+0x80>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <HAL_UART_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <HAL_UART_MspInit+0x80>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <HAL_UART_MspInit+0x80>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006be:	230c      	movs	r3, #12
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006ce:	2307      	movs	r3, #7
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f001 f872 	bl	80017c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40004400 	.word	0x40004400
 80006ec:	40021000 	.word	0x40021000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <NMI_Handler+0x4>

080006f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000746:	f000 f897 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000756:	f000 fcf4 	bl	8001142 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028

08000764 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000768:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800076c:	f001 f9e6 	bl	8001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff ffea 	bl	8000774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	@ (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	@ (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f003 fa69 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ca:	f7ff fd41 	bl	8000250 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	20000128 	.word	0x20000128

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 ff9f 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fec0 	bl	800058c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ffb7 	bl	80017aa <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000854:	f000 ff7f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	20000124 	.word	0x20000124

080008a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000124 	.word	0x20000124

080008b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e0ed      	b.n	8000aee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe58 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000934:	f7ff ffb4 	bl	80008a0 <HAL_GetTick>
 8000938:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800093a:	e012      	b.n	8000962 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093c:	f7ff ffb0 	bl	80008a0 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b0a      	cmp	r3, #10
 8000948:	d90b      	bls.n	8000962 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800094e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2205      	movs	r2, #5
 800095a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e0c5      	b.n	8000aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0e5      	beq.n	800093c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0202 	bic.w	r2, r2, #2
 800097e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000980:	f7ff ff8e 	bl	80008a0 <HAL_GetTick>
 8000984:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000986:	e012      	b.n	80009ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000988:	f7ff ff8a 	bl	80008a0 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d90b      	bls.n	80009ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2205      	movs	r2, #5
 80009a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e09f      	b.n	8000aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0302 	and.w	r3, r3, #2
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e5      	bne.n	8000988 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7e1b      	ldrb	r3, [r3, #24]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d108      	bne.n	80009d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e007      	b.n	80009e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7e5b      	ldrb	r3, [r3, #25]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d108      	bne.n	8000a00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e007      	b.n	8000a10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7e9b      	ldrb	r3, [r3, #26]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d108      	bne.n	8000a2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f042 0220 	orr.w	r2, r2, #32
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0220 	bic.w	r2, r2, #32
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7edb      	ldrb	r3, [r3, #27]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d108      	bne.n	8000a54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0210 	bic.w	r2, r2, #16
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	e007      	b.n	8000a64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0210 	orr.w	r2, r2, #16
 8000a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7f1b      	ldrb	r3, [r3, #28]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d108      	bne.n	8000a7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0208 	orr.w	r2, r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e007      	b.n	8000a8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0208 	bic.w	r2, r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7f5b      	ldrb	r3, [r3, #29]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d108      	bne.n	8000aa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f042 0204 	orr.w	r2, r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e007      	b.n	8000ab8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f022 0204 	bic.w	r2, r2, #4
 8000ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	ea42 0103 	orr.w	r1, r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b087      	sub	sp, #28
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b0c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b0e:	7cfb      	ldrb	r3, [r7, #19]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d003      	beq.n	8000b1c <HAL_CAN_ConfigFilter+0x26>
 8000b14:	7cfb      	ldrb	r3, [r7, #19]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	f040 80aa 	bne.w	8000c70 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b22:	f043 0201 	orr.w	r2, r3, #1
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	2201      	movs	r2, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d123      	bne.n	8000b9e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	401a      	ands	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3248      	adds	r2, #72	@ 0x48
 8000b7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b94:	6979      	ldr	r1, [r7, #20]
 8000b96:	3348      	adds	r3, #72	@ 0x48
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d122      	bne.n	8000bec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bc6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3248      	adds	r2, #72	@ 0x48
 8000bcc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000be0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000be2:	6979      	ldr	r1, [r7, #20]
 8000be4:	3348      	adds	r3, #72	@ 0x48
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d109      	bne.n	8000c08 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d109      	bne.n	8000c34 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d107      	bne.n	8000c5c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c62:	f023 0201 	bic.w	r2, r3, #1
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e006      	b.n	8000c7e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
  }
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d12e      	bne.n	8000cfc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cb6:	f7ff fdf3 	bl	80008a0 <HAL_GetTick>
 8000cba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cbc:	e012      	b.n	8000ce4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cbe:	f7ff fdef 	bl	80008a0 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b0a      	cmp	r3, #10
 8000cca:	d90b      	bls.n	8000ce4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2205      	movs	r2, #5
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e012      	b.n	8000d0a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1e5      	bne.n	8000cbe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e006      	b.n	8000d0a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
  }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b089      	sub	sp, #36	@ 0x24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d26:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d30:	7ffb      	ldrb	r3, [r7, #31]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d003      	beq.n	8000d3e <HAL_CAN_AddTxMessage+0x2c>
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	f040 80ad 	bne.w	8000e98 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10a      	bne.n	8000d5e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d105      	bne.n	8000d5e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8095 	beq.w	8000e88 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	0e1b      	lsrs	r3, r3, #24
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10d      	bne.n	8000d96 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d84:	68f9      	ldr	r1, [r7, #12]
 8000d86:	6809      	ldr	r1, [r1, #0]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3318      	adds	r3, #24
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	440b      	add	r3, r1
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e00f      	b.n	8000db6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da6:	68f9      	ldr	r1, [r7, #12]
 8000da8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000daa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3318      	adds	r3, #24
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	440b      	add	r3, r1
 8000db4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3318      	adds	r3, #24
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	7d1b      	ldrb	r3, [r3, #20]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d111      	bne.n	8000df6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3318      	adds	r3, #24
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4413      	add	r3, r2
 8000dde:	3304      	adds	r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3318      	adds	r3, #24
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	440b      	add	r3, r1
 8000df2:	3304      	adds	r3, #4
 8000df4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3307      	adds	r3, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	061a      	lsls	r2, r3, #24
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3306      	adds	r3, #6
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3305      	adds	r3, #5
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	3204      	adds	r2, #4
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4610      	mov	r0, r2
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6811      	ldr	r1, [r2, #0]
 8000e1e:	ea43 0200 	orr.w	r2, r3, r0
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	440b      	add	r3, r1
 8000e28:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3303      	adds	r3, #3
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	061a      	lsls	r2, r3, #24
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	4610      	mov	r0, r2
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	6811      	ldr	r1, [r2, #0]
 8000e54:	ea43 0200 	orr.w	r2, r3, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3318      	adds	r3, #24
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3318      	adds	r3, #24
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	440b      	add	r3, r1
 8000e82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e00e      	b.n	8000ea6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e006      	b.n	8000ea6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
  }
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b087      	sub	sp, #28
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <HAL_CAN_GetRxMessage+0x24>
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	f040 8103 	bne.w	80010dc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10e      	bne.n	8000efa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0f7      	b.n	80010ea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0e8      	b.n	80010ea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0204 	and.w	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10c      	bne.n	8000f50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	331b      	adds	r3, #27
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0d5b      	lsrs	r3, r3, #21
 8000f46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	331b      	adds	r3, #27
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	331b      	adds	r3, #27
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0202 	and.w	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	331b      	adds	r3, #27
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	e00b      	b.n	8000fb6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	331b      	adds	r3, #27
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 020f 	and.w	r2, r3, #15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	331b      	adds	r3, #27
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	331b      	adds	r3, #27
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	4413      	add	r3, r2
 8000fda:	3304      	adds	r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0a1a      	lsrs	r2, r3, #8
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4413      	add	r3, r2
 8001020:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0c1a      	lsrs	r2, r3, #16
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3302      	adds	r3, #2
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0e1a      	lsrs	r2, r3, #24
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3303      	adds	r3, #3
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3304      	adds	r3, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	4413      	add	r3, r2
 800106c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0a1a      	lsrs	r2, r3, #8
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3305      	adds	r3, #5
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0c1a      	lsrs	r2, r3, #16
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3306      	adds	r3, #6
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	4413      	add	r3, r2
 80010a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0e1a      	lsrs	r2, r3, #24
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3307      	adds	r3, #7
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d108      	bne.n	80010c8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0220 	orr.w	r2, r2, #32
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	e007      	b.n	80010d8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691a      	ldr	r2, [r3, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	e006      	b.n	80010ea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
  }
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d002      	beq.n	8001114 <HAL_CAN_ActivateNotification+0x1e>
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d109      	bne.n	8001128 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6959      	ldr	r1, [r3, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e006      	b.n	8001136 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b08a      	sub	sp, #40	@ 0x28
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d07c      	beq.n	8001282 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d023      	beq.n	80011da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f983 	bl	80014b0 <HAL_CAN_TxMailbox0CompleteCallback>
 80011aa:	e016      	b.n	80011da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011be:	e00c      	b.n	80011da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d2:	e002      	b.n	80011da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f989 	bl	80014ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f963 	bl	80014c4 <HAL_CAN_TxMailbox1CompleteCallback>
 80011fe:	e016      	b.n	800122e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
 8001212:	e00c      	b.n	800122e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
 8001226:	e002      	b.n	800122e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f969 	bl	8001500 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d024      	beq.n	8001282 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001240:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f943 	bl	80014d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001252:	e016      	b.n	8001282 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
 8001266:	e00c      	b.n	8001282 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
 800127a:	e002      	b.n	8001282 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f949 	bl	8001514 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2210      	movs	r2, #16
 80012a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2208      	movs	r2, #8
 80012c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f930 	bl	8001528 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7fe ff99 	bl	8000218 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2210      	movs	r2, #16
 8001308:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2208      	movs	r2, #8
 8001324:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f912 	bl	8001550 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f8f9 	bl	800153c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2210      	movs	r2, #16
 8001364:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f8fc 	bl	8001564 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2208      	movs	r2, #8
 8001386:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8f5 	bl	8001578 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d07b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d072      	beq.n	8001488 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d043      	beq.n	8001488 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	d03e      	beq.n	8001488 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001410:	2b60      	cmp	r3, #96	@ 0x60
 8001412:	d02b      	beq.n	800146c <HAL_CAN_IRQHandler+0x32a>
 8001414:	2b60      	cmp	r3, #96	@ 0x60
 8001416:	d82e      	bhi.n	8001476 <HAL_CAN_IRQHandler+0x334>
 8001418:	2b50      	cmp	r3, #80	@ 0x50
 800141a:	d022      	beq.n	8001462 <HAL_CAN_IRQHandler+0x320>
 800141c:	2b50      	cmp	r3, #80	@ 0x50
 800141e:	d82a      	bhi.n	8001476 <HAL_CAN_IRQHandler+0x334>
 8001420:	2b40      	cmp	r3, #64	@ 0x40
 8001422:	d019      	beq.n	8001458 <HAL_CAN_IRQHandler+0x316>
 8001424:	2b40      	cmp	r3, #64	@ 0x40
 8001426:	d826      	bhi.n	8001476 <HAL_CAN_IRQHandler+0x334>
 8001428:	2b30      	cmp	r3, #48	@ 0x30
 800142a:	d010      	beq.n	800144e <HAL_CAN_IRQHandler+0x30c>
 800142c:	2b30      	cmp	r3, #48	@ 0x30
 800142e:	d822      	bhi.n	8001476 <HAL_CAN_IRQHandler+0x334>
 8001430:	2b10      	cmp	r3, #16
 8001432:	d002      	beq.n	800143a <HAL_CAN_IRQHandler+0x2f8>
 8001434:	2b20      	cmp	r3, #32
 8001436:	d005      	beq.n	8001444 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001438:	e01d      	b.n	8001476 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001442:	e019      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800144c:	e014      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001456:	e00f      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001460:	e00a      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800146a:	e005      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001474:	e000      	b.n	8001478 <HAL_CAN_IRQHandler+0x336>
            break;
 8001476:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001486:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2204      	movs	r2, #4
 800148e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f872 	bl	800158c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	@ (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	@ (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e160      	b.n	8001a96 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8152 	beq.w	8001a90 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80ac 	beq.w	8001a90 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a59      	ldr	r2, [pc, #356]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800197a:	d025      	beq.n	80019c8 <HAL_GPIO_Init+0x204>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4f      	ldr	r2, [pc, #316]	@ (8001abc <HAL_GPIO_Init+0x2f8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d01f      	beq.n	80019c4 <HAL_GPIO_Init+0x200>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac0 <HAL_GPIO_Init+0x2fc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d019      	beq.n	80019c0 <HAL_GPIO_Init+0x1fc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac4 <HAL_GPIO_Init+0x300>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d013      	beq.n	80019bc <HAL_GPIO_Init+0x1f8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac8 <HAL_GPIO_Init+0x304>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1f4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4b      	ldr	r2, [pc, #300]	@ (8001acc <HAL_GPIO_Init+0x308>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1f0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad0 <HAL_GPIO_Init+0x30c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1ec>
 80019ac:	2306      	movs	r3, #6
 80019ae:	e00c      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b0:	2307      	movs	r3, #7
 80019b2:	e00a      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x206>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	@ (8001ab8 <HAL_GPIO_Init+0x2f4>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a0c:	4a31      	ldr	r2, [pc, #196]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a12:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a36:	4a27      	ldr	r2, [pc, #156]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a60:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <HAL_GPIO_Init+0x310>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f ae97 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	48001400 	.word	0x48001400
 8001ad0:	48001800 	.word	0x48001800
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43d9      	mvns	r1, r3
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fb3a 	bl	80001d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f001 b80a 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8161 	beq.w	8001e6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ba8:	4bae      	ldr	r3, [pc, #696]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d00c      	beq.n	8001bce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb4:	4bab      	ldr	r3, [pc, #684]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d157      	bne.n	8001c70 <HAL_RCC_OscConfig+0x104>
 8001bc0:	4ba8      	ldr	r3, [pc, #672]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bcc:	d150      	bne.n	8001c70 <HAL_RCC_OscConfig+0x104>
 8001bce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001be2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bee:	d802      	bhi.n	8001bf6 <HAL_RCC_OscConfig+0x8a>
 8001bf0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0xb6>
 8001bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bfa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001c0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c12:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c1e:	4b91      	ldr	r3, [pc, #580]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c26:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001c2a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001c2e:	fa92 f2a2 	rbit	r2, r2
 8001c32:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001c36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0220 	orr.w	r2, r2, #32
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8108 	beq.w	8001e68 <HAL_RCC_OscConfig+0x2fc>
 8001c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 80ff 	bne.w	8001e68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f000 bf9b 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x124>
 8001c82:	4b78      	ldr	r3, [pc, #480]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e036      	b.n	8001cfe <HAL_RCC_OscConfig+0x192>
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x14e>
 8001ca0:	4b70      	ldr	r3, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e021      	b.n	8001cfe <HAL_RCC_OscConfig+0x192>
 8001cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cca:	d10c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x17a>
 8001ccc:	4b65      	ldr	r3, [pc, #404]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a64      	ldr	r2, [pc, #400]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b62      	ldr	r3, [pc, #392]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a61      	ldr	r2, [pc, #388]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e00b      	b.n	8001cfe <HAL_RCC_OscConfig+0x192>
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5e      	ldr	r2, [pc, #376]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d054      	beq.n	8001db8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fdc7 	bl	80008a0 <HAL_GetTick>
 8001d12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7fe fdc2 	bl	80008a0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	@ 0x64
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 bf3c 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d32:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001d42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d4e:	d802      	bhi.n	8001d56 <HAL_RCC_OscConfig+0x1ea>
 8001d50:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	e015      	b.n	8001d82 <HAL_RCC_OscConfig+0x216>
 8001d56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d7e:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d86:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001d8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001d96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0b0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1ac>
 8001db6:	e058      	b.n	8001e6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fd72 	bl	80008a0 <HAL_GetTick>
 8001dbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fd6d 	bl	80008a0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d902      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	f000 bee7 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8001dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ddc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001dec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001df8:	d802      	bhi.n	8001e00 <HAL_RCC_OscConfig+0x294>
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0x2c0>
 8001e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e04:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e18:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_RCC_OscConfig+0x2f8>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e30:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001e34:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001e40:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1b0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x256>
 8001e60:	e003      	b.n	8001e6a <HAL_RCC_OscConfig+0x2fe>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 816d 	beq.w	800215a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e80:	4bcd      	ldr	r3, [pc, #820]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e8c:	4bca      	ldr	r3, [pc, #808]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d16e      	bne.n	8001f76 <HAL_RCC_OscConfig+0x40a>
 8001e98:	4bc7      	ldr	r3, [pc, #796]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea4:	d167      	bne.n	8001f76 <HAL_RCC_OscConfig+0x40a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001eb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec4:	d802      	bhi.n	8001ecc <HAL_RCC_OscConfig+0x360>
 8001ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e013      	b.n	8001ef4 <HAL_RCC_OscConfig+0x388>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ee4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ef0:	4bb1      	ldr	r3, [pc, #708]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001efa:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001efe:	fa92 f2a2 	rbit	r2, r2
 8001f02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f002 021f 	and.w	r2, r2, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3d0>
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f000 be35 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	21f8      	movs	r1, #248	@ 0xf8
 8001f52:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001f5a:	fa91 f1a1 	rbit	r1, r1
 8001f5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f66:	fab1 f181 	clz	r1, r1
 8001f6a:	b2c9      	uxtb	r1, r1
 8001f6c:	408b      	lsls	r3, r1
 8001f6e:	4992      	ldr	r1, [pc, #584]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	e0f1      	b.n	800215a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8083 	beq.w	800208e <HAL_RCC_OscConfig+0x522>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fc74 	bl	80008a0 <HAL_GetTick>
 8001fb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fc6f 	bl	80008a0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d902      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	f000 bde9 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ff2:	d802      	bhi.n	8001ffa <HAL_RCC_OscConfig+0x48e>
 8001ff4:	4b70      	ldr	r3, [pc, #448]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	e013      	b.n	8002022 <HAL_RCC_OscConfig+0x4b6>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002012:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800201e:	4b66      	ldr	r3, [pc, #408]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	2202      	movs	r2, #2
 8002024:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002028:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800202c:	fa92 f2a2 	rbit	r2, r2
 8002030:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002034:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0b4      	beq.n	8001fbe <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b58      	ldr	r3, [pc, #352]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	21f8      	movs	r1, #248	@ 0xf8
 800206a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002072:	fa91 f1a1 	rbit	r1, r1
 8002076:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800207a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800207e:	fab1 f181 	clz	r1, r1
 8002082:	b2c9      	uxtb	r1, r1
 8002084:	408b      	lsls	r3, r1
 8002086:	494c      	ldr	r1, [pc, #304]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e065      	b.n	800215a <HAL_RCC_OscConfig+0x5ee>
 800208e:	2301      	movs	r3, #1
 8002090:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80020a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	461a      	mov	r2, r3
 80020b6:	2300      	movs	r3, #0
 80020b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fbf1 	bl	80008a0 <HAL_GetTick>
 80020be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c4:	f7fe fbec 	bl	80008a0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bd66 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80020ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80020f8:	d802      	bhi.n	8002100 <HAL_RCC_OscConfig+0x594>
 80020fa:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e013      	b.n	8002128 <HAL_RCC_OscConfig+0x5bc>
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002118:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002124:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <HAL_RCC_OscConfig+0x64c>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	2202      	movs	r2, #2
 800212a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800212e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800213a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800213e:	fab2 f282 	clz	r2, r2
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f042 0220 	orr.w	r2, r2, #32
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1b4      	bne.n	80020c4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8119 	beq.w	80023a2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8082 	beq.w	8002286 <HAL_RCC_OscConfig+0x71a>
 8002182:	2301      	movs	r3, #1
 8002184:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002194:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCC_OscConfig+0x650>)
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	2301      	movs	r3, #1
 80021aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fb78 	bl	80008a0 <HAL_GetTick>
 80021b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b4:	e00f      	b.n	80021d6 <HAL_RCC_OscConfig+0x66a>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe fb6e 	bl	80008a0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	f000 bce8 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800221a:	2202      	movs	r2, #2
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002230:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	4bb0      	ldr	r3, [pc, #704]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002242:	2102      	movs	r1, #2
 8002244:	6019      	str	r1, [r3, #0]
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f1a3 	rbit	r1, r3
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800225c:	6019      	str	r1, [r3, #0]
  return result;
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d09d      	beq.n	80021c0 <HAL_RCC_OscConfig+0x654>
 8002284:	e08d      	b.n	80023a2 <HAL_RCC_OscConfig+0x836>
 8002286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022a8:	601a      	str	r2, [r3, #0]
  return result;
 80022aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b8f      	ldr	r3, [pc, #572]	@ (80024fc <HAL_RCC_OscConfig+0x990>)
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe faea 	bl	80008a0 <HAL_GetTick>
 80022cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7fe fae5 	bl	80008a0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d902      	bls.n	80022e8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	f000 bc5f 	b.w	8002ba6 <HAL_RCC_OscConfig+0x103a>
 80022e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002306:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002334:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002352:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b68      	ldr	r3, [pc, #416]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002360:	2102      	movs	r1, #2
 8002362:	6019      	str	r1, [r3, #0]
 8002364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002368:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f1a3 	rbit	r1, r3
 8002372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002376:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800237a:	6019      	str	r1, [r3, #0]
  return result;
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d197      	bne.n	80022d2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 819c 	beq.w	80026f0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b4e      	ldr	r3, [pc, #312]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a4a      	ldr	r2, [pc, #296]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b48      	ldr	r3, [pc, #288]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80023de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x994>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d11a      	bne.n	800243a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002404:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <HAL_RCC_OscConfig+0x994>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a3d      	ldr	r2, [pc, #244]	@ (8002500 <HAL_RCC_OscConfig+0x994>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002410:	f7fe fa46 	bl	80008a0 <HAL_GetTick>
 8002414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7fe fa41 	bl	80008a0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e3bb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_RCC_OscConfig+0x994>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ef      	beq.n	800241a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x8ec>
 800244a:	4b2b      	ldr	r3, [pc, #172]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a2a      	ldr	r2, [pc, #168]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	e035      	b.n	80024c4 <HAL_RCC_OscConfig+0x958>
 8002458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x916>
 8002468:	4b23      	ldr	r3, [pc, #140]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a22      	ldr	r2, [pc, #136]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e020      	b.n	80024c4 <HAL_RCC_OscConfig+0x958>
 8002482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002486:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x940>
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x958>
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a0e      	ldr	r2, [pc, #56]	@ (80024f8 <HAL_RCC_OscConfig+0x98c>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8085 	beq.w	80025e0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe f9e3 	bl	80008a0 <HAL_GetTick>
 80024da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024de:	e011      	b.n	8002504 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe f9de 	bl	80008a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d907      	bls.n	8002504 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e356      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 80024f8:	40021000 	.word	0x40021000
 80024fc:	10908120 	.word	0x10908120
 8002500:	40007000 	.word	0x40007000
 8002504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002508:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800250c:	2202      	movs	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002514:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	fa93 f2a3 	rbit	r2, r3
 800251e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002522:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002546:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800254a:	601a      	str	r2, [r3, #0]
  return result;
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002554:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0xa00>
 8002566:	4b98      	ldr	r3, [pc, #608]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	e013      	b.n	8002594 <HAL_RCC_OscConfig+0xa28>
 800256c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002570:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002574:	2202      	movs	r2, #2
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b8d      	ldr	r3, [pc, #564]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002598:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800259c:	2102      	movs	r1, #2
 800259e:	6011      	str	r1, [r2, #0]
 80025a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025a4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	fa92 f1a2 	rbit	r1, r2
 80025ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025b6:	6011      	str	r1, [r2, #0]
  return result;
 80025b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025bc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d080      	beq.n	80024e0 <HAL_RCC_OscConfig+0x974>
 80025de:	e07d      	b.n	80026dc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe f95e 	bl	80008a0 <HAL_GetTick>
 80025e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	e00b      	b.n	8002602 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe f959 	bl	80008a0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2d1      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800260a:	2202      	movs	r2, #2
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002612:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002620:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800262e:	2202      	movs	r2, #2
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002648:	601a      	str	r2, [r3, #0]
  return result;
 800264a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_RCC_OscConfig+0xafe>
 8002664:	4b58      	ldr	r3, [pc, #352]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	e013      	b.n	8002692 <HAL_RCC_OscConfig+0xb26>
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002688:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b4e      	ldr	r3, [pc, #312]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002696:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800269a:	2102      	movs	r1, #2
 800269c:	6011      	str	r1, [r2, #0]
 800269e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026a2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fa92 f1a2 	rbit	r1, r2
 80026ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026b4:	6011      	str	r1, [r2, #0]
  return result;
 80026b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ba:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d186      	bne.n	80025ea <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026dc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a37      	ldr	r2, [pc, #220]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8251 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	4b31      	ldr	r3, [pc, #196]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	f000 820f 	beq.w	8002b2e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b02      	cmp	r3, #2
 800271e:	f040 8165 	bne.w	80029ec <HAL_RCC_OscConfig+0xe80>
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800272a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002734:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002742:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002750:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800275c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	2300      	movs	r3, #0
 8002766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe f89a 	bl	80008a0 <HAL_GetTick>
 800276c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe f895 	bl	80008a0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e20f      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8002786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800278e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027aa:	601a      	str	r2, [r3, #0]
  return result;
 80027ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80027be:	d805      	bhi.n	80027cc <HAL_RCC_OscConfig+0xc60>
 80027c0:	4b01      	ldr	r3, [pc, #4]	@ (80027c8 <HAL_RCC_OscConfig+0xc5c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	e02a      	b.n	800281c <HAL_RCC_OscConfig+0xcb0>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4bca      	ldr	r3, [pc, #808]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002820:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002828:	6011      	str	r1, [r2, #0]
 800282a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800282e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fa92 f1a2 	rbit	r1, r2
 8002838:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800283c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002840:	6011      	str	r1, [r2, #0]
  return result;
 8002842:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002846:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	f042 0220 	orr.w	r2, r2, #32
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	f002 021f 	and.w	r2, r2, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d184      	bne.n	8002772 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	4bb6      	ldr	r3, [pc, #728]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 800286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286c:	f023 020f 	bic.w	r2, r3, #15
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	49b1      	ldr	r1, [pc, #708]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 800287e:	4313      	orrs	r3, r2
 8002880:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002882:	4bb0      	ldr	r3, [pc, #704]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800288a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6a19      	ldr	r1, [r3, #32]
 8002896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	430b      	orrs	r3, r1
 80028a4:	49a7      	ldr	r1, [pc, #668]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028d8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2301      	movs	r3, #1
 80028ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fd ffd6 	bl	80008a0 <HAL_GetTick>
 80028f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	e009      	b.n	800290e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fd ffd1 	bl	80008a0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e14b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 800290e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002912:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002916:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002920:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800293c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b3f      	cmp	r3, #63	@ 0x3f
 8002946:	d802      	bhi.n	800294e <HAL_RCC_OscConfig+0xde2>
 8002948:	4b7e      	ldr	r3, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e027      	b.n	800299e <HAL_RCC_OscConfig+0xe32>
 800294e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002952:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002956:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002960:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002978:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800297c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002986:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002994:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029aa:	6011      	str	r1, [r2, #0]
 80029ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	fa92 f1a2 	rbit	r1, r2
 80029ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029be:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029c2:	6011      	str	r1, [r2, #0]
  return result;
 80029c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	fab2 f282 	clz	r2, r2
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f002 021f 	and.w	r2, r2, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d087      	beq.n	80028fa <HAL_RCC_OscConfig+0xd8e>
 80029ea:	e0db      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1038>
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a10:	601a      	str	r2, [r3, #0]
  return result;
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a1a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fd ff35 	bl	80008a0 <HAL_GetTick>
 8002a36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	e009      	b.n	8002a50 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fd ff30 	bl	80008a0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0aa      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8002a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a62:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a74:	601a      	str	r2, [r3, #0]
  return result;
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a88:	d802      	bhi.n	8002a90 <HAL_RCC_OscConfig+0xf24>
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e027      	b.n	8002ae0 <HAL_RCC_OscConfig+0xf74>
 8002a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCC_OscConfig+0xfd8>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ae8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fa92 f1a2 	rbit	r1, r2
 8002afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b00:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b04:	6011      	str	r1, [r2, #0]
  return result;
 8002b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b0a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f002 021f 	and.w	r2, r2, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d187      	bne.n	8002a3c <HAL_RCC_OscConfig+0xed0>
 8002b2c:	e03a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d104      	bne.n	8002b48 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e031      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_OscConfig+0x1044>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCC_OscConfig+0x1044>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b5c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d117      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b74:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d10b      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09e      	sub	sp, #120	@ 0x78
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e154      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b89      	ldr	r3, [pc, #548]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b86      	ldr	r3, [pc, #536]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4984      	ldr	r1, [pc, #528]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b82      	ldr	r3, [pc, #520]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e13c      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b7b      	ldr	r3, [pc, #492]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4978      	ldr	r1, [pc, #480]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80cd 	beq.w	8002dc2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d137      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xec>
 8002c30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c48:	d802      	bhi.n	8002c50 <HAL_RCC_ClockConfig+0x9c>
 8002c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_ClockConfig+0xbc>
 8002c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c6c:	4b62      	ldr	r3, [pc, #392]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f042 0220 	orr.w	r2, r2, #32
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f002 021f 	and.w	r2, r2, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d171      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ea      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d137      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x164>
 8002ca8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_RCC_ClockConfig+0x114>
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x134>
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce4:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cf0:	fa92 f2a2 	rbit	r2, r2
 8002cf4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f002 021f 	and.w	r2, r2, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d135      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0ae      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d2e:	d802      	bhi.n	8002d36 <HAL_RCC_ClockConfig+0x182>
 8002d30:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e00d      	b.n	8002d52 <HAL_RCC_ClockConfig+0x19e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	2302      	movs	r3, #2
 8002d44:	623b      	str	r3, [r7, #32]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2202      	movs	r2, #2
 8002d54:	61ba      	str	r2, [r7, #24]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	617a      	str	r2, [r7, #20]
  return result;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e07a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 0203 	bic.w	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	491a      	ldr	r1, [pc, #104]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d92:	f7fd fd85 	bl	80008a0 <HAL_GetTick>
 8002d96:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fd fd81 	bl	80008a0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e062      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 020c 	and.w	r2, r3, #12
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d215      	bcs.n	8002dfc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 0207 	bic.w	r2, r3, #7
 8002dd8:	4906      	ldr	r1, [pc, #24]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <HAL_RCC_ClockConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d006      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e041      	b.n	8002e76 <HAL_RCC_ClockConfig+0x2c2>
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <HAL_RCC_ClockConfig+0x2cc>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	491a      	ldr	r1, [pc, #104]	@ (8002e80 <HAL_RCC_ClockConfig+0x2cc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <HAL_RCC_ClockConfig+0x2cc>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4912      	ldr	r1, [pc, #72]	@ (8002e80 <HAL_RCC_ClockConfig+0x2cc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e3a:	f000 f829 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e3e:	4601      	mov	r1, r0
 8002e40:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <HAL_RCC_ClockConfig+0x2cc>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e48:	22f0      	movs	r2, #240	@ 0xf0
 8002e4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	60fa      	str	r2, [r7, #12]
  return result;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	40d3      	lsrs	r3, r2
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x2d0>)
 8002e60:	5cd3      	ldrb	r3, [r2, r3]
 8002e62:	fa21 f303 	lsr.w	r3, r1, r3
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_RCC_ClockConfig+0x2d4>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <HAL_RCC_ClockConfig+0x2d8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fcd2 	bl	8000818 <HAL_InitTick>
  
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3778      	adds	r7, #120	@ 0x78
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08003cfc 	.word	0x08003cfc
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ebe:	e029      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec2:	613b      	str	r3, [r7, #16]
      break;
 8002ec4:	e029      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0c9b      	lsrs	r3, r3, #18
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	4a18      	ldr	r2, [pc, #96]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
 8002ed2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	4a15      	ldr	r2, [pc, #84]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eec:	4a0f      	ldr	r2, [pc, #60]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e007      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002efe:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	613b      	str	r3, [r7, #16]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1a:	693b      	ldr	r3, [r7, #16]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	007a1200 	.word	0x007a1200
 8002f30:	08003d14 	.word	0x08003d14
 8002f34:	08003d24 	.word	0x08003d24

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000

08002f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f56:	f7ff ffef 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	fa92 f2a2 	rbit	r2, r2
 8002f70:	603a      	str	r2, [r7, #0]
  return result;
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	fab2 f282 	clz	r2, r2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	40d3      	lsrs	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08003d0c 	.word	0x08003d0c

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f9a:	f7ff ffcd 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fa8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	fa92 f2a2 	rbit	r2, r2
 8002fb4:	603a      	str	r2, [r7, #0]
  return result;
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	fab2 f282 	clz	r2, r2
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	40d3      	lsrs	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08003d0c 	.word	0x08003d0c

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b092      	sub	sp, #72	@ 0x48
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80d2 	beq.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10e      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003008:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	4a49      	ldr	r2, [pc, #292]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003012:	61d3      	str	r3, [r2, #28]
 8003014:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b44      	ldr	r3, [pc, #272]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b41      	ldr	r3, [pc, #260]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a40      	ldr	r2, [pc, #256]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fd fc2f 	bl	80008a0 <HAL_GetTick>
 8003042:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fd fc2b 	bl	80008a0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	@ 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1d4      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003064:	4b33      	ldr	r3, [pc, #204]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8082 	beq.w	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003080:	429a      	cmp	r2, r3
 8003082:	d07a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003084:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800308e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b25      	ldr	r3, [pc, #148]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	461a      	mov	r2, r3
 80030ae:	2301      	movs	r3, #1
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	461a      	mov	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d6:	4a17      	ldr	r2, [pc, #92]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d049      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd fbdb 	bl	80008a0 <HAL_GetTick>
 80030ea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fd fbd7 	bl	80008a0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e17e      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003104:	2302      	movs	r3, #2
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003110:	2302      	movs	r3, #2
 8003112:	623b      	str	r3, [r7, #32]
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	61fb      	str	r3, [r7, #28]
  return result;
 800311c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800312e:	4b01      	ldr	r3, [pc, #4]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	e00d      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003134:	40021000 	.word	0x40021000
 8003138:	40007000 	.word	0x40007000
 800313c:	10908100 	.word	0x10908100
 8003140:	2302      	movs	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	4b9a      	ldr	r3, [pc, #616]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2202      	movs	r2, #2
 8003152:	613a      	str	r2, [r7, #16]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	60fa      	str	r2, [r7, #12]
  return result;
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	fab2 f282 	clz	r2, r2
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f002 021f 	and.w	r2, r2, #31
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0b9      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800317a:	4b8f      	ldr	r3, [pc, #572]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	498c      	ldr	r1, [pc, #560]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800318c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a87      	ldr	r2, [pc, #540]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ac:	4b82      	ldr	r3, [pc, #520]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f023 0203 	bic.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	497f      	ldr	r1, [pc, #508]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ca:	4b7b      	ldr	r3, [pc, #492]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4978      	ldr	r1, [pc, #480]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031e8:	4b73      	ldr	r3, [pc, #460]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4970      	ldr	r1, [pc, #448]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003206:	4b6c      	ldr	r3, [pc, #432]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f023 0210 	bic.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4969      	ldr	r1, [pc, #420]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003224:	4b64      	ldr	r3, [pc, #400]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	4961      	ldr	r1, [pc, #388]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003242:	4b5d      	ldr	r3, [pc, #372]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f023 0220 	bic.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	495a      	ldr	r1, [pc, #360]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003260:	4b55      	ldr	r3, [pc, #340]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	4952      	ldr	r1, [pc, #328]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800327e:	4b4e      	ldr	r3, [pc, #312]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	494b      	ldr	r1, [pc, #300]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800329c:	4b46      	ldr	r3, [pc, #280]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4943      	ldr	r1, [pc, #268]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032ba:	4b3f      	ldr	r3, [pc, #252]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	493c      	ldr	r1, [pc, #240]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032d8:	4b37      	ldr	r3, [pc, #220]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	4934      	ldr	r1, [pc, #208]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80032f6:	4b30      	ldr	r3, [pc, #192]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	492d      	ldr	r1, [pc, #180]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003314:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003320:	4925      	ldr	r1, [pc, #148]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003332:	4b21      	ldr	r3, [pc, #132]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	491e      	ldr	r1, [pc, #120]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003340:	4313      	orrs	r3, r2
 8003342:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	4916      	ldr	r1, [pc, #88]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335e:	4313      	orrs	r3, r2
 8003360:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800336e:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337a:	490f      	ldr	r1, [pc, #60]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	4907      	ldr	r1, [pc, #28]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80033aa:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	4913      	ldr	r1, [pc, #76]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033d0:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033dc:	490b      	ldr	r1, [pc, #44]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80033ee:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fa:	4904      	ldr	r1, [pc, #16]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3748      	adds	r7, #72	@ 0x48
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e040      	b.n	80034a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd f91a 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9fc 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f825 	bl	80034ac <UART_SetConfig>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01b      	b.n	80034a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800347a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800348a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa7b 	bl	8003998 <UART_CheckIdleState>
 80034a2:	4603      	mov	r3, r0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <UART_SetConfig+0x274>)
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a80      	ldr	r2, [pc, #512]	@ (8003724 <UART_SetConfig+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d120      	bne.n	800356a <UART_SetConfig+0xbe>
 8003528:	4b7f      	ldr	r3, [pc, #508]	@ (8003728 <UART_SetConfig+0x27c>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d817      	bhi.n	8003564 <UART_SetConfig+0xb8>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0x90>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	0800354d 	.word	0x0800354d
 8003540:	08003559 	.word	0x08003559
 8003544:	0800355f 	.word	0x0800355f
 8003548:	08003553 	.word	0x08003553
 800354c:	2301      	movs	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0b5      	b.n	80036be <UART_SetConfig+0x212>
 8003552:	2302      	movs	r3, #2
 8003554:	77fb      	strb	r3, [r7, #31]
 8003556:	e0b2      	b.n	80036be <UART_SetConfig+0x212>
 8003558:	2304      	movs	r3, #4
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e0af      	b.n	80036be <UART_SetConfig+0x212>
 800355e:	2308      	movs	r3, #8
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e0ac      	b.n	80036be <UART_SetConfig+0x212>
 8003564:	2310      	movs	r3, #16
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e0a9      	b.n	80036be <UART_SetConfig+0x212>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <UART_SetConfig+0x280>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d124      	bne.n	80035be <UART_SetConfig+0x112>
 8003574:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <UART_SetConfig+0x27c>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800357c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003580:	d011      	beq.n	80035a6 <UART_SetConfig+0xfa>
 8003582:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003586:	d817      	bhi.n	80035b8 <UART_SetConfig+0x10c>
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800358c:	d011      	beq.n	80035b2 <UART_SetConfig+0x106>
 800358e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003592:	d811      	bhi.n	80035b8 <UART_SetConfig+0x10c>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <UART_SetConfig+0xf4>
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359c:	d006      	beq.n	80035ac <UART_SetConfig+0x100>
 800359e:	e00b      	b.n	80035b8 <UART_SetConfig+0x10c>
 80035a0:	2300      	movs	r3, #0
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e08b      	b.n	80036be <UART_SetConfig+0x212>
 80035a6:	2302      	movs	r3, #2
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e088      	b.n	80036be <UART_SetConfig+0x212>
 80035ac:	2304      	movs	r3, #4
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e085      	b.n	80036be <UART_SetConfig+0x212>
 80035b2:	2308      	movs	r3, #8
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e082      	b.n	80036be <UART_SetConfig+0x212>
 80035b8:	2310      	movs	r3, #16
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e07f      	b.n	80036be <UART_SetConfig+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003730 <UART_SetConfig+0x284>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d124      	bne.n	8003612 <UART_SetConfig+0x166>
 80035c8:	4b57      	ldr	r3, [pc, #348]	@ (8003728 <UART_SetConfig+0x27c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80035d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035d4:	d011      	beq.n	80035fa <UART_SetConfig+0x14e>
 80035d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035da:	d817      	bhi.n	800360c <UART_SetConfig+0x160>
 80035dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035e0:	d011      	beq.n	8003606 <UART_SetConfig+0x15a>
 80035e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035e6:	d811      	bhi.n	800360c <UART_SetConfig+0x160>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <UART_SetConfig+0x148>
 80035ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035f0:	d006      	beq.n	8003600 <UART_SetConfig+0x154>
 80035f2:	e00b      	b.n	800360c <UART_SetConfig+0x160>
 80035f4:	2300      	movs	r3, #0
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e061      	b.n	80036be <UART_SetConfig+0x212>
 80035fa:	2302      	movs	r3, #2
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e05e      	b.n	80036be <UART_SetConfig+0x212>
 8003600:	2304      	movs	r3, #4
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e05b      	b.n	80036be <UART_SetConfig+0x212>
 8003606:	2308      	movs	r3, #8
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e058      	b.n	80036be <UART_SetConfig+0x212>
 800360c:	2310      	movs	r3, #16
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e055      	b.n	80036be <UART_SetConfig+0x212>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a47      	ldr	r2, [pc, #284]	@ (8003734 <UART_SetConfig+0x288>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d124      	bne.n	8003666 <UART_SetConfig+0x1ba>
 800361c:	4b42      	ldr	r3, [pc, #264]	@ (8003728 <UART_SetConfig+0x27c>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003624:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003628:	d011      	beq.n	800364e <UART_SetConfig+0x1a2>
 800362a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362e:	d817      	bhi.n	8003660 <UART_SetConfig+0x1b4>
 8003630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003634:	d011      	beq.n	800365a <UART_SetConfig+0x1ae>
 8003636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363a:	d811      	bhi.n	8003660 <UART_SetConfig+0x1b4>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <UART_SetConfig+0x19c>
 8003640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003644:	d006      	beq.n	8003654 <UART_SetConfig+0x1a8>
 8003646:	e00b      	b.n	8003660 <UART_SetConfig+0x1b4>
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e037      	b.n	80036be <UART_SetConfig+0x212>
 800364e:	2302      	movs	r3, #2
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e034      	b.n	80036be <UART_SetConfig+0x212>
 8003654:	2304      	movs	r3, #4
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e031      	b.n	80036be <UART_SetConfig+0x212>
 800365a:	2308      	movs	r3, #8
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e02e      	b.n	80036be <UART_SetConfig+0x212>
 8003660:	2310      	movs	r3, #16
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e02b      	b.n	80036be <UART_SetConfig+0x212>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <UART_SetConfig+0x28c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d124      	bne.n	80036ba <UART_SetConfig+0x20e>
 8003670:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <UART_SetConfig+0x27c>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003678:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800367c:	d011      	beq.n	80036a2 <UART_SetConfig+0x1f6>
 800367e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003682:	d817      	bhi.n	80036b4 <UART_SetConfig+0x208>
 8003684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003688:	d011      	beq.n	80036ae <UART_SetConfig+0x202>
 800368a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800368e:	d811      	bhi.n	80036b4 <UART_SetConfig+0x208>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <UART_SetConfig+0x1f0>
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003698:	d006      	beq.n	80036a8 <UART_SetConfig+0x1fc>
 800369a:	e00b      	b.n	80036b4 <UART_SetConfig+0x208>
 800369c:	2300      	movs	r3, #0
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e00d      	b.n	80036be <UART_SetConfig+0x212>
 80036a2:	2302      	movs	r3, #2
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e00a      	b.n	80036be <UART_SetConfig+0x212>
 80036a8:	2304      	movs	r3, #4
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e007      	b.n	80036be <UART_SetConfig+0x212>
 80036ae:	2308      	movs	r3, #8
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e004      	b.n	80036be <UART_SetConfig+0x212>
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e001      	b.n	80036be <UART_SetConfig+0x212>
 80036ba:	2310      	movs	r3, #16
 80036bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c6:	d16b      	bne.n	80037a0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d838      	bhi.n	8003740 <UART_SetConfig+0x294>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <UART_SetConfig+0x228>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003709 	.word	0x08003709
 80036e0:	08003741 	.word	0x08003741
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7ff fc2a 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 80036fc:	61b8      	str	r0, [r7, #24]
        break;
 80036fe:	e024      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7ff fc48 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8003704:	61b8      	str	r0, [r7, #24]
        break;
 8003706:	e020      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <UART_SetConfig+0x290>)
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e01d      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7ff fbbf 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8003712:	61b8      	str	r0, [r7, #24]
        break;
 8003714:	e019      	b.n	800374a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e015      	b.n	800374a <UART_SetConfig+0x29e>
 800371e:	bf00      	nop
 8003720:	efff69f3 	.word	0xefff69f3
 8003724:	40013800 	.word	0x40013800
 8003728:	40021000 	.word	0x40021000
 800372c:	40004400 	.word	0x40004400
 8003730:	40004800 	.word	0x40004800
 8003734:	40004c00 	.word	0x40004c00
 8003738:	40005000 	.word	0x40005000
 800373c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77bb      	strb	r3, [r7, #30]
        break;
 8003748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d073      	beq.n	8003838 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	005a      	lsls	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d916      	bls.n	800379a <UART_SetConfig+0x2ee>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003772:	d212      	bcs.n	800379a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f023 030f 	bic.w	r3, r3, #15
 800377c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	b29a      	uxth	r2, r3
 800378a:	89fb      	ldrh	r3, [r7, #14]
 800378c:	4313      	orrs	r3, r2
 800378e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	89fa      	ldrh	r2, [r7, #14]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e04e      	b.n	8003838 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	77bb      	strb	r3, [r7, #30]
 800379e:	e04b      	b.n	8003838 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d827      	bhi.n	80037f6 <UART_SetConfig+0x34a>
 80037a6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <UART_SetConfig+0x300>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037d1 	.word	0x080037d1
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037f7 	.word	0x080037f7
 80037bc:	080037e7 	.word	0x080037e7
 80037c0:	080037f7 	.word	0x080037f7
 80037c4:	080037f7 	.word	0x080037f7
 80037c8:	080037f7 	.word	0x080037f7
 80037cc:	080037ef 	.word	0x080037ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d0:	f7ff fbbe 	bl	8002f50 <HAL_RCC_GetPCLK1Freq>
 80037d4:	61b8      	str	r0, [r7, #24]
        break;
 80037d6:	e013      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7ff fbdc 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80037dc:	61b8      	str	r0, [r7, #24]
        break;
 80037de:	e00f      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <UART_SetConfig+0x3a4>)
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e6:	f7ff fb53 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 80037ea:	61b8      	str	r0, [r7, #24]
        break;
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	77bb      	strb	r3, [r7, #30]
        break;
 80037fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085a      	lsrs	r2, r3, #1
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	441a      	add	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d909      	bls.n	8003834 <UART_SetConfig+0x388>
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003826:	d205      	bcs.n	8003834 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	e001      	b.n	8003838 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003844:	7fbb      	ldrb	r3, [r7, #30]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	007a1200 	.word	0x007a1200

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003952:	d10a      	bne.n	800396a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b098      	sub	sp, #96	@ 0x60
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fc ff7a 	bl	80008a0 <HAL_GetTick>
 80039ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d12e      	bne.n	8003a1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f88c 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d021      	beq.n	8003a1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e6      	bne.n	80039d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e062      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d149      	bne.n	8003abc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f856 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03c      	beq.n	8003abc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e6      	bne.n	8003a42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e011      	b.n	8003ae0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3758      	adds	r7, #88	@ 0x58
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e04f      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b00:	d04b      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fc fecd 	bl	80008a0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e04e      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d037      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d034      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d031      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d110      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f838 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e029      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d111      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f81e 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e00f      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0a0      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	@ 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d118      	bne.n	8003c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c7e:	bf00      	nop
 8003c80:	3754      	adds	r7, #84	@ 0x54
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <memset>:
 8003c8a:	4402      	add	r2, r0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d100      	bne.n	8003c94 <memset+0xa>
 8003c92:	4770      	bx	lr
 8003c94:	f803 1b01 	strb.w	r1, [r3], #1
 8003c98:	e7f9      	b.n	8003c8e <memset+0x4>
	...

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	@ (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 f818 	bl	8003ce4 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08003d34 	.word	0x08003d34
 8003cd8:	08003d34 	.word	0x08003d34
 8003cdc:	08003d34 	.word	0x08003d34
 8003ce0:	08003d38 	.word	0x08003d38

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
