
CAN_NORMAL_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009838  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080099d8  080099d8  0000a9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e94  08009e94  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e94  08009e94  0000ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e9c  08009e9c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e9c  08009e9c  0000ae9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ea0  08009ea0  0000aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009ea4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdaa  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc9  00000000  00000000  00016fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  00018b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069a  00000000  00000000  00019428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f3f  00000000  00000000  00019ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ada5  00000000  00000000  0003aa01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e17  00000000  00000000  000457a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a5bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b08  00000000  00000000  0010a600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099c0 	.word	0x080099c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080099c0 	.word	0x080099c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d0c:	1d39      	adds	r1, r7, #4
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	2201      	movs	r2, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <__io_putchar+0x20>)
 8000d16:	f002 ffed 	bl	8003cf4 <HAL_UART_Transmit>
  return ch;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000218 	.word	0x20000218

08000d28 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <__io_getchar+0x38>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2208      	movs	r2, #8
 8000d38:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d3a:	1df9      	adds	r1, r7, #7
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d40:	2201      	movs	r2, #1
 8000d42:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <__io_getchar+0x38>)
 8000d44:	f003 f85f 	bl	8003e06 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <__io_getchar+0x38>)
 8000d52:	f002 ffcf 	bl	8003cf4 <HAL_UART_Transmit>
  return ch;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000218 	.word	0x20000218

08000d64 <floatToUpperBytes>:
 *  uint8_t* byteArr: Array of bytes with size of 8
 *
 * Function:
 * 	converts a 4 byte float value and fill in bytes 0-3 in an 8 bytes array in little endian
*/
void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d6e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f000 fb8b 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f85b 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f000 f91d 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d9a:	f000 f8eb 	bl	8000f74 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000d9e:	f000 f8b3 	bl	8000f08 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000da2:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <main+0xa8>)
 8000da4:	f000 fce1 	bl	800176a <HAL_CAN_Start>
  setvbuf(stdin, NULL, _IONBF, 0); // for scanf setup, avoiding errors in syscalls.c
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <main+0xac>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6858      	ldr	r0, [r3, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	2202      	movs	r2, #2
 8000db2:	2100      	movs	r1, #0
 8000db4:	f004 fc28 	bl	8005608 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	f107 0208 	add.w	r2, r7, #8
 8000dbe:	f107 010c 	add.w	r1, r7, #12
 8000dc2:	481d      	ldr	r0, [pc, #116]	@ (8000e38 <main+0xb0>)
 8000dc4:	f004 fc0e 	bl	80055e4 <iscanf>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d1f4      	bne.n	8000db8 <main+0x30>
	{
		printf("packet sent: CMD:0x%x, DLC:%d, VAL: %f \r\n", cmd_id, dlc, value);
 8000dce:	68fc      	ldr	r4, [r7, #12]
 8000dd0:	68bd      	ldr	r5, [r7, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbbf 	bl	8000558 <__aeabi_f2d>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	e9cd 2300 	strd	r2, r3, [sp]
 8000de2:	462a      	mov	r2, r5
 8000de4:	4621      	mov	r1, r4
 8000de6:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <main+0xb4>)
 8000de8:	f004 fbea 	bl	80055c0 <iprintf>
		memset(TxData, 0, sizeof(TxData));
 8000dec:	2208      	movs	r2, #8
 8000dee:	2100      	movs	r1, #0
 8000df0:	4813      	ldr	r0, [pc, #76]	@ (8000e40 <main+0xb8>)
 8000df2:	f004 fd22 	bl	800583a <memset>

		TxHeader.StdId = (NODE_ID << 5) | cmd_id;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <main+0xbc>)
 8000dfc:	601a      	str	r2, [r3, #0]
		TxHeader.IDE = CAN_ID_STD;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <main+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <main+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = dlc;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <main+0xbc>)
 8000e10:	611a      	str	r2, [r3, #16]

		// Put value as bytes directly into TxData
		// example usage: "0x0D 8 2.0" VELOCITY_MODE with DLC = 8 and spinning at INPUT_VEL 2 rev/s.
		floatToUpperBytes(value, TxData);
 8000e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e16:	480a      	ldr	r0, [pc, #40]	@ (8000e40 <main+0xb8>)
 8000e18:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1c:	f7ff ffa2 	bl	8000d64 <floatToUpperBytes>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <main+0xc0>)
 8000e22:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <main+0xb8>)
 8000e24:	4907      	ldr	r1, [pc, #28]	@ (8000e44 <main+0xbc>)
 8000e26:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <main+0xa8>)
 8000e28:	f000 fce3 	bl	80017f2 <HAL_CAN_AddTxMessage>
	if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000e2c:	e7c4      	b.n	8000db8 <main+0x30>
 8000e2e:	bf00      	nop
 8000e30:	200001f0 	.word	0x200001f0
 8000e34:	20000018 	.word	0x20000018
 8000e38:	080099d8 	.word	0x080099d8
 8000e3c:	080099e4 	.word	0x080099e4
 8000e40:	200002b8 	.word	0x200002b8
 8000e44:	200002a0 	.word	0x200002a0
 8000e48:	200002c0 	.word	0x200002c0

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0a6      	sub	sp, #152	@ 0x98
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e56:	2228      	movs	r2, #40	@ 0x28
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 fced 	bl	800583a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2258      	movs	r2, #88	@ 0x58
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 fcdf 	bl	800583a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e84:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e86:	2301      	movs	r3, #1
 8000e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e98:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fa82 	bl	80023b4 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 f8fb 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fa90 	bl	80033fc <HAL_RCC_ClockConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ee2:	f000 f8e5 	bl	80010b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fc95 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000efc:	f000 f8d8 	bl	80010b0 <Error_Handler>
  }
}
 8000f00:	bf00      	nop
 8000f02:	3798      	adds	r7, #152	@ 0x98
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f0e:	4a18      	ldr	r2, [pc, #96]	@ (8000f70 <MX_CAN_Init+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f14:	2208      	movs	r2, #8
 8000f16:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f26:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000f2a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f2e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f32:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <MX_CAN_Init+0x64>)
 8000f5a:	f000 fb0b 	bl	8001574 <HAL_CAN_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f64:	f000 f8a4 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001f0 	.word	0x200001f0
 8000f70:	40006400 	.word	0x40006400

08000f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f7a:	4a15      	ldr	r2, [pc, #84]	@ (8000fd0 <MX_USART2_UART_Init+0x5c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_USART2_UART_Init+0x58>)
 8000fb8:	f002 fe4e 	bl	8003c58 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f000 f875 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000218 	.word	0x20000218
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a2e      	ldr	r2, [pc, #184]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8000ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001002:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_GPIO_Init+0xd4>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f001 f973 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480f      	ldr	r0, [pc, #60]	@ (80010ac <MX_GPIO_Init+0xd8>)
 800106e:	f000 ffdb 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001072:	2320      	movs	r3, #32
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f000 ffcc 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2028      	movs	r0, #40	@ 0x28
 8001096:	f000 ff90 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109a:	2028      	movs	r0, #40	@ 0x28
 800109c:	f000 ffa9 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	@ 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000800 	.word	0x48000800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x44>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_MspInit+0x44>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010f2:	2007      	movs	r0, #7
 80010f4:	f000 ff56 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1c      	ldr	r2, [pc, #112]	@ (8001194 <HAL_CAN_MspInit+0x90>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d131      	bne.n	800118a <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 800112c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a15      	ldr	r2, [pc, #84]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_CAN_MspInit+0x94>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001156:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001168:	2309      	movs	r3, #9
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001176:	f000 ff57 	bl	8002028 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2014      	movs	r0, #20
 8001180:	f000 ff1b 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001184:	2014      	movs	r0, #20
 8001186:	f000 ff34 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40006400 	.word	0x40006400
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <HAL_UART_MspInit+0x7c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d128      	bne.n	8001210 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_UART_MspInit+0x80>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f000 ff0c 	bl	8002028 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	@ 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40004400 	.word	0x40004400
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f95d 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001286:	f000 fb84 	bl	8001992 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f0 	.word	0x200001f0

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001298:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800129c:	f001 f866 	bl	800236c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_kill>:

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012be:	f004 fb0f 	bl	80058e0 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
  return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <_exit+0x12>

080012ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e00a      	b.n	8001312 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fc:	f7ff fd14 	bl	8000d28 <__io_getchar>
 8001300:	4601      	mov	r1, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbf0      	blt.n	80012fc <_read+0x12>
  }

  return len;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e009      	b.n	800134a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	60ba      	str	r2, [r7, #8]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fce0 	bl	8000d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbf1      	blt.n	8001336 <_write+0x12>
  }
  return len;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_close>:

int _close(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001384:	605a      	str	r2, [r3, #4]
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f004 fa74 	bl	80058e0 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20010000 	.word	0x20010000
 8001424:	00000400 	.word	0x00000400
 8001428:	200002c4 	.word	0x200002c4
 800142c:	20000418 	.word	0x20000418

08001430 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800148c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	@ (80014a0 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f004 fa33 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001486:	f7ff fc7f 	bl	8000d88 <main>

0800148a <LoopForever>:

LoopForever:
    b LoopForever
 800148a:	e7fe      	b.n	800148a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800148c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001498:	08009ea4 	.word	0x08009ea4
  ldr r2, =_sbss
 800149c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014a0:	20000418 	.word	0x20000418

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 fd73 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fdfa 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fd8b 	bl	800200e <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001510:	f000 fd53 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	200002c8 	.word	0x200002c8

0800155c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200002c8 	.word	0x200002c8

08001574 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0ed      	b.n	8001762 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fdb6 	bl	8001104 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff ffd8 	bl	800155c <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ae:	e012      	b.n	80015d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b0:	f7ff ffd4 	bl	800155c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d90b      	bls.n	80015d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2205      	movs	r2, #5
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0c5      	b.n	8001762 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0e5      	beq.n	80015b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0202 	bic.w	r2, r2, #2
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff ffb2 	bl	800155c <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fa:	e012      	b.n	8001622 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015fc:	f7ff ffae 	bl	800155c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b0a      	cmp	r3, #10
 8001608:	d90b      	bls.n	8001622 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e09f      	b.n	8001762 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e5      	bne.n	80015fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e1b      	ldrb	r3, [r3, #24]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7e5b      	ldrb	r3, [r3, #25]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e9b      	ldrb	r3, [r3, #26]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0220 	orr.w	r2, r2, #32
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0220 	bic.w	r2, r2, #32
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7edb      	ldrb	r3, [r3, #27]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0210 	bic.w	r2, r2, #16
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0210 	orr.w	r2, r2, #16
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7f1b      	ldrb	r3, [r3, #28]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0208 	orr.w	r2, r2, #8
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0208 	bic.w	r2, r2, #8
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f5b      	ldrb	r3, [r3, #29]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0204 	orr.w	r2, r2, #4
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	ea42 0103 	orr.w	r1, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d12e      	bne.n	80017dc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001796:	f7ff fee1 	bl	800155c <HAL_GetTick>
 800179a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800179c:	e012      	b.n	80017c4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800179e:	f7ff fedd 	bl	800155c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b0a      	cmp	r3, #10
 80017aa:	d90b      	bls.n	80017c4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e012      	b.n	80017ea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e5      	bne.n	800179e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e006      	b.n	80017ea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b089      	sub	sp, #36	@ 0x24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001806:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <HAL_CAN_AddTxMessage+0x2c>
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	2b02      	cmp	r3, #2
 800181a:	f040 80ad 	bne.w	8001978 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8095 	beq.w	8001968 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	0e1b      	lsrs	r3, r3, #24
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001848:	2201      	movs	r2, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	409a      	lsls	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	6809      	ldr	r1, [r1, #0]
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3318      	adds	r3, #24
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	440b      	add	r3, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e00f      	b.n	8001896 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001880:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001886:	68f9      	ldr	r1, [r7, #12]
 8001888:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800188a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3318      	adds	r3, #24
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	440b      	add	r3, r1
 8001894:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3318      	adds	r3, #24
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	440b      	add	r3, r1
 80018a6:	3304      	adds	r3, #4
 80018a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	7d1b      	ldrb	r3, [r3, #20]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d111      	bne.n	80018d6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3318      	adds	r3, #24
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	3304      	adds	r3, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	6811      	ldr	r1, [r2, #0]
 80018c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3318      	adds	r3, #24
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3307      	adds	r3, #7
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	061a      	lsls	r2, r3, #24
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3306      	adds	r3, #6
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3305      	adds	r3, #5
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4313      	orrs	r3, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	3204      	adds	r2, #4
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	4610      	mov	r0, r2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	ea43 0200 	orr.w	r2, r3, r0
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800190c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3303      	adds	r3, #3
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	061a      	lsls	r2, r3, #24
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3302      	adds	r3, #2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	4313      	orrs	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	4610      	mov	r0, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	6811      	ldr	r1, [r2, #0]
 8001934:	ea43 0200 	orr.w	r2, r3, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	440b      	add	r3, r1
 800193e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001942:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3318      	adds	r3, #24
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	6811      	ldr	r1, [r2, #0]
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3318      	adds	r3, #24
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	440b      	add	r3, r1
 8001962:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e00e      	b.n	8001986 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e006      	b.n	8001986 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b08a      	sub	sp, #40	@ 0x28
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07c      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d023      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f983 	bl	8001d00 <HAL_CAN_TxMailbox0CompleteCallback>
 80019fa:	e016      	b.n	8001a2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0e:	e00c      	b.n	8001a2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a22:	e002      	b.n	8001a2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f989 	bl	8001d3c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d024      	beq.n	8001a7e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f963 	bl	8001d14 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a4e:	e016      	b.n	8001a7e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a62:	e00c      	b.n	8001a7e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a76:	e002      	b.n	8001a7e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f969 	bl	8001d50 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d024      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f943 	bl	8001d28 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aa2:	e016      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab6:	e00c      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aca:	e002      	b.n	8001ad2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f949 	bl	8001d64 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00c      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2210      	movs	r2, #16
 8001af4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93a 	bl	8001d8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f921 	bl	8001d78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2210      	movs	r2, #16
 8001b58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2208      	movs	r2, #8
 8001b74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f91c 	bl	8001db4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f903 	bl	8001da0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00b      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f906 	bl	8001dc8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8ff 	bl	8001ddc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d07b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d072      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d043      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d03e      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c60:	2b60      	cmp	r3, #96	@ 0x60
 8001c62:	d02b      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x32a>
 8001c64:	2b60      	cmp	r3, #96	@ 0x60
 8001c66:	d82e      	bhi.n	8001cc6 <HAL_CAN_IRQHandler+0x334>
 8001c68:	2b50      	cmp	r3, #80	@ 0x50
 8001c6a:	d022      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x320>
 8001c6c:	2b50      	cmp	r3, #80	@ 0x50
 8001c6e:	d82a      	bhi.n	8001cc6 <HAL_CAN_IRQHandler+0x334>
 8001c70:	2b40      	cmp	r3, #64	@ 0x40
 8001c72:	d019      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x316>
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d826      	bhi.n	8001cc6 <HAL_CAN_IRQHandler+0x334>
 8001c78:	2b30      	cmp	r3, #48	@ 0x30
 8001c7a:	d010      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x30c>
 8001c7c:	2b30      	cmp	r3, #48	@ 0x30
 8001c7e:	d822      	bhi.n	8001cc6 <HAL_CAN_IRQHandler+0x334>
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d002      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x2f8>
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d005      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c88:	e01d      	b.n	8001cc6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c92:	e019      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c9c:	e014      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 0320 	orr.w	r3, r3, #32
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca6:	e00f      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb0:	e00a      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cba:	e005      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc4:	e000      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cc6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699a      	ldr	r2, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cd6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f87c 	bl	8001df0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	@ 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	@ (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	@ (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	@ (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002036:	e160      	b.n	80022fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8152 	beq.w	80022f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <HAL_GPIO_Init+0x40>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d130      	bne.n	80020ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209e:	2201      	movs	r2, #1
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0201 	and.w	r2, r3, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d017      	beq.n	8002106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d123      	bne.n	800215a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	6939      	ldr	r1, [r7, #16]
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80ac 	beq.w	80022f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219c:	4b5e      	ldr	r3, [pc, #376]	@ (8002318 <HAL_GPIO_Init+0x2f0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <HAL_GPIO_Init+0x2f0>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <HAL_GPIO_Init+0x2f0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b4:	4a59      	ldr	r2, [pc, #356]	@ (800231c <HAL_GPIO_Init+0x2f4>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021de:	d025      	beq.n	800222c <HAL_GPIO_Init+0x204>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002320 <HAL_GPIO_Init+0x2f8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01f      	beq.n	8002228 <HAL_GPIO_Init+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002324 <HAL_GPIO_Init+0x2fc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d019      	beq.n	8002224 <HAL_GPIO_Init+0x1fc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002328 <HAL_GPIO_Init+0x300>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1f8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4c      	ldr	r2, [pc, #304]	@ (800232c <HAL_GPIO_Init+0x304>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1f4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a4b      	ldr	r2, [pc, #300]	@ (8002330 <HAL_GPIO_Init+0x308>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1f0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a4a      	ldr	r2, [pc, #296]	@ (8002334 <HAL_GPIO_Init+0x30c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1ec>
 8002210:	2306      	movs	r3, #6
 8002212:	e00c      	b.n	800222e <HAL_GPIO_Init+0x206>
 8002214:	2307      	movs	r3, #7
 8002216:	e00a      	b.n	800222e <HAL_GPIO_Init+0x206>
 8002218:	2305      	movs	r3, #5
 800221a:	e008      	b.n	800222e <HAL_GPIO_Init+0x206>
 800221c:	2304      	movs	r3, #4
 800221e:	e006      	b.n	800222e <HAL_GPIO_Init+0x206>
 8002220:	2303      	movs	r3, #3
 8002222:	e004      	b.n	800222e <HAL_GPIO_Init+0x206>
 8002224:	2302      	movs	r3, #2
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x206>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_GPIO_Init+0x206>
 800222c:	2300      	movs	r3, #0
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	4093      	lsls	r3, r2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800223e:	4937      	ldr	r1, [pc, #220]	@ (800231c <HAL_GPIO_Init+0x2f4>)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3302      	adds	r3, #2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_GPIO_Init+0x310>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002270:	4a31      	ldr	r2, [pc, #196]	@ (8002338 <HAL_GPIO_Init+0x310>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002276:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <HAL_GPIO_Init+0x310>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800229a:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <HAL_GPIO_Init+0x310>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022a0:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_GPIO_Init+0x310>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002338 <HAL_GPIO_Init+0x310>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_GPIO_Init+0x310>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <HAL_GPIO_Init+0x310>)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f ae97 	bne.w	8002038 <HAL_GPIO_Init+0x10>
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	48000400 	.word	0x48000400
 8002324:	48000800 	.word	0x48000800
 8002328:	48000c00 	.word	0x48000c00
 800232c:	48001000 	.word	0x48001000
 8002330:	48001400 	.word	0x48001400
 8002334:	48001800 	.word	0x48001800
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002358:	e002      	b.n	8002360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f806 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f001 b80a 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8161 	beq.w	80026b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f0:	4bae      	ldr	r3, [pc, #696]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4bab      	ldr	r3, [pc, #684]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d157      	bne.n	80024b8 <HAL_RCC_OscConfig+0x104>
 8002408:	4ba8      	ldr	r3, [pc, #672]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d150      	bne.n	80024b8 <HAL_RCC_OscConfig+0x104>
 8002416:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800242a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b3f      	cmp	r3, #63	@ 0x3f
 8002436:	d802      	bhi.n	800243e <HAL_RCC_OscConfig+0x8a>
 8002438:	4b9c      	ldr	r3, [pc, #624]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0xb6>
 800243e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002442:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002452:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002456:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800245a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002466:	4b91      	ldr	r3, [pc, #580]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800246e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002472:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800247e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8108 	beq.w	80026b0 <HAL_RCC_OscConfig+0x2fc>
 80024a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80ff 	bne.w	80026b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f000 bf9b 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x124>
 80024ca:	4b78      	ldr	r3, [pc, #480]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e036      	b.n	8002546 <HAL_RCC_OscConfig+0x192>
 80024d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x14e>
 80024e8:	4b70      	ldr	r3, [pc, #448]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6f      	ldr	r2, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b6d      	ldr	r3, [pc, #436]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6c      	ldr	r2, [pc, #432]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e021      	b.n	8002546 <HAL_RCC_OscConfig+0x192>
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x17a>
 8002514:	4b65      	ldr	r3, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a64      	ldr	r2, [pc, #400]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b62      	ldr	r3, [pc, #392]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a61      	ldr	r2, [pc, #388]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x192>
 800252e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5e      	ldr	r2, [pc, #376]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b5c      	ldr	r3, [pc, #368]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5b      	ldr	r2, [pc, #364]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d054      	beq.n	8002600 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff f801 	bl	800155c <HAL_GetTick>
 800255a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fffc 	bl	800155c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	@ 0x64
 800256e:	d902      	bls.n	8002576 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f000 bf3c 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 8002576:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800257a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800258a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b3f      	cmp	r3, #63	@ 0x3f
 8002596:	d802      	bhi.n	800259e <HAL_RCC_OscConfig+0x1ea>
 8002598:	4b44      	ldr	r3, [pc, #272]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x216>
 800259e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80025b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025c6:	4b39      	ldr	r3, [pc, #228]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ce:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80025d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80025de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0b0      	beq.n	8002560 <HAL_RCC_OscConfig+0x1ac>
 80025fe:	e058      	b.n	80026b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ffac 	bl	800155c <HAL_GetTick>
 8002604:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260a:	f7fe ffa7 	bl	800155c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bee7 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 8002620:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002624:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002634:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002640:	d802      	bhi.n	8002648 <HAL_RCC_OscConfig+0x294>
 8002642:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	e015      	b.n	8002674 <HAL_RCC_OscConfig+0x2c0>
 8002648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800265c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002660:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002664:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_RCC_OscConfig+0x2f8>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002678:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800267c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002688:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1b0      	bne.n	800260a <HAL_RCC_OscConfig+0x256>
 80026a8:	e003      	b.n	80026b2 <HAL_RCC_OscConfig+0x2fe>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 816d 	beq.w	80029a2 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026c8:	4bcd      	ldr	r3, [pc, #820]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026d4:	4bca      	ldr	r3, [pc, #808]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d16e      	bne.n	80027be <HAL_RCC_OscConfig+0x40a>
 80026e0:	4bc7      	ldr	r3, [pc, #796]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80026e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ec:	d167      	bne.n	80027be <HAL_RCC_OscConfig+0x40a>
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002700:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b3f      	cmp	r3, #63	@ 0x3f
 800270c:	d802      	bhi.n	8002714 <HAL_RCC_OscConfig+0x360>
 800270e:	4bbc      	ldr	r3, [pc, #752]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x388>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800272c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002738:	4bb1      	ldr	r3, [pc, #708]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002742:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800274e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCC_OscConfig+0x3d0>
 800276e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002772:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d002      	beq.n	8002784 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f000 be35 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b9e      	ldr	r3, [pc, #632]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	21f8      	movs	r1, #248	@ 0xf8
 800279a:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80027a2:	fa91 f1a1 	rbit	r1, r1
 80027a6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80027aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027ae:	fab1 f181 	clz	r1, r1
 80027b2:	b2c9      	uxtb	r1, r1
 80027b4:	408b      	lsls	r3, r1
 80027b6:	4992      	ldr	r1, [pc, #584]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027bc:	e0f1      	b.n	80029a2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8083 	beq.w	80028d6 <HAL_RCC_OscConfig+0x522>
 80027d0:	2301      	movs	r3, #1
 80027d2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80027e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	461a      	mov	r2, r3
 80027f8:	2301      	movs	r3, #1
 80027fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe feae 	bl	800155c <HAL_GetTick>
 8002800:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fea9 	bl	800155c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	f000 bde9 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 800281c:	2302      	movs	r3, #2
 800281e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800282e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b3f      	cmp	r3, #63	@ 0x3f
 800283a:	d802      	bhi.n	8002842 <HAL_RCC_OscConfig+0x48e>
 800283c:	4b70      	ldr	r3, [pc, #448]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	e013      	b.n	800286a <HAL_RCC_OscConfig+0x4b6>
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800285a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002866:	4b66      	ldr	r3, [pc, #408]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	2202      	movs	r2, #2
 800286c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002870:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002874:	fa92 f2a2 	rbit	r2, r2
 8002878:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800287c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0b4      	beq.n	8002806 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b58      	ldr	r3, [pc, #352]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	21f8      	movs	r1, #248	@ 0xf8
 80028b2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80028ba:	fa91 f1a1 	rbit	r1, r1
 80028be:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80028c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028c6:	fab1 f181 	clz	r1, r1
 80028ca:	b2c9      	uxtb	r1, r1
 80028cc:	408b      	lsls	r3, r1
 80028ce:	494c      	ldr	r1, [pc, #304]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
 80028d4:	e065      	b.n	80029a2 <HAL_RCC_OscConfig+0x5ee>
 80028d6:	2301      	movs	r3, #1
 80028d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80028e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe fe2b 	bl	800155c <HAL_GetTick>
 8002906:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290c:	f7fe fe26 	bl	800155c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f000 bd66 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002934:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002940:	d802      	bhi.n	8002948 <HAL_RCC_OscConfig+0x594>
 8002942:	4b2f      	ldr	r3, [pc, #188]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e013      	b.n	8002970 <HAL_RCC_OscConfig+0x5bc>
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800295a:	2302      	movs	r3, #2
 800295c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002960:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800296c:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_OscConfig+0x64c>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	2202      	movs	r2, #2
 8002972:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002976:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800297a:	fa92 f2a2 	rbit	r2, r2
 800297e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002982:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1b4      	bne.n	800290c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8119 	beq.w	8002bea <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8082 	beq.w	8002ace <HAL_RCC_OscConfig+0x71a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80029dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_RCC_OscConfig+0x650>)
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2301      	movs	r3, #1
 80029f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fe fdb2 	bl	800155c <HAL_GetTick>
 80029f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fc:	e00f      	b.n	8002a1e <HAL_RCC_OscConfig+0x66a>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fda8 	bl	800155c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d902      	bls.n	8002a1e <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	f000 bce8 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a3e:	2202      	movs	r2, #2
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	4bb0      	ldr	r3, [pc, #704]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	6019      	str	r1, [r3, #0]
 8002a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f1a3 	rbit	r1, r3
 8002a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002aa4:	6019      	str	r1, [r3, #0]
  return result;
 8002aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aaa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d09d      	beq.n	8002a08 <HAL_RCC_OscConfig+0x654>
 8002acc:	e08d      	b.n	8002bea <HAL_RCC_OscConfig+0x836>
 8002ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ade:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002af0:	601a      	str	r2, [r3, #0]
  return result;
 8002af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002afa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b8f      	ldr	r3, [pc, #572]	@ (8002d44 <HAL_RCC_OscConfig+0x990>)
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fd24 	bl	800155c <HAL_GetTick>
 8002b14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fd1f 	bl	800155c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f000 bc5f 	b.w	80033ee <HAL_RCC_OscConfig+0x103a>
 8002b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b38:	2202      	movs	r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ba8:	2102      	movs	r1, #2
 8002baa:	6019      	str	r1, [r3, #0]
 8002bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f1a3 	rbit	r1, r3
 8002bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bc2:	6019      	str	r1, [r3, #0]
  return result;
 8002bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d197      	bne.n	8002b1a <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 819c 	beq.w	8002f38 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b4e      	ldr	r3, [pc, #312]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCC_OscConfig+0x994>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11a      	bne.n	8002c82 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <HAL_RCC_OscConfig+0x994>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3d      	ldr	r2, [pc, #244]	@ (8002d48 <HAL_RCC_OscConfig+0x994>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fc80 	bl	800155c <HAL_GetTick>
 8002c5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e009      	b.n	8002c76 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe fc7b 	bl	800155c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e3bb      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCC_OscConfig+0x994>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0ef      	beq.n	8002c62 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x8ec>
 8002c92:	4b2b      	ldr	r3, [pc, #172]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	e035      	b.n	8002d0c <HAL_RCC_OscConfig+0x958>
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x916>
 8002cb0:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e020      	b.n	8002d0c <HAL_RCC_OscConfig+0x958>
 8002cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x940>
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x958>
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a11      	ldr	r2, [pc, #68]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <HAL_RCC_OscConfig+0x98c>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8085 	beq.w	8002e28 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fc1d 	bl	800155c <HAL_GetTick>
 8002d22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	e011      	b.n	8002d4c <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe fc18 	bl	800155c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d907      	bls.n	8002d4c <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e356      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	10908120 	.word	0x10908120
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d74:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d78:	2202      	movs	r2, #2
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d80:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d92:	601a      	str	r2, [r3, #0]
  return result;
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002d9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0xa00>
 8002dae:	4b98      	ldr	r3, [pc, #608]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	e013      	b.n	8002ddc <HAL_RCC_OscConfig+0xa28>
 8002db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002de0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002de4:	2102      	movs	r1, #2
 8002de6:	6011      	str	r1, [r2, #0]
 8002de8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	fa92 f1a2 	rbit	r1, r2
 8002df6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dfa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002dfe:	6011      	str	r1, [r2, #0]
  return result;
 8002e00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e04:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f002 021f 	and.w	r2, r2, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d080      	beq.n	8002d28 <HAL_RCC_OscConfig+0x974>
 8002e26:	e07d      	b.n	8002f24 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe fb98 	bl	800155c <HAL_GetTick>
 8002e2c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fb93 	bl	800155c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e2d1      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 8002e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e52:	2202      	movs	r2, #2
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e68:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e76:	2202      	movs	r2, #2
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e90:	601a      	str	r2, [r3, #0]
  return result;
 8002e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xafe>
 8002eac:	4b58      	ldr	r3, [pc, #352]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	e013      	b.n	8002eda <HAL_RCC_OscConfig+0xb26>
 8002eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ede:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	fa92 f1a2 	rbit	r1, r2
 8002ef4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ef8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002efc:	6011      	str	r1, [r2, #0]
  return result;
 8002efe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002f02:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d186      	bne.n	8002e32 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f24:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8251 	beq.w	80033ec <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	f000 820f 	beq.w	8003376 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	f040 8165 	bne.w	8003234 <HAL_RCC_OscConfig+0xe80>
 8002f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f8e:	601a      	str	r2, [r3, #0]
  return result;
 8002f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fa4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	461a      	mov	r2, r3
 8002fac:	2300      	movs	r3, #0
 8002fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fad4 	bl	800155c <HAL_GetTick>
 8002fb4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	e009      	b.n	8002fce <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe facf 	bl	800155c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e20f      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 8002fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ff2:	601a      	str	r2, [r3, #0]
  return result;
 8002ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ffc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b3f      	cmp	r3, #63	@ 0x3f
 8003006:	d805      	bhi.n	8003014 <HAL_RCC_OscConfig+0xc60>
 8003008:	4b01      	ldr	r3, [pc, #4]	@ (8003010 <HAL_RCC_OscConfig+0xc5c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e02a      	b.n	8003064 <HAL_RCC_OscConfig+0xcb0>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003018:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800301c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003026:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003034:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	4bca      	ldr	r3, [pc, #808]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003068:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800306c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003070:	6011      	str	r1, [r2, #0]
 8003072:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003076:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fa92 f1a2 	rbit	r1, r2
 8003080:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003084:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003088:	6011      	str	r1, [r2, #0]
  return result;
 800308a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800308e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	fab2 f282 	clz	r2, r2
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f002 021f 	and.w	r2, r2, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d184      	bne.n	8002fba <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4bb6      	ldr	r3, [pc, #728]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f023 020f 	bic.w	r2, r3, #15
 80030b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	49b1      	ldr	r1, [pc, #708]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80030ca:	4bb0      	ldr	r3, [pc, #704]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80030d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a19      	ldr	r1, [r3, #32]
 80030de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	430b      	orrs	r3, r1
 80030ec:	49a7      	ldr	r1, [pc, #668]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
 80030f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003112:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003120:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800312c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	461a      	mov	r2, r3
 8003134:	2301      	movs	r3, #1
 8003136:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe fa10 	bl	800155c <HAL_GetTick>
 800313c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003140:	e009      	b.n	8003156 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe fa0b 	bl	800155c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e14b      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 8003156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800315e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003168:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003180:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b3f      	cmp	r3, #63	@ 0x3f
 800318e:	d802      	bhi.n	8003196 <HAL_RCC_OscConfig+0xde2>
 8003190:	4b7e      	ldr	r3, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	e027      	b.n	80031e6 <HAL_RCC_OscConfig+0xe32>
 8003196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800319e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f2a3 	rbit	r2, r3
 80031b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	fa93 f2a3 	rbit	r2, r3
 80031d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031dc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031f2:	6011      	str	r1, [r2, #0]
 80031f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	fa92 f1a2 	rbit	r1, r2
 8003202:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003206:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800320a:	6011      	str	r1, [r2, #0]
  return result;
 800320c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003210:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d087      	beq.n	8003142 <HAL_RCC_OscConfig+0xd8e>
 8003232:	e0db      	b.n	80033ec <HAL_RCC_OscConfig+0x1038>
 8003234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003238:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800323c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003258:	601a      	str	r2, [r3, #0]
  return result;
 800325a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003262:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800326e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe f96f 	bl	800155c <HAL_GetTick>
 800327e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e009      	b.n	8003298 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe f96a 	bl	800155c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0aa      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 8003298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032bc:	601a      	str	r2, [r3, #0]
  return result;
 80032be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80032d0:	d802      	bhi.n	80032d8 <HAL_RCC_OscConfig+0xf24>
 80032d2:	4b2e      	ldr	r3, [pc, #184]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	e027      	b.n	8003328 <HAL_RCC_OscConfig+0xf74>
 80032d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ea:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003302:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003306:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003310:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4b19      	ldr	r3, [pc, #100]	@ (800338c <HAL_RCC_OscConfig+0xfd8>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800332c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003330:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800333a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fa92 f1a2 	rbit	r1, r2
 8003344:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003348:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800334c:	6011      	str	r1, [r2, #0]
  return result;
 800334e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003352:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f002 021f 	and.w	r2, r2, #31
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d187      	bne.n	8003284 <HAL_RCC_OscConfig+0xed0>
 8003374:	e03a      	b.n	80033ec <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d104      	bne.n	8003390 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e031      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_RCC_OscConfig+0x1044>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003398:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <HAL_RCC_OscConfig+0x1044>)
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033a4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80033a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d117      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80033bc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80033d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09e      	sub	sp, #120	@ 0x78
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e154      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b89      	ldr	r3, [pc, #548]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b86      	ldr	r3, [pc, #536]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4984      	ldr	r1, [pc, #528]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b82      	ldr	r3, [pc, #520]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e13c      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b7b      	ldr	r3, [pc, #492]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4978      	ldr	r1, [pc, #480]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80cd 	beq.w	800360a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d137      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xec>
 8003478:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800347c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003490:	d802      	bhi.n	8003498 <HAL_RCC_ClockConfig+0x9c>
 8003492:	4b6b      	ldr	r3, [pc, #428]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e00f      	b.n	80034b8 <HAL_RCC_ClockConfig+0xbc>
 8003498:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800349c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80034a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034b4:	4b62      	ldr	r3, [pc, #392]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d171      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0ea      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d137      	bne.n	8003560 <HAL_RCC_ClockConfig+0x164>
 80034f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b3f      	cmp	r3, #63	@ 0x3f
 8003508:	d802      	bhi.n	8003510 <HAL_RCC_ClockConfig+0x114>
 800350a:	4b4d      	ldr	r3, [pc, #308]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e00f      	b.n	8003530 <HAL_RCC_ClockConfig+0x134>
 8003510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003514:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	647b      	str	r3, [r7, #68]	@ 0x44
 800351e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40
 8003524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352c:	4b44      	ldr	r3, [pc, #272]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003534:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003538:	fa92 f2a2 	rbit	r2, r2
 800353c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800353e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f042 0220 	orr.w	r2, r2, #32
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d135      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0ae      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
 8003560:	2302      	movs	r3, #2
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800356c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b3f      	cmp	r3, #63	@ 0x3f
 8003576:	d802      	bhi.n	800357e <HAL_RCC_ClockConfig+0x182>
 8003578:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	e00d      	b.n	800359a <HAL_RCC_ClockConfig+0x19e>
 800357e:	2302      	movs	r3, #2
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003584:	fa93 f3a3 	rbit	r3, r3
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
 800358a:	2302      	movs	r3, #2
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	2202      	movs	r2, #2
 800359c:	61ba      	str	r2, [r7, #24]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	617a      	str	r2, [r7, #20]
  return result;
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f002 021f 	and.w	r2, r2, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f202 	lsl.w	r2, r1, r2
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e07a      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 0203 	bic.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	491a      	ldr	r1, [pc, #104]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035da:	f7fd ffbf 	bl	800155c <HAL_GetTick>
 80035de:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7fd ffbb 	bl	800155c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e062      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 020c 	and.w	r2, r3, #12
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	429a      	cmp	r2, r3
 8003608:	d1eb      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360a:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d215      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 0207 	bic.w	r2, r3, #7
 8003620:	4906      	ldr	r1, [pc, #24]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003628:	4b04      	ldr	r3, [pc, #16]	@ (800363c <HAL_RCC_ClockConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d006      	beq.n	8003644 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_RCC_ClockConfig+0x2c2>
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_RCC_ClockConfig+0x2cc>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	491a      	ldr	r1, [pc, #104]	@ (80036c8 <HAL_RCC_ClockConfig+0x2cc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_RCC_ClockConfig+0x2cc>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4912      	ldr	r1, [pc, #72]	@ (80036c8 <HAL_RCC_ClockConfig+0x2cc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003682:	f000 f829 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003686:	4601      	mov	r1, r0
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <HAL_RCC_ClockConfig+0x2cc>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003690:	22f0      	movs	r2, #240	@ 0xf0
 8003692:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	fa92 f2a2 	rbit	r2, r2
 800369a:	60fa      	str	r2, [r7, #12]
  return result;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	40d3      	lsrs	r3, r2
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x2d0>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
 80036aa:	fa21 f303 	lsr.w	r3, r1, r3
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_RCC_ClockConfig+0x2d4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036b2:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_RCC_ClockConfig+0x2d8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd ff0c 	bl	80014d4 <HAL_InitTick>
  
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3778      	adds	r7, #120	@ 0x78
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08009a1c 	.word	0x08009a1c
 80036d0:	20000000 	.word	0x20000000
 80036d4:	20000004 	.word	0x20000004

080036d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x30>
 8003702:	2b08      	cmp	r3, #8
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x36>
 8003706:	e029      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003708:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 800370a:	613b      	str	r3, [r7, #16]
      break;
 800370c:	e029      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0c9b      	lsrs	r3, r3, #18
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	4a15      	ldr	r2, [pc, #84]	@ (800377c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003726:	5cd3      	ldrb	r3, [r2, r3]
 8003728:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003734:	4a0f      	ldr	r2, [pc, #60]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e007      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003746:	4a0b      	ldr	r2, [pc, #44]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	fbb2 f2f3 	udiv	r2, r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	613b      	str	r3, [r7, #16]
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 800375e:	613b      	str	r3, [r7, #16]
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	693b      	ldr	r3, [r7, #16]
}
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08009a34 	.word	0x08009a34
 800377c:	08009a44 	.word	0x08009a44

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800379e:	f7ff ffef 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a2:	4601      	mov	r1, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	fa92 f2a2 	rbit	r2, r2
 80037b8:	603a      	str	r2, [r7, #0]
  return result;
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	fab2 f282 	clz	r2, r2
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	40d3      	lsrs	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08009a2c 	.word	0x08009a2c

080037dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037e2:	f7ff ffcd 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80037f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80037f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	603a      	str	r2, [r7, #0]
  return result;
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	fab2 f282 	clz	r2, r2
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	40d3      	lsrs	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x40>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08009a2c 	.word	0x08009a2c

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b092      	sub	sp, #72	@ 0x48
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80d2 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003844:	4b4d      	ldr	r3, [pc, #308]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10e      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4a49      	ldr	r2, [pc, #292]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385a:	61d3      	str	r3, [r2, #28]
 800385c:	4b47      	ldr	r3, [pc, #284]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b44      	ldr	r3, [pc, #272]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a40      	ldr	r2, [pc, #256]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fd fe69 	bl	800155c <HAL_GetTick>
 800388a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fd fe65 	bl	800155c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	@ 0x64
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e1d4      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b37      	ldr	r3, [pc, #220]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ac:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8082 	beq.w	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d07a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	4b1c      	ldr	r3, [pc, #112]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	461a      	mov	r2, r3
 800391a:	2300      	movs	r3, #0
 800391c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800391e:	4a17      	ldr	r2, [pc, #92]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003922:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d049      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7fd fe15 	bl	800155c <HAL_GetTick>
 8003932:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fd fe11 	bl	800155c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003944:	4293      	cmp	r3, r2
 8003946:	d901      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e17e      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800394c:	2302      	movs	r3, #2
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	61fb      	str	r3, [r7, #28]
  return result;
 8003964:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003976:	4b01      	ldr	r3, [pc, #4]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	e00d      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
 8003984:	10908100 	.word	0x10908100
 8003988:	2302      	movs	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	4b9a      	ldr	r3, [pc, #616]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	2202      	movs	r2, #2
 800399a:	613a      	str	r2, [r7, #16]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	fa92 f2a2 	rbit	r2, r2
 80039a2:	60fa      	str	r2, [r7, #12]
  return result;
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f002 021f 	and.w	r2, r2, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0b9      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	498c      	ldr	r1, [pc, #560]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b88      	ldr	r3, [pc, #544]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4a87      	ldr	r2, [pc, #540]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f4:	4b82      	ldr	r3, [pc, #520]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	f023 0203 	bic.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	497f      	ldr	r1, [pc, #508]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a12:	4b7b      	ldr	r3, [pc, #492]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4978      	ldr	r1, [pc, #480]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a30:	4b73      	ldr	r3, [pc, #460]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4970      	ldr	r1, [pc, #448]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4969      	ldr	r1, [pc, #420]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a6c:	4b64      	ldr	r3, [pc, #400]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	4961      	ldr	r1, [pc, #388]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f023 0220 	bic.w	r2, r3, #32
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	495a      	ldr	r1, [pc, #360]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aa8:	4b55      	ldr	r3, [pc, #340]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	4952      	ldr	r1, [pc, #328]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	494b      	ldr	r1, [pc, #300]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ae4:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4943      	ldr	r1, [pc, #268]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b02:	4b3f      	ldr	r3, [pc, #252]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	493c      	ldr	r1, [pc, #240]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b20:	4b37      	ldr	r3, [pc, #220]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	4934      	ldr	r1, [pc, #208]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b3e:	4b30      	ldr	r3, [pc, #192]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	492d      	ldr	r1, [pc, #180]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b5c:	4b28      	ldr	r3, [pc, #160]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b68:	4925      	ldr	r1, [pc, #148]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b7a:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	491e      	ldr	r1, [pc, #120]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	4916      	ldr	r1, [pc, #88]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003bb6:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	4907      	ldr	r1, [pc, #28]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bf2:	4b03      	ldr	r3, [pc, #12]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c06:	4913      	ldr	r1, [pc, #76]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c24:	490b      	ldr	r1, [pc, #44]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c36:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	4904      	ldr	r1, [pc, #16]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3748      	adds	r7, #72	@ 0x48
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000

08003c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e040      	b.n	8003cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fa8e 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fb4e 	bl	8004340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f977 	bl	8003f98 <UART_SetConfig>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e01b      	b.n	8003cec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fbcd 	bl	8004484 <UART_CheckIdleState>
 8003cea:	4603      	mov	r3, r0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d177      	bne.n	8003dfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Transmit+0x24>
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e070      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2221      	movs	r2, #33	@ 0x21
 8003d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fc17 	bl	800155c <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x68>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d64:	e02f      	b.n	8003dc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fc2f 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e03b      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	3302      	adds	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e007      	b.n	8003db4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1c9      	bne.n	8003d66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	@ 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fbf9 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e005      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b08a      	sub	sp, #40	@ 0x28
 8003e0a:	af02      	add	r7, sp, #8
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	f040 80b6 	bne.w	8003f8e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_UART_Receive+0x28>
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0ae      	b.n	8003f90 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2222      	movs	r2, #34	@ 0x22
 8003e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e48:	f7fd fb88 	bl	800155c <HAL_GetTick>
 8003e4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	88fa      	ldrh	r2, [r7, #6]
 8003e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	d10e      	bne.n	8003e86 <HAL_UART_Receive+0x80>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_UART_Receive+0x76>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e7a:	e02d      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	@ 0xff
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e84:	e028      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <HAL_UART_Receive+0xa4>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_UART_Receive+0x9a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	@ 0xff
 8003e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e9e:	e01b      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	227f      	movs	r2, #127	@ 0x7f
 8003ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ea8:	e016      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_UART_Receive+0xca>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <HAL_UART_Receive+0xc0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	227f      	movs	r2, #127	@ 0x7f
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ec4:	e008      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	223f      	movs	r2, #63	@ 0x3f
 8003eca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Receive+0xd2>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ede:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Receive+0xf6>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f04:	e037      	b.n	8003f76 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2120      	movs	r1, #32
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb5f 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e033      	b.n	8003f90 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	8a7b      	ldrh	r3, [r7, #18]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	3302      	adds	r3, #2
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e00d      	b.n	8003f64 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8a7b      	ldrh	r3, [r7, #18]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4013      	ands	r3, r2
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1c1      	bne.n	8003f06 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b92      	ldr	r3, [pc, #584]	@ (800420c <UART_SetConfig+0x274>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a80      	ldr	r2, [pc, #512]	@ (8004210 <UART_SetConfig+0x278>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d120      	bne.n	8004056 <UART_SetConfig+0xbe>
 8004014:	4b7f      	ldr	r3, [pc, #508]	@ (8004214 <UART_SetConfig+0x27c>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d817      	bhi.n	8004050 <UART_SetConfig+0xb8>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <UART_SetConfig+0x90>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004045 	.word	0x08004045
 8004030:	0800404b 	.word	0x0800404b
 8004034:	0800403f 	.word	0x0800403f
 8004038:	2301      	movs	r3, #1
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e0b5      	b.n	80041aa <UART_SetConfig+0x212>
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e0b2      	b.n	80041aa <UART_SetConfig+0x212>
 8004044:	2304      	movs	r3, #4
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e0af      	b.n	80041aa <UART_SetConfig+0x212>
 800404a:	2308      	movs	r3, #8
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e0ac      	b.n	80041aa <UART_SetConfig+0x212>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e0a9      	b.n	80041aa <UART_SetConfig+0x212>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6f      	ldr	r2, [pc, #444]	@ (8004218 <UART_SetConfig+0x280>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d124      	bne.n	80040aa <UART_SetConfig+0x112>
 8004060:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <UART_SetConfig+0x27c>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800406c:	d011      	beq.n	8004092 <UART_SetConfig+0xfa>
 800406e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004072:	d817      	bhi.n	80040a4 <UART_SetConfig+0x10c>
 8004074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004078:	d011      	beq.n	800409e <UART_SetConfig+0x106>
 800407a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800407e:	d811      	bhi.n	80040a4 <UART_SetConfig+0x10c>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <UART_SetConfig+0xf4>
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004088:	d006      	beq.n	8004098 <UART_SetConfig+0x100>
 800408a:	e00b      	b.n	80040a4 <UART_SetConfig+0x10c>
 800408c:	2300      	movs	r3, #0
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e08b      	b.n	80041aa <UART_SetConfig+0x212>
 8004092:	2302      	movs	r3, #2
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e088      	b.n	80041aa <UART_SetConfig+0x212>
 8004098:	2304      	movs	r3, #4
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e085      	b.n	80041aa <UART_SetConfig+0x212>
 800409e:	2308      	movs	r3, #8
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e082      	b.n	80041aa <UART_SetConfig+0x212>
 80040a4:	2310      	movs	r3, #16
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e07f      	b.n	80041aa <UART_SetConfig+0x212>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5b      	ldr	r2, [pc, #364]	@ (800421c <UART_SetConfig+0x284>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d124      	bne.n	80040fe <UART_SetConfig+0x166>
 80040b4:	4b57      	ldr	r3, [pc, #348]	@ (8004214 <UART_SetConfig+0x27c>)
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80040bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040c0:	d011      	beq.n	80040e6 <UART_SetConfig+0x14e>
 80040c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040c6:	d817      	bhi.n	80040f8 <UART_SetConfig+0x160>
 80040c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040cc:	d011      	beq.n	80040f2 <UART_SetConfig+0x15a>
 80040ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040d2:	d811      	bhi.n	80040f8 <UART_SetConfig+0x160>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <UART_SetConfig+0x148>
 80040d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040dc:	d006      	beq.n	80040ec <UART_SetConfig+0x154>
 80040de:	e00b      	b.n	80040f8 <UART_SetConfig+0x160>
 80040e0:	2300      	movs	r3, #0
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e061      	b.n	80041aa <UART_SetConfig+0x212>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e05e      	b.n	80041aa <UART_SetConfig+0x212>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e05b      	b.n	80041aa <UART_SetConfig+0x212>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e058      	b.n	80041aa <UART_SetConfig+0x212>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e055      	b.n	80041aa <UART_SetConfig+0x212>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a47      	ldr	r2, [pc, #284]	@ (8004220 <UART_SetConfig+0x288>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d124      	bne.n	8004152 <UART_SetConfig+0x1ba>
 8004108:	4b42      	ldr	r3, [pc, #264]	@ (8004214 <UART_SetConfig+0x27c>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004114:	d011      	beq.n	800413a <UART_SetConfig+0x1a2>
 8004116:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800411a:	d817      	bhi.n	800414c <UART_SetConfig+0x1b4>
 800411c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004120:	d011      	beq.n	8004146 <UART_SetConfig+0x1ae>
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004126:	d811      	bhi.n	800414c <UART_SetConfig+0x1b4>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <UART_SetConfig+0x19c>
 800412c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x1a8>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x1b4>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e037      	b.n	80041aa <UART_SetConfig+0x212>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e034      	b.n	80041aa <UART_SetConfig+0x212>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e031      	b.n	80041aa <UART_SetConfig+0x212>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e02e      	b.n	80041aa <UART_SetConfig+0x212>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e02b      	b.n	80041aa <UART_SetConfig+0x212>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <UART_SetConfig+0x28c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d124      	bne.n	80041a6 <UART_SetConfig+0x20e>
 800415c:	4b2d      	ldr	r3, [pc, #180]	@ (8004214 <UART_SetConfig+0x27c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004164:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004168:	d011      	beq.n	800418e <UART_SetConfig+0x1f6>
 800416a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800416e:	d817      	bhi.n	80041a0 <UART_SetConfig+0x208>
 8004170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004174:	d011      	beq.n	800419a <UART_SetConfig+0x202>
 8004176:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800417a:	d811      	bhi.n	80041a0 <UART_SetConfig+0x208>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <UART_SetConfig+0x1f0>
 8004180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004184:	d006      	beq.n	8004194 <UART_SetConfig+0x1fc>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x208>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e00d      	b.n	80041aa <UART_SetConfig+0x212>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e00a      	b.n	80041aa <UART_SetConfig+0x212>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e007      	b.n	80041aa <UART_SetConfig+0x212>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e004      	b.n	80041aa <UART_SetConfig+0x212>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e001      	b.n	80041aa <UART_SetConfig+0x212>
 80041a6:	2310      	movs	r3, #16
 80041a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b2:	d16b      	bne.n	800428c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d838      	bhi.n	800422c <UART_SetConfig+0x294>
 80041ba:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <UART_SetConfig+0x228>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	080041ed 	.word	0x080041ed
 80041c8:	080041f5 	.word	0x080041f5
 80041cc:	0800422d 	.word	0x0800422d
 80041d0:	080041fb 	.word	0x080041fb
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7ff fad8 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80041e8:	61b8      	str	r0, [r7, #24]
        break;
 80041ea:	e024      	b.n	8004236 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7ff faf6 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 80041f0:	61b8      	str	r0, [r7, #24]
        break;
 80041f2:	e020      	b.n	8004236 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <UART_SetConfig+0x290>)
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e01d      	b.n	8004236 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7ff fa6d 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80041fe:	61b8      	str	r0, [r7, #24]
        break;
 8004200:	e019      	b.n	8004236 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004206:	61bb      	str	r3, [r7, #24]
        break;
 8004208:	e015      	b.n	8004236 <UART_SetConfig+0x29e>
 800420a:	bf00      	nop
 800420c:	efff69f3 	.word	0xefff69f3
 8004210:	40013800 	.word	0x40013800
 8004214:	40021000 	.word	0x40021000
 8004218:	40004400 	.word	0x40004400
 800421c:	40004800 	.word	0x40004800
 8004220:	40004c00 	.word	0x40004c00
 8004224:	40005000 	.word	0x40005000
 8004228:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	77bb      	strb	r3, [r7, #30]
        break;
 8004234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d073      	beq.n	8004324 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	005a      	lsls	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	441a      	add	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d916      	bls.n	8004286 <UART_SetConfig+0x2ee>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425e:	d212      	bcs.n	8004286 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f023 030f 	bic.w	r3, r3, #15
 8004268:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	b29a      	uxth	r2, r3
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	4313      	orrs	r3, r2
 800427a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	89fa      	ldrh	r2, [r7, #14]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e04e      	b.n	8004324 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	77bb      	strb	r3, [r7, #30]
 800428a:	e04b      	b.n	8004324 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800428c:	7ffb      	ldrb	r3, [r7, #31]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d827      	bhi.n	80042e2 <UART_SetConfig+0x34a>
 8004292:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <UART_SetConfig+0x300>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080042e3 	.word	0x080042e3
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042e3 	.word	0x080042e3
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042bc:	f7ff fa6c 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80042c0:	61b8      	str	r0, [r7, #24]
        break;
 80042c2:	e013      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c4:	f7ff fa8a 	bl	80037dc <HAL_RCC_GetPCLK2Freq>
 80042c8:	61b8      	str	r0, [r7, #24]
        break;
 80042ca:	e00f      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <UART_SetConfig+0x3a4>)
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e00c      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7ff fa01 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 80042d6:	61b8      	str	r0, [r7, #24]
        break;
 80042d8:	e008      	b.n	80042ec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042de:	61bb      	str	r3, [r7, #24]
        break;
 80042e0:	e004      	b.n	80042ec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ea:	bf00      	nop
    }

    if (pclk != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	085a      	lsrs	r2, r3, #1
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d909      	bls.n	8004320 <UART_SetConfig+0x388>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004312:	d205      	bcs.n	8004320 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e001      	b.n	8004324 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004330:	7fbb      	ldrb	r3, [r7, #30]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	007a1200 	.word	0x007a1200

08004340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443e:	d10a      	bne.n	8004456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b098      	sub	sp, #96	@ 0x60
 8004488:	af02      	add	r7, sp, #8
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004494:	f7fd f862 	bl	800155c <HAL_GetTick>
 8004498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d12e      	bne.n	8004506 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b0:	2200      	movs	r2, #0
 80044b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f88c 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d021      	beq.n	8004506 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e6      	bne.n	80044c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e062      	b.n	80045cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d149      	bne.n	80045a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f856 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03c      	beq.n	80045a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	623b      	str	r3, [r7, #32]
   return(result);
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30
 800454e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e6      	bne.n	800452e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3308      	adds	r3, #8
 800457e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004580:	61fa      	str	r2, [r7, #28]
 8004582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	69b9      	ldr	r1, [r7, #24]
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	617b      	str	r3, [r7, #20]
   return(result);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e011      	b.n	80045cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3758      	adds	r7, #88	@ 0x58
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e4:	e04f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ec:	d04b      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fc ffb5 	bl	800155c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e04e      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d037      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d034      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d031      	beq.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d110      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2208      	movs	r2, #8
 8004636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f838 	bl	80046ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2208      	movs	r2, #8
 8004642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e029      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004660:	d111      	bne.n	8004686 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800466a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f81e 	bl	80046ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e00f      	b.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d0a0      	beq.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b095      	sub	sp, #84	@ 0x54
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e6      	bne.n	80046b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004708:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004720:	2b01      	cmp	r3, #1
 8004722:	d118      	bne.n	8004756 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	60bb      	str	r3, [r7, #8]
   return(result);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800476a:	bf00      	nop
 800476c:	3754      	adds	r7, #84	@ 0x54
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <__cvt>:
 8004776:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800477a:	ec57 6b10 	vmov	r6, r7, d0
 800477e:	2f00      	cmp	r7, #0
 8004780:	460c      	mov	r4, r1
 8004782:	4619      	mov	r1, r3
 8004784:	463b      	mov	r3, r7
 8004786:	bfbb      	ittet	lt
 8004788:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800478c:	461f      	movlt	r7, r3
 800478e:	2300      	movge	r3, #0
 8004790:	232d      	movlt	r3, #45	@ 0x2d
 8004792:	700b      	strb	r3, [r1, #0]
 8004794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004796:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800479a:	4691      	mov	r9, r2
 800479c:	f023 0820 	bic.w	r8, r3, #32
 80047a0:	bfbc      	itt	lt
 80047a2:	4632      	movlt	r2, r6
 80047a4:	4616      	movlt	r6, r2
 80047a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047aa:	d005      	beq.n	80047b8 <__cvt+0x42>
 80047ac:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047b0:	d100      	bne.n	80047b4 <__cvt+0x3e>
 80047b2:	3401      	adds	r4, #1
 80047b4:	2102      	movs	r1, #2
 80047b6:	e000      	b.n	80047ba <__cvt+0x44>
 80047b8:	2103      	movs	r1, #3
 80047ba:	ab03      	add	r3, sp, #12
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	ab02      	add	r3, sp, #8
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	ec47 6b10 	vmov	d0, r6, r7
 80047c6:	4653      	mov	r3, sl
 80047c8:	4622      	mov	r2, r4
 80047ca:	f001 f945 	bl	8005a58 <_dtoa_r>
 80047ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047d2:	4605      	mov	r5, r0
 80047d4:	d119      	bne.n	800480a <__cvt+0x94>
 80047d6:	f019 0f01 	tst.w	r9, #1
 80047da:	d00e      	beq.n	80047fa <__cvt+0x84>
 80047dc:	eb00 0904 	add.w	r9, r0, r4
 80047e0:	2200      	movs	r2, #0
 80047e2:	2300      	movs	r3, #0
 80047e4:	4630      	mov	r0, r6
 80047e6:	4639      	mov	r1, r7
 80047e8:	f7fc f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80047ec:	b108      	cbz	r0, 80047f2 <__cvt+0x7c>
 80047ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80047f2:	2230      	movs	r2, #48	@ 0x30
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	454b      	cmp	r3, r9
 80047f8:	d31e      	bcc.n	8004838 <__cvt+0xc2>
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047fe:	1b5b      	subs	r3, r3, r5
 8004800:	4628      	mov	r0, r5
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	b004      	add	sp, #16
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800480e:	eb00 0904 	add.w	r9, r0, r4
 8004812:	d1e5      	bne.n	80047e0 <__cvt+0x6a>
 8004814:	7803      	ldrb	r3, [r0, #0]
 8004816:	2b30      	cmp	r3, #48	@ 0x30
 8004818:	d10a      	bne.n	8004830 <__cvt+0xba>
 800481a:	2200      	movs	r2, #0
 800481c:	2300      	movs	r3, #0
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fc f959 	bl	8000ad8 <__aeabi_dcmpeq>
 8004826:	b918      	cbnz	r0, 8004830 <__cvt+0xba>
 8004828:	f1c4 0401 	rsb	r4, r4, #1
 800482c:	f8ca 4000 	str.w	r4, [sl]
 8004830:	f8da 3000 	ldr.w	r3, [sl]
 8004834:	4499      	add	r9, r3
 8004836:	e7d3      	b.n	80047e0 <__cvt+0x6a>
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	9103      	str	r1, [sp, #12]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e7d9      	b.n	80047f4 <__cvt+0x7e>

08004840 <__exponent>:
 8004840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004842:	2900      	cmp	r1, #0
 8004844:	bfba      	itte	lt
 8004846:	4249      	neglt	r1, r1
 8004848:	232d      	movlt	r3, #45	@ 0x2d
 800484a:	232b      	movge	r3, #43	@ 0x2b
 800484c:	2909      	cmp	r1, #9
 800484e:	7002      	strb	r2, [r0, #0]
 8004850:	7043      	strb	r3, [r0, #1]
 8004852:	dd29      	ble.n	80048a8 <__exponent+0x68>
 8004854:	f10d 0307 	add.w	r3, sp, #7
 8004858:	461d      	mov	r5, r3
 800485a:	270a      	movs	r7, #10
 800485c:	461a      	mov	r2, r3
 800485e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004862:	fb07 1416 	mls	r4, r7, r6, r1
 8004866:	3430      	adds	r4, #48	@ 0x30
 8004868:	f802 4c01 	strb.w	r4, [r2, #-1]
 800486c:	460c      	mov	r4, r1
 800486e:	2c63      	cmp	r4, #99	@ 0x63
 8004870:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004874:	4631      	mov	r1, r6
 8004876:	dcf1      	bgt.n	800485c <__exponent+0x1c>
 8004878:	3130      	adds	r1, #48	@ 0x30
 800487a:	1e94      	subs	r4, r2, #2
 800487c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004880:	1c41      	adds	r1, r0, #1
 8004882:	4623      	mov	r3, r4
 8004884:	42ab      	cmp	r3, r5
 8004886:	d30a      	bcc.n	800489e <__exponent+0x5e>
 8004888:	f10d 0309 	add.w	r3, sp, #9
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	42ac      	cmp	r4, r5
 8004890:	bf88      	it	hi
 8004892:	2300      	movhi	r3, #0
 8004894:	3302      	adds	r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	1a18      	subs	r0, r3, r0
 800489a:	b003      	add	sp, #12
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048a6:	e7ed      	b.n	8004884 <__exponent+0x44>
 80048a8:	2330      	movs	r3, #48	@ 0x30
 80048aa:	3130      	adds	r1, #48	@ 0x30
 80048ac:	7083      	strb	r3, [r0, #2]
 80048ae:	70c1      	strb	r1, [r0, #3]
 80048b0:	1d03      	adds	r3, r0, #4
 80048b2:	e7f1      	b.n	8004898 <__exponent+0x58>

080048b4 <_printf_float>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	b08d      	sub	sp, #52	@ 0x34
 80048ba:	460c      	mov	r4, r1
 80048bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048c0:	4616      	mov	r6, r2
 80048c2:	461f      	mov	r7, r3
 80048c4:	4605      	mov	r5, r0
 80048c6:	f000 ffc1 	bl	800584c <_localeconv_r>
 80048ca:	6803      	ldr	r3, [r0, #0]
 80048cc:	9304      	str	r3, [sp, #16]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fcd6 	bl	8000280 <strlen>
 80048d4:	2300      	movs	r3, #0
 80048d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048d8:	f8d8 3000 	ldr.w	r3, [r8]
 80048dc:	9005      	str	r0, [sp, #20]
 80048de:	3307      	adds	r3, #7
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	f103 0208 	add.w	r2, r3, #8
 80048e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048ec:	f8d4 b000 	ldr.w	fp, [r4]
 80048f0:	f8c8 2000 	str.w	r2, [r8]
 80048f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048fc:	9307      	str	r3, [sp, #28]
 80048fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8004902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800490a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b7c <_printf_float+0x2c8>)
 800490c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004910:	f7fc f914 	bl	8000b3c <__aeabi_dcmpun>
 8004914:	bb70      	cbnz	r0, 8004974 <_printf_float+0xc0>
 8004916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800491a:	4b98      	ldr	r3, [pc, #608]	@ (8004b7c <_printf_float+0x2c8>)
 800491c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004920:	f7fc f8ee 	bl	8000b00 <__aeabi_dcmple>
 8004924:	bb30      	cbnz	r0, 8004974 <_printf_float+0xc0>
 8004926:	2200      	movs	r2, #0
 8004928:	2300      	movs	r3, #0
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fc f8dd 	bl	8000aec <__aeabi_dcmplt>
 8004932:	b110      	cbz	r0, 800493a <_printf_float+0x86>
 8004934:	232d      	movs	r3, #45	@ 0x2d
 8004936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800493a:	4a91      	ldr	r2, [pc, #580]	@ (8004b80 <_printf_float+0x2cc>)
 800493c:	4b91      	ldr	r3, [pc, #580]	@ (8004b84 <_printf_float+0x2d0>)
 800493e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004942:	bf8c      	ite	hi
 8004944:	4690      	movhi	r8, r2
 8004946:	4698      	movls	r8, r3
 8004948:	2303      	movs	r3, #3
 800494a:	6123      	str	r3, [r4, #16]
 800494c:	f02b 0304 	bic.w	r3, fp, #4
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	f04f 0900 	mov.w	r9, #0
 8004956:	9700      	str	r7, [sp, #0]
 8004958:	4633      	mov	r3, r6
 800495a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800495c:	4621      	mov	r1, r4
 800495e:	4628      	mov	r0, r5
 8004960:	f000 f9d2 	bl	8004d08 <_printf_common>
 8004964:	3001      	adds	r0, #1
 8004966:	f040 808d 	bne.w	8004a84 <_printf_float+0x1d0>
 800496a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800496e:	b00d      	add	sp, #52	@ 0x34
 8004970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	4640      	mov	r0, r8
 800497a:	4649      	mov	r1, r9
 800497c:	f7fc f8de 	bl	8000b3c <__aeabi_dcmpun>
 8004980:	b140      	cbz	r0, 8004994 <_printf_float+0xe0>
 8004982:	464b      	mov	r3, r9
 8004984:	2b00      	cmp	r3, #0
 8004986:	bfbc      	itt	lt
 8004988:	232d      	movlt	r3, #45	@ 0x2d
 800498a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800498e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b88 <_printf_float+0x2d4>)
 8004990:	4b7e      	ldr	r3, [pc, #504]	@ (8004b8c <_printf_float+0x2d8>)
 8004992:	e7d4      	b.n	800493e <_printf_float+0x8a>
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800499a:	9206      	str	r2, [sp, #24]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	d13b      	bne.n	8004a18 <_printf_float+0x164>
 80049a0:	2306      	movs	r3, #6
 80049a2:	6063      	str	r3, [r4, #4]
 80049a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049a8:	2300      	movs	r3, #0
 80049aa:	6022      	str	r2, [r4, #0]
 80049ac:	9303      	str	r3, [sp, #12]
 80049ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80049b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049b4:	ab09      	add	r3, sp, #36	@ 0x24
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6861      	ldr	r1, [r4, #4]
 80049ba:	ec49 8b10 	vmov	d0, r8, r9
 80049be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049c2:	4628      	mov	r0, r5
 80049c4:	f7ff fed7 	bl	8004776 <__cvt>
 80049c8:	9b06      	ldr	r3, [sp, #24]
 80049ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049cc:	2b47      	cmp	r3, #71	@ 0x47
 80049ce:	4680      	mov	r8, r0
 80049d0:	d129      	bne.n	8004a26 <_printf_float+0x172>
 80049d2:	1cc8      	adds	r0, r1, #3
 80049d4:	db02      	blt.n	80049dc <_printf_float+0x128>
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	4299      	cmp	r1, r3
 80049da:	dd41      	ble.n	8004a60 <_printf_float+0x1ac>
 80049dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80049e0:	fa5f fa8a 	uxtb.w	sl, sl
 80049e4:	3901      	subs	r1, #1
 80049e6:	4652      	mov	r2, sl
 80049e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80049ee:	f7ff ff27 	bl	8004840 <__exponent>
 80049f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049f4:	1813      	adds	r3, r2, r0
 80049f6:	2a01      	cmp	r2, #1
 80049f8:	4681      	mov	r9, r0
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	dc02      	bgt.n	8004a04 <_printf_float+0x150>
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	07d2      	lsls	r2, r2, #31
 8004a02:	d501      	bpl.n	8004a08 <_printf_float+0x154>
 8004a04:	3301      	adds	r3, #1
 8004a06:	6123      	str	r3, [r4, #16]
 8004a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0a2      	beq.n	8004956 <_printf_float+0xa2>
 8004a10:	232d      	movs	r3, #45	@ 0x2d
 8004a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a16:	e79e      	b.n	8004956 <_printf_float+0xa2>
 8004a18:	9a06      	ldr	r2, [sp, #24]
 8004a1a:	2a47      	cmp	r2, #71	@ 0x47
 8004a1c:	d1c2      	bne.n	80049a4 <_printf_float+0xf0>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1c0      	bne.n	80049a4 <_printf_float+0xf0>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e7bd      	b.n	80049a2 <_printf_float+0xee>
 8004a26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a2a:	d9db      	bls.n	80049e4 <_printf_float+0x130>
 8004a2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a30:	d118      	bne.n	8004a64 <_printf_float+0x1b0>
 8004a32:	2900      	cmp	r1, #0
 8004a34:	6863      	ldr	r3, [r4, #4]
 8004a36:	dd0b      	ble.n	8004a50 <_printf_float+0x19c>
 8004a38:	6121      	str	r1, [r4, #16]
 8004a3a:	b913      	cbnz	r3, 8004a42 <_printf_float+0x18e>
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	07d0      	lsls	r0, r2, #31
 8004a40:	d502      	bpl.n	8004a48 <_printf_float+0x194>
 8004a42:	3301      	adds	r3, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	e7db      	b.n	8004a08 <_printf_float+0x154>
 8004a50:	b913      	cbnz	r3, 8004a58 <_printf_float+0x1a4>
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	07d2      	lsls	r2, r2, #31
 8004a56:	d501      	bpl.n	8004a5c <_printf_float+0x1a8>
 8004a58:	3302      	adds	r3, #2
 8004a5a:	e7f4      	b.n	8004a46 <_printf_float+0x192>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e7f2      	b.n	8004a46 <_printf_float+0x192>
 8004a60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a66:	4299      	cmp	r1, r3
 8004a68:	db05      	blt.n	8004a76 <_printf_float+0x1c2>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6121      	str	r1, [r4, #16]
 8004a6e:	07d8      	lsls	r0, r3, #31
 8004a70:	d5ea      	bpl.n	8004a48 <_printf_float+0x194>
 8004a72:	1c4b      	adds	r3, r1, #1
 8004a74:	e7e7      	b.n	8004a46 <_printf_float+0x192>
 8004a76:	2900      	cmp	r1, #0
 8004a78:	bfd4      	ite	le
 8004a7a:	f1c1 0202 	rsble	r2, r1, #2
 8004a7e:	2201      	movgt	r2, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	e7e0      	b.n	8004a46 <_printf_float+0x192>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	055a      	lsls	r2, r3, #21
 8004a88:	d407      	bmi.n	8004a9a <_printf_float+0x1e6>
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b8      	blx	r7
 8004a94:	3001      	adds	r0, #1
 8004a96:	d12b      	bne.n	8004af0 <_printf_float+0x23c>
 8004a98:	e767      	b.n	800496a <_printf_float+0xb6>
 8004a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a9e:	f240 80dd 	bls.w	8004c5c <_printf_float+0x3a8>
 8004aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f7fc f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d033      	beq.n	8004b1a <_printf_float+0x266>
 8004ab2:	4a37      	ldr	r2, [pc, #220]	@ (8004b90 <_printf_float+0x2dc>)
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b8      	blx	r7
 8004abc:	3001      	adds	r0, #1
 8004abe:	f43f af54 	beq.w	800496a <_printf_float+0xb6>
 8004ac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004ac6:	4543      	cmp	r3, r8
 8004ac8:	db02      	blt.n	8004ad0 <_printf_float+0x21c>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	07d8      	lsls	r0, r3, #31
 8004ace:	d50f      	bpl.n	8004af0 <_printf_float+0x23c>
 8004ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f af45 	beq.w	800496a <_printf_float+0xb6>
 8004ae0:	f04f 0900 	mov.w	r9, #0
 8004ae4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004ae8:	f104 0a1a 	add.w	sl, r4, #26
 8004aec:	45c8      	cmp	r8, r9
 8004aee:	dc09      	bgt.n	8004b04 <_printf_float+0x250>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	079b      	lsls	r3, r3, #30
 8004af4:	f100 8103 	bmi.w	8004cfe <_printf_float+0x44a>
 8004af8:	68e0      	ldr	r0, [r4, #12]
 8004afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004afc:	4298      	cmp	r0, r3
 8004afe:	bfb8      	it	lt
 8004b00:	4618      	movlt	r0, r3
 8004b02:	e734      	b.n	800496e <_printf_float+0xba>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4652      	mov	r2, sl
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af2b 	beq.w	800496a <_printf_float+0xb6>
 8004b14:	f109 0901 	add.w	r9, r9, #1
 8004b18:	e7e8      	b.n	8004aec <_printf_float+0x238>
 8004b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dc39      	bgt.n	8004b94 <_printf_float+0x2e0>
 8004b20:	4a1b      	ldr	r2, [pc, #108]	@ (8004b90 <_printf_float+0x2dc>)
 8004b22:	2301      	movs	r3, #1
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f af1d 	beq.w	800496a <_printf_float+0xb6>
 8004b30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b34:	ea59 0303 	orrs.w	r3, r9, r3
 8004b38:	d102      	bne.n	8004b40 <_printf_float+0x28c>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	07d9      	lsls	r1, r3, #31
 8004b3e:	d5d7      	bpl.n	8004af0 <_printf_float+0x23c>
 8004b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f43f af0d 	beq.w	800496a <_printf_float+0xb6>
 8004b50:	f04f 0a00 	mov.w	sl, #0
 8004b54:	f104 0b1a 	add.w	fp, r4, #26
 8004b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b5a:	425b      	negs	r3, r3
 8004b5c:	4553      	cmp	r3, sl
 8004b5e:	dc01      	bgt.n	8004b64 <_printf_float+0x2b0>
 8004b60:	464b      	mov	r3, r9
 8004b62:	e793      	b.n	8004a8c <_printf_float+0x1d8>
 8004b64:	2301      	movs	r3, #1
 8004b66:	465a      	mov	r2, fp
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f43f aefb 	beq.w	800496a <_printf_float+0xb6>
 8004b74:	f10a 0a01 	add.w	sl, sl, #1
 8004b78:	e7ee      	b.n	8004b58 <_printf_float+0x2a4>
 8004b7a:	bf00      	nop
 8004b7c:	7fefffff 	.word	0x7fefffff
 8004b80:	08009a58 	.word	0x08009a58
 8004b84:	08009a54 	.word	0x08009a54
 8004b88:	08009a60 	.word	0x08009a60
 8004b8c:	08009a5c 	.word	0x08009a5c
 8004b90:	08009b9a 	.word	0x08009b9a
 8004b94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b9a:	4553      	cmp	r3, sl
 8004b9c:	bfa8      	it	ge
 8004b9e:	4653      	movge	r3, sl
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	dc36      	bgt.n	8004c14 <_printf_float+0x360>
 8004ba6:	f04f 0b00 	mov.w	fp, #0
 8004baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bae:	f104 021a 	add.w	r2, r4, #26
 8004bb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bb4:	9306      	str	r3, [sp, #24]
 8004bb6:	eba3 0309 	sub.w	r3, r3, r9
 8004bba:	455b      	cmp	r3, fp
 8004bbc:	dc31      	bgt.n	8004c22 <_printf_float+0x36e>
 8004bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc0:	459a      	cmp	sl, r3
 8004bc2:	dc3a      	bgt.n	8004c3a <_printf_float+0x386>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	07da      	lsls	r2, r3, #31
 8004bc8:	d437      	bmi.n	8004c3a <_printf_float+0x386>
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	ebaa 0903 	sub.w	r9, sl, r3
 8004bd0:	9b06      	ldr	r3, [sp, #24]
 8004bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8004bd6:	4599      	cmp	r9, r3
 8004bd8:	bfa8      	it	ge
 8004bda:	4699      	movge	r9, r3
 8004bdc:	f1b9 0f00 	cmp.w	r9, #0
 8004be0:	dc33      	bgt.n	8004c4a <_printf_float+0x396>
 8004be2:	f04f 0800 	mov.w	r8, #0
 8004be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bea:	f104 0b1a 	add.w	fp, r4, #26
 8004bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8004bf4:	eba3 0309 	sub.w	r3, r3, r9
 8004bf8:	4543      	cmp	r3, r8
 8004bfa:	f77f af79 	ble.w	8004af0 <_printf_float+0x23c>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	465a      	mov	r2, fp
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f aeae 	beq.w	800496a <_printf_float+0xb6>
 8004c0e:	f108 0801 	add.w	r8, r8, #1
 8004c12:	e7ec      	b.n	8004bee <_printf_float+0x33a>
 8004c14:	4642      	mov	r2, r8
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1c2      	bne.n	8004ba6 <_printf_float+0x2f2>
 8004c20:	e6a3      	b.n	800496a <_printf_float+0xb6>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	9206      	str	r2, [sp, #24]
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae9c 	beq.w	800496a <_printf_float+0xb6>
 8004c32:	9a06      	ldr	r2, [sp, #24]
 8004c34:	f10b 0b01 	add.w	fp, fp, #1
 8004c38:	e7bb      	b.n	8004bb2 <_printf_float+0x2fe>
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	d1c0      	bne.n	8004bca <_printf_float+0x316>
 8004c48:	e68f      	b.n	800496a <_printf_float+0xb6>
 8004c4a:	9a06      	ldr	r2, [sp, #24]
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	4442      	add	r2, r8
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	d1c3      	bne.n	8004be2 <_printf_float+0x32e>
 8004c5a:	e686      	b.n	800496a <_printf_float+0xb6>
 8004c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c60:	f1ba 0f01 	cmp.w	sl, #1
 8004c64:	dc01      	bgt.n	8004c6a <_printf_float+0x3b6>
 8004c66:	07db      	lsls	r3, r3, #31
 8004c68:	d536      	bpl.n	8004cd8 <_printf_float+0x424>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae78 	beq.w	800496a <_printf_float+0xb6>
 8004c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f ae70 	beq.w	800496a <_printf_float+0xb6>
 8004c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2300      	movs	r3, #0
 8004c92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004c96:	f7fb ff1f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c9a:	b9c0      	cbnz	r0, 8004cce <_printf_float+0x41a>
 8004c9c:	4653      	mov	r3, sl
 8004c9e:	f108 0201 	add.w	r2, r8, #1
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d10c      	bne.n	8004cc6 <_printf_float+0x412>
 8004cac:	e65d      	b.n	800496a <_printf_float+0xb6>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	465a      	mov	r2, fp
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f ae56 	beq.w	800496a <_printf_float+0xb6>
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	45d0      	cmp	r8, sl
 8004cc4:	dbf3      	blt.n	8004cae <_printf_float+0x3fa>
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ccc:	e6df      	b.n	8004a8e <_printf_float+0x1da>
 8004cce:	f04f 0800 	mov.w	r8, #0
 8004cd2:	f104 0b1a 	add.w	fp, r4, #26
 8004cd6:	e7f4      	b.n	8004cc2 <_printf_float+0x40e>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4642      	mov	r2, r8
 8004cdc:	e7e1      	b.n	8004ca2 <_printf_float+0x3ee>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	464a      	mov	r2, r9
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f ae3e 	beq.w	800496a <_printf_float+0xb6>
 8004cee:	f108 0801 	add.w	r8, r8, #1
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cf6:	1a5b      	subs	r3, r3, r1
 8004cf8:	4543      	cmp	r3, r8
 8004cfa:	dcf0      	bgt.n	8004cde <_printf_float+0x42a>
 8004cfc:	e6fc      	b.n	8004af8 <_printf_float+0x244>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	f104 0919 	add.w	r9, r4, #25
 8004d06:	e7f4      	b.n	8004cf2 <_printf_float+0x43e>

08004d08 <_printf_common>:
 8004d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	4616      	mov	r6, r2
 8004d0e:	4698      	mov	r8, r3
 8004d10:	688a      	ldr	r2, [r1, #8]
 8004d12:	690b      	ldr	r3, [r1, #16]
 8004d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	bfb8      	it	lt
 8004d1c:	4613      	movlt	r3, r2
 8004d1e:	6033      	str	r3, [r6, #0]
 8004d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d24:	4607      	mov	r7, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	b10a      	cbz	r2, 8004d2e <_printf_common+0x26>
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	0699      	lsls	r1, r3, #26
 8004d32:	bf42      	ittt	mi
 8004d34:	6833      	ldrmi	r3, [r6, #0]
 8004d36:	3302      	addmi	r3, #2
 8004d38:	6033      	strmi	r3, [r6, #0]
 8004d3a:	6825      	ldr	r5, [r4, #0]
 8004d3c:	f015 0506 	ands.w	r5, r5, #6
 8004d40:	d106      	bne.n	8004d50 <_printf_common+0x48>
 8004d42:	f104 0a19 	add.w	sl, r4, #25
 8004d46:	68e3      	ldr	r3, [r4, #12]
 8004d48:	6832      	ldr	r2, [r6, #0]
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	42ab      	cmp	r3, r5
 8004d4e:	dc26      	bgt.n	8004d9e <_printf_common+0x96>
 8004d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	3b00      	subs	r3, #0
 8004d58:	bf18      	it	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	0692      	lsls	r2, r2, #26
 8004d5e:	d42b      	bmi.n	8004db8 <_printf_common+0xb0>
 8004d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d64:	4641      	mov	r1, r8
 8004d66:	4638      	mov	r0, r7
 8004d68:	47c8      	blx	r9
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d01e      	beq.n	8004dac <_printf_common+0xa4>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	6922      	ldr	r2, [r4, #16]
 8004d72:	f003 0306 	and.w	r3, r3, #6
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	bf02      	ittt	eq
 8004d7a:	68e5      	ldreq	r5, [r4, #12]
 8004d7c:	6833      	ldreq	r3, [r6, #0]
 8004d7e:	1aed      	subeq	r5, r5, r3
 8004d80:	68a3      	ldr	r3, [r4, #8]
 8004d82:	bf0c      	ite	eq
 8004d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d88:	2500      	movne	r5, #0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bfc4      	itt	gt
 8004d8e:	1a9b      	subgt	r3, r3, r2
 8004d90:	18ed      	addgt	r5, r5, r3
 8004d92:	2600      	movs	r6, #0
 8004d94:	341a      	adds	r4, #26
 8004d96:	42b5      	cmp	r5, r6
 8004d98:	d11a      	bne.n	8004dd0 <_printf_common+0xc8>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e008      	b.n	8004db0 <_printf_common+0xa8>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4652      	mov	r2, sl
 8004da2:	4641      	mov	r1, r8
 8004da4:	4638      	mov	r0, r7
 8004da6:	47c8      	blx	r9
 8004da8:	3001      	adds	r0, #1
 8004daa:	d103      	bne.n	8004db4 <_printf_common+0xac>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db4:	3501      	adds	r5, #1
 8004db6:	e7c6      	b.n	8004d46 <_printf_common+0x3e>
 8004db8:	18e1      	adds	r1, r4, r3
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	2030      	movs	r0, #48	@ 0x30
 8004dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dc2:	4422      	add	r2, r4
 8004dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dcc:	3302      	adds	r3, #2
 8004dce:	e7c7      	b.n	8004d60 <_printf_common+0x58>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c8      	blx	r9
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d0e6      	beq.n	8004dac <_printf_common+0xa4>
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7d9      	b.n	8004d96 <_printf_common+0x8e>
	...

08004de4 <_printf_i>:
 8004de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	7e0f      	ldrb	r7, [r1, #24]
 8004dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dec:	2f78      	cmp	r7, #120	@ 0x78
 8004dee:	4691      	mov	r9, r2
 8004df0:	4680      	mov	r8, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	469a      	mov	sl, r3
 8004df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dfa:	d807      	bhi.n	8004e0c <_printf_i+0x28>
 8004dfc:	2f62      	cmp	r7, #98	@ 0x62
 8004dfe:	d80a      	bhi.n	8004e16 <_printf_i+0x32>
 8004e00:	2f00      	cmp	r7, #0
 8004e02:	f000 80d1 	beq.w	8004fa8 <_printf_i+0x1c4>
 8004e06:	2f58      	cmp	r7, #88	@ 0x58
 8004e08:	f000 80b8 	beq.w	8004f7c <_printf_i+0x198>
 8004e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e14:	e03a      	b.n	8004e8c <_printf_i+0xa8>
 8004e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e1a:	2b15      	cmp	r3, #21
 8004e1c:	d8f6      	bhi.n	8004e0c <_printf_i+0x28>
 8004e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e24 <_printf_i+0x40>)
 8004e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e24:	08004e7d 	.word	0x08004e7d
 8004e28:	08004e91 	.word	0x08004e91
 8004e2c:	08004e0d 	.word	0x08004e0d
 8004e30:	08004e0d 	.word	0x08004e0d
 8004e34:	08004e0d 	.word	0x08004e0d
 8004e38:	08004e0d 	.word	0x08004e0d
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004e0d 	.word	0x08004e0d
 8004e44:	08004e0d 	.word	0x08004e0d
 8004e48:	08004e0d 	.word	0x08004e0d
 8004e4c:	08004e0d 	.word	0x08004e0d
 8004e50:	08004f8f 	.word	0x08004f8f
 8004e54:	08004ebb 	.word	0x08004ebb
 8004e58:	08004f49 	.word	0x08004f49
 8004e5c:	08004e0d 	.word	0x08004e0d
 8004e60:	08004e0d 	.word	0x08004e0d
 8004e64:	08004fb1 	.word	0x08004fb1
 8004e68:	08004e0d 	.word	0x08004e0d
 8004e6c:	08004ebb 	.word	0x08004ebb
 8004e70:	08004e0d 	.word	0x08004e0d
 8004e74:	08004e0d 	.word	0x08004e0d
 8004e78:	08004f51 	.word	0x08004f51
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6032      	str	r2, [r6, #0]
 8004e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e09c      	b.n	8004fca <_printf_i+0x1e6>
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	1d19      	adds	r1, r3, #4
 8004e96:	6031      	str	r1, [r6, #0]
 8004e98:	0606      	lsls	r6, r0, #24
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_i+0xbc>
 8004e9c:	681d      	ldr	r5, [r3, #0]
 8004e9e:	e003      	b.n	8004ea8 <_printf_i+0xc4>
 8004ea0:	0645      	lsls	r5, r0, #25
 8004ea2:	d5fb      	bpl.n	8004e9c <_printf_i+0xb8>
 8004ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	da03      	bge.n	8004eb4 <_printf_i+0xd0>
 8004eac:	232d      	movs	r3, #45	@ 0x2d
 8004eae:	426d      	negs	r5, r5
 8004eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb4:	4858      	ldr	r0, [pc, #352]	@ (8005018 <_printf_i+0x234>)
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	e011      	b.n	8004ede <_printf_i+0xfa>
 8004eba:	6821      	ldr	r1, [r4, #0]
 8004ebc:	6833      	ldr	r3, [r6, #0]
 8004ebe:	0608      	lsls	r0, r1, #24
 8004ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ec4:	d402      	bmi.n	8004ecc <_printf_i+0xe8>
 8004ec6:	0649      	lsls	r1, r1, #25
 8004ec8:	bf48      	it	mi
 8004eca:	b2ad      	uxthmi	r5, r5
 8004ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ece:	4852      	ldr	r0, [pc, #328]	@ (8005018 <_printf_i+0x234>)
 8004ed0:	6033      	str	r3, [r6, #0]
 8004ed2:	bf14      	ite	ne
 8004ed4:	230a      	movne	r3, #10
 8004ed6:	2308      	moveq	r3, #8
 8004ed8:	2100      	movs	r1, #0
 8004eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ede:	6866      	ldr	r6, [r4, #4]
 8004ee0:	60a6      	str	r6, [r4, #8]
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	db05      	blt.n	8004ef2 <_printf_i+0x10e>
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	432e      	orrs	r6, r5
 8004eea:	f021 0104 	bic.w	r1, r1, #4
 8004eee:	6021      	str	r1, [r4, #0]
 8004ef0:	d04b      	beq.n	8004f8a <_printf_i+0x1a6>
 8004ef2:	4616      	mov	r6, r2
 8004ef4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ef8:	fb03 5711 	mls	r7, r3, r1, r5
 8004efc:	5dc7      	ldrb	r7, [r0, r7]
 8004efe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f02:	462f      	mov	r7, r5
 8004f04:	42bb      	cmp	r3, r7
 8004f06:	460d      	mov	r5, r1
 8004f08:	d9f4      	bls.n	8004ef4 <_printf_i+0x110>
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d10b      	bne.n	8004f26 <_printf_i+0x142>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	07df      	lsls	r7, r3, #31
 8004f12:	d508      	bpl.n	8004f26 <_printf_i+0x142>
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	6861      	ldr	r1, [r4, #4]
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	bfde      	ittt	le
 8004f1c:	2330      	movle	r3, #48	@ 0x30
 8004f1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f26:	1b92      	subs	r2, r2, r6
 8004f28:	6122      	str	r2, [r4, #16]
 8004f2a:	f8cd a000 	str.w	sl, [sp]
 8004f2e:	464b      	mov	r3, r9
 8004f30:	aa03      	add	r2, sp, #12
 8004f32:	4621      	mov	r1, r4
 8004f34:	4640      	mov	r0, r8
 8004f36:	f7ff fee7 	bl	8004d08 <_printf_common>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d14a      	bne.n	8004fd4 <_printf_i+0x1f0>
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f42:	b004      	add	sp, #16
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	f043 0320 	orr.w	r3, r3, #32
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	4832      	ldr	r0, [pc, #200]	@ (800501c <_printf_i+0x238>)
 8004f52:	2778      	movs	r7, #120	@ 0x78
 8004f54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	6831      	ldr	r1, [r6, #0]
 8004f5c:	061f      	lsls	r7, r3, #24
 8004f5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f62:	d402      	bmi.n	8004f6a <_printf_i+0x186>
 8004f64:	065f      	lsls	r7, r3, #25
 8004f66:	bf48      	it	mi
 8004f68:	b2ad      	uxthmi	r5, r5
 8004f6a:	6031      	str	r1, [r6, #0]
 8004f6c:	07d9      	lsls	r1, r3, #31
 8004f6e:	bf44      	itt	mi
 8004f70:	f043 0320 	orrmi.w	r3, r3, #32
 8004f74:	6023      	strmi	r3, [r4, #0]
 8004f76:	b11d      	cbz	r5, 8004f80 <_printf_i+0x19c>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	e7ad      	b.n	8004ed8 <_printf_i+0xf4>
 8004f7c:	4826      	ldr	r0, [pc, #152]	@ (8005018 <_printf_i+0x234>)
 8004f7e:	e7e9      	b.n	8004f54 <_printf_i+0x170>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f023 0320 	bic.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	e7f6      	b.n	8004f78 <_printf_i+0x194>
 8004f8a:	4616      	mov	r6, r2
 8004f8c:	e7bd      	b.n	8004f0a <_printf_i+0x126>
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	6825      	ldr	r5, [r4, #0]
 8004f92:	6961      	ldr	r1, [r4, #20]
 8004f94:	1d18      	adds	r0, r3, #4
 8004f96:	6030      	str	r0, [r6, #0]
 8004f98:	062e      	lsls	r6, r5, #24
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	d501      	bpl.n	8004fa2 <_printf_i+0x1be>
 8004f9e:	6019      	str	r1, [r3, #0]
 8004fa0:	e002      	b.n	8004fa8 <_printf_i+0x1c4>
 8004fa2:	0668      	lsls	r0, r5, #25
 8004fa4:	d5fb      	bpl.n	8004f9e <_printf_i+0x1ba>
 8004fa6:	8019      	strh	r1, [r3, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	4616      	mov	r6, r2
 8004fae:	e7bc      	b.n	8004f2a <_printf_i+0x146>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	6032      	str	r2, [r6, #0]
 8004fb6:	681e      	ldr	r6, [r3, #0]
 8004fb8:	6862      	ldr	r2, [r4, #4]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7fb f90f 	bl	80001e0 <memchr>
 8004fc2:	b108      	cbz	r0, 8004fc8 <_printf_i+0x1e4>
 8004fc4:	1b80      	subs	r0, r0, r6
 8004fc6:	6060      	str	r0, [r4, #4]
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd2:	e7aa      	b.n	8004f2a <_printf_i+0x146>
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	4632      	mov	r2, r6
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4640      	mov	r0, r8
 8004fdc:	47d0      	blx	sl
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d0ad      	beq.n	8004f3e <_printf_i+0x15a>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	079b      	lsls	r3, r3, #30
 8004fe6:	d413      	bmi.n	8005010 <_printf_i+0x22c>
 8004fe8:	68e0      	ldr	r0, [r4, #12]
 8004fea:	9b03      	ldr	r3, [sp, #12]
 8004fec:	4298      	cmp	r0, r3
 8004fee:	bfb8      	it	lt
 8004ff0:	4618      	movlt	r0, r3
 8004ff2:	e7a6      	b.n	8004f42 <_printf_i+0x15e>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	47d0      	blx	sl
 8004ffe:	3001      	adds	r0, #1
 8005000:	d09d      	beq.n	8004f3e <_printf_i+0x15a>
 8005002:	3501      	adds	r5, #1
 8005004:	68e3      	ldr	r3, [r4, #12]
 8005006:	9903      	ldr	r1, [sp, #12]
 8005008:	1a5b      	subs	r3, r3, r1
 800500a:	42ab      	cmp	r3, r5
 800500c:	dcf2      	bgt.n	8004ff4 <_printf_i+0x210>
 800500e:	e7eb      	b.n	8004fe8 <_printf_i+0x204>
 8005010:	2500      	movs	r5, #0
 8005012:	f104 0619 	add.w	r6, r4, #25
 8005016:	e7f5      	b.n	8005004 <_printf_i+0x220>
 8005018:	08009a64 	.word	0x08009a64
 800501c:	08009a75 	.word	0x08009a75

08005020 <_scanf_float>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	b087      	sub	sp, #28
 8005026:	4691      	mov	r9, r2
 8005028:	9303      	str	r3, [sp, #12]
 800502a:	688b      	ldr	r3, [r1, #8]
 800502c:	1e5a      	subs	r2, r3, #1
 800502e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005032:	bf81      	itttt	hi
 8005034:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005038:	eb03 0b05 	addhi.w	fp, r3, r5
 800503c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005040:	608b      	strhi	r3, [r1, #8]
 8005042:	680b      	ldr	r3, [r1, #0]
 8005044:	460a      	mov	r2, r1
 8005046:	f04f 0500 	mov.w	r5, #0
 800504a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800504e:	f842 3b1c 	str.w	r3, [r2], #28
 8005052:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005056:	4680      	mov	r8, r0
 8005058:	460c      	mov	r4, r1
 800505a:	bf98      	it	ls
 800505c:	f04f 0b00 	movls.w	fp, #0
 8005060:	9201      	str	r2, [sp, #4]
 8005062:	4616      	mov	r6, r2
 8005064:	46aa      	mov	sl, r5
 8005066:	462f      	mov	r7, r5
 8005068:	9502      	str	r5, [sp, #8]
 800506a:	68a2      	ldr	r2, [r4, #8]
 800506c:	b15a      	cbz	r2, 8005086 <_scanf_float+0x66>
 800506e:	f8d9 3000 	ldr.w	r3, [r9]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b4e      	cmp	r3, #78	@ 0x4e
 8005076:	d863      	bhi.n	8005140 <_scanf_float+0x120>
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d83b      	bhi.n	80050f4 <_scanf_float+0xd4>
 800507c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005080:	b2c8      	uxtb	r0, r1
 8005082:	280e      	cmp	r0, #14
 8005084:	d939      	bls.n	80050fa <_scanf_float+0xda>
 8005086:	b11f      	cbz	r7, 8005090 <_scanf_float+0x70>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005094:	f1ba 0f01 	cmp.w	sl, #1
 8005098:	f200 8114 	bhi.w	80052c4 <_scanf_float+0x2a4>
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	429e      	cmp	r6, r3
 80050a0:	f200 8105 	bhi.w	80052ae <_scanf_float+0x28e>
 80050a4:	2001      	movs	r0, #1
 80050a6:	b007      	add	sp, #28
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80050b0:	2a0d      	cmp	r2, #13
 80050b2:	d8e8      	bhi.n	8005086 <_scanf_float+0x66>
 80050b4:	a101      	add	r1, pc, #4	@ (adr r1, 80050bc <_scanf_float+0x9c>)
 80050b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	08005205 	.word	0x08005205
 80050c0:	08005087 	.word	0x08005087
 80050c4:	08005087 	.word	0x08005087
 80050c8:	08005087 	.word	0x08005087
 80050cc:	08005261 	.word	0x08005261
 80050d0:	0800523b 	.word	0x0800523b
 80050d4:	08005087 	.word	0x08005087
 80050d8:	08005087 	.word	0x08005087
 80050dc:	08005213 	.word	0x08005213
 80050e0:	08005087 	.word	0x08005087
 80050e4:	08005087 	.word	0x08005087
 80050e8:	08005087 	.word	0x08005087
 80050ec:	08005087 	.word	0x08005087
 80050f0:	080051cf 	.word	0x080051cf
 80050f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80050f8:	e7da      	b.n	80050b0 <_scanf_float+0x90>
 80050fa:	290e      	cmp	r1, #14
 80050fc:	d8c3      	bhi.n	8005086 <_scanf_float+0x66>
 80050fe:	a001      	add	r0, pc, #4	@ (adr r0, 8005104 <_scanf_float+0xe4>)
 8005100:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005104:	080051bf 	.word	0x080051bf
 8005108:	08005087 	.word	0x08005087
 800510c:	080051bf 	.word	0x080051bf
 8005110:	0800524f 	.word	0x0800524f
 8005114:	08005087 	.word	0x08005087
 8005118:	08005161 	.word	0x08005161
 800511c:	080051a5 	.word	0x080051a5
 8005120:	080051a5 	.word	0x080051a5
 8005124:	080051a5 	.word	0x080051a5
 8005128:	080051a5 	.word	0x080051a5
 800512c:	080051a5 	.word	0x080051a5
 8005130:	080051a5 	.word	0x080051a5
 8005134:	080051a5 	.word	0x080051a5
 8005138:	080051a5 	.word	0x080051a5
 800513c:	080051a5 	.word	0x080051a5
 8005140:	2b6e      	cmp	r3, #110	@ 0x6e
 8005142:	d809      	bhi.n	8005158 <_scanf_float+0x138>
 8005144:	2b60      	cmp	r3, #96	@ 0x60
 8005146:	d8b1      	bhi.n	80050ac <_scanf_float+0x8c>
 8005148:	2b54      	cmp	r3, #84	@ 0x54
 800514a:	d07b      	beq.n	8005244 <_scanf_float+0x224>
 800514c:	2b59      	cmp	r3, #89	@ 0x59
 800514e:	d19a      	bne.n	8005086 <_scanf_float+0x66>
 8005150:	2d07      	cmp	r5, #7
 8005152:	d198      	bne.n	8005086 <_scanf_float+0x66>
 8005154:	2508      	movs	r5, #8
 8005156:	e02f      	b.n	80051b8 <_scanf_float+0x198>
 8005158:	2b74      	cmp	r3, #116	@ 0x74
 800515a:	d073      	beq.n	8005244 <_scanf_float+0x224>
 800515c:	2b79      	cmp	r3, #121	@ 0x79
 800515e:	e7f6      	b.n	800514e <_scanf_float+0x12e>
 8005160:	6821      	ldr	r1, [r4, #0]
 8005162:	05c8      	lsls	r0, r1, #23
 8005164:	d51e      	bpl.n	80051a4 <_scanf_float+0x184>
 8005166:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800516a:	6021      	str	r1, [r4, #0]
 800516c:	3701      	adds	r7, #1
 800516e:	f1bb 0f00 	cmp.w	fp, #0
 8005172:	d003      	beq.n	800517c <_scanf_float+0x15c>
 8005174:	3201      	adds	r2, #1
 8005176:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800517a:	60a2      	str	r2, [r4, #8]
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	60a3      	str	r3, [r4, #8]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	3301      	adds	r3, #1
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800518c:	3b01      	subs	r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	f8c9 3004 	str.w	r3, [r9, #4]
 8005194:	f340 8082 	ble.w	800529c <_scanf_float+0x27c>
 8005198:	f8d9 3000 	ldr.w	r3, [r9]
 800519c:	3301      	adds	r3, #1
 800519e:	f8c9 3000 	str.w	r3, [r9]
 80051a2:	e762      	b.n	800506a <_scanf_float+0x4a>
 80051a4:	eb1a 0105 	adds.w	r1, sl, r5
 80051a8:	f47f af6d 	bne.w	8005086 <_scanf_float+0x66>
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80051b2:	6022      	str	r2, [r4, #0]
 80051b4:	460d      	mov	r5, r1
 80051b6:	468a      	mov	sl, r1
 80051b8:	f806 3b01 	strb.w	r3, [r6], #1
 80051bc:	e7de      	b.n	800517c <_scanf_float+0x15c>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	0610      	lsls	r0, r2, #24
 80051c2:	f57f af60 	bpl.w	8005086 <_scanf_float+0x66>
 80051c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051ca:	6022      	str	r2, [r4, #0]
 80051cc:	e7f4      	b.n	80051b8 <_scanf_float+0x198>
 80051ce:	f1ba 0f00 	cmp.w	sl, #0
 80051d2:	d10c      	bne.n	80051ee <_scanf_float+0x1ce>
 80051d4:	b977      	cbnz	r7, 80051f4 <_scanf_float+0x1d4>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80051dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80051e0:	d108      	bne.n	80051f4 <_scanf_float+0x1d4>
 80051e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051e6:	6022      	str	r2, [r4, #0]
 80051e8:	f04f 0a01 	mov.w	sl, #1
 80051ec:	e7e4      	b.n	80051b8 <_scanf_float+0x198>
 80051ee:	f1ba 0f02 	cmp.w	sl, #2
 80051f2:	d050      	beq.n	8005296 <_scanf_float+0x276>
 80051f4:	2d01      	cmp	r5, #1
 80051f6:	d002      	beq.n	80051fe <_scanf_float+0x1de>
 80051f8:	2d04      	cmp	r5, #4
 80051fa:	f47f af44 	bne.w	8005086 <_scanf_float+0x66>
 80051fe:	3501      	adds	r5, #1
 8005200:	b2ed      	uxtb	r5, r5
 8005202:	e7d9      	b.n	80051b8 <_scanf_float+0x198>
 8005204:	f1ba 0f01 	cmp.w	sl, #1
 8005208:	f47f af3d 	bne.w	8005086 <_scanf_float+0x66>
 800520c:	f04f 0a02 	mov.w	sl, #2
 8005210:	e7d2      	b.n	80051b8 <_scanf_float+0x198>
 8005212:	b975      	cbnz	r5, 8005232 <_scanf_float+0x212>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f47f af37 	bne.w	8005088 <_scanf_float+0x68>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005220:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005224:	f040 8103 	bne.w	800542e <_scanf_float+0x40e>
 8005228:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	2501      	movs	r5, #1
 8005230:	e7c2      	b.n	80051b8 <_scanf_float+0x198>
 8005232:	2d03      	cmp	r5, #3
 8005234:	d0e3      	beq.n	80051fe <_scanf_float+0x1de>
 8005236:	2d05      	cmp	r5, #5
 8005238:	e7df      	b.n	80051fa <_scanf_float+0x1da>
 800523a:	2d02      	cmp	r5, #2
 800523c:	f47f af23 	bne.w	8005086 <_scanf_float+0x66>
 8005240:	2503      	movs	r5, #3
 8005242:	e7b9      	b.n	80051b8 <_scanf_float+0x198>
 8005244:	2d06      	cmp	r5, #6
 8005246:	f47f af1e 	bne.w	8005086 <_scanf_float+0x66>
 800524a:	2507      	movs	r5, #7
 800524c:	e7b4      	b.n	80051b8 <_scanf_float+0x198>
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	0591      	lsls	r1, r2, #22
 8005252:	f57f af18 	bpl.w	8005086 <_scanf_float+0x66>
 8005256:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800525a:	6022      	str	r2, [r4, #0]
 800525c:	9702      	str	r7, [sp, #8]
 800525e:	e7ab      	b.n	80051b8 <_scanf_float+0x198>
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005266:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800526a:	d005      	beq.n	8005278 <_scanf_float+0x258>
 800526c:	0550      	lsls	r0, r2, #21
 800526e:	f57f af0a 	bpl.w	8005086 <_scanf_float+0x66>
 8005272:	2f00      	cmp	r7, #0
 8005274:	f000 80db 	beq.w	800542e <_scanf_float+0x40e>
 8005278:	0591      	lsls	r1, r2, #22
 800527a:	bf58      	it	pl
 800527c:	9902      	ldrpl	r1, [sp, #8]
 800527e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005282:	bf58      	it	pl
 8005284:	1a79      	subpl	r1, r7, r1
 8005286:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800528a:	bf58      	it	pl
 800528c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005290:	6022      	str	r2, [r4, #0]
 8005292:	2700      	movs	r7, #0
 8005294:	e790      	b.n	80051b8 <_scanf_float+0x198>
 8005296:	f04f 0a03 	mov.w	sl, #3
 800529a:	e78d      	b.n	80051b8 <_scanf_float+0x198>
 800529c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80052a0:	4649      	mov	r1, r9
 80052a2:	4640      	mov	r0, r8
 80052a4:	4798      	blx	r3
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f43f aedf 	beq.w	800506a <_scanf_float+0x4a>
 80052ac:	e6eb      	b.n	8005086 <_scanf_float+0x66>
 80052ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052b6:	464a      	mov	r2, r9
 80052b8:	4640      	mov	r0, r8
 80052ba:	4798      	blx	r3
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	3b01      	subs	r3, #1
 80052c0:	6123      	str	r3, [r4, #16]
 80052c2:	e6eb      	b.n	800509c <_scanf_float+0x7c>
 80052c4:	1e6b      	subs	r3, r5, #1
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d824      	bhi.n	8005314 <_scanf_float+0x2f4>
 80052ca:	2d02      	cmp	r5, #2
 80052cc:	d836      	bhi.n	800533c <_scanf_float+0x31c>
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	429e      	cmp	r6, r3
 80052d2:	f67f aee7 	bls.w	80050a4 <_scanf_float+0x84>
 80052d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052de:	464a      	mov	r2, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	4798      	blx	r3
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	e7f0      	b.n	80052ce <_scanf_float+0x2ae>
 80052ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80052f4:	464a      	mov	r2, r9
 80052f6:	4640      	mov	r0, r8
 80052f8:	4798      	blx	r3
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005304:	fa5f fa8a 	uxtb.w	sl, sl
 8005308:	f1ba 0f02 	cmp.w	sl, #2
 800530c:	d1ee      	bne.n	80052ec <_scanf_float+0x2cc>
 800530e:	3d03      	subs	r5, #3
 8005310:	b2ed      	uxtb	r5, r5
 8005312:	1b76      	subs	r6, r6, r5
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	05da      	lsls	r2, r3, #23
 8005318:	d530      	bpl.n	800537c <_scanf_float+0x35c>
 800531a:	055b      	lsls	r3, r3, #21
 800531c:	d511      	bpl.n	8005342 <_scanf_float+0x322>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	429e      	cmp	r6, r3
 8005322:	f67f aebf 	bls.w	80050a4 <_scanf_float+0x84>
 8005326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800532a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800532e:	464a      	mov	r2, r9
 8005330:	4640      	mov	r0, r8
 8005332:	4798      	blx	r3
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	3b01      	subs	r3, #1
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	e7f0      	b.n	800531e <_scanf_float+0x2fe>
 800533c:	46aa      	mov	sl, r5
 800533e:	46b3      	mov	fp, r6
 8005340:	e7de      	b.n	8005300 <_scanf_float+0x2e0>
 8005342:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	2965      	cmp	r1, #101	@ 0x65
 800534a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800534e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	d00c      	beq.n	8005370 <_scanf_float+0x350>
 8005356:	2945      	cmp	r1, #69	@ 0x45
 8005358:	d00a      	beq.n	8005370 <_scanf_float+0x350>
 800535a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800535e:	464a      	mov	r2, r9
 8005360:	4640      	mov	r0, r8
 8005362:	4798      	blx	r3
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800536a:	3b01      	subs	r3, #1
 800536c:	1eb5      	subs	r5, r6, #2
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005374:	464a      	mov	r2, r9
 8005376:	4640      	mov	r0, r8
 8005378:	4798      	blx	r3
 800537a:	462e      	mov	r6, r5
 800537c:	6822      	ldr	r2, [r4, #0]
 800537e:	f012 0210 	ands.w	r2, r2, #16
 8005382:	d001      	beq.n	8005388 <_scanf_float+0x368>
 8005384:	2000      	movs	r0, #0
 8005386:	e68e      	b.n	80050a6 <_scanf_float+0x86>
 8005388:	7032      	strb	r2, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005394:	d125      	bne.n	80053e2 <_scanf_float+0x3c2>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	429f      	cmp	r7, r3
 800539a:	d00a      	beq.n	80053b2 <_scanf_float+0x392>
 800539c:	1bda      	subs	r2, r3, r7
 800539e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80053a2:	429e      	cmp	r6, r3
 80053a4:	bf28      	it	cs
 80053a6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80053aa:	4922      	ldr	r1, [pc, #136]	@ (8005434 <_scanf_float+0x414>)
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 f9df 	bl	8005770 <siprintf>
 80053b2:	9901      	ldr	r1, [sp, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	4640      	mov	r0, r8
 80053b8:	f002 fcca 	bl	8007d50 <_strtod_r>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f011 0f02 	tst.w	r1, #2
 80053c6:	ec57 6b10 	vmov	r6, r7, d0
 80053ca:	f103 0204 	add.w	r2, r3, #4
 80053ce:	d015      	beq.n	80053fc <_scanf_float+0x3dc>
 80053d0:	9903      	ldr	r1, [sp, #12]
 80053d2:	600a      	str	r2, [r1, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	e9c3 6700 	strd	r6, r7, [r3]
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60e3      	str	r3, [r4, #12]
 80053e0:	e7d0      	b.n	8005384 <_scanf_float+0x364>
 80053e2:	9b04      	ldr	r3, [sp, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0e4      	beq.n	80053b2 <_scanf_float+0x392>
 80053e8:	9905      	ldr	r1, [sp, #20]
 80053ea:	230a      	movs	r3, #10
 80053ec:	3101      	adds	r1, #1
 80053ee:	4640      	mov	r0, r8
 80053f0:	f002 fd2e 	bl	8007e50 <_strtol_r>
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	9e05      	ldr	r6, [sp, #20]
 80053f8:	1ac2      	subs	r2, r0, r3
 80053fa:	e7d0      	b.n	800539e <_scanf_float+0x37e>
 80053fc:	f011 0f04 	tst.w	r1, #4
 8005400:	9903      	ldr	r1, [sp, #12]
 8005402:	600a      	str	r2, [r1, #0]
 8005404:	d1e6      	bne.n	80053d4 <_scanf_float+0x3b4>
 8005406:	681d      	ldr	r5, [r3, #0]
 8005408:	4632      	mov	r2, r6
 800540a:	463b      	mov	r3, r7
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb fb94 	bl	8000b3c <__aeabi_dcmpun>
 8005414:	b128      	cbz	r0, 8005422 <_scanf_float+0x402>
 8005416:	4808      	ldr	r0, [pc, #32]	@ (8005438 <_scanf_float+0x418>)
 8005418:	f000 fa90 	bl	800593c <nanf>
 800541c:	ed85 0a00 	vstr	s0, [r5]
 8005420:	e7db      	b.n	80053da <_scanf_float+0x3ba>
 8005422:	4630      	mov	r0, r6
 8005424:	4639      	mov	r1, r7
 8005426:	f7fb fbe7 	bl	8000bf8 <__aeabi_d2f>
 800542a:	6028      	str	r0, [r5, #0]
 800542c:	e7d5      	b.n	80053da <_scanf_float+0x3ba>
 800542e:	2700      	movs	r7, #0
 8005430:	e62e      	b.n	8005090 <_scanf_float+0x70>
 8005432:	bf00      	nop
 8005434:	08009a86 	.word	0x08009a86
 8005438:	08009be2 	.word	0x08009be2

0800543c <std>:
 800543c:	2300      	movs	r3, #0
 800543e:	b510      	push	{r4, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	e9c0 3300 	strd	r3, r3, [r0]
 8005446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800544a:	6083      	str	r3, [r0, #8]
 800544c:	8181      	strh	r1, [r0, #12]
 800544e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005450:	81c2      	strh	r2, [r0, #14]
 8005452:	6183      	str	r3, [r0, #24]
 8005454:	4619      	mov	r1, r3
 8005456:	2208      	movs	r2, #8
 8005458:	305c      	adds	r0, #92	@ 0x5c
 800545a:	f000 f9ee 	bl	800583a <memset>
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <std+0x58>)
 8005460:	6263      	str	r3, [r4, #36]	@ 0x24
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <std+0x5c>)
 8005464:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005466:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <std+0x60>)
 8005468:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800546a:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <std+0x64>)
 800546c:	6323      	str	r3, [r4, #48]	@ 0x30
 800546e:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <std+0x68>)
 8005470:	6224      	str	r4, [r4, #32]
 8005472:	429c      	cmp	r4, r3
 8005474:	d006      	beq.n	8005484 <std+0x48>
 8005476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800547a:	4294      	cmp	r4, r2
 800547c:	d002      	beq.n	8005484 <std+0x48>
 800547e:	33d0      	adds	r3, #208	@ 0xd0
 8005480:	429c      	cmp	r4, r3
 8005482:	d105      	bne.n	8005490 <std+0x54>
 8005484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f000 ba52 	b.w	8005934 <__retarget_lock_init_recursive>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	080057b5 	.word	0x080057b5
 8005498:	080057d7 	.word	0x080057d7
 800549c:	0800580f 	.word	0x0800580f
 80054a0:	08005833 	.word	0x08005833
 80054a4:	200002cc 	.word	0x200002cc

080054a8 <stdio_exit_handler>:
 80054a8:	4a02      	ldr	r2, [pc, #8]	@ (80054b4 <stdio_exit_handler+0xc>)
 80054aa:	4903      	ldr	r1, [pc, #12]	@ (80054b8 <stdio_exit_handler+0x10>)
 80054ac:	4803      	ldr	r0, [pc, #12]	@ (80054bc <stdio_exit_handler+0x14>)
 80054ae:	f000 b869 	b.w	8005584 <_fwalk_sglue>
 80054b2:	bf00      	nop
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	08008a91 	.word	0x08008a91
 80054bc:	2000001c 	.word	0x2000001c

080054c0 <cleanup_stdio>:
 80054c0:	6841      	ldr	r1, [r0, #4]
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <cleanup_stdio+0x34>)
 80054c4:	4299      	cmp	r1, r3
 80054c6:	b510      	push	{r4, lr}
 80054c8:	4604      	mov	r4, r0
 80054ca:	d001      	beq.n	80054d0 <cleanup_stdio+0x10>
 80054cc:	f003 fae0 	bl	8008a90 <_fflush_r>
 80054d0:	68a1      	ldr	r1, [r4, #8]
 80054d2:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <cleanup_stdio+0x38>)
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d002      	beq.n	80054de <cleanup_stdio+0x1e>
 80054d8:	4620      	mov	r0, r4
 80054da:	f003 fad9 	bl	8008a90 <_fflush_r>
 80054de:	68e1      	ldr	r1, [r4, #12]
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <cleanup_stdio+0x3c>)
 80054e2:	4299      	cmp	r1, r3
 80054e4:	d004      	beq.n	80054f0 <cleanup_stdio+0x30>
 80054e6:	4620      	mov	r0, r4
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	f003 bad0 	b.w	8008a90 <_fflush_r>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	200002cc 	.word	0x200002cc
 80054f8:	20000334 	.word	0x20000334
 80054fc:	2000039c 	.word	0x2000039c

08005500 <global_stdio_init.part.0>:
 8005500:	b510      	push	{r4, lr}
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <global_stdio_init.part.0+0x30>)
 8005504:	4c0b      	ldr	r4, [pc, #44]	@ (8005534 <global_stdio_init.part.0+0x34>)
 8005506:	4a0c      	ldr	r2, [pc, #48]	@ (8005538 <global_stdio_init.part.0+0x38>)
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	4620      	mov	r0, r4
 800550c:	2200      	movs	r2, #0
 800550e:	2104      	movs	r1, #4
 8005510:	f7ff ff94 	bl	800543c <std>
 8005514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005518:	2201      	movs	r2, #1
 800551a:	2109      	movs	r1, #9
 800551c:	f7ff ff8e 	bl	800543c <std>
 8005520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005524:	2202      	movs	r2, #2
 8005526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552a:	2112      	movs	r1, #18
 800552c:	f7ff bf86 	b.w	800543c <std>
 8005530:	20000404 	.word	0x20000404
 8005534:	200002cc 	.word	0x200002cc
 8005538:	080054a9 	.word	0x080054a9

0800553c <__sfp_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	@ (8005544 <__sfp_lock_acquire+0x8>)
 800553e:	f000 b9fa 	b.w	8005936 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	2000040d 	.word	0x2000040d

08005548 <__sfp_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	@ (8005550 <__sfp_lock_release+0x8>)
 800554a:	f000 b9f5 	b.w	8005938 <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	2000040d 	.word	0x2000040d

08005554 <__sinit>:
 8005554:	b510      	push	{r4, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	f7ff fff0 	bl	800553c <__sfp_lock_acquire>
 800555c:	6a23      	ldr	r3, [r4, #32]
 800555e:	b11b      	cbz	r3, 8005568 <__sinit+0x14>
 8005560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005564:	f7ff bff0 	b.w	8005548 <__sfp_lock_release>
 8005568:	4b04      	ldr	r3, [pc, #16]	@ (800557c <__sinit+0x28>)
 800556a:	6223      	str	r3, [r4, #32]
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <__sinit+0x2c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f5      	bne.n	8005560 <__sinit+0xc>
 8005574:	f7ff ffc4 	bl	8005500 <global_stdio_init.part.0>
 8005578:	e7f2      	b.n	8005560 <__sinit+0xc>
 800557a:	bf00      	nop
 800557c:	080054c1 	.word	0x080054c1
 8005580:	20000404 	.word	0x20000404

08005584 <_fwalk_sglue>:
 8005584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005588:	4607      	mov	r7, r0
 800558a:	4688      	mov	r8, r1
 800558c:	4614      	mov	r4, r2
 800558e:	2600      	movs	r6, #0
 8005590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005594:	f1b9 0901 	subs.w	r9, r9, #1
 8005598:	d505      	bpl.n	80055a6 <_fwalk_sglue+0x22>
 800559a:	6824      	ldr	r4, [r4, #0]
 800559c:	2c00      	cmp	r4, #0
 800559e:	d1f7      	bne.n	8005590 <_fwalk_sglue+0xc>
 80055a0:	4630      	mov	r0, r6
 80055a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d907      	bls.n	80055bc <_fwalk_sglue+0x38>
 80055ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b0:	3301      	adds	r3, #1
 80055b2:	d003      	beq.n	80055bc <_fwalk_sglue+0x38>
 80055b4:	4629      	mov	r1, r5
 80055b6:	4638      	mov	r0, r7
 80055b8:	47c0      	blx	r8
 80055ba:	4306      	orrs	r6, r0
 80055bc:	3568      	adds	r5, #104	@ 0x68
 80055be:	e7e9      	b.n	8005594 <_fwalk_sglue+0x10>

080055c0 <iprintf>:
 80055c0:	b40f      	push	{r0, r1, r2, r3}
 80055c2:	b507      	push	{r0, r1, r2, lr}
 80055c4:	4906      	ldr	r1, [pc, #24]	@ (80055e0 <iprintf+0x20>)
 80055c6:	ab04      	add	r3, sp, #16
 80055c8:	6808      	ldr	r0, [r1, #0]
 80055ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ce:	6881      	ldr	r1, [r0, #8]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	f002 fdc1 	bl	8008158 <_vfiprintf_r>
 80055d6:	b003      	add	sp, #12
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr
 80055e0:	20000018 	.word	0x20000018

080055e4 <iscanf>:
 80055e4:	b40f      	push	{r0, r1, r2, r3}
 80055e6:	b507      	push	{r0, r1, r2, lr}
 80055e8:	4906      	ldr	r1, [pc, #24]	@ (8005604 <iscanf+0x20>)
 80055ea:	ab04      	add	r3, sp, #16
 80055ec:	6808      	ldr	r0, [r1, #0]
 80055ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f2:	6841      	ldr	r1, [r0, #4]
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f003 f865 	bl	80086c4 <_vfiscanf_r>
 80055fa:	b003      	add	sp, #12
 80055fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005600:	b004      	add	sp, #16
 8005602:	4770      	bx	lr
 8005604:	20000018 	.word	0x20000018

08005608 <setvbuf>:
 8005608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800560c:	461d      	mov	r5, r3
 800560e:	4b57      	ldr	r3, [pc, #348]	@ (800576c <setvbuf+0x164>)
 8005610:	681f      	ldr	r7, [r3, #0]
 8005612:	4604      	mov	r4, r0
 8005614:	460e      	mov	r6, r1
 8005616:	4690      	mov	r8, r2
 8005618:	b127      	cbz	r7, 8005624 <setvbuf+0x1c>
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	b913      	cbnz	r3, 8005624 <setvbuf+0x1c>
 800561e:	4638      	mov	r0, r7
 8005620:	f7ff ff98 	bl	8005554 <__sinit>
 8005624:	f1b8 0f02 	cmp.w	r8, #2
 8005628:	d006      	beq.n	8005638 <setvbuf+0x30>
 800562a:	f1b8 0f01 	cmp.w	r8, #1
 800562e:	f200 809a 	bhi.w	8005766 <setvbuf+0x15e>
 8005632:	2d00      	cmp	r5, #0
 8005634:	f2c0 8097 	blt.w	8005766 <setvbuf+0x15e>
 8005638:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800563a:	07d9      	lsls	r1, r3, #31
 800563c:	d405      	bmi.n	800564a <setvbuf+0x42>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	059a      	lsls	r2, r3, #22
 8005642:	d402      	bmi.n	800564a <setvbuf+0x42>
 8005644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005646:	f000 f976 	bl	8005936 <__retarget_lock_acquire_recursive>
 800564a:	4621      	mov	r1, r4
 800564c:	4638      	mov	r0, r7
 800564e:	f003 fa1f 	bl	8008a90 <_fflush_r>
 8005652:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005654:	b141      	cbz	r1, 8005668 <setvbuf+0x60>
 8005656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800565a:	4299      	cmp	r1, r3
 800565c:	d002      	beq.n	8005664 <setvbuf+0x5c>
 800565e:	4638      	mov	r0, r7
 8005660:	f000 ffca 	bl	80065f8 <_free_r>
 8005664:	2300      	movs	r3, #0
 8005666:	6363      	str	r3, [r4, #52]	@ 0x34
 8005668:	2300      	movs	r3, #0
 800566a:	61a3      	str	r3, [r4, #24]
 800566c:	6063      	str	r3, [r4, #4]
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	d503      	bpl.n	800567c <setvbuf+0x74>
 8005674:	6921      	ldr	r1, [r4, #16]
 8005676:	4638      	mov	r0, r7
 8005678:	f000 ffbe 	bl	80065f8 <_free_r>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	f1b8 0f02 	cmp.w	r8, #2
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	d061      	beq.n	8005752 <setvbuf+0x14a>
 800568e:	ab01      	add	r3, sp, #4
 8005690:	466a      	mov	r2, sp
 8005692:	4621      	mov	r1, r4
 8005694:	4638      	mov	r0, r7
 8005696:	f003 fa23 	bl	8008ae0 <__swhatbuf_r>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	4318      	orrs	r0, r3
 800569e:	81a0      	strh	r0, [r4, #12]
 80056a0:	bb2d      	cbnz	r5, 80056ee <setvbuf+0xe6>
 80056a2:	9d00      	ldr	r5, [sp, #0]
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fff1 	bl	800668c <malloc>
 80056aa:	4606      	mov	r6, r0
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d152      	bne.n	8005756 <setvbuf+0x14e>
 80056b0:	f8dd 9000 	ldr.w	r9, [sp]
 80056b4:	45a9      	cmp	r9, r5
 80056b6:	d140      	bne.n	800573a <setvbuf+0x132>
 80056b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80056bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c0:	f043 0202 	orr.w	r2, r3, #2
 80056c4:	81a2      	strh	r2, [r4, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	60a2      	str	r2, [r4, #8]
 80056ca:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	6122      	str	r2, [r4, #16]
 80056d2:	2201      	movs	r2, #1
 80056d4:	6162      	str	r2, [r4, #20]
 80056d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056d8:	07d6      	lsls	r6, r2, #31
 80056da:	d404      	bmi.n	80056e6 <setvbuf+0xde>
 80056dc:	0598      	lsls	r0, r3, #22
 80056de:	d402      	bmi.n	80056e6 <setvbuf+0xde>
 80056e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056e2:	f000 f929 	bl	8005938 <__retarget_lock_release_recursive>
 80056e6:	4628      	mov	r0, r5
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ee:	2e00      	cmp	r6, #0
 80056f0:	d0d8      	beq.n	80056a4 <setvbuf+0x9c>
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	b913      	cbnz	r3, 80056fc <setvbuf+0xf4>
 80056f6:	4638      	mov	r0, r7
 80056f8:	f7ff ff2c 	bl	8005554 <__sinit>
 80056fc:	f1b8 0f01 	cmp.w	r8, #1
 8005700:	bf08      	it	eq
 8005702:	89a3      	ldrheq	r3, [r4, #12]
 8005704:	6026      	str	r6, [r4, #0]
 8005706:	bf04      	itt	eq
 8005708:	f043 0301 	orreq.w	r3, r3, #1
 800570c:	81a3      	strheq	r3, [r4, #12]
 800570e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005712:	f013 0208 	ands.w	r2, r3, #8
 8005716:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800571a:	d01e      	beq.n	800575a <setvbuf+0x152>
 800571c:	07d9      	lsls	r1, r3, #31
 800571e:	bf41      	itttt	mi
 8005720:	2200      	movmi	r2, #0
 8005722:	426d      	negmi	r5, r5
 8005724:	60a2      	strmi	r2, [r4, #8]
 8005726:	61a5      	strmi	r5, [r4, #24]
 8005728:	bf58      	it	pl
 800572a:	60a5      	strpl	r5, [r4, #8]
 800572c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800572e:	07d2      	lsls	r2, r2, #31
 8005730:	d401      	bmi.n	8005736 <setvbuf+0x12e>
 8005732:	059b      	lsls	r3, r3, #22
 8005734:	d513      	bpl.n	800575e <setvbuf+0x156>
 8005736:	2500      	movs	r5, #0
 8005738:	e7d5      	b.n	80056e6 <setvbuf+0xde>
 800573a:	4648      	mov	r0, r9
 800573c:	f000 ffa6 	bl	800668c <malloc>
 8005740:	4606      	mov	r6, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d0b8      	beq.n	80056b8 <setvbuf+0xb0>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574c:	81a3      	strh	r3, [r4, #12]
 800574e:	464d      	mov	r5, r9
 8005750:	e7cf      	b.n	80056f2 <setvbuf+0xea>
 8005752:	2500      	movs	r5, #0
 8005754:	e7b2      	b.n	80056bc <setvbuf+0xb4>
 8005756:	46a9      	mov	r9, r5
 8005758:	e7f5      	b.n	8005746 <setvbuf+0x13e>
 800575a:	60a2      	str	r2, [r4, #8]
 800575c:	e7e6      	b.n	800572c <setvbuf+0x124>
 800575e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005760:	f000 f8ea 	bl	8005938 <__retarget_lock_release_recursive>
 8005764:	e7e7      	b.n	8005736 <setvbuf+0x12e>
 8005766:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800576a:	e7bc      	b.n	80056e6 <setvbuf+0xde>
 800576c:	20000018 	.word	0x20000018

08005770 <siprintf>:
 8005770:	b40e      	push	{r1, r2, r3}
 8005772:	b510      	push	{r4, lr}
 8005774:	b09d      	sub	sp, #116	@ 0x74
 8005776:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005778:	9002      	str	r0, [sp, #8]
 800577a:	9006      	str	r0, [sp, #24]
 800577c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005780:	480a      	ldr	r0, [pc, #40]	@ (80057ac <siprintf+0x3c>)
 8005782:	9107      	str	r1, [sp, #28]
 8005784:	9104      	str	r1, [sp, #16]
 8005786:	490a      	ldr	r1, [pc, #40]	@ (80057b0 <siprintf+0x40>)
 8005788:	f853 2b04 	ldr.w	r2, [r3], #4
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	2400      	movs	r4, #0
 8005790:	a902      	add	r1, sp, #8
 8005792:	6800      	ldr	r0, [r0, #0]
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005798:	f002 fbb8 	bl	8007f0c <_svfiprintf_r>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	701c      	strb	r4, [r3, #0]
 80057a0:	b01d      	add	sp, #116	@ 0x74
 80057a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a6:	b003      	add	sp, #12
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000018 	.word	0x20000018
 80057b0:	ffff0208 	.word	0xffff0208

080057b4 <__sread>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	f000 f86c 	bl	8005898 <_read_r>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	bfab      	itete	ge
 80057c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057c6:	89a3      	ldrhlt	r3, [r4, #12]
 80057c8:	181b      	addge	r3, r3, r0
 80057ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ce:	bfac      	ite	ge
 80057d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057d2:	81a3      	strhlt	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__swrite>:
 80057d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	461f      	mov	r7, r3
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	05db      	lsls	r3, r3, #23
 80057e0:	4605      	mov	r5, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4616      	mov	r6, r2
 80057e6:	d505      	bpl.n	80057f4 <__swrite+0x1e>
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2302      	movs	r3, #2
 80057ee:	2200      	movs	r2, #0
 80057f0:	f000 f840 	bl	8005874 <_lseek_r>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	4632      	mov	r2, r6
 8005802:	463b      	mov	r3, r7
 8005804:	4628      	mov	r0, r5
 8005806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	f000 b857 	b.w	80058bc <_write_r>

0800580e <__sseek>:
 800580e:	b510      	push	{r4, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	f000 f82d 	bl	8005874 <_lseek_r>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	bf15      	itete	ne
 8005820:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800582a:	81a3      	strheq	r3, [r4, #12]
 800582c:	bf18      	it	ne
 800582e:	81a3      	strhne	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__sclose>:
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 b80d 	b.w	8005854 <_close_r>

0800583a <memset>:
 800583a:	4402      	add	r2, r0
 800583c:	4603      	mov	r3, r0
 800583e:	4293      	cmp	r3, r2
 8005840:	d100      	bne.n	8005844 <memset+0xa>
 8005842:	4770      	bx	lr
 8005844:	f803 1b01 	strb.w	r1, [r3], #1
 8005848:	e7f9      	b.n	800583e <memset+0x4>
	...

0800584c <_localeconv_r>:
 800584c:	4800      	ldr	r0, [pc, #0]	@ (8005850 <_localeconv_r+0x4>)
 800584e:	4770      	bx	lr
 8005850:	20000158 	.word	0x20000158

08005854 <_close_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d06      	ldr	r5, [pc, #24]	@ (8005870 <_close_r+0x1c>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	f7fb fd7c 	bl	800135c <_close>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_close_r+0x1a>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_close_r+0x1a>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	20000408 	.word	0x20000408

08005874 <_lseek_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d07      	ldr	r5, [pc, #28]	@ (8005894 <_lseek_r+0x20>)
 8005878:	4604      	mov	r4, r0
 800587a:	4608      	mov	r0, r1
 800587c:	4611      	mov	r1, r2
 800587e:	2200      	movs	r2, #0
 8005880:	602a      	str	r2, [r5, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f7fb fd91 	bl	80013aa <_lseek>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_lseek_r+0x1e>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_lseek_r+0x1e>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000408 	.word	0x20000408

08005898 <_read_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d07      	ldr	r5, [pc, #28]	@ (80058b8 <_read_r+0x20>)
 800589c:	4604      	mov	r4, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	2200      	movs	r2, #0
 80058a4:	602a      	str	r2, [r5, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f7fb fd1f 	bl	80012ea <_read>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_read_r+0x1e>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_read_r+0x1e>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	20000408 	.word	0x20000408

080058bc <_write_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	@ (80058dc <_write_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb fd2a 	bl	8001324 <_write>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_write_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_write_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000408 	.word	0x20000408

080058e0 <__errno>:
 80058e0:	4b01      	ldr	r3, [pc, #4]	@ (80058e8 <__errno+0x8>)
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000018 	.word	0x20000018

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	@ (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005930 <__libc_init_array+0x44>)
 8005900:	f004 f85e 	bl	80099c0 <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08009e9c 	.word	0x08009e9c
 8005928:	08009e9c 	.word	0x08009e9c
 800592c:	08009e9c 	.word	0x08009e9c
 8005930:	08009ea0 	.word	0x08009ea0

08005934 <__retarget_lock_init_recursive>:
 8005934:	4770      	bx	lr

08005936 <__retarget_lock_acquire_recursive>:
 8005936:	4770      	bx	lr

08005938 <__retarget_lock_release_recursive>:
 8005938:	4770      	bx	lr
	...

0800593c <nanf>:
 800593c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005944 <nanf+0x8>
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	7fc00000 	.word	0x7fc00000

08005948 <quorem>:
 8005948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	6903      	ldr	r3, [r0, #16]
 800594e:	690c      	ldr	r4, [r1, #16]
 8005950:	42a3      	cmp	r3, r4
 8005952:	4607      	mov	r7, r0
 8005954:	db7e      	blt.n	8005a54 <quorem+0x10c>
 8005956:	3c01      	subs	r4, #1
 8005958:	f101 0814 	add.w	r8, r1, #20
 800595c:	00a3      	lsls	r3, r4, #2
 800595e:	f100 0514 	add.w	r5, r0, #20
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800596e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005972:	3301      	adds	r3, #1
 8005974:	429a      	cmp	r2, r3
 8005976:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800597a:	fbb2 f6f3 	udiv	r6, r2, r3
 800597e:	d32e      	bcc.n	80059de <quorem+0x96>
 8005980:	f04f 0a00 	mov.w	sl, #0
 8005984:	46c4      	mov	ip, r8
 8005986:	46ae      	mov	lr, r5
 8005988:	46d3      	mov	fp, sl
 800598a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800598e:	b298      	uxth	r0, r3
 8005990:	fb06 a000 	mla	r0, r6, r0, sl
 8005994:	0c02      	lsrs	r2, r0, #16
 8005996:	0c1b      	lsrs	r3, r3, #16
 8005998:	fb06 2303 	mla	r3, r6, r3, r2
 800599c:	f8de 2000 	ldr.w	r2, [lr]
 80059a0:	b280      	uxth	r0, r0
 80059a2:	b292      	uxth	r2, r2
 80059a4:	1a12      	subs	r2, r2, r0
 80059a6:	445a      	add	r2, fp
 80059a8:	f8de 0000 	ldr.w	r0, [lr]
 80059ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80059b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80059ba:	b292      	uxth	r2, r2
 80059bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059c0:	45e1      	cmp	r9, ip
 80059c2:	f84e 2b04 	str.w	r2, [lr], #4
 80059c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059ca:	d2de      	bcs.n	800598a <quorem+0x42>
 80059cc:	9b00      	ldr	r3, [sp, #0]
 80059ce:	58eb      	ldr	r3, [r5, r3]
 80059d0:	b92b      	cbnz	r3, 80059de <quorem+0x96>
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	3b04      	subs	r3, #4
 80059d6:	429d      	cmp	r5, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	d32f      	bcc.n	8005a3c <quorem+0xf4>
 80059dc:	613c      	str	r4, [r7, #16]
 80059de:	4638      	mov	r0, r7
 80059e0:	f001 f9c6 	bl	8006d70 <__mcmp>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	db25      	blt.n	8005a34 <quorem+0xec>
 80059e8:	4629      	mov	r1, r5
 80059ea:	2000      	movs	r0, #0
 80059ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80059f0:	f8d1 c000 	ldr.w	ip, [r1]
 80059f4:	fa1f fe82 	uxth.w	lr, r2
 80059f8:	fa1f f38c 	uxth.w	r3, ip
 80059fc:	eba3 030e 	sub.w	r3, r3, lr
 8005a00:	4403      	add	r3, r0
 8005a02:	0c12      	lsrs	r2, r2, #16
 8005a04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a12:	45c1      	cmp	r9, r8
 8005a14:	f841 3b04 	str.w	r3, [r1], #4
 8005a18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a1c:	d2e6      	bcs.n	80059ec <quorem+0xa4>
 8005a1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a26:	b922      	cbnz	r2, 8005a32 <quorem+0xea>
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	d30b      	bcc.n	8005a48 <quorem+0x100>
 8005a30:	613c      	str	r4, [r7, #16]
 8005a32:	3601      	adds	r6, #1
 8005a34:	4630      	mov	r0, r6
 8005a36:	b003      	add	sp, #12
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	d1cb      	bne.n	80059dc <quorem+0x94>
 8005a44:	3c01      	subs	r4, #1
 8005a46:	e7c6      	b.n	80059d6 <quorem+0x8e>
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	2a00      	cmp	r2, #0
 8005a4e:	d1ef      	bne.n	8005a30 <quorem+0xe8>
 8005a50:	3c01      	subs	r4, #1
 8005a52:	e7ea      	b.n	8005a2a <quorem+0xe2>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7ee      	b.n	8005a36 <quorem+0xee>

08005a58 <_dtoa_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	69c7      	ldr	r7, [r0, #28]
 8005a5e:	b097      	sub	sp, #92	@ 0x5c
 8005a60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005a64:	ec55 4b10 	vmov	r4, r5, d0
 8005a68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005a6a:	9107      	str	r1, [sp, #28]
 8005a6c:	4681      	mov	r9, r0
 8005a6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a70:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a72:	b97f      	cbnz	r7, 8005a94 <_dtoa_r+0x3c>
 8005a74:	2010      	movs	r0, #16
 8005a76:	f000 fe09 	bl	800668c <malloc>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005a80:	b920      	cbnz	r0, 8005a8c <_dtoa_r+0x34>
 8005a82:	4ba9      	ldr	r3, [pc, #676]	@ (8005d28 <_dtoa_r+0x2d0>)
 8005a84:	21ef      	movs	r1, #239	@ 0xef
 8005a86:	48a9      	ldr	r0, [pc, #676]	@ (8005d2c <_dtoa_r+0x2d4>)
 8005a88:	f003 fb0a 	bl	80090a0 <__assert_func>
 8005a8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a90:	6007      	str	r7, [r0, #0]
 8005a92:	60c7      	str	r7, [r0, #12]
 8005a94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	b159      	cbz	r1, 8005ab4 <_dtoa_r+0x5c>
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	604a      	str	r2, [r1, #4]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4093      	lsls	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	f000 fee6 	bl	8006878 <_Bfree>
 8005aac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	1e2b      	subs	r3, r5, #0
 8005ab6:	bfb9      	ittee	lt
 8005ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005abc:	9305      	strlt	r3, [sp, #20]
 8005abe:	2300      	movge	r3, #0
 8005ac0:	6033      	strge	r3, [r6, #0]
 8005ac2:	9f05      	ldr	r7, [sp, #20]
 8005ac4:	4b9a      	ldr	r3, [pc, #616]	@ (8005d30 <_dtoa_r+0x2d8>)
 8005ac6:	bfbc      	itt	lt
 8005ac8:	2201      	movlt	r2, #1
 8005aca:	6032      	strlt	r2, [r6, #0]
 8005acc:	43bb      	bics	r3, r7
 8005ace:	d112      	bne.n	8005af6 <_dtoa_r+0x9e>
 8005ad0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ad2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005adc:	4323      	orrs	r3, r4
 8005ade:	f000 855a 	beq.w	8006596 <_dtoa_r+0xb3e>
 8005ae2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ae4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005d44 <_dtoa_r+0x2ec>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 855c 	beq.w	80065a6 <_dtoa_r+0xb4e>
 8005aee:	f10a 0303 	add.w	r3, sl, #3
 8005af2:	f000 bd56 	b.w	80065a2 <_dtoa_r+0xb4a>
 8005af6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005afa:	2200      	movs	r2, #0
 8005afc:	ec51 0b17 	vmov	r0, r1, d7
 8005b00:	2300      	movs	r3, #0
 8005b02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005b06:	f7fa ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	b158      	cbz	r0, 8005b26 <_dtoa_r+0xce>
 8005b0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b10:	2301      	movs	r3, #1
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b16:	b113      	cbz	r3, 8005b1e <_dtoa_r+0xc6>
 8005b18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005b1a:	4b86      	ldr	r3, [pc, #536]	@ (8005d34 <_dtoa_r+0x2dc>)
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005d48 <_dtoa_r+0x2f0>
 8005b22:	f000 bd40 	b.w	80065a6 <_dtoa_r+0xb4e>
 8005b26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005b2a:	aa14      	add	r2, sp, #80	@ 0x50
 8005b2c:	a915      	add	r1, sp, #84	@ 0x54
 8005b2e:	4648      	mov	r0, r9
 8005b30:	f001 fa3e 	bl	8006fb0 <__d2b>
 8005b34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b38:	9002      	str	r0, [sp, #8]
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	d078      	beq.n	8005c30 <_dtoa_r+0x1d8>
 8005b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4b76      	ldr	r3, [pc, #472]	@ (8005d38 <_dtoa_r+0x2e0>)
 8005b5e:	f7fa fb9b 	bl	8000298 <__aeabi_dsub>
 8005b62:	a36b      	add	r3, pc, #428	@ (adr r3, 8005d10 <_dtoa_r+0x2b8>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fd4e 	bl	8000608 <__aeabi_dmul>
 8005b6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005d18 <_dtoa_r+0x2c0>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fb93 	bl	800029c <__adddf3>
 8005b76:	4604      	mov	r4, r0
 8005b78:	4630      	mov	r0, r6
 8005b7a:	460d      	mov	r5, r1
 8005b7c:	f7fa fcda 	bl	8000534 <__aeabi_i2d>
 8005b80:	a367      	add	r3, pc, #412	@ (adr r3, 8005d20 <_dtoa_r+0x2c8>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fd3f 	bl	8000608 <__aeabi_dmul>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fb83 	bl	800029c <__adddf3>
 8005b96:	4604      	mov	r4, r0
 8005b98:	460d      	mov	r5, r1
 8005b9a:	f7fa ffe5 	bl	8000b68 <__aeabi_d2iz>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f7fa ffa0 	bl	8000aec <__aeabi_dcmplt>
 8005bac:	b140      	cbz	r0, 8005bc0 <_dtoa_r+0x168>
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f7fa fcc0 	bl	8000534 <__aeabi_i2d>
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	f7fa ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bbc:	b900      	cbnz	r0, 8005bc0 <_dtoa_r+0x168>
 8005bbe:	3f01      	subs	r7, #1
 8005bc0:	2f16      	cmp	r7, #22
 8005bc2:	d852      	bhi.n	8005c6a <_dtoa_r+0x212>
 8005bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8005d3c <_dtoa_r+0x2e4>)
 8005bc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bd2:	f7fa ff8b 	bl	8000aec <__aeabi_dcmplt>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d049      	beq.n	8005c6e <_dtoa_r+0x216>
 8005bda:	3f01      	subs	r7, #1
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8005be0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005be2:	1b9b      	subs	r3, r3, r6
 8005be4:	1e5a      	subs	r2, r3, #1
 8005be6:	bf45      	ittet	mi
 8005be8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005bec:	9300      	strmi	r3, [sp, #0]
 8005bee:	2300      	movpl	r3, #0
 8005bf0:	2300      	movmi	r3, #0
 8005bf2:	9206      	str	r2, [sp, #24]
 8005bf4:	bf54      	ite	pl
 8005bf6:	9300      	strpl	r3, [sp, #0]
 8005bf8:	9306      	strmi	r3, [sp, #24]
 8005bfa:	2f00      	cmp	r7, #0
 8005bfc:	db39      	blt.n	8005c72 <_dtoa_r+0x21a>
 8005bfe:	9b06      	ldr	r3, [sp, #24]
 8005c00:	970d      	str	r7, [sp, #52]	@ 0x34
 8005c02:	443b      	add	r3, r7
 8005c04:	9306      	str	r3, [sp, #24]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9308      	str	r3, [sp, #32]
 8005c0a:	9b07      	ldr	r3, [sp, #28]
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d863      	bhi.n	8005cd8 <_dtoa_r+0x280>
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	bfc4      	itt	gt
 8005c14:	3b04      	subgt	r3, #4
 8005c16:	9307      	strgt	r3, [sp, #28]
 8005c18:	9b07      	ldr	r3, [sp, #28]
 8005c1a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c1e:	bfcc      	ite	gt
 8005c20:	2400      	movgt	r4, #0
 8005c22:	2401      	movle	r4, #1
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d863      	bhi.n	8005cf0 <_dtoa_r+0x298>
 8005c28:	e8df f003 	tbb	[pc, r3]
 8005c2c:	2b375452 	.word	0x2b375452
 8005c30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005c34:	441e      	add	r6, r3
 8005c36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	bfc1      	itttt	gt
 8005c3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c42:	409f      	lslgt	r7, r3
 8005c44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c4c:	bfd6      	itet	le
 8005c4e:	f1c3 0320 	rsble	r3, r3, #32
 8005c52:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c56:	fa04 f003 	lslle.w	r0, r4, r3
 8005c5a:	f7fa fc5b 	bl	8000514 <__aeabi_ui2d>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c64:	3e01      	subs	r6, #1
 8005c66:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c68:	e776      	b.n	8005b58 <_dtoa_r+0x100>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e7b7      	b.n	8005bde <_dtoa_r+0x186>
 8005c6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c70:	e7b6      	b.n	8005be0 <_dtoa_r+0x188>
 8005c72:	9b00      	ldr	r3, [sp, #0]
 8005c74:	1bdb      	subs	r3, r3, r7
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	427b      	negs	r3, r7
 8005c7a:	9308      	str	r3, [sp, #32]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c80:	e7c3      	b.n	8005c0a <_dtoa_r+0x1b2>
 8005c82:	2301      	movs	r3, #1
 8005c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c88:	eb07 0b03 	add.w	fp, r7, r3
 8005c8c:	f10b 0301 	add.w	r3, fp, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	9303      	str	r3, [sp, #12]
 8005c94:	bfb8      	it	lt
 8005c96:	2301      	movlt	r3, #1
 8005c98:	e006      	b.n	8005ca8 <_dtoa_r+0x250>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	dd28      	ble.n	8005cf6 <_dtoa_r+0x29e>
 8005ca4:	469b      	mov	fp, r3
 8005ca6:	9303      	str	r3, [sp, #12]
 8005ca8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005cac:	2100      	movs	r1, #0
 8005cae:	2204      	movs	r2, #4
 8005cb0:	f102 0514 	add.w	r5, r2, #20
 8005cb4:	429d      	cmp	r5, r3
 8005cb6:	d926      	bls.n	8005d06 <_dtoa_r+0x2ae>
 8005cb8:	6041      	str	r1, [r0, #4]
 8005cba:	4648      	mov	r0, r9
 8005cbc:	f000 fd9c 	bl	80067f8 <_Balloc>
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d142      	bne.n	8005d4c <_dtoa_r+0x2f4>
 8005cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d40 <_dtoa_r+0x2e8>)
 8005cc8:	4602      	mov	r2, r0
 8005cca:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cce:	e6da      	b.n	8005a86 <_dtoa_r+0x2e>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e7e3      	b.n	8005c9c <_dtoa_r+0x244>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e7d5      	b.n	8005c84 <_dtoa_r+0x22c>
 8005cd8:	2401      	movs	r4, #1
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ce0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cea:	2312      	movs	r3, #18
 8005cec:	920c      	str	r2, [sp, #48]	@ 0x30
 8005cee:	e7db      	b.n	8005ca8 <_dtoa_r+0x250>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf4:	e7f4      	b.n	8005ce0 <_dtoa_r+0x288>
 8005cf6:	f04f 0b01 	mov.w	fp, #1
 8005cfa:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cfe:	465b      	mov	r3, fp
 8005d00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005d04:	e7d0      	b.n	8005ca8 <_dtoa_r+0x250>
 8005d06:	3101      	adds	r1, #1
 8005d08:	0052      	lsls	r2, r2, #1
 8005d0a:	e7d1      	b.n	8005cb0 <_dtoa_r+0x258>
 8005d0c:	f3af 8000 	nop.w
 8005d10:	636f4361 	.word	0x636f4361
 8005d14:	3fd287a7 	.word	0x3fd287a7
 8005d18:	8b60c8b3 	.word	0x8b60c8b3
 8005d1c:	3fc68a28 	.word	0x3fc68a28
 8005d20:	509f79fb 	.word	0x509f79fb
 8005d24:	3fd34413 	.word	0x3fd34413
 8005d28:	08009a98 	.word	0x08009a98
 8005d2c:	08009aaf 	.word	0x08009aaf
 8005d30:	7ff00000 	.word	0x7ff00000
 8005d34:	08009b9b 	.word	0x08009b9b
 8005d38:	3ff80000 	.word	0x3ff80000
 8005d3c:	08009c78 	.word	0x08009c78
 8005d40:	08009b07 	.word	0x08009b07
 8005d44:	08009a94 	.word	0x08009a94
 8005d48:	08009b9a 	.word	0x08009b9a
 8005d4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d50:	6018      	str	r0, [r3, #0]
 8005d52:	9b03      	ldr	r3, [sp, #12]
 8005d54:	2b0e      	cmp	r3, #14
 8005d56:	f200 80a1 	bhi.w	8005e9c <_dtoa_r+0x444>
 8005d5a:	2c00      	cmp	r4, #0
 8005d5c:	f000 809e 	beq.w	8005e9c <_dtoa_r+0x444>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	dd33      	ble.n	8005dcc <_dtoa_r+0x374>
 8005d64:	4b9c      	ldr	r3, [pc, #624]	@ (8005fd8 <_dtoa_r+0x580>)
 8005d66:	f007 020f 	and.w	r2, r7, #15
 8005d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d6e:	ed93 7b00 	vldr	d7, [r3]
 8005d72:	05f8      	lsls	r0, r7, #23
 8005d74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005d78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d7c:	d516      	bpl.n	8005dac <_dtoa_r+0x354>
 8005d7e:	4b97      	ldr	r3, [pc, #604]	@ (8005fdc <_dtoa_r+0x584>)
 8005d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d88:	f7fa fd68 	bl	800085c <__aeabi_ddiv>
 8005d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d90:	f004 040f 	and.w	r4, r4, #15
 8005d94:	2603      	movs	r6, #3
 8005d96:	4d91      	ldr	r5, [pc, #580]	@ (8005fdc <_dtoa_r+0x584>)
 8005d98:	b954      	cbnz	r4, 8005db0 <_dtoa_r+0x358>
 8005d9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da2:	f7fa fd5b 	bl	800085c <__aeabi_ddiv>
 8005da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005daa:	e028      	b.n	8005dfe <_dtoa_r+0x3a6>
 8005dac:	2602      	movs	r6, #2
 8005dae:	e7f2      	b.n	8005d96 <_dtoa_r+0x33e>
 8005db0:	07e1      	lsls	r1, r4, #31
 8005db2:	d508      	bpl.n	8005dc6 <_dtoa_r+0x36e>
 8005db4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dbc:	f7fa fc24 	bl	8000608 <__aeabi_dmul>
 8005dc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	1064      	asrs	r4, r4, #1
 8005dc8:	3508      	adds	r5, #8
 8005dca:	e7e5      	b.n	8005d98 <_dtoa_r+0x340>
 8005dcc:	f000 80af 	beq.w	8005f2e <_dtoa_r+0x4d6>
 8005dd0:	427c      	negs	r4, r7
 8005dd2:	4b81      	ldr	r3, [pc, #516]	@ (8005fd8 <_dtoa_r+0x580>)
 8005dd4:	4d81      	ldr	r5, [pc, #516]	@ (8005fdc <_dtoa_r+0x584>)
 8005dd6:	f004 020f 	and.w	r2, r4, #15
 8005dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005de6:	f7fa fc0f 	bl	8000608 <__aeabi_dmul>
 8005dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dee:	1124      	asrs	r4, r4, #4
 8005df0:	2300      	movs	r3, #0
 8005df2:	2602      	movs	r6, #2
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	f040 808f 	bne.w	8005f18 <_dtoa_r+0x4c0>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d3      	bne.n	8005da6 <_dtoa_r+0x34e>
 8005dfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8094 	beq.w	8005f32 <_dtoa_r+0x4da>
 8005e0a:	4b75      	ldr	r3, [pc, #468]	@ (8005fe0 <_dtoa_r+0x588>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa fe6b 	bl	8000aec <__aeabi_dcmplt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f000 808b 	beq.w	8005f32 <_dtoa_r+0x4da>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8087 	beq.w	8005f32 <_dtoa_r+0x4da>
 8005e24:	f1bb 0f00 	cmp.w	fp, #0
 8005e28:	dd34      	ble.n	8005e94 <_dtoa_r+0x43c>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe4 <_dtoa_r+0x58c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fa fbe9 	bl	8000608 <__aeabi_dmul>
 8005e36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e3a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005e3e:	3601      	adds	r6, #1
 8005e40:	465c      	mov	r4, fp
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7fa fb76 	bl	8000534 <__aeabi_i2d>
 8005e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e4c:	f7fa fbdc 	bl	8000608 <__aeabi_dmul>
 8005e50:	4b65      	ldr	r3, [pc, #404]	@ (8005fe8 <_dtoa_r+0x590>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	f7fa fa22 	bl	800029c <__adddf3>
 8005e58:	4605      	mov	r5, r0
 8005e5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e5e:	2c00      	cmp	r4, #0
 8005e60:	d16a      	bne.n	8005f38 <_dtoa_r+0x4e0>
 8005e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e66:	4b61      	ldr	r3, [pc, #388]	@ (8005fec <_dtoa_r+0x594>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f7fa fa15 	bl	8000298 <__aeabi_dsub>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e76:	462a      	mov	r2, r5
 8005e78:	4633      	mov	r3, r6
 8005e7a:	f7fa fe55 	bl	8000b28 <__aeabi_dcmpgt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f040 8298 	bne.w	80063b4 <_dtoa_r+0x95c>
 8005e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e88:	462a      	mov	r2, r5
 8005e8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e8e:	f7fa fe2d 	bl	8000aec <__aeabi_dcmplt>
 8005e92:	bb38      	cbnz	r0, 8005ee4 <_dtoa_r+0x48c>
 8005e94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005e98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f2c0 8157 	blt.w	8006152 <_dtoa_r+0x6fa>
 8005ea4:	2f0e      	cmp	r7, #14
 8005ea6:	f300 8154 	bgt.w	8006152 <_dtoa_r+0x6fa>
 8005eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8005fd8 <_dtoa_r+0x580>)
 8005eac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005eb0:	ed93 7b00 	vldr	d7, [r3]
 8005eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	ed8d 7b00 	vstr	d7, [sp]
 8005ebc:	f280 80e5 	bge.w	800608a <_dtoa_r+0x632>
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f300 80e1 	bgt.w	800608a <_dtoa_r+0x632>
 8005ec8:	d10c      	bne.n	8005ee4 <_dtoa_r+0x48c>
 8005eca:	4b48      	ldr	r3, [pc, #288]	@ (8005fec <_dtoa_r+0x594>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	ec51 0b17 	vmov	r0, r1, d7
 8005ed2:	f7fa fb99 	bl	8000608 <__aeabi_dmul>
 8005ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eda:	f7fa fe1b 	bl	8000b14 <__aeabi_dcmpge>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f000 8266 	beq.w	80063b0 <_dtoa_r+0x958>
 8005ee4:	2400      	movs	r4, #0
 8005ee6:	4625      	mov	r5, r4
 8005ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eea:	4656      	mov	r6, sl
 8005eec:	ea6f 0803 	mvn.w	r8, r3
 8005ef0:	2700      	movs	r7, #0
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4648      	mov	r0, r9
 8005ef6:	f000 fcbf 	bl	8006878 <_Bfree>
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	f000 80bd 	beq.w	800607a <_dtoa_r+0x622>
 8005f00:	b12f      	cbz	r7, 8005f0e <_dtoa_r+0x4b6>
 8005f02:	42af      	cmp	r7, r5
 8005f04:	d003      	beq.n	8005f0e <_dtoa_r+0x4b6>
 8005f06:	4639      	mov	r1, r7
 8005f08:	4648      	mov	r0, r9
 8005f0a:	f000 fcb5 	bl	8006878 <_Bfree>
 8005f0e:	4629      	mov	r1, r5
 8005f10:	4648      	mov	r0, r9
 8005f12:	f000 fcb1 	bl	8006878 <_Bfree>
 8005f16:	e0b0      	b.n	800607a <_dtoa_r+0x622>
 8005f18:	07e2      	lsls	r2, r4, #31
 8005f1a:	d505      	bpl.n	8005f28 <_dtoa_r+0x4d0>
 8005f1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f20:	f7fa fb72 	bl	8000608 <__aeabi_dmul>
 8005f24:	3601      	adds	r6, #1
 8005f26:	2301      	movs	r3, #1
 8005f28:	1064      	asrs	r4, r4, #1
 8005f2a:	3508      	adds	r5, #8
 8005f2c:	e762      	b.n	8005df4 <_dtoa_r+0x39c>
 8005f2e:	2602      	movs	r6, #2
 8005f30:	e765      	b.n	8005dfe <_dtoa_r+0x3a6>
 8005f32:	9c03      	ldr	r4, [sp, #12]
 8005f34:	46b8      	mov	r8, r7
 8005f36:	e784      	b.n	8005e42 <_dtoa_r+0x3ea>
 8005f38:	4b27      	ldr	r3, [pc, #156]	@ (8005fd8 <_dtoa_r+0x580>)
 8005f3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f44:	4454      	add	r4, sl
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d054      	beq.n	8005ff4 <_dtoa_r+0x59c>
 8005f4a:	4929      	ldr	r1, [pc, #164]	@ (8005ff0 <_dtoa_r+0x598>)
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7fa fc85 	bl	800085c <__aeabi_ddiv>
 8005f52:	4633      	mov	r3, r6
 8005f54:	462a      	mov	r2, r5
 8005f56:	f7fa f99f 	bl	8000298 <__aeabi_dsub>
 8005f5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f5e:	4656      	mov	r6, sl
 8005f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f64:	f7fa fe00 	bl	8000b68 <__aeabi_d2iz>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	f7fa fae3 	bl	8000534 <__aeabi_i2d>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f76:	f7fa f98f 	bl	8000298 <__aeabi_dsub>
 8005f7a:	3530      	adds	r5, #48	@ 0x30
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f84:	f806 5b01 	strb.w	r5, [r6], #1
 8005f88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f8c:	f7fa fdae 	bl	8000aec <__aeabi_dcmplt>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d172      	bne.n	800607a <_dtoa_r+0x622>
 8005f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f98:	4911      	ldr	r1, [pc, #68]	@ (8005fe0 <_dtoa_r+0x588>)
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7fa f97c 	bl	8000298 <__aeabi_dsub>
 8005fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005fa4:	f7fa fda2 	bl	8000aec <__aeabi_dcmplt>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f040 80b4 	bne.w	8006116 <_dtoa_r+0x6be>
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	f43f af70 	beq.w	8005e94 <_dtoa_r+0x43c>
 8005fb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <_dtoa_r+0x58c>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fa fb24 	bl	8000608 <__aeabi_dmul>
 8005fc0:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <_dtoa_r+0x58c>)
 8005fc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fcc:	f7fa fb1c 	bl	8000608 <__aeabi_dmul>
 8005fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd4:	e7c4      	b.n	8005f60 <_dtoa_r+0x508>
 8005fd6:	bf00      	nop
 8005fd8:	08009c78 	.word	0x08009c78
 8005fdc:	08009c50 	.word	0x08009c50
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	40240000 	.word	0x40240000
 8005fe8:	401c0000 	.word	0x401c0000
 8005fec:	40140000 	.word	0x40140000
 8005ff0:	3fe00000 	.word	0x3fe00000
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f7fa fb06 	bl	8000608 <__aeabi_dmul>
 8005ffc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006000:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006002:	4656      	mov	r6, sl
 8006004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006008:	f7fa fdae 	bl	8000b68 <__aeabi_d2iz>
 800600c:	4605      	mov	r5, r0
 800600e:	f7fa fa91 	bl	8000534 <__aeabi_i2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800601a:	f7fa f93d 	bl	8000298 <__aeabi_dsub>
 800601e:	3530      	adds	r5, #48	@ 0x30
 8006020:	f806 5b01 	strb.w	r5, [r6], #1
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	42a6      	cmp	r6, r4
 800602a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	d124      	bne.n	800607e <_dtoa_r+0x626>
 8006034:	4baf      	ldr	r3, [pc, #700]	@ (80062f4 <_dtoa_r+0x89c>)
 8006036:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800603a:	f7fa f92f 	bl	800029c <__adddf3>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006046:	f7fa fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800604a:	2800      	cmp	r0, #0
 800604c:	d163      	bne.n	8006116 <_dtoa_r+0x6be>
 800604e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006052:	49a8      	ldr	r1, [pc, #672]	@ (80062f4 <_dtoa_r+0x89c>)
 8006054:	2000      	movs	r0, #0
 8006056:	f7fa f91f 	bl	8000298 <__aeabi_dsub>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006062:	f7fa fd43 	bl	8000aec <__aeabi_dcmplt>
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f af14 	beq.w	8005e94 <_dtoa_r+0x43c>
 800606c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800606e:	1e73      	subs	r3, r6, #1
 8006070:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006072:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006076:	2b30      	cmp	r3, #48	@ 0x30
 8006078:	d0f8      	beq.n	800606c <_dtoa_r+0x614>
 800607a:	4647      	mov	r7, r8
 800607c:	e03b      	b.n	80060f6 <_dtoa_r+0x69e>
 800607e:	4b9e      	ldr	r3, [pc, #632]	@ (80062f8 <_dtoa_r+0x8a0>)
 8006080:	f7fa fac2 	bl	8000608 <__aeabi_dmul>
 8006084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006088:	e7bc      	b.n	8006004 <_dtoa_r+0x5ac>
 800608a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800608e:	4656      	mov	r6, sl
 8006090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006094:	4620      	mov	r0, r4
 8006096:	4629      	mov	r1, r5
 8006098:	f7fa fbe0 	bl	800085c <__aeabi_ddiv>
 800609c:	f7fa fd64 	bl	8000b68 <__aeabi_d2iz>
 80060a0:	4680      	mov	r8, r0
 80060a2:	f7fa fa47 	bl	8000534 <__aeabi_i2d>
 80060a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060aa:	f7fa faad 	bl	8000608 <__aeabi_dmul>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060ba:	f7fa f8ed 	bl	8000298 <__aeabi_dsub>
 80060be:	f806 4b01 	strb.w	r4, [r6], #1
 80060c2:	9d03      	ldr	r5, [sp, #12]
 80060c4:	eba6 040a 	sub.w	r4, r6, sl
 80060c8:	42a5      	cmp	r5, r4
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	d133      	bne.n	8006138 <_dtoa_r+0x6e0>
 80060d0:	f7fa f8e4 	bl	800029c <__adddf3>
 80060d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	f7fa fd24 	bl	8000b28 <__aeabi_dcmpgt>
 80060e0:	b9c0      	cbnz	r0, 8006114 <_dtoa_r+0x6bc>
 80060e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80060ee:	b110      	cbz	r0, 80060f6 <_dtoa_r+0x69e>
 80060f0:	f018 0f01 	tst.w	r8, #1
 80060f4:	d10e      	bne.n	8006114 <_dtoa_r+0x6bc>
 80060f6:	9902      	ldr	r1, [sp, #8]
 80060f8:	4648      	mov	r0, r9
 80060fa:	f000 fbbd 	bl	8006878 <_Bfree>
 80060fe:	2300      	movs	r3, #0
 8006100:	7033      	strb	r3, [r6, #0]
 8006102:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006104:	3701      	adds	r7, #1
 8006106:	601f      	str	r7, [r3, #0]
 8006108:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 824b 	beq.w	80065a6 <_dtoa_r+0xb4e>
 8006110:	601e      	str	r6, [r3, #0]
 8006112:	e248      	b.n	80065a6 <_dtoa_r+0xb4e>
 8006114:	46b8      	mov	r8, r7
 8006116:	4633      	mov	r3, r6
 8006118:	461e      	mov	r6, r3
 800611a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800611e:	2a39      	cmp	r2, #57	@ 0x39
 8006120:	d106      	bne.n	8006130 <_dtoa_r+0x6d8>
 8006122:	459a      	cmp	sl, r3
 8006124:	d1f8      	bne.n	8006118 <_dtoa_r+0x6c0>
 8006126:	2230      	movs	r2, #48	@ 0x30
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	f88a 2000 	strb.w	r2, [sl]
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	3201      	adds	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e7a0      	b.n	800607a <_dtoa_r+0x622>
 8006138:	4b6f      	ldr	r3, [pc, #444]	@ (80062f8 <_dtoa_r+0x8a0>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa fa64 	bl	8000608 <__aeabi_dmul>
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4604      	mov	r4, r0
 8006146:	460d      	mov	r5, r1
 8006148:	f7fa fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800614c:	2800      	cmp	r0, #0
 800614e:	d09f      	beq.n	8006090 <_dtoa_r+0x638>
 8006150:	e7d1      	b.n	80060f6 <_dtoa_r+0x69e>
 8006152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006154:	2a00      	cmp	r2, #0
 8006156:	f000 80ea 	beq.w	800632e <_dtoa_r+0x8d6>
 800615a:	9a07      	ldr	r2, [sp, #28]
 800615c:	2a01      	cmp	r2, #1
 800615e:	f300 80cd 	bgt.w	80062fc <_dtoa_r+0x8a4>
 8006162:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006164:	2a00      	cmp	r2, #0
 8006166:	f000 80c1 	beq.w	80062ec <_dtoa_r+0x894>
 800616a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800616e:	9c08      	ldr	r4, [sp, #32]
 8006170:	9e00      	ldr	r6, [sp, #0]
 8006172:	9a00      	ldr	r2, [sp, #0]
 8006174:	441a      	add	r2, r3
 8006176:	9200      	str	r2, [sp, #0]
 8006178:	9a06      	ldr	r2, [sp, #24]
 800617a:	2101      	movs	r1, #1
 800617c:	441a      	add	r2, r3
 800617e:	4648      	mov	r0, r9
 8006180:	9206      	str	r2, [sp, #24]
 8006182:	f000 fc77 	bl	8006a74 <__i2b>
 8006186:	4605      	mov	r5, r0
 8006188:	b166      	cbz	r6, 80061a4 <_dtoa_r+0x74c>
 800618a:	9b06      	ldr	r3, [sp, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd09      	ble.n	80061a4 <_dtoa_r+0x74c>
 8006190:	42b3      	cmp	r3, r6
 8006192:	9a00      	ldr	r2, [sp, #0]
 8006194:	bfa8      	it	ge
 8006196:	4633      	movge	r3, r6
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	9200      	str	r2, [sp, #0]
 800619c:	9a06      	ldr	r2, [sp, #24]
 800619e:	1af6      	subs	r6, r6, r3
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	9306      	str	r3, [sp, #24]
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	b30b      	cbz	r3, 80061ec <_dtoa_r+0x794>
 80061a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80c6 	beq.w	800633c <_dtoa_r+0x8e4>
 80061b0:	2c00      	cmp	r4, #0
 80061b2:	f000 80c0 	beq.w	8006336 <_dtoa_r+0x8de>
 80061b6:	4629      	mov	r1, r5
 80061b8:	4622      	mov	r2, r4
 80061ba:	4648      	mov	r0, r9
 80061bc:	f000 fd12 	bl	8006be4 <__pow5mult>
 80061c0:	9a02      	ldr	r2, [sp, #8]
 80061c2:	4601      	mov	r1, r0
 80061c4:	4605      	mov	r5, r0
 80061c6:	4648      	mov	r0, r9
 80061c8:	f000 fc6a 	bl	8006aa0 <__multiply>
 80061cc:	9902      	ldr	r1, [sp, #8]
 80061ce:	4680      	mov	r8, r0
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 fb51 	bl	8006878 <_Bfree>
 80061d6:	9b08      	ldr	r3, [sp, #32]
 80061d8:	1b1b      	subs	r3, r3, r4
 80061da:	9308      	str	r3, [sp, #32]
 80061dc:	f000 80b1 	beq.w	8006342 <_dtoa_r+0x8ea>
 80061e0:	9a08      	ldr	r2, [sp, #32]
 80061e2:	4641      	mov	r1, r8
 80061e4:	4648      	mov	r0, r9
 80061e6:	f000 fcfd 	bl	8006be4 <__pow5mult>
 80061ea:	9002      	str	r0, [sp, #8]
 80061ec:	2101      	movs	r1, #1
 80061ee:	4648      	mov	r0, r9
 80061f0:	f000 fc40 	bl	8006a74 <__i2b>
 80061f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061f6:	4604      	mov	r4, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 81d8 	beq.w	80065ae <_dtoa_r+0xb56>
 80061fe:	461a      	mov	r2, r3
 8006200:	4601      	mov	r1, r0
 8006202:	4648      	mov	r0, r9
 8006204:	f000 fcee 	bl	8006be4 <__pow5mult>
 8006208:	9b07      	ldr	r3, [sp, #28]
 800620a:	2b01      	cmp	r3, #1
 800620c:	4604      	mov	r4, r0
 800620e:	f300 809f 	bgt.w	8006350 <_dtoa_r+0x8f8>
 8006212:	9b04      	ldr	r3, [sp, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 8097 	bne.w	8006348 <_dtoa_r+0x8f0>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 8093 	bne.w	800634c <_dtoa_r+0x8f4>
 8006226:	9b05      	ldr	r3, [sp, #20]
 8006228:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800622c:	0d1b      	lsrs	r3, r3, #20
 800622e:	051b      	lsls	r3, r3, #20
 8006230:	b133      	cbz	r3, 8006240 <_dtoa_r+0x7e8>
 8006232:	9b00      	ldr	r3, [sp, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	9b06      	ldr	r3, [sp, #24]
 800623a:	3301      	adds	r3, #1
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	2301      	movs	r3, #1
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 81b8 	beq.w	80065ba <_dtoa_r+0xb62>
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006250:	6918      	ldr	r0, [r3, #16]
 8006252:	f000 fbc3 	bl	80069dc <__hi0bits>
 8006256:	f1c0 0020 	rsb	r0, r0, #32
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	4418      	add	r0, r3
 800625e:	f010 001f 	ands.w	r0, r0, #31
 8006262:	f000 8082 	beq.w	800636a <_dtoa_r+0x912>
 8006266:	f1c0 0320 	rsb	r3, r0, #32
 800626a:	2b04      	cmp	r3, #4
 800626c:	dd73      	ble.n	8006356 <_dtoa_r+0x8fe>
 800626e:	9b00      	ldr	r3, [sp, #0]
 8006270:	f1c0 001c 	rsb	r0, r0, #28
 8006274:	4403      	add	r3, r0
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	9b06      	ldr	r3, [sp, #24]
 800627a:	4403      	add	r3, r0
 800627c:	4406      	add	r6, r0
 800627e:	9306      	str	r3, [sp, #24]
 8006280:	9b00      	ldr	r3, [sp, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dd05      	ble.n	8006292 <_dtoa_r+0x83a>
 8006286:	9902      	ldr	r1, [sp, #8]
 8006288:	461a      	mov	r2, r3
 800628a:	4648      	mov	r0, r9
 800628c:	f000 fd04 	bl	8006c98 <__lshift>
 8006290:	9002      	str	r0, [sp, #8]
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	dd05      	ble.n	80062a4 <_dtoa_r+0x84c>
 8006298:	4621      	mov	r1, r4
 800629a:	461a      	mov	r2, r3
 800629c:	4648      	mov	r0, r9
 800629e:	f000 fcfb 	bl	8006c98 <__lshift>
 80062a2:	4604      	mov	r4, r0
 80062a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d061      	beq.n	800636e <_dtoa_r+0x916>
 80062aa:	9802      	ldr	r0, [sp, #8]
 80062ac:	4621      	mov	r1, r4
 80062ae:	f000 fd5f 	bl	8006d70 <__mcmp>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	da5b      	bge.n	800636e <_dtoa_r+0x916>
 80062b6:	2300      	movs	r3, #0
 80062b8:	9902      	ldr	r1, [sp, #8]
 80062ba:	220a      	movs	r2, #10
 80062bc:	4648      	mov	r0, r9
 80062be:	f000 fafd 	bl	80068bc <__multadd>
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	9002      	str	r0, [sp, #8]
 80062c6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8177 	beq.w	80065be <_dtoa_r+0xb66>
 80062d0:	4629      	mov	r1, r5
 80062d2:	2300      	movs	r3, #0
 80062d4:	220a      	movs	r2, #10
 80062d6:	4648      	mov	r0, r9
 80062d8:	f000 faf0 	bl	80068bc <__multadd>
 80062dc:	f1bb 0f00 	cmp.w	fp, #0
 80062e0:	4605      	mov	r5, r0
 80062e2:	dc6f      	bgt.n	80063c4 <_dtoa_r+0x96c>
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	dc49      	bgt.n	800637e <_dtoa_r+0x926>
 80062ea:	e06b      	b.n	80063c4 <_dtoa_r+0x96c>
 80062ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062f2:	e73c      	b.n	800616e <_dtoa_r+0x716>
 80062f4:	3fe00000 	.word	0x3fe00000
 80062f8:	40240000 	.word	0x40240000
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	1e5c      	subs	r4, r3, #1
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	42a3      	cmp	r3, r4
 8006304:	db09      	blt.n	800631a <_dtoa_r+0x8c2>
 8006306:	1b1c      	subs	r4, r3, r4
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f6bf af30 	bge.w	8006170 <_dtoa_r+0x718>
 8006310:	9b00      	ldr	r3, [sp, #0]
 8006312:	9a03      	ldr	r2, [sp, #12]
 8006314:	1a9e      	subs	r6, r3, r2
 8006316:	2300      	movs	r3, #0
 8006318:	e72b      	b.n	8006172 <_dtoa_r+0x71a>
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800631e:	9408      	str	r4, [sp, #32]
 8006320:	1ae3      	subs	r3, r4, r3
 8006322:	441a      	add	r2, r3
 8006324:	9e00      	ldr	r6, [sp, #0]
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	920d      	str	r2, [sp, #52]	@ 0x34
 800632a:	2400      	movs	r4, #0
 800632c:	e721      	b.n	8006172 <_dtoa_r+0x71a>
 800632e:	9c08      	ldr	r4, [sp, #32]
 8006330:	9e00      	ldr	r6, [sp, #0]
 8006332:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006334:	e728      	b.n	8006188 <_dtoa_r+0x730>
 8006336:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800633a:	e751      	b.n	80061e0 <_dtoa_r+0x788>
 800633c:	9a08      	ldr	r2, [sp, #32]
 800633e:	9902      	ldr	r1, [sp, #8]
 8006340:	e750      	b.n	80061e4 <_dtoa_r+0x78c>
 8006342:	f8cd 8008 	str.w	r8, [sp, #8]
 8006346:	e751      	b.n	80061ec <_dtoa_r+0x794>
 8006348:	2300      	movs	r3, #0
 800634a:	e779      	b.n	8006240 <_dtoa_r+0x7e8>
 800634c:	9b04      	ldr	r3, [sp, #16]
 800634e:	e777      	b.n	8006240 <_dtoa_r+0x7e8>
 8006350:	2300      	movs	r3, #0
 8006352:	9308      	str	r3, [sp, #32]
 8006354:	e779      	b.n	800624a <_dtoa_r+0x7f2>
 8006356:	d093      	beq.n	8006280 <_dtoa_r+0x828>
 8006358:	9a00      	ldr	r2, [sp, #0]
 800635a:	331c      	adds	r3, #28
 800635c:	441a      	add	r2, r3
 800635e:	9200      	str	r2, [sp, #0]
 8006360:	9a06      	ldr	r2, [sp, #24]
 8006362:	441a      	add	r2, r3
 8006364:	441e      	add	r6, r3
 8006366:	9206      	str	r2, [sp, #24]
 8006368:	e78a      	b.n	8006280 <_dtoa_r+0x828>
 800636a:	4603      	mov	r3, r0
 800636c:	e7f4      	b.n	8006358 <_dtoa_r+0x900>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	46b8      	mov	r8, r7
 8006374:	dc20      	bgt.n	80063b8 <_dtoa_r+0x960>
 8006376:	469b      	mov	fp, r3
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	2b02      	cmp	r3, #2
 800637c:	dd1e      	ble.n	80063bc <_dtoa_r+0x964>
 800637e:	f1bb 0f00 	cmp.w	fp, #0
 8006382:	f47f adb1 	bne.w	8005ee8 <_dtoa_r+0x490>
 8006386:	4621      	mov	r1, r4
 8006388:	465b      	mov	r3, fp
 800638a:	2205      	movs	r2, #5
 800638c:	4648      	mov	r0, r9
 800638e:	f000 fa95 	bl	80068bc <__multadd>
 8006392:	4601      	mov	r1, r0
 8006394:	4604      	mov	r4, r0
 8006396:	9802      	ldr	r0, [sp, #8]
 8006398:	f000 fcea 	bl	8006d70 <__mcmp>
 800639c:	2800      	cmp	r0, #0
 800639e:	f77f ada3 	ble.w	8005ee8 <_dtoa_r+0x490>
 80063a2:	4656      	mov	r6, sl
 80063a4:	2331      	movs	r3, #49	@ 0x31
 80063a6:	f806 3b01 	strb.w	r3, [r6], #1
 80063aa:	f108 0801 	add.w	r8, r8, #1
 80063ae:	e59f      	b.n	8005ef0 <_dtoa_r+0x498>
 80063b0:	9c03      	ldr	r4, [sp, #12]
 80063b2:	46b8      	mov	r8, r7
 80063b4:	4625      	mov	r5, r4
 80063b6:	e7f4      	b.n	80063a2 <_dtoa_r+0x94a>
 80063b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80063bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8101 	beq.w	80065c6 <_dtoa_r+0xb6e>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	dd05      	ble.n	80063d4 <_dtoa_r+0x97c>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4632      	mov	r2, r6
 80063cc:	4648      	mov	r0, r9
 80063ce:	f000 fc63 	bl	8006c98 <__lshift>
 80063d2:	4605      	mov	r5, r0
 80063d4:	9b08      	ldr	r3, [sp, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d05c      	beq.n	8006494 <_dtoa_r+0xa3c>
 80063da:	6869      	ldr	r1, [r5, #4]
 80063dc:	4648      	mov	r0, r9
 80063de:	f000 fa0b 	bl	80067f8 <_Balloc>
 80063e2:	4606      	mov	r6, r0
 80063e4:	b928      	cbnz	r0, 80063f2 <_dtoa_r+0x99a>
 80063e6:	4b82      	ldr	r3, [pc, #520]	@ (80065f0 <_dtoa_r+0xb98>)
 80063e8:	4602      	mov	r2, r0
 80063ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063ee:	f7ff bb4a 	b.w	8005a86 <_dtoa_r+0x2e>
 80063f2:	692a      	ldr	r2, [r5, #16]
 80063f4:	3202      	adds	r2, #2
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	f105 010c 	add.w	r1, r5, #12
 80063fc:	300c      	adds	r0, #12
 80063fe:	f002 fe37 	bl	8009070 <memcpy>
 8006402:	2201      	movs	r2, #1
 8006404:	4631      	mov	r1, r6
 8006406:	4648      	mov	r0, r9
 8006408:	f000 fc46 	bl	8006c98 <__lshift>
 800640c:	f10a 0301 	add.w	r3, sl, #1
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	eb0a 030b 	add.w	r3, sl, fp
 8006416:	9308      	str	r3, [sp, #32]
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	462f      	mov	r7, r5
 8006420:	9306      	str	r3, [sp, #24]
 8006422:	4605      	mov	r5, r0
 8006424:	9b00      	ldr	r3, [sp, #0]
 8006426:	9802      	ldr	r0, [sp, #8]
 8006428:	4621      	mov	r1, r4
 800642a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800642e:	f7ff fa8b 	bl	8005948 <quorem>
 8006432:	4603      	mov	r3, r0
 8006434:	3330      	adds	r3, #48	@ 0x30
 8006436:	9003      	str	r0, [sp, #12]
 8006438:	4639      	mov	r1, r7
 800643a:	9802      	ldr	r0, [sp, #8]
 800643c:	9309      	str	r3, [sp, #36]	@ 0x24
 800643e:	f000 fc97 	bl	8006d70 <__mcmp>
 8006442:	462a      	mov	r2, r5
 8006444:	9004      	str	r0, [sp, #16]
 8006446:	4621      	mov	r1, r4
 8006448:	4648      	mov	r0, r9
 800644a:	f000 fcad 	bl	8006da8 <__mdiff>
 800644e:	68c2      	ldr	r2, [r0, #12]
 8006450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006452:	4606      	mov	r6, r0
 8006454:	bb02      	cbnz	r2, 8006498 <_dtoa_r+0xa40>
 8006456:	4601      	mov	r1, r0
 8006458:	9802      	ldr	r0, [sp, #8]
 800645a:	f000 fc89 	bl	8006d70 <__mcmp>
 800645e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006460:	4602      	mov	r2, r0
 8006462:	4631      	mov	r1, r6
 8006464:	4648      	mov	r0, r9
 8006466:	920c      	str	r2, [sp, #48]	@ 0x30
 8006468:	9309      	str	r3, [sp, #36]	@ 0x24
 800646a:	f000 fa05 	bl	8006878 <_Bfree>
 800646e:	9b07      	ldr	r3, [sp, #28]
 8006470:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006472:	9e00      	ldr	r6, [sp, #0]
 8006474:	ea42 0103 	orr.w	r1, r2, r3
 8006478:	9b06      	ldr	r3, [sp, #24]
 800647a:	4319      	orrs	r1, r3
 800647c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647e:	d10d      	bne.n	800649c <_dtoa_r+0xa44>
 8006480:	2b39      	cmp	r3, #57	@ 0x39
 8006482:	d027      	beq.n	80064d4 <_dtoa_r+0xa7c>
 8006484:	9a04      	ldr	r2, [sp, #16]
 8006486:	2a00      	cmp	r2, #0
 8006488:	dd01      	ble.n	800648e <_dtoa_r+0xa36>
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	3331      	adds	r3, #49	@ 0x31
 800648e:	f88b 3000 	strb.w	r3, [fp]
 8006492:	e52e      	b.n	8005ef2 <_dtoa_r+0x49a>
 8006494:	4628      	mov	r0, r5
 8006496:	e7b9      	b.n	800640c <_dtoa_r+0x9b4>
 8006498:	2201      	movs	r2, #1
 800649a:	e7e2      	b.n	8006462 <_dtoa_r+0xa0a>
 800649c:	9904      	ldr	r1, [sp, #16]
 800649e:	2900      	cmp	r1, #0
 80064a0:	db04      	blt.n	80064ac <_dtoa_r+0xa54>
 80064a2:	9807      	ldr	r0, [sp, #28]
 80064a4:	4301      	orrs	r1, r0
 80064a6:	9806      	ldr	r0, [sp, #24]
 80064a8:	4301      	orrs	r1, r0
 80064aa:	d120      	bne.n	80064ee <_dtoa_r+0xa96>
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	ddee      	ble.n	800648e <_dtoa_r+0xa36>
 80064b0:	9902      	ldr	r1, [sp, #8]
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	4648      	mov	r0, r9
 80064b8:	f000 fbee 	bl	8006c98 <__lshift>
 80064bc:	4621      	mov	r1, r4
 80064be:	9002      	str	r0, [sp, #8]
 80064c0:	f000 fc56 	bl	8006d70 <__mcmp>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	9b00      	ldr	r3, [sp, #0]
 80064c8:	dc02      	bgt.n	80064d0 <_dtoa_r+0xa78>
 80064ca:	d1e0      	bne.n	800648e <_dtoa_r+0xa36>
 80064cc:	07da      	lsls	r2, r3, #31
 80064ce:	d5de      	bpl.n	800648e <_dtoa_r+0xa36>
 80064d0:	2b39      	cmp	r3, #57	@ 0x39
 80064d2:	d1da      	bne.n	800648a <_dtoa_r+0xa32>
 80064d4:	2339      	movs	r3, #57	@ 0x39
 80064d6:	f88b 3000 	strb.w	r3, [fp]
 80064da:	4633      	mov	r3, r6
 80064dc:	461e      	mov	r6, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064e4:	2a39      	cmp	r2, #57	@ 0x39
 80064e6:	d04e      	beq.n	8006586 <_dtoa_r+0xb2e>
 80064e8:	3201      	adds	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e501      	b.n	8005ef2 <_dtoa_r+0x49a>
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	dd03      	ble.n	80064fa <_dtoa_r+0xaa2>
 80064f2:	2b39      	cmp	r3, #57	@ 0x39
 80064f4:	d0ee      	beq.n	80064d4 <_dtoa_r+0xa7c>
 80064f6:	3301      	adds	r3, #1
 80064f8:	e7c9      	b.n	800648e <_dtoa_r+0xa36>
 80064fa:	9a00      	ldr	r2, [sp, #0]
 80064fc:	9908      	ldr	r1, [sp, #32]
 80064fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006502:	428a      	cmp	r2, r1
 8006504:	d028      	beq.n	8006558 <_dtoa_r+0xb00>
 8006506:	9902      	ldr	r1, [sp, #8]
 8006508:	2300      	movs	r3, #0
 800650a:	220a      	movs	r2, #10
 800650c:	4648      	mov	r0, r9
 800650e:	f000 f9d5 	bl	80068bc <__multadd>
 8006512:	42af      	cmp	r7, r5
 8006514:	9002      	str	r0, [sp, #8]
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	f04f 020a 	mov.w	r2, #10
 800651e:	4639      	mov	r1, r7
 8006520:	4648      	mov	r0, r9
 8006522:	d107      	bne.n	8006534 <_dtoa_r+0xadc>
 8006524:	f000 f9ca 	bl	80068bc <__multadd>
 8006528:	4607      	mov	r7, r0
 800652a:	4605      	mov	r5, r0
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	e777      	b.n	8006424 <_dtoa_r+0x9cc>
 8006534:	f000 f9c2 	bl	80068bc <__multadd>
 8006538:	4629      	mov	r1, r5
 800653a:	4607      	mov	r7, r0
 800653c:	2300      	movs	r3, #0
 800653e:	220a      	movs	r2, #10
 8006540:	4648      	mov	r0, r9
 8006542:	f000 f9bb 	bl	80068bc <__multadd>
 8006546:	4605      	mov	r5, r0
 8006548:	e7f0      	b.n	800652c <_dtoa_r+0xad4>
 800654a:	f1bb 0f00 	cmp.w	fp, #0
 800654e:	bfcc      	ite	gt
 8006550:	465e      	movgt	r6, fp
 8006552:	2601      	movle	r6, #1
 8006554:	4456      	add	r6, sl
 8006556:	2700      	movs	r7, #0
 8006558:	9902      	ldr	r1, [sp, #8]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	2201      	movs	r2, #1
 800655e:	4648      	mov	r0, r9
 8006560:	f000 fb9a 	bl	8006c98 <__lshift>
 8006564:	4621      	mov	r1, r4
 8006566:	9002      	str	r0, [sp, #8]
 8006568:	f000 fc02 	bl	8006d70 <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	dcb4      	bgt.n	80064da <_dtoa_r+0xa82>
 8006570:	d102      	bne.n	8006578 <_dtoa_r+0xb20>
 8006572:	9b00      	ldr	r3, [sp, #0]
 8006574:	07db      	lsls	r3, r3, #31
 8006576:	d4b0      	bmi.n	80064da <_dtoa_r+0xa82>
 8006578:	4633      	mov	r3, r6
 800657a:	461e      	mov	r6, r3
 800657c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006580:	2a30      	cmp	r2, #48	@ 0x30
 8006582:	d0fa      	beq.n	800657a <_dtoa_r+0xb22>
 8006584:	e4b5      	b.n	8005ef2 <_dtoa_r+0x49a>
 8006586:	459a      	cmp	sl, r3
 8006588:	d1a8      	bne.n	80064dc <_dtoa_r+0xa84>
 800658a:	2331      	movs	r3, #49	@ 0x31
 800658c:	f108 0801 	add.w	r8, r8, #1
 8006590:	f88a 3000 	strb.w	r3, [sl]
 8006594:	e4ad      	b.n	8005ef2 <_dtoa_r+0x49a>
 8006596:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006598:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80065f4 <_dtoa_r+0xb9c>
 800659c:	b11b      	cbz	r3, 80065a6 <_dtoa_r+0xb4e>
 800659e:	f10a 0308 	add.w	r3, sl, #8
 80065a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	4650      	mov	r0, sl
 80065a8:	b017      	add	sp, #92	@ 0x5c
 80065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ae:	9b07      	ldr	r3, [sp, #28]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	f77f ae2e 	ble.w	8006212 <_dtoa_r+0x7ba>
 80065b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b8:	9308      	str	r3, [sp, #32]
 80065ba:	2001      	movs	r0, #1
 80065bc:	e64d      	b.n	800625a <_dtoa_r+0x802>
 80065be:	f1bb 0f00 	cmp.w	fp, #0
 80065c2:	f77f aed9 	ble.w	8006378 <_dtoa_r+0x920>
 80065c6:	4656      	mov	r6, sl
 80065c8:	9802      	ldr	r0, [sp, #8]
 80065ca:	4621      	mov	r1, r4
 80065cc:	f7ff f9bc 	bl	8005948 <quorem>
 80065d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80065d4:	f806 3b01 	strb.w	r3, [r6], #1
 80065d8:	eba6 020a 	sub.w	r2, r6, sl
 80065dc:	4593      	cmp	fp, r2
 80065de:	ddb4      	ble.n	800654a <_dtoa_r+0xaf2>
 80065e0:	9902      	ldr	r1, [sp, #8]
 80065e2:	2300      	movs	r3, #0
 80065e4:	220a      	movs	r2, #10
 80065e6:	4648      	mov	r0, r9
 80065e8:	f000 f968 	bl	80068bc <__multadd>
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	e7eb      	b.n	80065c8 <_dtoa_r+0xb70>
 80065f0:	08009b07 	.word	0x08009b07
 80065f4:	08009a8b 	.word	0x08009a8b

080065f8 <_free_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4605      	mov	r5, r0
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d041      	beq.n	8006684 <_free_r+0x8c>
 8006600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006604:	1f0c      	subs	r4, r1, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfb8      	it	lt
 800660a:	18e4      	addlt	r4, r4, r3
 800660c:	f000 f8e8 	bl	80067e0 <__malloc_lock>
 8006610:	4a1d      	ldr	r2, [pc, #116]	@ (8006688 <_free_r+0x90>)
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	b933      	cbnz	r3, 8006624 <_free_r+0x2c>
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	6014      	str	r4, [r2, #0]
 800661a:	4628      	mov	r0, r5
 800661c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006620:	f000 b8e4 	b.w	80067ec <__malloc_unlock>
 8006624:	42a3      	cmp	r3, r4
 8006626:	d908      	bls.n	800663a <_free_r+0x42>
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	1821      	adds	r1, r4, r0
 800662c:	428b      	cmp	r3, r1
 800662e:	bf01      	itttt	eq
 8006630:	6819      	ldreq	r1, [r3, #0]
 8006632:	685b      	ldreq	r3, [r3, #4]
 8006634:	1809      	addeq	r1, r1, r0
 8006636:	6021      	streq	r1, [r4, #0]
 8006638:	e7ed      	b.n	8006616 <_free_r+0x1e>
 800663a:	461a      	mov	r2, r3
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	b10b      	cbz	r3, 8006644 <_free_r+0x4c>
 8006640:	42a3      	cmp	r3, r4
 8006642:	d9fa      	bls.n	800663a <_free_r+0x42>
 8006644:	6811      	ldr	r1, [r2, #0]
 8006646:	1850      	adds	r0, r2, r1
 8006648:	42a0      	cmp	r0, r4
 800664a:	d10b      	bne.n	8006664 <_free_r+0x6c>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	4401      	add	r1, r0
 8006650:	1850      	adds	r0, r2, r1
 8006652:	4283      	cmp	r3, r0
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	d1e0      	bne.n	800661a <_free_r+0x22>
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	6053      	str	r3, [r2, #4]
 800665e:	4408      	add	r0, r1
 8006660:	6010      	str	r0, [r2, #0]
 8006662:	e7da      	b.n	800661a <_free_r+0x22>
 8006664:	d902      	bls.n	800666c <_free_r+0x74>
 8006666:	230c      	movs	r3, #12
 8006668:	602b      	str	r3, [r5, #0]
 800666a:	e7d6      	b.n	800661a <_free_r+0x22>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	1821      	adds	r1, r4, r0
 8006670:	428b      	cmp	r3, r1
 8006672:	bf04      	itt	eq
 8006674:	6819      	ldreq	r1, [r3, #0]
 8006676:	685b      	ldreq	r3, [r3, #4]
 8006678:	6063      	str	r3, [r4, #4]
 800667a:	bf04      	itt	eq
 800667c:	1809      	addeq	r1, r1, r0
 800667e:	6021      	streq	r1, [r4, #0]
 8006680:	6054      	str	r4, [r2, #4]
 8006682:	e7ca      	b.n	800661a <_free_r+0x22>
 8006684:	bd38      	pop	{r3, r4, r5, pc}
 8006686:	bf00      	nop
 8006688:	20000414 	.word	0x20000414

0800668c <malloc>:
 800668c:	4b02      	ldr	r3, [pc, #8]	@ (8006698 <malloc+0xc>)
 800668e:	4601      	mov	r1, r0
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f000 b825 	b.w	80066e0 <_malloc_r>
 8006696:	bf00      	nop
 8006698:	20000018 	.word	0x20000018

0800669c <sbrk_aligned>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4e0f      	ldr	r6, [pc, #60]	@ (80066dc <sbrk_aligned+0x40>)
 80066a0:	460c      	mov	r4, r1
 80066a2:	6831      	ldr	r1, [r6, #0]
 80066a4:	4605      	mov	r5, r0
 80066a6:	b911      	cbnz	r1, 80066ae <sbrk_aligned+0x12>
 80066a8:	f002 fcd2 	bl	8009050 <_sbrk_r>
 80066ac:	6030      	str	r0, [r6, #0]
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f002 fccd 	bl	8009050 <_sbrk_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d103      	bne.n	80066c2 <sbrk_aligned+0x26>
 80066ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80066be:	4620      	mov	r0, r4
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	1cc4      	adds	r4, r0, #3
 80066c4:	f024 0403 	bic.w	r4, r4, #3
 80066c8:	42a0      	cmp	r0, r4
 80066ca:	d0f8      	beq.n	80066be <sbrk_aligned+0x22>
 80066cc:	1a21      	subs	r1, r4, r0
 80066ce:	4628      	mov	r0, r5
 80066d0:	f002 fcbe 	bl	8009050 <_sbrk_r>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d1f2      	bne.n	80066be <sbrk_aligned+0x22>
 80066d8:	e7ef      	b.n	80066ba <sbrk_aligned+0x1e>
 80066da:	bf00      	nop
 80066dc:	20000410 	.word	0x20000410

080066e0 <_malloc_r>:
 80066e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e4:	1ccd      	adds	r5, r1, #3
 80066e6:	f025 0503 	bic.w	r5, r5, #3
 80066ea:	3508      	adds	r5, #8
 80066ec:	2d0c      	cmp	r5, #12
 80066ee:	bf38      	it	cc
 80066f0:	250c      	movcc	r5, #12
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	4606      	mov	r6, r0
 80066f6:	db01      	blt.n	80066fc <_malloc_r+0x1c>
 80066f8:	42a9      	cmp	r1, r5
 80066fa:	d904      	bls.n	8006706 <_malloc_r+0x26>
 80066fc:	230c      	movs	r3, #12
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	2000      	movs	r0, #0
 8006702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067dc <_malloc_r+0xfc>
 800670a:	f000 f869 	bl	80067e0 <__malloc_lock>
 800670e:	f8d8 3000 	ldr.w	r3, [r8]
 8006712:	461c      	mov	r4, r3
 8006714:	bb44      	cbnz	r4, 8006768 <_malloc_r+0x88>
 8006716:	4629      	mov	r1, r5
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff ffbf 	bl	800669c <sbrk_aligned>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	4604      	mov	r4, r0
 8006722:	d158      	bne.n	80067d6 <_malloc_r+0xf6>
 8006724:	f8d8 4000 	ldr.w	r4, [r8]
 8006728:	4627      	mov	r7, r4
 800672a:	2f00      	cmp	r7, #0
 800672c:	d143      	bne.n	80067b6 <_malloc_r+0xd6>
 800672e:	2c00      	cmp	r4, #0
 8006730:	d04b      	beq.n	80067ca <_malloc_r+0xea>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	4639      	mov	r1, r7
 8006736:	4630      	mov	r0, r6
 8006738:	eb04 0903 	add.w	r9, r4, r3
 800673c:	f002 fc88 	bl	8009050 <_sbrk_r>
 8006740:	4581      	cmp	r9, r0
 8006742:	d142      	bne.n	80067ca <_malloc_r+0xea>
 8006744:	6821      	ldr	r1, [r4, #0]
 8006746:	1a6d      	subs	r5, r5, r1
 8006748:	4629      	mov	r1, r5
 800674a:	4630      	mov	r0, r6
 800674c:	f7ff ffa6 	bl	800669c <sbrk_aligned>
 8006750:	3001      	adds	r0, #1
 8006752:	d03a      	beq.n	80067ca <_malloc_r+0xea>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	442b      	add	r3, r5
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	f8d8 3000 	ldr.w	r3, [r8]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	bb62      	cbnz	r2, 80067bc <_malloc_r+0xdc>
 8006762:	f8c8 7000 	str.w	r7, [r8]
 8006766:	e00f      	b.n	8006788 <_malloc_r+0xa8>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	1b52      	subs	r2, r2, r5
 800676c:	d420      	bmi.n	80067b0 <_malloc_r+0xd0>
 800676e:	2a0b      	cmp	r2, #11
 8006770:	d917      	bls.n	80067a2 <_malloc_r+0xc2>
 8006772:	1961      	adds	r1, r4, r5
 8006774:	42a3      	cmp	r3, r4
 8006776:	6025      	str	r5, [r4, #0]
 8006778:	bf18      	it	ne
 800677a:	6059      	strne	r1, [r3, #4]
 800677c:	6863      	ldr	r3, [r4, #4]
 800677e:	bf08      	it	eq
 8006780:	f8c8 1000 	streq.w	r1, [r8]
 8006784:	5162      	str	r2, [r4, r5]
 8006786:	604b      	str	r3, [r1, #4]
 8006788:	4630      	mov	r0, r6
 800678a:	f000 f82f 	bl	80067ec <__malloc_unlock>
 800678e:	f104 000b 	add.w	r0, r4, #11
 8006792:	1d23      	adds	r3, r4, #4
 8006794:	f020 0007 	bic.w	r0, r0, #7
 8006798:	1ac2      	subs	r2, r0, r3
 800679a:	bf1c      	itt	ne
 800679c:	1a1b      	subne	r3, r3, r0
 800679e:	50a3      	strne	r3, [r4, r2]
 80067a0:	e7af      	b.n	8006702 <_malloc_r+0x22>
 80067a2:	6862      	ldr	r2, [r4, #4]
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	bf0c      	ite	eq
 80067a8:	f8c8 2000 	streq.w	r2, [r8]
 80067ac:	605a      	strne	r2, [r3, #4]
 80067ae:	e7eb      	b.n	8006788 <_malloc_r+0xa8>
 80067b0:	4623      	mov	r3, r4
 80067b2:	6864      	ldr	r4, [r4, #4]
 80067b4:	e7ae      	b.n	8006714 <_malloc_r+0x34>
 80067b6:	463c      	mov	r4, r7
 80067b8:	687f      	ldr	r7, [r7, #4]
 80067ba:	e7b6      	b.n	800672a <_malloc_r+0x4a>
 80067bc:	461a      	mov	r2, r3
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d1fb      	bne.n	80067bc <_malloc_r+0xdc>
 80067c4:	2300      	movs	r3, #0
 80067c6:	6053      	str	r3, [r2, #4]
 80067c8:	e7de      	b.n	8006788 <_malloc_r+0xa8>
 80067ca:	230c      	movs	r3, #12
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	4630      	mov	r0, r6
 80067d0:	f000 f80c 	bl	80067ec <__malloc_unlock>
 80067d4:	e794      	b.n	8006700 <_malloc_r+0x20>
 80067d6:	6005      	str	r5, [r0, #0]
 80067d8:	e7d6      	b.n	8006788 <_malloc_r+0xa8>
 80067da:	bf00      	nop
 80067dc:	20000414 	.word	0x20000414

080067e0 <__malloc_lock>:
 80067e0:	4801      	ldr	r0, [pc, #4]	@ (80067e8 <__malloc_lock+0x8>)
 80067e2:	f7ff b8a8 	b.w	8005936 <__retarget_lock_acquire_recursive>
 80067e6:	bf00      	nop
 80067e8:	2000040c 	.word	0x2000040c

080067ec <__malloc_unlock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__malloc_unlock+0x8>)
 80067ee:	f7ff b8a3 	b.w	8005938 <__retarget_lock_release_recursive>
 80067f2:	bf00      	nop
 80067f4:	2000040c 	.word	0x2000040c

080067f8 <_Balloc>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	69c6      	ldr	r6, [r0, #28]
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	b976      	cbnz	r6, 8006820 <_Balloc+0x28>
 8006802:	2010      	movs	r0, #16
 8006804:	f7ff ff42 	bl	800668c <malloc>
 8006808:	4602      	mov	r2, r0
 800680a:	61e0      	str	r0, [r4, #28]
 800680c:	b920      	cbnz	r0, 8006818 <_Balloc+0x20>
 800680e:	4b18      	ldr	r3, [pc, #96]	@ (8006870 <_Balloc+0x78>)
 8006810:	4818      	ldr	r0, [pc, #96]	@ (8006874 <_Balloc+0x7c>)
 8006812:	216b      	movs	r1, #107	@ 0x6b
 8006814:	f002 fc44 	bl	80090a0 <__assert_func>
 8006818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800681c:	6006      	str	r6, [r0, #0]
 800681e:	60c6      	str	r6, [r0, #12]
 8006820:	69e6      	ldr	r6, [r4, #28]
 8006822:	68f3      	ldr	r3, [r6, #12]
 8006824:	b183      	cbz	r3, 8006848 <_Balloc+0x50>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800682e:	b9b8      	cbnz	r0, 8006860 <_Balloc+0x68>
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f605 	lsl.w	r6, r1, r5
 8006836:	1d72      	adds	r2, r6, #5
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4620      	mov	r0, r4
 800683c:	f002 fc4e 	bl	80090dc <_calloc_r>
 8006840:	b160      	cbz	r0, 800685c <_Balloc+0x64>
 8006842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006846:	e00e      	b.n	8006866 <_Balloc+0x6e>
 8006848:	2221      	movs	r2, #33	@ 0x21
 800684a:	2104      	movs	r1, #4
 800684c:	4620      	mov	r0, r4
 800684e:	f002 fc45 	bl	80090dc <_calloc_r>
 8006852:	69e3      	ldr	r3, [r4, #28]
 8006854:	60f0      	str	r0, [r6, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <_Balloc+0x2e>
 800685c:	2000      	movs	r0, #0
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	6802      	ldr	r2, [r0, #0]
 8006862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006866:	2300      	movs	r3, #0
 8006868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800686c:	e7f7      	b.n	800685e <_Balloc+0x66>
 800686e:	bf00      	nop
 8006870:	08009a98 	.word	0x08009a98
 8006874:	08009b18 	.word	0x08009b18

08006878 <_Bfree>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	69c6      	ldr	r6, [r0, #28]
 800687c:	4605      	mov	r5, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b976      	cbnz	r6, 80068a0 <_Bfree+0x28>
 8006882:	2010      	movs	r0, #16
 8006884:	f7ff ff02 	bl	800668c <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	61e8      	str	r0, [r5, #28]
 800688c:	b920      	cbnz	r0, 8006898 <_Bfree+0x20>
 800688e:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <_Bfree+0x3c>)
 8006890:	4809      	ldr	r0, [pc, #36]	@ (80068b8 <_Bfree+0x40>)
 8006892:	218f      	movs	r1, #143	@ 0x8f
 8006894:	f002 fc04 	bl	80090a0 <__assert_func>
 8006898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800689c:	6006      	str	r6, [r0, #0]
 800689e:	60c6      	str	r6, [r0, #12]
 80068a0:	b13c      	cbz	r4, 80068b2 <_Bfree+0x3a>
 80068a2:	69eb      	ldr	r3, [r5, #28]
 80068a4:	6862      	ldr	r2, [r4, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068ac:	6021      	str	r1, [r4, #0]
 80068ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	08009a98 	.word	0x08009a98
 80068b8:	08009b18 	.word	0x08009b18

080068bc <__multadd>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	690d      	ldr	r5, [r1, #16]
 80068c2:	4607      	mov	r7, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	461e      	mov	r6, r3
 80068c8:	f101 0c14 	add.w	ip, r1, #20
 80068cc:	2000      	movs	r0, #0
 80068ce:	f8dc 3000 	ldr.w	r3, [ip]
 80068d2:	b299      	uxth	r1, r3
 80068d4:	fb02 6101 	mla	r1, r2, r1, r6
 80068d8:	0c1e      	lsrs	r6, r3, #16
 80068da:	0c0b      	lsrs	r3, r1, #16
 80068dc:	fb02 3306 	mla	r3, r2, r6, r3
 80068e0:	b289      	uxth	r1, r1
 80068e2:	3001      	adds	r0, #1
 80068e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068e8:	4285      	cmp	r5, r0
 80068ea:	f84c 1b04 	str.w	r1, [ip], #4
 80068ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068f2:	dcec      	bgt.n	80068ce <__multadd+0x12>
 80068f4:	b30e      	cbz	r6, 800693a <__multadd+0x7e>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dc19      	bgt.n	8006930 <__multadd+0x74>
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	4638      	mov	r0, r7
 8006900:	3101      	adds	r1, #1
 8006902:	f7ff ff79 	bl	80067f8 <_Balloc>
 8006906:	4680      	mov	r8, r0
 8006908:	b928      	cbnz	r0, 8006916 <__multadd+0x5a>
 800690a:	4602      	mov	r2, r0
 800690c:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <__multadd+0x84>)
 800690e:	480d      	ldr	r0, [pc, #52]	@ (8006944 <__multadd+0x88>)
 8006910:	21ba      	movs	r1, #186	@ 0xba
 8006912:	f002 fbc5 	bl	80090a0 <__assert_func>
 8006916:	6922      	ldr	r2, [r4, #16]
 8006918:	3202      	adds	r2, #2
 800691a:	f104 010c 	add.w	r1, r4, #12
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	300c      	adds	r0, #12
 8006922:	f002 fba5 	bl	8009070 <memcpy>
 8006926:	4621      	mov	r1, r4
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ffa5 	bl	8006878 <_Bfree>
 800692e:	4644      	mov	r4, r8
 8006930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006934:	3501      	adds	r5, #1
 8006936:	615e      	str	r6, [r3, #20]
 8006938:	6125      	str	r5, [r4, #16]
 800693a:	4620      	mov	r0, r4
 800693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006940:	08009b07 	.word	0x08009b07
 8006944:	08009b18 	.word	0x08009b18

08006948 <__s2b>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	460c      	mov	r4, r1
 800694e:	4615      	mov	r5, r2
 8006950:	461f      	mov	r7, r3
 8006952:	2209      	movs	r2, #9
 8006954:	3308      	adds	r3, #8
 8006956:	4606      	mov	r6, r0
 8006958:	fb93 f3f2 	sdiv	r3, r3, r2
 800695c:	2100      	movs	r1, #0
 800695e:	2201      	movs	r2, #1
 8006960:	429a      	cmp	r2, r3
 8006962:	db09      	blt.n	8006978 <__s2b+0x30>
 8006964:	4630      	mov	r0, r6
 8006966:	f7ff ff47 	bl	80067f8 <_Balloc>
 800696a:	b940      	cbnz	r0, 800697e <__s2b+0x36>
 800696c:	4602      	mov	r2, r0
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <__s2b+0x8c>)
 8006970:	4819      	ldr	r0, [pc, #100]	@ (80069d8 <__s2b+0x90>)
 8006972:	21d3      	movs	r1, #211	@ 0xd3
 8006974:	f002 fb94 	bl	80090a0 <__assert_func>
 8006978:	0052      	lsls	r2, r2, #1
 800697a:	3101      	adds	r1, #1
 800697c:	e7f0      	b.n	8006960 <__s2b+0x18>
 800697e:	9b08      	ldr	r3, [sp, #32]
 8006980:	6143      	str	r3, [r0, #20]
 8006982:	2d09      	cmp	r5, #9
 8006984:	f04f 0301 	mov.w	r3, #1
 8006988:	6103      	str	r3, [r0, #16]
 800698a:	dd16      	ble.n	80069ba <__s2b+0x72>
 800698c:	f104 0909 	add.w	r9, r4, #9
 8006990:	46c8      	mov	r8, r9
 8006992:	442c      	add	r4, r5
 8006994:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006998:	4601      	mov	r1, r0
 800699a:	3b30      	subs	r3, #48	@ 0x30
 800699c:	220a      	movs	r2, #10
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ff8c 	bl	80068bc <__multadd>
 80069a4:	45a0      	cmp	r8, r4
 80069a6:	d1f5      	bne.n	8006994 <__s2b+0x4c>
 80069a8:	f1a5 0408 	sub.w	r4, r5, #8
 80069ac:	444c      	add	r4, r9
 80069ae:	1b2d      	subs	r5, r5, r4
 80069b0:	1963      	adds	r3, r4, r5
 80069b2:	42bb      	cmp	r3, r7
 80069b4:	db04      	blt.n	80069c0 <__s2b+0x78>
 80069b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ba:	340a      	adds	r4, #10
 80069bc:	2509      	movs	r5, #9
 80069be:	e7f6      	b.n	80069ae <__s2b+0x66>
 80069c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069c4:	4601      	mov	r1, r0
 80069c6:	3b30      	subs	r3, #48	@ 0x30
 80069c8:	220a      	movs	r2, #10
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ff76 	bl	80068bc <__multadd>
 80069d0:	e7ee      	b.n	80069b0 <__s2b+0x68>
 80069d2:	bf00      	nop
 80069d4:	08009b07 	.word	0x08009b07
 80069d8:	08009b18 	.word	0x08009b18

080069dc <__hi0bits>:
 80069dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069e0:	4603      	mov	r3, r0
 80069e2:	bf36      	itet	cc
 80069e4:	0403      	lslcc	r3, r0, #16
 80069e6:	2000      	movcs	r0, #0
 80069e8:	2010      	movcc	r0, #16
 80069ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069ee:	bf3c      	itt	cc
 80069f0:	021b      	lslcc	r3, r3, #8
 80069f2:	3008      	addcc	r0, #8
 80069f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f8:	bf3c      	itt	cc
 80069fa:	011b      	lslcc	r3, r3, #4
 80069fc:	3004      	addcc	r0, #4
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	bf3c      	itt	cc
 8006a04:	009b      	lslcc	r3, r3, #2
 8006a06:	3002      	addcc	r0, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db05      	blt.n	8006a18 <__hi0bits+0x3c>
 8006a0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a10:	f100 0001 	add.w	r0, r0, #1
 8006a14:	bf08      	it	eq
 8006a16:	2020      	moveq	r0, #32
 8006a18:	4770      	bx	lr

08006a1a <__lo0bits>:
 8006a1a:	6803      	ldr	r3, [r0, #0]
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f013 0007 	ands.w	r0, r3, #7
 8006a22:	d00b      	beq.n	8006a3c <__lo0bits+0x22>
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d421      	bmi.n	8006a6c <__lo0bits+0x52>
 8006a28:	0798      	lsls	r0, r3, #30
 8006a2a:	bf49      	itett	mi
 8006a2c:	085b      	lsrmi	r3, r3, #1
 8006a2e:	089b      	lsrpl	r3, r3, #2
 8006a30:	2001      	movmi	r0, #1
 8006a32:	6013      	strmi	r3, [r2, #0]
 8006a34:	bf5c      	itt	pl
 8006a36:	6013      	strpl	r3, [r2, #0]
 8006a38:	2002      	movpl	r0, #2
 8006a3a:	4770      	bx	lr
 8006a3c:	b299      	uxth	r1, r3
 8006a3e:	b909      	cbnz	r1, 8006a44 <__lo0bits+0x2a>
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	2010      	movs	r0, #16
 8006a44:	b2d9      	uxtb	r1, r3
 8006a46:	b909      	cbnz	r1, 8006a4c <__lo0bits+0x32>
 8006a48:	3008      	adds	r0, #8
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	0719      	lsls	r1, r3, #28
 8006a4e:	bf04      	itt	eq
 8006a50:	091b      	lsreq	r3, r3, #4
 8006a52:	3004      	addeq	r0, #4
 8006a54:	0799      	lsls	r1, r3, #30
 8006a56:	bf04      	itt	eq
 8006a58:	089b      	lsreq	r3, r3, #2
 8006a5a:	3002      	addeq	r0, #2
 8006a5c:	07d9      	lsls	r1, r3, #31
 8006a5e:	d403      	bmi.n	8006a68 <__lo0bits+0x4e>
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	f100 0001 	add.w	r0, r0, #1
 8006a66:	d003      	beq.n	8006a70 <__lo0bits+0x56>
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4770      	bx	lr
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4770      	bx	lr
 8006a70:	2020      	movs	r0, #32
 8006a72:	4770      	bx	lr

08006a74 <__i2b>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	460c      	mov	r4, r1
 8006a78:	2101      	movs	r1, #1
 8006a7a:	f7ff febd 	bl	80067f8 <_Balloc>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	b928      	cbnz	r0, 8006a8e <__i2b+0x1a>
 8006a82:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <__i2b+0x24>)
 8006a84:	4805      	ldr	r0, [pc, #20]	@ (8006a9c <__i2b+0x28>)
 8006a86:	f240 1145 	movw	r1, #325	@ 0x145
 8006a8a:	f002 fb09 	bl	80090a0 <__assert_func>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	6144      	str	r4, [r0, #20]
 8006a92:	6103      	str	r3, [r0, #16]
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	bf00      	nop
 8006a98:	08009b07 	.word	0x08009b07
 8006a9c:	08009b18 	.word	0x08009b18

08006aa0 <__multiply>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4617      	mov	r7, r2
 8006aa6:	690a      	ldr	r2, [r1, #16]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	bfa8      	it	ge
 8006aae:	463b      	movge	r3, r7
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	bfa4      	itt	ge
 8006ab4:	460f      	movge	r7, r1
 8006ab6:	4699      	movge	r9, r3
 8006ab8:	693d      	ldr	r5, [r7, #16]
 8006aba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	eb05 060a 	add.w	r6, r5, sl
 8006ac6:	42b3      	cmp	r3, r6
 8006ac8:	b085      	sub	sp, #20
 8006aca:	bfb8      	it	lt
 8006acc:	3101      	addlt	r1, #1
 8006ace:	f7ff fe93 	bl	80067f8 <_Balloc>
 8006ad2:	b930      	cbnz	r0, 8006ae2 <__multiply+0x42>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b41      	ldr	r3, [pc, #260]	@ (8006bdc <__multiply+0x13c>)
 8006ad8:	4841      	ldr	r0, [pc, #260]	@ (8006be0 <__multiply+0x140>)
 8006ada:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ade:	f002 fadf 	bl	80090a0 <__assert_func>
 8006ae2:	f100 0414 	add.w	r4, r0, #20
 8006ae6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006aea:	4623      	mov	r3, r4
 8006aec:	2200      	movs	r2, #0
 8006aee:	4573      	cmp	r3, lr
 8006af0:	d320      	bcc.n	8006b34 <__multiply+0x94>
 8006af2:	f107 0814 	add.w	r8, r7, #20
 8006af6:	f109 0114 	add.w	r1, r9, #20
 8006afa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006afe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006b02:	9302      	str	r3, [sp, #8]
 8006b04:	1beb      	subs	r3, r5, r7
 8006b06:	3b15      	subs	r3, #21
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	3715      	adds	r7, #21
 8006b10:	42bd      	cmp	r5, r7
 8006b12:	bf38      	it	cc
 8006b14:	2304      	movcc	r3, #4
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	9103      	str	r1, [sp, #12]
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	d80c      	bhi.n	8006b3a <__multiply+0x9a>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	dd03      	ble.n	8006b2c <__multiply+0x8c>
 8006b24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d055      	beq.n	8006bd8 <__multiply+0x138>
 8006b2c:	6106      	str	r6, [r0, #16]
 8006b2e:	b005      	add	sp, #20
 8006b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b34:	f843 2b04 	str.w	r2, [r3], #4
 8006b38:	e7d9      	b.n	8006aee <__multiply+0x4e>
 8006b3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b3e:	f1ba 0f00 	cmp.w	sl, #0
 8006b42:	d01f      	beq.n	8006b84 <__multiply+0xe4>
 8006b44:	46c4      	mov	ip, r8
 8006b46:	46a1      	mov	r9, r4
 8006b48:	2700      	movs	r7, #0
 8006b4a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006b4e:	f8d9 3000 	ldr.w	r3, [r9]
 8006b52:	fa1f fb82 	uxth.w	fp, r2
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b5c:	443b      	add	r3, r7
 8006b5e:	f8d9 7000 	ldr.w	r7, [r9]
 8006b62:	0c12      	lsrs	r2, r2, #16
 8006b64:	0c3f      	lsrs	r7, r7, #16
 8006b66:	fb0a 7202 	mla	r2, sl, r2, r7
 8006b6a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b74:	4565      	cmp	r5, ip
 8006b76:	f849 3b04 	str.w	r3, [r9], #4
 8006b7a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006b7e:	d8e4      	bhi.n	8006b4a <__multiply+0xaa>
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	50e7      	str	r7, [r4, r3]
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b8a:	3104      	adds	r1, #4
 8006b8c:	f1b9 0f00 	cmp.w	r9, #0
 8006b90:	d020      	beq.n	8006bd4 <__multiply+0x134>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	4647      	mov	r7, r8
 8006b96:	46a4      	mov	ip, r4
 8006b98:	f04f 0a00 	mov.w	sl, #0
 8006b9c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ba0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ba4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ba8:	4452      	add	r2, sl
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bb0:	f84c 3b04 	str.w	r3, [ip], #4
 8006bb4:	f857 3b04 	ldr.w	r3, [r7], #4
 8006bb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bbc:	f8bc 3000 	ldrh.w	r3, [ip]
 8006bc0:	fb09 330a 	mla	r3, r9, sl, r3
 8006bc4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006bc8:	42bd      	cmp	r5, r7
 8006bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bce:	d8e5      	bhi.n	8006b9c <__multiply+0xfc>
 8006bd0:	9a01      	ldr	r2, [sp, #4]
 8006bd2:	50a3      	str	r3, [r4, r2]
 8006bd4:	3404      	adds	r4, #4
 8006bd6:	e79f      	b.n	8006b18 <__multiply+0x78>
 8006bd8:	3e01      	subs	r6, #1
 8006bda:	e7a1      	b.n	8006b20 <__multiply+0x80>
 8006bdc:	08009b07 	.word	0x08009b07
 8006be0:	08009b18 	.word	0x08009b18

08006be4 <__pow5mult>:
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be8:	4615      	mov	r5, r2
 8006bea:	f012 0203 	ands.w	r2, r2, #3
 8006bee:	4607      	mov	r7, r0
 8006bf0:	460e      	mov	r6, r1
 8006bf2:	d007      	beq.n	8006c04 <__pow5mult+0x20>
 8006bf4:	4c25      	ldr	r4, [pc, #148]	@ (8006c8c <__pow5mult+0xa8>)
 8006bf6:	3a01      	subs	r2, #1
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bfe:	f7ff fe5d 	bl	80068bc <__multadd>
 8006c02:	4606      	mov	r6, r0
 8006c04:	10ad      	asrs	r5, r5, #2
 8006c06:	d03d      	beq.n	8006c84 <__pow5mult+0xa0>
 8006c08:	69fc      	ldr	r4, [r7, #28]
 8006c0a:	b97c      	cbnz	r4, 8006c2c <__pow5mult+0x48>
 8006c0c:	2010      	movs	r0, #16
 8006c0e:	f7ff fd3d 	bl	800668c <malloc>
 8006c12:	4602      	mov	r2, r0
 8006c14:	61f8      	str	r0, [r7, #28]
 8006c16:	b928      	cbnz	r0, 8006c24 <__pow5mult+0x40>
 8006c18:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <__pow5mult+0xac>)
 8006c1a:	481e      	ldr	r0, [pc, #120]	@ (8006c94 <__pow5mult+0xb0>)
 8006c1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c20:	f002 fa3e 	bl	80090a0 <__assert_func>
 8006c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c28:	6004      	str	r4, [r0, #0]
 8006c2a:	60c4      	str	r4, [r0, #12]
 8006c2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c34:	b94c      	cbnz	r4, 8006c4a <__pow5mult+0x66>
 8006c36:	f240 2171 	movw	r1, #625	@ 0x271
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	f7ff ff1a 	bl	8006a74 <__i2b>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c46:	4604      	mov	r4, r0
 8006c48:	6003      	str	r3, [r0, #0]
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	07eb      	lsls	r3, r5, #31
 8006c50:	d50a      	bpl.n	8006c68 <__pow5mult+0x84>
 8006c52:	4631      	mov	r1, r6
 8006c54:	4622      	mov	r2, r4
 8006c56:	4638      	mov	r0, r7
 8006c58:	f7ff ff22 	bl	8006aa0 <__multiply>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff fe09 	bl	8006878 <_Bfree>
 8006c66:	4646      	mov	r6, r8
 8006c68:	106d      	asrs	r5, r5, #1
 8006c6a:	d00b      	beq.n	8006c84 <__pow5mult+0xa0>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	b938      	cbnz	r0, 8006c80 <__pow5mult+0x9c>
 8006c70:	4622      	mov	r2, r4
 8006c72:	4621      	mov	r1, r4
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ff13 	bl	8006aa0 <__multiply>
 8006c7a:	6020      	str	r0, [r4, #0]
 8006c7c:	f8c0 9000 	str.w	r9, [r0]
 8006c80:	4604      	mov	r4, r0
 8006c82:	e7e4      	b.n	8006c4e <__pow5mult+0x6a>
 8006c84:	4630      	mov	r0, r6
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	bf00      	nop
 8006c8c:	08009c44 	.word	0x08009c44
 8006c90:	08009a98 	.word	0x08009a98
 8006c94:	08009b18 	.word	0x08009b18

08006c98 <__lshift>:
 8006c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	6849      	ldr	r1, [r1, #4]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ca6:	68a3      	ldr	r3, [r4, #8]
 8006ca8:	4607      	mov	r7, r0
 8006caa:	4691      	mov	r9, r2
 8006cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cb0:	f108 0601 	add.w	r6, r8, #1
 8006cb4:	42b3      	cmp	r3, r6
 8006cb6:	db0b      	blt.n	8006cd0 <__lshift+0x38>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff fd9d 	bl	80067f8 <_Balloc>
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b948      	cbnz	r0, 8006cd6 <__lshift+0x3e>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4b28      	ldr	r3, [pc, #160]	@ (8006d68 <__lshift+0xd0>)
 8006cc6:	4829      	ldr	r0, [pc, #164]	@ (8006d6c <__lshift+0xd4>)
 8006cc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ccc:	f002 f9e8 	bl	80090a0 <__assert_func>
 8006cd0:	3101      	adds	r1, #1
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__lshift+0x1c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f100 0114 	add.w	r1, r0, #20
 8006cdc:	f100 0210 	add.w	r2, r0, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	4553      	cmp	r3, sl
 8006ce4:	db33      	blt.n	8006d4e <__lshift+0xb6>
 8006ce6:	6920      	ldr	r0, [r4, #16]
 8006ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cec:	f104 0314 	add.w	r3, r4, #20
 8006cf0:	f019 091f 	ands.w	r9, r9, #31
 8006cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cfc:	d02b      	beq.n	8006d56 <__lshift+0xbe>
 8006cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8006d02:	468a      	mov	sl, r1
 8006d04:	2200      	movs	r2, #0
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	fa00 f009 	lsl.w	r0, r0, r9
 8006d0c:	4310      	orrs	r0, r2
 8006d0e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d16:	459c      	cmp	ip, r3
 8006d18:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d1c:	d8f3      	bhi.n	8006d06 <__lshift+0x6e>
 8006d1e:	ebac 0304 	sub.w	r3, ip, r4
 8006d22:	3b15      	subs	r3, #21
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	3304      	adds	r3, #4
 8006d2a:	f104 0015 	add.w	r0, r4, #21
 8006d2e:	4560      	cmp	r0, ip
 8006d30:	bf88      	it	hi
 8006d32:	2304      	movhi	r3, #4
 8006d34:	50ca      	str	r2, [r1, r3]
 8006d36:	b10a      	cbz	r2, 8006d3c <__lshift+0xa4>
 8006d38:	f108 0602 	add.w	r6, r8, #2
 8006d3c:	3e01      	subs	r6, #1
 8006d3e:	4638      	mov	r0, r7
 8006d40:	612e      	str	r6, [r5, #16]
 8006d42:	4621      	mov	r1, r4
 8006d44:	f7ff fd98 	bl	8006878 <_Bfree>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d52:	3301      	adds	r3, #1
 8006d54:	e7c5      	b.n	8006ce2 <__lshift+0x4a>
 8006d56:	3904      	subs	r1, #4
 8006d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d60:	459c      	cmp	ip, r3
 8006d62:	d8f9      	bhi.n	8006d58 <__lshift+0xc0>
 8006d64:	e7ea      	b.n	8006d3c <__lshift+0xa4>
 8006d66:	bf00      	nop
 8006d68:	08009b07 	.word	0x08009b07
 8006d6c:	08009b18 	.word	0x08009b18

08006d70 <__mcmp>:
 8006d70:	690a      	ldr	r2, [r1, #16]
 8006d72:	4603      	mov	r3, r0
 8006d74:	6900      	ldr	r0, [r0, #16]
 8006d76:	1a80      	subs	r0, r0, r2
 8006d78:	b530      	push	{r4, r5, lr}
 8006d7a:	d10e      	bne.n	8006d9a <__mcmp+0x2a>
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	3114      	adds	r1, #20
 8006d80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d90:	4295      	cmp	r5, r2
 8006d92:	d003      	beq.n	8006d9c <__mcmp+0x2c>
 8006d94:	d205      	bcs.n	8006da2 <__mcmp+0x32>
 8006d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d9a:	bd30      	pop	{r4, r5, pc}
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d3f3      	bcc.n	8006d88 <__mcmp+0x18>
 8006da0:	e7fb      	b.n	8006d9a <__mcmp+0x2a>
 8006da2:	2001      	movs	r0, #1
 8006da4:	e7f9      	b.n	8006d9a <__mcmp+0x2a>
	...

08006da8 <__mdiff>:
 8006da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	4689      	mov	r9, r1
 8006dae:	4606      	mov	r6, r0
 8006db0:	4611      	mov	r1, r2
 8006db2:	4648      	mov	r0, r9
 8006db4:	4614      	mov	r4, r2
 8006db6:	f7ff ffdb 	bl	8006d70 <__mcmp>
 8006dba:	1e05      	subs	r5, r0, #0
 8006dbc:	d112      	bne.n	8006de4 <__mdiff+0x3c>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff fd19 	bl	80067f8 <_Balloc>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	b928      	cbnz	r0, 8006dd6 <__mdiff+0x2e>
 8006dca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec8 <__mdiff+0x120>)
 8006dcc:	f240 2137 	movw	r1, #567	@ 0x237
 8006dd0:	483e      	ldr	r0, [pc, #248]	@ (8006ecc <__mdiff+0x124>)
 8006dd2:	f002 f965 	bl	80090a0 <__assert_func>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ddc:	4610      	mov	r0, r2
 8006dde:	b003      	add	sp, #12
 8006de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	bfbc      	itt	lt
 8006de6:	464b      	movlt	r3, r9
 8006de8:	46a1      	movlt	r9, r4
 8006dea:	4630      	mov	r0, r6
 8006dec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006df0:	bfba      	itte	lt
 8006df2:	461c      	movlt	r4, r3
 8006df4:	2501      	movlt	r5, #1
 8006df6:	2500      	movge	r5, #0
 8006df8:	f7ff fcfe 	bl	80067f8 <_Balloc>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	b918      	cbnz	r0, 8006e08 <__mdiff+0x60>
 8006e00:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <__mdiff+0x120>)
 8006e02:	f240 2145 	movw	r1, #581	@ 0x245
 8006e06:	e7e3      	b.n	8006dd0 <__mdiff+0x28>
 8006e08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e0c:	6926      	ldr	r6, [r4, #16]
 8006e0e:	60c5      	str	r5, [r0, #12]
 8006e10:	f109 0310 	add.w	r3, r9, #16
 8006e14:	f109 0514 	add.w	r5, r9, #20
 8006e18:	f104 0e14 	add.w	lr, r4, #20
 8006e1c:	f100 0b14 	add.w	fp, r0, #20
 8006e20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	46d9      	mov	r9, fp
 8006e2c:	f04f 0c00 	mov.w	ip, #0
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	fa1f f38a 	uxth.w	r3, sl
 8006e40:	4619      	mov	r1, r3
 8006e42:	b283      	uxth	r3, r0
 8006e44:	1acb      	subs	r3, r1, r3
 8006e46:	0c00      	lsrs	r0, r0, #16
 8006e48:	4463      	add	r3, ip
 8006e4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e58:	4576      	cmp	r6, lr
 8006e5a:	f849 3b04 	str.w	r3, [r9], #4
 8006e5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e62:	d8e5      	bhi.n	8006e30 <__mdiff+0x88>
 8006e64:	1b33      	subs	r3, r6, r4
 8006e66:	3b15      	subs	r3, #21
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	3415      	adds	r4, #21
 8006e6e:	3304      	adds	r3, #4
 8006e70:	42a6      	cmp	r6, r4
 8006e72:	bf38      	it	cc
 8006e74:	2304      	movcc	r3, #4
 8006e76:	441d      	add	r5, r3
 8006e78:	445b      	add	r3, fp
 8006e7a:	461e      	mov	r6, r3
 8006e7c:	462c      	mov	r4, r5
 8006e7e:	4544      	cmp	r4, r8
 8006e80:	d30e      	bcc.n	8006ea0 <__mdiff+0xf8>
 8006e82:	f108 0103 	add.w	r1, r8, #3
 8006e86:	1b49      	subs	r1, r1, r5
 8006e88:	f021 0103 	bic.w	r1, r1, #3
 8006e8c:	3d03      	subs	r5, #3
 8006e8e:	45a8      	cmp	r8, r5
 8006e90:	bf38      	it	cc
 8006e92:	2100      	movcc	r1, #0
 8006e94:	440b      	add	r3, r1
 8006e96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e9a:	b191      	cbz	r1, 8006ec2 <__mdiff+0x11a>
 8006e9c:	6117      	str	r7, [r2, #16]
 8006e9e:	e79d      	b.n	8006ddc <__mdiff+0x34>
 8006ea0:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ea4:	46e6      	mov	lr, ip
 8006ea6:	0c08      	lsrs	r0, r1, #16
 8006ea8:	fa1c fc81 	uxtah	ip, ip, r1
 8006eac:	4471      	add	r1, lr
 8006eae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006eb8:	f846 1b04 	str.w	r1, [r6], #4
 8006ebc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ec0:	e7dd      	b.n	8006e7e <__mdiff+0xd6>
 8006ec2:	3f01      	subs	r7, #1
 8006ec4:	e7e7      	b.n	8006e96 <__mdiff+0xee>
 8006ec6:	bf00      	nop
 8006ec8:	08009b07 	.word	0x08009b07
 8006ecc:	08009b18 	.word	0x08009b18

08006ed0 <__ulp>:
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	ed8d 0b00 	vstr	d0, [sp]
 8006ed6:	9a01      	ldr	r2, [sp, #4]
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <__ulp+0x48>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dc08      	bgt.n	8006ef6 <__ulp+0x26>
 8006ee4:	425b      	negs	r3, r3
 8006ee6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006eea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006eee:	da04      	bge.n	8006efa <__ulp+0x2a>
 8006ef0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006ef4:	4113      	asrs	r3, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	e008      	b.n	8006f0c <__ulp+0x3c>
 8006efa:	f1a2 0314 	sub.w	r3, r2, #20
 8006efe:	2b1e      	cmp	r3, #30
 8006f00:	bfda      	itte	le
 8006f02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006f06:	40da      	lsrle	r2, r3
 8006f08:	2201      	movgt	r2, #1
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	ec41 0b10 	vmov	d0, r0, r1
 8006f14:	b002      	add	sp, #8
 8006f16:	4770      	bx	lr
 8006f18:	7ff00000 	.word	0x7ff00000

08006f1c <__b2d>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	6906      	ldr	r6, [r0, #16]
 8006f22:	f100 0814 	add.w	r8, r0, #20
 8006f26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006f2a:	1f37      	subs	r7, r6, #4
 8006f2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7ff fd53 	bl	80069dc <__hi0bits>
 8006f36:	f1c0 0320 	rsb	r3, r0, #32
 8006f3a:	280a      	cmp	r0, #10
 8006f3c:	600b      	str	r3, [r1, #0]
 8006f3e:	491b      	ldr	r1, [pc, #108]	@ (8006fac <__b2d+0x90>)
 8006f40:	dc15      	bgt.n	8006f6e <__b2d+0x52>
 8006f42:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f46:	fa22 f30c 	lsr.w	r3, r2, ip
 8006f4a:	45b8      	cmp	r8, r7
 8006f4c:	ea43 0501 	orr.w	r5, r3, r1
 8006f50:	bf34      	ite	cc
 8006f52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f56:	2300      	movcs	r3, #0
 8006f58:	3015      	adds	r0, #21
 8006f5a:	fa02 f000 	lsl.w	r0, r2, r0
 8006f5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006f62:	4303      	orrs	r3, r0
 8006f64:	461c      	mov	r4, r3
 8006f66:	ec45 4b10 	vmov	d0, r4, r5
 8006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6e:	45b8      	cmp	r8, r7
 8006f70:	bf3a      	itte	cc
 8006f72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f76:	f1a6 0708 	subcc.w	r7, r6, #8
 8006f7a:	2300      	movcs	r3, #0
 8006f7c:	380b      	subs	r0, #11
 8006f7e:	d012      	beq.n	8006fa6 <__b2d+0x8a>
 8006f80:	f1c0 0120 	rsb	r1, r0, #32
 8006f84:	fa23 f401 	lsr.w	r4, r3, r1
 8006f88:	4082      	lsls	r2, r0
 8006f8a:	4322      	orrs	r2, r4
 8006f8c:	4547      	cmp	r7, r8
 8006f8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006f92:	bf8c      	ite	hi
 8006f94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006f98:	2200      	movls	r2, #0
 8006f9a:	4083      	lsls	r3, r0
 8006f9c:	40ca      	lsrs	r2, r1
 8006f9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	e7de      	b.n	8006f64 <__b2d+0x48>
 8006fa6:	ea42 0501 	orr.w	r5, r2, r1
 8006faa:	e7db      	b.n	8006f64 <__b2d+0x48>
 8006fac:	3ff00000 	.word	0x3ff00000

08006fb0 <__d2b>:
 8006fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	ec59 8b10 	vmov	r8, r9, d0
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	f7ff fc1b 	bl	80067f8 <_Balloc>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	b930      	cbnz	r0, 8006fd4 <__d2b+0x24>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4b23      	ldr	r3, [pc, #140]	@ (8007058 <__d2b+0xa8>)
 8006fca:	4824      	ldr	r0, [pc, #144]	@ (800705c <__d2b+0xac>)
 8006fcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fd0:	f002 f866 	bl	80090a0 <__assert_func>
 8006fd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fdc:	b10d      	cbz	r5, 8006fe2 <__d2b+0x32>
 8006fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	f1b8 0300 	subs.w	r3, r8, #0
 8006fe8:	d023      	beq.n	8007032 <__d2b+0x82>
 8006fea:	4668      	mov	r0, sp
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	f7ff fd14 	bl	8006a1a <__lo0bits>
 8006ff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ff6:	b1d0      	cbz	r0, 800702e <__d2b+0x7e>
 8006ff8:	f1c0 0320 	rsb	r3, r0, #32
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	430b      	orrs	r3, r1
 8007002:	40c2      	lsrs	r2, r0
 8007004:	6163      	str	r3, [r4, #20]
 8007006:	9201      	str	r2, [sp, #4]
 8007008:	9b01      	ldr	r3, [sp, #4]
 800700a:	61a3      	str	r3, [r4, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf0c      	ite	eq
 8007010:	2201      	moveq	r2, #1
 8007012:	2202      	movne	r2, #2
 8007014:	6122      	str	r2, [r4, #16]
 8007016:	b1a5      	cbz	r5, 8007042 <__d2b+0x92>
 8007018:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800701c:	4405      	add	r5, r0
 800701e:	603d      	str	r5, [r7, #0]
 8007020:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007024:	6030      	str	r0, [r6, #0]
 8007026:	4620      	mov	r0, r4
 8007028:	b003      	add	sp, #12
 800702a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800702e:	6161      	str	r1, [r4, #20]
 8007030:	e7ea      	b.n	8007008 <__d2b+0x58>
 8007032:	a801      	add	r0, sp, #4
 8007034:	f7ff fcf1 	bl	8006a1a <__lo0bits>
 8007038:	9b01      	ldr	r3, [sp, #4]
 800703a:	6163      	str	r3, [r4, #20]
 800703c:	3020      	adds	r0, #32
 800703e:	2201      	movs	r2, #1
 8007040:	e7e8      	b.n	8007014 <__d2b+0x64>
 8007042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007046:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800704a:	6038      	str	r0, [r7, #0]
 800704c:	6918      	ldr	r0, [r3, #16]
 800704e:	f7ff fcc5 	bl	80069dc <__hi0bits>
 8007052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007056:	e7e5      	b.n	8007024 <__d2b+0x74>
 8007058:	08009b07 	.word	0x08009b07
 800705c:	08009b18 	.word	0x08009b18

08007060 <__ratio>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b085      	sub	sp, #20
 8007066:	e9cd 1000 	strd	r1, r0, [sp]
 800706a:	a902      	add	r1, sp, #8
 800706c:	f7ff ff56 	bl	8006f1c <__b2d>
 8007070:	9800      	ldr	r0, [sp, #0]
 8007072:	a903      	add	r1, sp, #12
 8007074:	ec55 4b10 	vmov	r4, r5, d0
 8007078:	f7ff ff50 	bl	8006f1c <__b2d>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	6919      	ldr	r1, [r3, #16]
 8007080:	9b00      	ldr	r3, [sp, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	1ac9      	subs	r1, r1, r3
 8007086:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	ec5b ab10 	vmov	sl, fp, d0
 8007090:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfce      	itee	gt
 8007098:	462a      	movgt	r2, r5
 800709a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800709e:	465a      	movle	r2, fp
 80070a0:	462f      	mov	r7, r5
 80070a2:	46d9      	mov	r9, fp
 80070a4:	bfcc      	ite	gt
 80070a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80070ae:	464b      	mov	r3, r9
 80070b0:	4652      	mov	r2, sl
 80070b2:	4620      	mov	r0, r4
 80070b4:	4639      	mov	r1, r7
 80070b6:	f7f9 fbd1 	bl	800085c <__aeabi_ddiv>
 80070ba:	ec41 0b10 	vmov	d0, r0, r1
 80070be:	b005      	add	sp, #20
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070c4 <__copybits>:
 80070c4:	3901      	subs	r1, #1
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	1149      	asrs	r1, r1, #5
 80070ca:	6914      	ldr	r4, [r2, #16]
 80070cc:	3101      	adds	r1, #1
 80070ce:	f102 0314 	add.w	r3, r2, #20
 80070d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070da:	1f05      	subs	r5, r0, #4
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d30c      	bcc.n	80070fa <__copybits+0x36>
 80070e0:	1aa3      	subs	r3, r4, r2
 80070e2:	3b11      	subs	r3, #17
 80070e4:	f023 0303 	bic.w	r3, r3, #3
 80070e8:	3211      	adds	r2, #17
 80070ea:	42a2      	cmp	r2, r4
 80070ec:	bf88      	it	hi
 80070ee:	2300      	movhi	r3, #0
 80070f0:	4418      	add	r0, r3
 80070f2:	2300      	movs	r3, #0
 80070f4:	4288      	cmp	r0, r1
 80070f6:	d305      	bcc.n	8007104 <__copybits+0x40>
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80070fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8007102:	e7eb      	b.n	80070dc <__copybits+0x18>
 8007104:	f840 3b04 	str.w	r3, [r0], #4
 8007108:	e7f4      	b.n	80070f4 <__copybits+0x30>

0800710a <__any_on>:
 800710a:	f100 0214 	add.w	r2, r0, #20
 800710e:	6900      	ldr	r0, [r0, #16]
 8007110:	114b      	asrs	r3, r1, #5
 8007112:	4298      	cmp	r0, r3
 8007114:	b510      	push	{r4, lr}
 8007116:	db11      	blt.n	800713c <__any_on+0x32>
 8007118:	dd0a      	ble.n	8007130 <__any_on+0x26>
 800711a:	f011 011f 	ands.w	r1, r1, #31
 800711e:	d007      	beq.n	8007130 <__any_on+0x26>
 8007120:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007124:	fa24 f001 	lsr.w	r0, r4, r1
 8007128:	fa00 f101 	lsl.w	r1, r0, r1
 800712c:	428c      	cmp	r4, r1
 800712e:	d10b      	bne.n	8007148 <__any_on+0x3e>
 8007130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007134:	4293      	cmp	r3, r2
 8007136:	d803      	bhi.n	8007140 <__any_on+0x36>
 8007138:	2000      	movs	r0, #0
 800713a:	bd10      	pop	{r4, pc}
 800713c:	4603      	mov	r3, r0
 800713e:	e7f7      	b.n	8007130 <__any_on+0x26>
 8007140:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007144:	2900      	cmp	r1, #0
 8007146:	d0f5      	beq.n	8007134 <__any_on+0x2a>
 8007148:	2001      	movs	r0, #1
 800714a:	e7f6      	b.n	800713a <__any_on+0x30>

0800714c <sulp>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	ec45 4b10 	vmov	d0, r4, r5
 8007156:	4616      	mov	r6, r2
 8007158:	f7ff feba 	bl	8006ed0 <__ulp>
 800715c:	ec51 0b10 	vmov	r0, r1, d0
 8007160:	b17e      	cbz	r6, 8007182 <sulp+0x36>
 8007162:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007166:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800716a:	2b00      	cmp	r3, #0
 800716c:	dd09      	ble.n	8007182 <sulp+0x36>
 800716e:	051b      	lsls	r3, r3, #20
 8007170:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007174:	2400      	movs	r4, #0
 8007176:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800717a:	4622      	mov	r2, r4
 800717c:	462b      	mov	r3, r5
 800717e:	f7f9 fa43 	bl	8000608 <__aeabi_dmul>
 8007182:	ec41 0b10 	vmov	d0, r0, r1
 8007186:	bd70      	pop	{r4, r5, r6, pc}

08007188 <_strtod_l>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	b09f      	sub	sp, #124	@ 0x7c
 800718e:	460c      	mov	r4, r1
 8007190:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007192:	2200      	movs	r2, #0
 8007194:	921a      	str	r2, [sp, #104]	@ 0x68
 8007196:	9005      	str	r0, [sp, #20]
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	460a      	mov	r2, r1
 80071a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80071a4:	7811      	ldrb	r1, [r2, #0]
 80071a6:	292b      	cmp	r1, #43	@ 0x2b
 80071a8:	d04a      	beq.n	8007240 <_strtod_l+0xb8>
 80071aa:	d838      	bhi.n	800721e <_strtod_l+0x96>
 80071ac:	290d      	cmp	r1, #13
 80071ae:	d832      	bhi.n	8007216 <_strtod_l+0x8e>
 80071b0:	2908      	cmp	r1, #8
 80071b2:	d832      	bhi.n	800721a <_strtod_l+0x92>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d03b      	beq.n	8007230 <_strtod_l+0xa8>
 80071b8:	2200      	movs	r2, #0
 80071ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80071bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80071be:	782a      	ldrb	r2, [r5, #0]
 80071c0:	2a30      	cmp	r2, #48	@ 0x30
 80071c2:	f040 80b2 	bne.w	800732a <_strtod_l+0x1a2>
 80071c6:	786a      	ldrb	r2, [r5, #1]
 80071c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071cc:	2a58      	cmp	r2, #88	@ 0x58
 80071ce:	d16e      	bne.n	80072ae <_strtod_l+0x126>
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4a8f      	ldr	r2, [pc, #572]	@ (8007418 <_strtod_l+0x290>)
 80071dc:	9805      	ldr	r0, [sp, #20]
 80071de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80071e0:	a919      	add	r1, sp, #100	@ 0x64
 80071e2:	f001 fff7 	bl	80091d4 <__gethex>
 80071e6:	f010 060f 	ands.w	r6, r0, #15
 80071ea:	4604      	mov	r4, r0
 80071ec:	d005      	beq.n	80071fa <_strtod_l+0x72>
 80071ee:	2e06      	cmp	r6, #6
 80071f0:	d128      	bne.n	8007244 <_strtod_l+0xbc>
 80071f2:	3501      	adds	r5, #1
 80071f4:	2300      	movs	r3, #0
 80071f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80071f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80071fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 858e 	bne.w	8007d1e <_strtod_l+0xb96>
 8007202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007204:	b1cb      	cbz	r3, 800723a <_strtod_l+0xb2>
 8007206:	4652      	mov	r2, sl
 8007208:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800720c:	ec43 2b10 	vmov	d0, r2, r3
 8007210:	b01f      	add	sp, #124	@ 0x7c
 8007212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	2920      	cmp	r1, #32
 8007218:	d1ce      	bne.n	80071b8 <_strtod_l+0x30>
 800721a:	3201      	adds	r2, #1
 800721c:	e7c1      	b.n	80071a2 <_strtod_l+0x1a>
 800721e:	292d      	cmp	r1, #45	@ 0x2d
 8007220:	d1ca      	bne.n	80071b8 <_strtod_l+0x30>
 8007222:	2101      	movs	r1, #1
 8007224:	910e      	str	r1, [sp, #56]	@ 0x38
 8007226:	1c51      	adds	r1, r2, #1
 8007228:	9119      	str	r1, [sp, #100]	@ 0x64
 800722a:	7852      	ldrb	r2, [r2, #1]
 800722c:	2a00      	cmp	r2, #0
 800722e:	d1c5      	bne.n	80071bc <_strtod_l+0x34>
 8007230:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007232:	9419      	str	r4, [sp, #100]	@ 0x64
 8007234:	2b00      	cmp	r3, #0
 8007236:	f040 8570 	bne.w	8007d1a <_strtod_l+0xb92>
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	e7e5      	b.n	800720c <_strtod_l+0x84>
 8007240:	2100      	movs	r1, #0
 8007242:	e7ef      	b.n	8007224 <_strtod_l+0x9c>
 8007244:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007246:	b13a      	cbz	r2, 8007258 <_strtod_l+0xd0>
 8007248:	2135      	movs	r1, #53	@ 0x35
 800724a:	a81c      	add	r0, sp, #112	@ 0x70
 800724c:	f7ff ff3a 	bl	80070c4 <__copybits>
 8007250:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007252:	9805      	ldr	r0, [sp, #20]
 8007254:	f7ff fb10 	bl	8006878 <_Bfree>
 8007258:	3e01      	subs	r6, #1
 800725a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800725c:	2e04      	cmp	r6, #4
 800725e:	d806      	bhi.n	800726e <_strtod_l+0xe6>
 8007260:	e8df f006 	tbb	[pc, r6]
 8007264:	201d0314 	.word	0x201d0314
 8007268:	14          	.byte	0x14
 8007269:	00          	.byte	0x00
 800726a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800726e:	05e1      	lsls	r1, r4, #23
 8007270:	bf48      	it	mi
 8007272:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800727a:	0d1b      	lsrs	r3, r3, #20
 800727c:	051b      	lsls	r3, r3, #20
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1bb      	bne.n	80071fa <_strtod_l+0x72>
 8007282:	f7fe fb2d 	bl	80058e0 <__errno>
 8007286:	2322      	movs	r3, #34	@ 0x22
 8007288:	6003      	str	r3, [r0, #0]
 800728a:	e7b6      	b.n	80071fa <_strtod_l+0x72>
 800728c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007290:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007294:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007298:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800729c:	e7e7      	b.n	800726e <_strtod_l+0xe6>
 800729e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007420 <_strtod_l+0x298>
 80072a2:	e7e4      	b.n	800726e <_strtod_l+0xe6>
 80072a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80072a8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80072ac:	e7df      	b.n	800726e <_strtod_l+0xe6>
 80072ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b30      	cmp	r3, #48	@ 0x30
 80072b8:	d0f9      	beq.n	80072ae <_strtod_l+0x126>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d09d      	beq.n	80071fa <_strtod_l+0x72>
 80072be:	2301      	movs	r3, #1
 80072c0:	2700      	movs	r7, #0
 80072c2:	9308      	str	r3, [sp, #32]
 80072c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80072c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80072ca:	46b9      	mov	r9, r7
 80072cc:	220a      	movs	r2, #10
 80072ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80072d0:	7805      	ldrb	r5, [r0, #0]
 80072d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80072d6:	b2d9      	uxtb	r1, r3
 80072d8:	2909      	cmp	r1, #9
 80072da:	d928      	bls.n	800732e <_strtod_l+0x1a6>
 80072dc:	494f      	ldr	r1, [pc, #316]	@ (800741c <_strtod_l+0x294>)
 80072de:	2201      	movs	r2, #1
 80072e0:	f001 fe82 	bl	8008fe8 <strncmp>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d032      	beq.n	800734e <_strtod_l+0x1c6>
 80072e8:	2000      	movs	r0, #0
 80072ea:	462a      	mov	r2, r5
 80072ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80072ee:	464d      	mov	r5, r9
 80072f0:	4603      	mov	r3, r0
 80072f2:	2a65      	cmp	r2, #101	@ 0x65
 80072f4:	d001      	beq.n	80072fa <_strtod_l+0x172>
 80072f6:	2a45      	cmp	r2, #69	@ 0x45
 80072f8:	d114      	bne.n	8007324 <_strtod_l+0x19c>
 80072fa:	b91d      	cbnz	r5, 8007304 <_strtod_l+0x17c>
 80072fc:	9a08      	ldr	r2, [sp, #32]
 80072fe:	4302      	orrs	r2, r0
 8007300:	d096      	beq.n	8007230 <_strtod_l+0xa8>
 8007302:	2500      	movs	r5, #0
 8007304:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007306:	1c62      	adds	r2, r4, #1
 8007308:	9219      	str	r2, [sp, #100]	@ 0x64
 800730a:	7862      	ldrb	r2, [r4, #1]
 800730c:	2a2b      	cmp	r2, #43	@ 0x2b
 800730e:	d07a      	beq.n	8007406 <_strtod_l+0x27e>
 8007310:	2a2d      	cmp	r2, #45	@ 0x2d
 8007312:	d07e      	beq.n	8007412 <_strtod_l+0x28a>
 8007314:	f04f 0c00 	mov.w	ip, #0
 8007318:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800731c:	2909      	cmp	r1, #9
 800731e:	f240 8085 	bls.w	800742c <_strtod_l+0x2a4>
 8007322:	9419      	str	r4, [sp, #100]	@ 0x64
 8007324:	f04f 0800 	mov.w	r8, #0
 8007328:	e0a5      	b.n	8007476 <_strtod_l+0x2ee>
 800732a:	2300      	movs	r3, #0
 800732c:	e7c8      	b.n	80072c0 <_strtod_l+0x138>
 800732e:	f1b9 0f08 	cmp.w	r9, #8
 8007332:	bfd8      	it	le
 8007334:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007336:	f100 0001 	add.w	r0, r0, #1
 800733a:	bfda      	itte	le
 800733c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007340:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007342:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007346:	f109 0901 	add.w	r9, r9, #1
 800734a:	9019      	str	r0, [sp, #100]	@ 0x64
 800734c:	e7bf      	b.n	80072ce <_strtod_l+0x146>
 800734e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	9219      	str	r2, [sp, #100]	@ 0x64
 8007354:	785a      	ldrb	r2, [r3, #1]
 8007356:	f1b9 0f00 	cmp.w	r9, #0
 800735a:	d03b      	beq.n	80073d4 <_strtod_l+0x24c>
 800735c:	900a      	str	r0, [sp, #40]	@ 0x28
 800735e:	464d      	mov	r5, r9
 8007360:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007364:	2b09      	cmp	r3, #9
 8007366:	d912      	bls.n	800738e <_strtod_l+0x206>
 8007368:	2301      	movs	r3, #1
 800736a:	e7c2      	b.n	80072f2 <_strtod_l+0x16a>
 800736c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	9219      	str	r2, [sp, #100]	@ 0x64
 8007372:	785a      	ldrb	r2, [r3, #1]
 8007374:	3001      	adds	r0, #1
 8007376:	2a30      	cmp	r2, #48	@ 0x30
 8007378:	d0f8      	beq.n	800736c <_strtod_l+0x1e4>
 800737a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800737e:	2b08      	cmp	r3, #8
 8007380:	f200 84d2 	bhi.w	8007d28 <_strtod_l+0xba0>
 8007384:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007386:	900a      	str	r0, [sp, #40]	@ 0x28
 8007388:	2000      	movs	r0, #0
 800738a:	930c      	str	r3, [sp, #48]	@ 0x30
 800738c:	4605      	mov	r5, r0
 800738e:	3a30      	subs	r2, #48	@ 0x30
 8007390:	f100 0301 	add.w	r3, r0, #1
 8007394:	d018      	beq.n	80073c8 <_strtod_l+0x240>
 8007396:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007398:	4419      	add	r1, r3
 800739a:	910a      	str	r1, [sp, #40]	@ 0x28
 800739c:	462e      	mov	r6, r5
 800739e:	f04f 0e0a 	mov.w	lr, #10
 80073a2:	1c71      	adds	r1, r6, #1
 80073a4:	eba1 0c05 	sub.w	ip, r1, r5
 80073a8:	4563      	cmp	r3, ip
 80073aa:	dc15      	bgt.n	80073d8 <_strtod_l+0x250>
 80073ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80073b0:	182b      	adds	r3, r5, r0
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	f105 0501 	add.w	r5, r5, #1
 80073b8:	4405      	add	r5, r0
 80073ba:	dc1a      	bgt.n	80073f2 <_strtod_l+0x26a>
 80073bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073be:	230a      	movs	r3, #10
 80073c0:	fb03 2301 	mla	r3, r3, r1, r2
 80073c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073c6:	2300      	movs	r3, #0
 80073c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073ca:	1c51      	adds	r1, r2, #1
 80073cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80073ce:	7852      	ldrb	r2, [r2, #1]
 80073d0:	4618      	mov	r0, r3
 80073d2:	e7c5      	b.n	8007360 <_strtod_l+0x1d8>
 80073d4:	4648      	mov	r0, r9
 80073d6:	e7ce      	b.n	8007376 <_strtod_l+0x1ee>
 80073d8:	2e08      	cmp	r6, #8
 80073da:	dc05      	bgt.n	80073e8 <_strtod_l+0x260>
 80073dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80073de:	fb0e f606 	mul.w	r6, lr, r6
 80073e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80073e4:	460e      	mov	r6, r1
 80073e6:	e7dc      	b.n	80073a2 <_strtod_l+0x21a>
 80073e8:	2910      	cmp	r1, #16
 80073ea:	bfd8      	it	le
 80073ec:	fb0e f707 	mulle.w	r7, lr, r7
 80073f0:	e7f8      	b.n	80073e4 <_strtod_l+0x25c>
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	bfdc      	itt	le
 80073f6:	230a      	movle	r3, #10
 80073f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80073fc:	e7e3      	b.n	80073c6 <_strtod_l+0x23e>
 80073fe:	2300      	movs	r3, #0
 8007400:	930a      	str	r3, [sp, #40]	@ 0x28
 8007402:	2301      	movs	r3, #1
 8007404:	e77a      	b.n	80072fc <_strtod_l+0x174>
 8007406:	f04f 0c00 	mov.w	ip, #0
 800740a:	1ca2      	adds	r2, r4, #2
 800740c:	9219      	str	r2, [sp, #100]	@ 0x64
 800740e:	78a2      	ldrb	r2, [r4, #2]
 8007410:	e782      	b.n	8007318 <_strtod_l+0x190>
 8007412:	f04f 0c01 	mov.w	ip, #1
 8007416:	e7f8      	b.n	800740a <_strtod_l+0x282>
 8007418:	08009d54 	.word	0x08009d54
 800741c:	08009b71 	.word	0x08009b71
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007426:	1c51      	adds	r1, r2, #1
 8007428:	9119      	str	r1, [sp, #100]	@ 0x64
 800742a:	7852      	ldrb	r2, [r2, #1]
 800742c:	2a30      	cmp	r2, #48	@ 0x30
 800742e:	d0f9      	beq.n	8007424 <_strtod_l+0x29c>
 8007430:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007434:	2908      	cmp	r1, #8
 8007436:	f63f af75 	bhi.w	8007324 <_strtod_l+0x19c>
 800743a:	3a30      	subs	r2, #48	@ 0x30
 800743c:	9209      	str	r2, [sp, #36]	@ 0x24
 800743e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007440:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007442:	f04f 080a 	mov.w	r8, #10
 8007446:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007448:	1c56      	adds	r6, r2, #1
 800744a:	9619      	str	r6, [sp, #100]	@ 0x64
 800744c:	7852      	ldrb	r2, [r2, #1]
 800744e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007452:	f1be 0f09 	cmp.w	lr, #9
 8007456:	d939      	bls.n	80074cc <_strtod_l+0x344>
 8007458:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800745a:	1a76      	subs	r6, r6, r1
 800745c:	2e08      	cmp	r6, #8
 800745e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007462:	dc03      	bgt.n	800746c <_strtod_l+0x2e4>
 8007464:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007466:	4588      	cmp	r8, r1
 8007468:	bfa8      	it	ge
 800746a:	4688      	movge	r8, r1
 800746c:	f1bc 0f00 	cmp.w	ip, #0
 8007470:	d001      	beq.n	8007476 <_strtod_l+0x2ee>
 8007472:	f1c8 0800 	rsb	r8, r8, #0
 8007476:	2d00      	cmp	r5, #0
 8007478:	d14e      	bne.n	8007518 <_strtod_l+0x390>
 800747a:	9908      	ldr	r1, [sp, #32]
 800747c:	4308      	orrs	r0, r1
 800747e:	f47f aebc 	bne.w	80071fa <_strtod_l+0x72>
 8007482:	2b00      	cmp	r3, #0
 8007484:	f47f aed4 	bne.w	8007230 <_strtod_l+0xa8>
 8007488:	2a69      	cmp	r2, #105	@ 0x69
 800748a:	d028      	beq.n	80074de <_strtod_l+0x356>
 800748c:	dc25      	bgt.n	80074da <_strtod_l+0x352>
 800748e:	2a49      	cmp	r2, #73	@ 0x49
 8007490:	d025      	beq.n	80074de <_strtod_l+0x356>
 8007492:	2a4e      	cmp	r2, #78	@ 0x4e
 8007494:	f47f aecc 	bne.w	8007230 <_strtod_l+0xa8>
 8007498:	499a      	ldr	r1, [pc, #616]	@ (8007704 <_strtod_l+0x57c>)
 800749a:	a819      	add	r0, sp, #100	@ 0x64
 800749c:	f002 f8bc 	bl	8009618 <__match>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f43f aec5 	beq.w	8007230 <_strtod_l+0xa8>
 80074a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b28      	cmp	r3, #40	@ 0x28
 80074ac:	d12e      	bne.n	800750c <_strtod_l+0x384>
 80074ae:	4996      	ldr	r1, [pc, #600]	@ (8007708 <_strtod_l+0x580>)
 80074b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80074b2:	a819      	add	r0, sp, #100	@ 0x64
 80074b4:	f002 f8c4 	bl	8009640 <__hexnan>
 80074b8:	2805      	cmp	r0, #5
 80074ba:	d127      	bne.n	800750c <_strtod_l+0x384>
 80074bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80074be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80074c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80074c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80074ca:	e696      	b.n	80071fa <_strtod_l+0x72>
 80074cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074ce:	fb08 2101 	mla	r1, r8, r1, r2
 80074d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80074d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d8:	e7b5      	b.n	8007446 <_strtod_l+0x2be>
 80074da:	2a6e      	cmp	r2, #110	@ 0x6e
 80074dc:	e7da      	b.n	8007494 <_strtod_l+0x30c>
 80074de:	498b      	ldr	r1, [pc, #556]	@ (800770c <_strtod_l+0x584>)
 80074e0:	a819      	add	r0, sp, #100	@ 0x64
 80074e2:	f002 f899 	bl	8009618 <__match>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f43f aea2 	beq.w	8007230 <_strtod_l+0xa8>
 80074ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ee:	4988      	ldr	r1, [pc, #544]	@ (8007710 <_strtod_l+0x588>)
 80074f0:	3b01      	subs	r3, #1
 80074f2:	a819      	add	r0, sp, #100	@ 0x64
 80074f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80074f6:	f002 f88f 	bl	8009618 <__match>
 80074fa:	b910      	cbnz	r0, 8007502 <_strtod_l+0x37a>
 80074fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074fe:	3301      	adds	r3, #1
 8007500:	9319      	str	r3, [sp, #100]	@ 0x64
 8007502:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007720 <_strtod_l+0x598>
 8007506:	f04f 0a00 	mov.w	sl, #0
 800750a:	e676      	b.n	80071fa <_strtod_l+0x72>
 800750c:	4881      	ldr	r0, [pc, #516]	@ (8007714 <_strtod_l+0x58c>)
 800750e:	f001 fdbf 	bl	8009090 <nan>
 8007512:	ec5b ab10 	vmov	sl, fp, d0
 8007516:	e670      	b.n	80071fa <_strtod_l+0x72>
 8007518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800751c:	eba8 0303 	sub.w	r3, r8, r3
 8007520:	f1b9 0f00 	cmp.w	r9, #0
 8007524:	bf08      	it	eq
 8007526:	46a9      	moveq	r9, r5
 8007528:	2d10      	cmp	r5, #16
 800752a:	9309      	str	r3, [sp, #36]	@ 0x24
 800752c:	462c      	mov	r4, r5
 800752e:	bfa8      	it	ge
 8007530:	2410      	movge	r4, #16
 8007532:	f7f8 ffef 	bl	8000514 <__aeabi_ui2d>
 8007536:	2d09      	cmp	r5, #9
 8007538:	4682      	mov	sl, r0
 800753a:	468b      	mov	fp, r1
 800753c:	dc13      	bgt.n	8007566 <_strtod_l+0x3de>
 800753e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	f43f ae5a 	beq.w	80071fa <_strtod_l+0x72>
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	dd78      	ble.n	800763c <_strtod_l+0x4b4>
 800754a:	2b16      	cmp	r3, #22
 800754c:	dc5f      	bgt.n	800760e <_strtod_l+0x486>
 800754e:	4972      	ldr	r1, [pc, #456]	@ (8007718 <_strtod_l+0x590>)
 8007550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007558:	4652      	mov	r2, sl
 800755a:	465b      	mov	r3, fp
 800755c:	f7f9 f854 	bl	8000608 <__aeabi_dmul>
 8007560:	4682      	mov	sl, r0
 8007562:	468b      	mov	fp, r1
 8007564:	e649      	b.n	80071fa <_strtod_l+0x72>
 8007566:	4b6c      	ldr	r3, [pc, #432]	@ (8007718 <_strtod_l+0x590>)
 8007568:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800756c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007570:	f7f9 f84a 	bl	8000608 <__aeabi_dmul>
 8007574:	4682      	mov	sl, r0
 8007576:	4638      	mov	r0, r7
 8007578:	468b      	mov	fp, r1
 800757a:	f7f8 ffcb 	bl	8000514 <__aeabi_ui2d>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f8 fe89 	bl	800029c <__adddf3>
 800758a:	2d0f      	cmp	r5, #15
 800758c:	4682      	mov	sl, r0
 800758e:	468b      	mov	fp, r1
 8007590:	ddd5      	ble.n	800753e <_strtod_l+0x3b6>
 8007592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007594:	1b2c      	subs	r4, r5, r4
 8007596:	441c      	add	r4, r3
 8007598:	2c00      	cmp	r4, #0
 800759a:	f340 8093 	ble.w	80076c4 <_strtod_l+0x53c>
 800759e:	f014 030f 	ands.w	r3, r4, #15
 80075a2:	d00a      	beq.n	80075ba <_strtod_l+0x432>
 80075a4:	495c      	ldr	r1, [pc, #368]	@ (8007718 <_strtod_l+0x590>)
 80075a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075aa:	4652      	mov	r2, sl
 80075ac:	465b      	mov	r3, fp
 80075ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b2:	f7f9 f829 	bl	8000608 <__aeabi_dmul>
 80075b6:	4682      	mov	sl, r0
 80075b8:	468b      	mov	fp, r1
 80075ba:	f034 040f 	bics.w	r4, r4, #15
 80075be:	d073      	beq.n	80076a8 <_strtod_l+0x520>
 80075c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80075c4:	dd49      	ble.n	800765a <_strtod_l+0x4d2>
 80075c6:	2400      	movs	r4, #0
 80075c8:	46a0      	mov	r8, r4
 80075ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075cc:	46a1      	mov	r9, r4
 80075ce:	9a05      	ldr	r2, [sp, #20]
 80075d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007720 <_strtod_l+0x598>
 80075d4:	2322      	movs	r3, #34	@ 0x22
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	f04f 0a00 	mov.w	sl, #0
 80075dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f43f ae0b 	beq.w	80071fa <_strtod_l+0x72>
 80075e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075e6:	9805      	ldr	r0, [sp, #20]
 80075e8:	f7ff f946 	bl	8006878 <_Bfree>
 80075ec:	9805      	ldr	r0, [sp, #20]
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7ff f942 	bl	8006878 <_Bfree>
 80075f4:	9805      	ldr	r0, [sp, #20]
 80075f6:	4641      	mov	r1, r8
 80075f8:	f7ff f93e 	bl	8006878 <_Bfree>
 80075fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075fe:	9805      	ldr	r0, [sp, #20]
 8007600:	f7ff f93a 	bl	8006878 <_Bfree>
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	4621      	mov	r1, r4
 8007608:	f7ff f936 	bl	8006878 <_Bfree>
 800760c:	e5f5      	b.n	80071fa <_strtod_l+0x72>
 800760e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007610:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007614:	4293      	cmp	r3, r2
 8007616:	dbbc      	blt.n	8007592 <_strtod_l+0x40a>
 8007618:	4c3f      	ldr	r4, [pc, #252]	@ (8007718 <_strtod_l+0x590>)
 800761a:	f1c5 050f 	rsb	r5, r5, #15
 800761e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007622:	4652      	mov	r2, sl
 8007624:	465b      	mov	r3, fp
 8007626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800762a:	f7f8 ffed 	bl	8000608 <__aeabi_dmul>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	1b5d      	subs	r5, r3, r5
 8007632:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007636:	e9d4 2300 	ldrd	r2, r3, [r4]
 800763a:	e78f      	b.n	800755c <_strtod_l+0x3d4>
 800763c:	3316      	adds	r3, #22
 800763e:	dba8      	blt.n	8007592 <_strtod_l+0x40a>
 8007640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007642:	eba3 0808 	sub.w	r8, r3, r8
 8007646:	4b34      	ldr	r3, [pc, #208]	@ (8007718 <_strtod_l+0x590>)
 8007648:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800764c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007650:	4650      	mov	r0, sl
 8007652:	4659      	mov	r1, fp
 8007654:	f7f9 f902 	bl	800085c <__aeabi_ddiv>
 8007658:	e782      	b.n	8007560 <_strtod_l+0x3d8>
 800765a:	2300      	movs	r3, #0
 800765c:	4f2f      	ldr	r7, [pc, #188]	@ (800771c <_strtod_l+0x594>)
 800765e:	1124      	asrs	r4, r4, #4
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	461e      	mov	r6, r3
 8007666:	2c01      	cmp	r4, #1
 8007668:	dc21      	bgt.n	80076ae <_strtod_l+0x526>
 800766a:	b10b      	cbz	r3, 8007670 <_strtod_l+0x4e8>
 800766c:	4682      	mov	sl, r0
 800766e:	468b      	mov	fp, r1
 8007670:	492a      	ldr	r1, [pc, #168]	@ (800771c <_strtod_l+0x594>)
 8007672:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007676:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800767a:	4652      	mov	r2, sl
 800767c:	465b      	mov	r3, fp
 800767e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007682:	f7f8 ffc1 	bl	8000608 <__aeabi_dmul>
 8007686:	4b26      	ldr	r3, [pc, #152]	@ (8007720 <_strtod_l+0x598>)
 8007688:	460a      	mov	r2, r1
 800768a:	400b      	ands	r3, r1
 800768c:	4925      	ldr	r1, [pc, #148]	@ (8007724 <_strtod_l+0x59c>)
 800768e:	428b      	cmp	r3, r1
 8007690:	4682      	mov	sl, r0
 8007692:	d898      	bhi.n	80075c6 <_strtod_l+0x43e>
 8007694:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007698:	428b      	cmp	r3, r1
 800769a:	bf86      	itte	hi
 800769c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007728 <_strtod_l+0x5a0>
 80076a0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80076a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80076a8:	2300      	movs	r3, #0
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	e076      	b.n	800779c <_strtod_l+0x614>
 80076ae:	07e2      	lsls	r2, r4, #31
 80076b0:	d504      	bpl.n	80076bc <_strtod_l+0x534>
 80076b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	2301      	movs	r3, #1
 80076bc:	3601      	adds	r6, #1
 80076be:	1064      	asrs	r4, r4, #1
 80076c0:	3708      	adds	r7, #8
 80076c2:	e7d0      	b.n	8007666 <_strtod_l+0x4de>
 80076c4:	d0f0      	beq.n	80076a8 <_strtod_l+0x520>
 80076c6:	4264      	negs	r4, r4
 80076c8:	f014 020f 	ands.w	r2, r4, #15
 80076cc:	d00a      	beq.n	80076e4 <_strtod_l+0x55c>
 80076ce:	4b12      	ldr	r3, [pc, #72]	@ (8007718 <_strtod_l+0x590>)
 80076d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d4:	4650      	mov	r0, sl
 80076d6:	4659      	mov	r1, fp
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f7f9 f8be 	bl	800085c <__aeabi_ddiv>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	1124      	asrs	r4, r4, #4
 80076e6:	d0df      	beq.n	80076a8 <_strtod_l+0x520>
 80076e8:	2c1f      	cmp	r4, #31
 80076ea:	dd1f      	ble.n	800772c <_strtod_l+0x5a4>
 80076ec:	2400      	movs	r4, #0
 80076ee:	46a0      	mov	r8, r4
 80076f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076f2:	46a1      	mov	r9, r4
 80076f4:	9a05      	ldr	r2, [sp, #20]
 80076f6:	2322      	movs	r3, #34	@ 0x22
 80076f8:	f04f 0a00 	mov.w	sl, #0
 80076fc:	f04f 0b00 	mov.w	fp, #0
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e76b      	b.n	80075dc <_strtod_l+0x454>
 8007704:	08009a61 	.word	0x08009a61
 8007708:	08009d40 	.word	0x08009d40
 800770c:	08009a59 	.word	0x08009a59
 8007710:	08009a8e 	.word	0x08009a8e
 8007714:	08009be2 	.word	0x08009be2
 8007718:	08009c78 	.word	0x08009c78
 800771c:	08009c50 	.word	0x08009c50
 8007720:	7ff00000 	.word	0x7ff00000
 8007724:	7ca00000 	.word	0x7ca00000
 8007728:	7fefffff 	.word	0x7fefffff
 800772c:	f014 0310 	ands.w	r3, r4, #16
 8007730:	bf18      	it	ne
 8007732:	236a      	movne	r3, #106	@ 0x6a
 8007734:	4ea9      	ldr	r6, [pc, #676]	@ (80079dc <_strtod_l+0x854>)
 8007736:	9308      	str	r3, [sp, #32]
 8007738:	4650      	mov	r0, sl
 800773a:	4659      	mov	r1, fp
 800773c:	2300      	movs	r3, #0
 800773e:	07e7      	lsls	r7, r4, #31
 8007740:	d504      	bpl.n	800774c <_strtod_l+0x5c4>
 8007742:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007746:	f7f8 ff5f 	bl	8000608 <__aeabi_dmul>
 800774a:	2301      	movs	r3, #1
 800774c:	1064      	asrs	r4, r4, #1
 800774e:	f106 0608 	add.w	r6, r6, #8
 8007752:	d1f4      	bne.n	800773e <_strtod_l+0x5b6>
 8007754:	b10b      	cbz	r3, 800775a <_strtod_l+0x5d2>
 8007756:	4682      	mov	sl, r0
 8007758:	468b      	mov	fp, r1
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	b1b3      	cbz	r3, 800778c <_strtod_l+0x604>
 800775e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007762:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007766:	2b00      	cmp	r3, #0
 8007768:	4659      	mov	r1, fp
 800776a:	dd0f      	ble.n	800778c <_strtod_l+0x604>
 800776c:	2b1f      	cmp	r3, #31
 800776e:	dd56      	ble.n	800781e <_strtod_l+0x696>
 8007770:	2b34      	cmp	r3, #52	@ 0x34
 8007772:	bfde      	ittt	le
 8007774:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007778:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800777c:	4093      	lslle	r3, r2
 800777e:	f04f 0a00 	mov.w	sl, #0
 8007782:	bfcc      	ite	gt
 8007784:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007788:	ea03 0b01 	andle.w	fp, r3, r1
 800778c:	2200      	movs	r2, #0
 800778e:	2300      	movs	r3, #0
 8007790:	4650      	mov	r0, sl
 8007792:	4659      	mov	r1, fp
 8007794:	f7f9 f9a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007798:	2800      	cmp	r0, #0
 800779a:	d1a7      	bne.n	80076ec <_strtod_l+0x564>
 800779c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80077a2:	9805      	ldr	r0, [sp, #20]
 80077a4:	462b      	mov	r3, r5
 80077a6:	464a      	mov	r2, r9
 80077a8:	f7ff f8ce 	bl	8006948 <__s2b>
 80077ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f43f af09 	beq.w	80075c6 <_strtod_l+0x43e>
 80077b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	eba3 0308 	sub.w	r3, r3, r8
 80077be:	bfa8      	it	ge
 80077c0:	2300      	movge	r3, #0
 80077c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80077c4:	2400      	movs	r4, #0
 80077c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80077cc:	46a0      	mov	r8, r4
 80077ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077d0:	9805      	ldr	r0, [sp, #20]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	f7ff f810 	bl	80067f8 <_Balloc>
 80077d8:	4681      	mov	r9, r0
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aef7 	beq.w	80075ce <_strtod_l+0x446>
 80077e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	3202      	adds	r2, #2
 80077e6:	f103 010c 	add.w	r1, r3, #12
 80077ea:	0092      	lsls	r2, r2, #2
 80077ec:	300c      	adds	r0, #12
 80077ee:	f001 fc3f 	bl	8009070 <memcpy>
 80077f2:	ec4b ab10 	vmov	d0, sl, fp
 80077f6:	9805      	ldr	r0, [sp, #20]
 80077f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80077fa:	a91b      	add	r1, sp, #108	@ 0x6c
 80077fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007800:	f7ff fbd6 	bl	8006fb0 <__d2b>
 8007804:	901a      	str	r0, [sp, #104]	@ 0x68
 8007806:	2800      	cmp	r0, #0
 8007808:	f43f aee1 	beq.w	80075ce <_strtod_l+0x446>
 800780c:	9805      	ldr	r0, [sp, #20]
 800780e:	2101      	movs	r1, #1
 8007810:	f7ff f930 	bl	8006a74 <__i2b>
 8007814:	4680      	mov	r8, r0
 8007816:	b948      	cbnz	r0, 800782c <_strtod_l+0x6a4>
 8007818:	f04f 0800 	mov.w	r8, #0
 800781c:	e6d7      	b.n	80075ce <_strtod_l+0x446>
 800781e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	ea03 0a0a 	and.w	sl, r3, sl
 800782a:	e7af      	b.n	800778c <_strtod_l+0x604>
 800782c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800782e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007830:	2d00      	cmp	r5, #0
 8007832:	bfab      	itete	ge
 8007834:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007836:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007838:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800783a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800783c:	bfac      	ite	ge
 800783e:	18ef      	addge	r7, r5, r3
 8007840:	1b5e      	sublt	r6, r3, r5
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	1aed      	subs	r5, r5, r3
 8007846:	4415      	add	r5, r2
 8007848:	4b65      	ldr	r3, [pc, #404]	@ (80079e0 <_strtod_l+0x858>)
 800784a:	3d01      	subs	r5, #1
 800784c:	429d      	cmp	r5, r3
 800784e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007852:	da50      	bge.n	80078f6 <_strtod_l+0x76e>
 8007854:	1b5b      	subs	r3, r3, r5
 8007856:	2b1f      	cmp	r3, #31
 8007858:	eba2 0203 	sub.w	r2, r2, r3
 800785c:	f04f 0101 	mov.w	r1, #1
 8007860:	dc3d      	bgt.n	80078de <_strtod_l+0x756>
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007868:	2300      	movs	r3, #0
 800786a:	9310      	str	r3, [sp, #64]	@ 0x40
 800786c:	18bd      	adds	r5, r7, r2
 800786e:	9b08      	ldr	r3, [sp, #32]
 8007870:	42af      	cmp	r7, r5
 8007872:	4416      	add	r6, r2
 8007874:	441e      	add	r6, r3
 8007876:	463b      	mov	r3, r7
 8007878:	bfa8      	it	ge
 800787a:	462b      	movge	r3, r5
 800787c:	42b3      	cmp	r3, r6
 800787e:	bfa8      	it	ge
 8007880:	4633      	movge	r3, r6
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfc2      	ittt	gt
 8007886:	1aed      	subgt	r5, r5, r3
 8007888:	1af6      	subgt	r6, r6, r3
 800788a:	1aff      	subgt	r7, r7, r3
 800788c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd16      	ble.n	80078c0 <_strtod_l+0x738>
 8007892:	4641      	mov	r1, r8
 8007894:	9805      	ldr	r0, [sp, #20]
 8007896:	461a      	mov	r2, r3
 8007898:	f7ff f9a4 	bl	8006be4 <__pow5mult>
 800789c:	4680      	mov	r8, r0
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0ba      	beq.n	8007818 <_strtod_l+0x690>
 80078a2:	4601      	mov	r1, r0
 80078a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078a6:	9805      	ldr	r0, [sp, #20]
 80078a8:	f7ff f8fa 	bl	8006aa0 <__multiply>
 80078ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f ae8d 	beq.w	80075ce <_strtod_l+0x446>
 80078b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b6:	9805      	ldr	r0, [sp, #20]
 80078b8:	f7fe ffde 	bl	8006878 <_Bfree>
 80078bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078be:	931a      	str	r3, [sp, #104]	@ 0x68
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	dc1d      	bgt.n	8007900 <_strtod_l+0x778>
 80078c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dd23      	ble.n	8007912 <_strtod_l+0x78a>
 80078ca:	4649      	mov	r1, r9
 80078cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	f7ff f988 	bl	8006be4 <__pow5mult>
 80078d4:	4681      	mov	r9, r0
 80078d6:	b9e0      	cbnz	r0, 8007912 <_strtod_l+0x78a>
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	e677      	b.n	80075ce <_strtod_l+0x446>
 80078de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80078e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80078e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80078ea:	35e2      	adds	r5, #226	@ 0xe2
 80078ec:	fa01 f305 	lsl.w	r3, r1, r5
 80078f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80078f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078f4:	e7ba      	b.n	800786c <_strtod_l+0x6e4>
 80078f6:	2300      	movs	r3, #0
 80078f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80078fa:	2301      	movs	r3, #1
 80078fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078fe:	e7b5      	b.n	800786c <_strtod_l+0x6e4>
 8007900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007902:	9805      	ldr	r0, [sp, #20]
 8007904:	462a      	mov	r2, r5
 8007906:	f7ff f9c7 	bl	8006c98 <__lshift>
 800790a:	901a      	str	r0, [sp, #104]	@ 0x68
 800790c:	2800      	cmp	r0, #0
 800790e:	d1d9      	bne.n	80078c4 <_strtod_l+0x73c>
 8007910:	e65d      	b.n	80075ce <_strtod_l+0x446>
 8007912:	2e00      	cmp	r6, #0
 8007914:	dd07      	ble.n	8007926 <_strtod_l+0x79e>
 8007916:	4649      	mov	r1, r9
 8007918:	9805      	ldr	r0, [sp, #20]
 800791a:	4632      	mov	r2, r6
 800791c:	f7ff f9bc 	bl	8006c98 <__lshift>
 8007920:	4681      	mov	r9, r0
 8007922:	2800      	cmp	r0, #0
 8007924:	d0d8      	beq.n	80078d8 <_strtod_l+0x750>
 8007926:	2f00      	cmp	r7, #0
 8007928:	dd08      	ble.n	800793c <_strtod_l+0x7b4>
 800792a:	4641      	mov	r1, r8
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	463a      	mov	r2, r7
 8007930:	f7ff f9b2 	bl	8006c98 <__lshift>
 8007934:	4680      	mov	r8, r0
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f ae49 	beq.w	80075ce <_strtod_l+0x446>
 800793c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800793e:	9805      	ldr	r0, [sp, #20]
 8007940:	464a      	mov	r2, r9
 8007942:	f7ff fa31 	bl	8006da8 <__mdiff>
 8007946:	4604      	mov	r4, r0
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f ae40 	beq.w	80075ce <_strtod_l+0x446>
 800794e:	68c3      	ldr	r3, [r0, #12]
 8007950:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007952:	2300      	movs	r3, #0
 8007954:	60c3      	str	r3, [r0, #12]
 8007956:	4641      	mov	r1, r8
 8007958:	f7ff fa0a 	bl	8006d70 <__mcmp>
 800795c:	2800      	cmp	r0, #0
 800795e:	da45      	bge.n	80079ec <_strtod_l+0x864>
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	ea53 030a 	orrs.w	r3, r3, sl
 8007966:	d16b      	bne.n	8007a40 <_strtod_l+0x8b8>
 8007968:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800796c:	2b00      	cmp	r3, #0
 800796e:	d167      	bne.n	8007a40 <_strtod_l+0x8b8>
 8007970:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007974:	0d1b      	lsrs	r3, r3, #20
 8007976:	051b      	lsls	r3, r3, #20
 8007978:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800797c:	d960      	bls.n	8007a40 <_strtod_l+0x8b8>
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	b913      	cbnz	r3, 8007988 <_strtod_l+0x800>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	2b01      	cmp	r3, #1
 8007986:	dd5b      	ble.n	8007a40 <_strtod_l+0x8b8>
 8007988:	4621      	mov	r1, r4
 800798a:	2201      	movs	r2, #1
 800798c:	9805      	ldr	r0, [sp, #20]
 800798e:	f7ff f983 	bl	8006c98 <__lshift>
 8007992:	4641      	mov	r1, r8
 8007994:	4604      	mov	r4, r0
 8007996:	f7ff f9eb 	bl	8006d70 <__mcmp>
 800799a:	2800      	cmp	r0, #0
 800799c:	dd50      	ble.n	8007a40 <_strtod_l+0x8b8>
 800799e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079a2:	9a08      	ldr	r2, [sp, #32]
 80079a4:	0d1b      	lsrs	r3, r3, #20
 80079a6:	051b      	lsls	r3, r3, #20
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d06a      	beq.n	8007a82 <_strtod_l+0x8fa>
 80079ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80079b0:	d867      	bhi.n	8007a82 <_strtod_l+0x8fa>
 80079b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80079b6:	f67f ae9d 	bls.w	80076f4 <_strtod_l+0x56c>
 80079ba:	4b0a      	ldr	r3, [pc, #40]	@ (80079e4 <_strtod_l+0x85c>)
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	2200      	movs	r2, #0
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <_strtod_l+0x860>)
 80079c8:	400b      	ands	r3, r1
 80079ca:	4682      	mov	sl, r0
 80079cc:	468b      	mov	fp, r1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f47f ae08 	bne.w	80075e4 <_strtod_l+0x45c>
 80079d4:	9a05      	ldr	r2, [sp, #20]
 80079d6:	2322      	movs	r3, #34	@ 0x22
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e603      	b.n	80075e4 <_strtod_l+0x45c>
 80079dc:	08009d68 	.word	0x08009d68
 80079e0:	fffffc02 	.word	0xfffffc02
 80079e4:	39500000 	.word	0x39500000
 80079e8:	7ff00000 	.word	0x7ff00000
 80079ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80079f0:	d165      	bne.n	8007abe <_strtod_l+0x936>
 80079f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079f8:	b35a      	cbz	r2, 8007a52 <_strtod_l+0x8ca>
 80079fa:	4a9f      	ldr	r2, [pc, #636]	@ (8007c78 <_strtod_l+0xaf0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d12b      	bne.n	8007a58 <_strtod_l+0x8d0>
 8007a00:	9b08      	ldr	r3, [sp, #32]
 8007a02:	4651      	mov	r1, sl
 8007a04:	b303      	cbz	r3, 8007a48 <_strtod_l+0x8c0>
 8007a06:	4b9d      	ldr	r3, [pc, #628]	@ (8007c7c <_strtod_l+0xaf4>)
 8007a08:	465a      	mov	r2, fp
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a14:	d81b      	bhi.n	8007a4e <_strtod_l+0x8c6>
 8007a16:	0d1b      	lsrs	r3, r3, #20
 8007a18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d119      	bne.n	8007a58 <_strtod_l+0x8d0>
 8007a24:	4b96      	ldr	r3, [pc, #600]	@ (8007c80 <_strtod_l+0xaf8>)
 8007a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d102      	bne.n	8007a32 <_strtod_l+0x8aa>
 8007a2c:	3101      	adds	r1, #1
 8007a2e:	f43f adce 	beq.w	80075ce <_strtod_l+0x446>
 8007a32:	4b92      	ldr	r3, [pc, #584]	@ (8007c7c <_strtod_l+0xaf4>)
 8007a34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a36:	401a      	ands	r2, r3
 8007a38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007a3c:	f04f 0a00 	mov.w	sl, #0
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1b9      	bne.n	80079ba <_strtod_l+0x832>
 8007a46:	e5cd      	b.n	80075e4 <_strtod_l+0x45c>
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a4c:	e7e8      	b.n	8007a20 <_strtod_l+0x898>
 8007a4e:	4613      	mov	r3, r2
 8007a50:	e7e6      	b.n	8007a20 <_strtod_l+0x898>
 8007a52:	ea53 030a 	orrs.w	r3, r3, sl
 8007a56:	d0a2      	beq.n	800799e <_strtod_l+0x816>
 8007a58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a5a:	b1db      	cbz	r3, 8007a94 <_strtod_l+0x90c>
 8007a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a5e:	4213      	tst	r3, r2
 8007a60:	d0ee      	beq.n	8007a40 <_strtod_l+0x8b8>
 8007a62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a64:	9a08      	ldr	r2, [sp, #32]
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	b1bb      	cbz	r3, 8007a9c <_strtod_l+0x914>
 8007a6c:	f7ff fb6e 	bl	800714c <sulp>
 8007a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a74:	ec53 2b10 	vmov	r2, r3, d0
 8007a78:	f7f8 fc10 	bl	800029c <__adddf3>
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	468b      	mov	fp, r1
 8007a80:	e7de      	b.n	8007a40 <_strtod_l+0x8b8>
 8007a82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a8e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007a92:	e7d5      	b.n	8007a40 <_strtod_l+0x8b8>
 8007a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a96:	ea13 0f0a 	tst.w	r3, sl
 8007a9a:	e7e1      	b.n	8007a60 <_strtod_l+0x8d8>
 8007a9c:	f7ff fb56 	bl	800714c <sulp>
 8007aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aa4:	ec53 2b10 	vmov	r2, r3, d0
 8007aa8:	f7f8 fbf6 	bl	8000298 <__aeabi_dsub>
 8007aac:	2200      	movs	r2, #0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	468b      	mov	fp, r1
 8007ab4:	f7f9 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0c1      	beq.n	8007a40 <_strtod_l+0x8b8>
 8007abc:	e61a      	b.n	80076f4 <_strtod_l+0x56c>
 8007abe:	4641      	mov	r1, r8
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff facd 	bl	8007060 <__ratio>
 8007ac6:	ec57 6b10 	vmov	r6, r7, d0
 8007aca:	2200      	movs	r2, #0
 8007acc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f9 f814 	bl	8000b00 <__aeabi_dcmple>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d06f      	beq.n	8007bbc <_strtod_l+0xa34>
 8007adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d17a      	bne.n	8007bd8 <_strtod_l+0xa50>
 8007ae2:	f1ba 0f00 	cmp.w	sl, #0
 8007ae6:	d158      	bne.n	8007b9a <_strtod_l+0xa12>
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d15a      	bne.n	8007ba8 <_strtod_l+0xa20>
 8007af2:	4b64      	ldr	r3, [pc, #400]	@ (8007c84 <_strtod_l+0xafc>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	4630      	mov	r0, r6
 8007af8:	4639      	mov	r1, r7
 8007afa:	f7f8 fff7 	bl	8000aec <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d159      	bne.n	8007bb6 <_strtod_l+0xa2e>
 8007b02:	4630      	mov	r0, r6
 8007b04:	4639      	mov	r1, r7
 8007b06:	4b60      	ldr	r3, [pc, #384]	@ (8007c88 <_strtod_l+0xb00>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd7d 	bl	8000608 <__aeabi_dmul>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460f      	mov	r7, r1
 8007b12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007b16:	9606      	str	r6, [sp, #24]
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b1e:	4d57      	ldr	r5, [pc, #348]	@ (8007c7c <_strtod_l+0xaf4>)
 8007b20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b26:	401d      	ands	r5, r3
 8007b28:	4b58      	ldr	r3, [pc, #352]	@ (8007c8c <_strtod_l+0xb04>)
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	f040 80b2 	bne.w	8007c94 <_strtod_l+0xb0c>
 8007b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007b36:	ec4b ab10 	vmov	d0, sl, fp
 8007b3a:	f7ff f9c9 	bl	8006ed0 <__ulp>
 8007b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b42:	ec51 0b10 	vmov	r0, r1, d0
 8007b46:	f7f8 fd5f 	bl	8000608 <__aeabi_dmul>
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	f7f8 fba5 	bl	800029c <__adddf3>
 8007b52:	460b      	mov	r3, r1
 8007b54:	4949      	ldr	r1, [pc, #292]	@ (8007c7c <_strtod_l+0xaf4>)
 8007b56:	4a4e      	ldr	r2, [pc, #312]	@ (8007c90 <_strtod_l+0xb08>)
 8007b58:	4019      	ands	r1, r3
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	d942      	bls.n	8007be6 <_strtod_l+0xa5e>
 8007b60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b62:	4b47      	ldr	r3, [pc, #284]	@ (8007c80 <_strtod_l+0xaf8>)
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d103      	bne.n	8007b70 <_strtod_l+0x9e8>
 8007b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f43f ad2f 	beq.w	80075ce <_strtod_l+0x446>
 8007b70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c80 <_strtod_l+0xaf8>
 8007b74:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007b78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b7a:	9805      	ldr	r0, [sp, #20]
 8007b7c:	f7fe fe7c 	bl	8006878 <_Bfree>
 8007b80:	9805      	ldr	r0, [sp, #20]
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7fe fe78 	bl	8006878 <_Bfree>
 8007b88:	9805      	ldr	r0, [sp, #20]
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	f7fe fe74 	bl	8006878 <_Bfree>
 8007b90:	9805      	ldr	r0, [sp, #20]
 8007b92:	4621      	mov	r1, r4
 8007b94:	f7fe fe70 	bl	8006878 <_Bfree>
 8007b98:	e619      	b.n	80077ce <_strtod_l+0x646>
 8007b9a:	f1ba 0f01 	cmp.w	sl, #1
 8007b9e:	d103      	bne.n	8007ba8 <_strtod_l+0xa20>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f43f ada6 	beq.w	80076f4 <_strtod_l+0x56c>
 8007ba8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007c58 <_strtod_l+0xad0>
 8007bac:	4f35      	ldr	r7, [pc, #212]	@ (8007c84 <_strtod_l+0xafc>)
 8007bae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	e7b1      	b.n	8007b1a <_strtod_l+0x992>
 8007bb6:	4f34      	ldr	r7, [pc, #208]	@ (8007c88 <_strtod_l+0xb00>)
 8007bb8:	2600      	movs	r6, #0
 8007bba:	e7aa      	b.n	8007b12 <_strtod_l+0x98a>
 8007bbc:	4b32      	ldr	r3, [pc, #200]	@ (8007c88 <_strtod_l+0xb00>)
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fd20 	bl	8000608 <__aeabi_dmul>
 8007bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d09f      	beq.n	8007b12 <_strtod_l+0x98a>
 8007bd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007bd6:	e7a0      	b.n	8007b1a <_strtod_l+0x992>
 8007bd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007c60 <_strtod_l+0xad8>
 8007bdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007be0:	ec57 6b17 	vmov	r6, r7, d7
 8007be4:	e799      	b.n	8007b1a <_strtod_l+0x992>
 8007be6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1c1      	bne.n	8007b78 <_strtod_l+0x9f0>
 8007bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	051b      	lsls	r3, r3, #20
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	d1bb      	bne.n	8007b78 <_strtod_l+0x9f0>
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f9 f848 	bl	8000c98 <__aeabi_d2lz>
 8007c08:	f7f8 fcd0 	bl	80005ac <__aeabi_l2d>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fb40 	bl	8000298 <__aeabi_dsub>
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c26:	ea46 060a 	orr.w	r6, r6, sl
 8007c2a:	431e      	orrs	r6, r3
 8007c2c:	d06f      	beq.n	8007d0e <_strtod_l+0xb86>
 8007c2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c68 <_strtod_l+0xae0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 ff5a 	bl	8000aec <__aeabi_dcmplt>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f47f acd3 	bne.w	80075e4 <_strtod_l+0x45c>
 8007c3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c70 <_strtod_l+0xae8>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c48:	f7f8 ff6e 	bl	8000b28 <__aeabi_dcmpgt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d093      	beq.n	8007b78 <_strtod_l+0x9f0>
 8007c50:	e4c8      	b.n	80075e4 <_strtod_l+0x45c>
 8007c52:	bf00      	nop
 8007c54:	f3af 8000 	nop.w
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	bff00000 	.word	0xbff00000
 8007c60:	00000000 	.word	0x00000000
 8007c64:	3ff00000 	.word	0x3ff00000
 8007c68:	94a03595 	.word	0x94a03595
 8007c6c:	3fdfffff 	.word	0x3fdfffff
 8007c70:	35afe535 	.word	0x35afe535
 8007c74:	3fe00000 	.word	0x3fe00000
 8007c78:	000fffff 	.word	0x000fffff
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	7fefffff 	.word	0x7fefffff
 8007c84:	3ff00000 	.word	0x3ff00000
 8007c88:	3fe00000 	.word	0x3fe00000
 8007c8c:	7fe00000 	.word	0x7fe00000
 8007c90:	7c9fffff 	.word	0x7c9fffff
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	b323      	cbz	r3, 8007ce2 <_strtod_l+0xb5a>
 8007c98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c9c:	d821      	bhi.n	8007ce2 <_strtod_l+0xb5a>
 8007c9e:	a328      	add	r3, pc, #160	@ (adr r3, 8007d40 <_strtod_l+0xbb8>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 ff2a 	bl	8000b00 <__aeabi_dcmple>
 8007cac:	b1a0      	cbz	r0, 8007cd8 <_strtod_l+0xb50>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7f8 ff81 	bl	8000bb8 <__aeabi_d2uiz>
 8007cb6:	2801      	cmp	r0, #1
 8007cb8:	bf38      	it	cc
 8007cba:	2001      	movcc	r0, #1
 8007cbc:	f7f8 fc2a 	bl	8000514 <__aeabi_ui2d>
 8007cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	b9fb      	cbnz	r3, 8007d08 <_strtod_l+0xb80>
 8007cc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ccc:	9014      	str	r0, [sp, #80]	@ 0x50
 8007cce:	9315      	str	r3, [sp, #84]	@ 0x54
 8007cd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007cd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007cd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007cde:	1b5b      	subs	r3, r3, r5
 8007ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ce2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ce6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007cea:	f7ff f8f1 	bl	8006ed0 <__ulp>
 8007cee:	4650      	mov	r0, sl
 8007cf0:	ec53 2b10 	vmov	r2, r3, d0
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	f7f8 fc87 	bl	8000608 <__aeabi_dmul>
 8007cfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007cfe:	f7f8 facd 	bl	800029c <__adddf3>
 8007d02:	4682      	mov	sl, r0
 8007d04:	468b      	mov	fp, r1
 8007d06:	e770      	b.n	8007bea <_strtod_l+0xa62>
 8007d08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007d0c:	e7e0      	b.n	8007cd0 <_strtod_l+0xb48>
 8007d0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d48 <_strtod_l+0xbc0>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 feea 	bl	8000aec <__aeabi_dcmplt>
 8007d18:	e798      	b.n	8007c4c <_strtod_l+0xac4>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007d20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	f7ff ba6d 	b.w	8007202 <_strtod_l+0x7a>
 8007d28:	2a65      	cmp	r2, #101	@ 0x65
 8007d2a:	f43f ab68 	beq.w	80073fe <_strtod_l+0x276>
 8007d2e:	2a45      	cmp	r2, #69	@ 0x45
 8007d30:	f43f ab65 	beq.w	80073fe <_strtod_l+0x276>
 8007d34:	2301      	movs	r3, #1
 8007d36:	f7ff bba0 	b.w	800747a <_strtod_l+0x2f2>
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w
 8007d40:	ffc00000 	.word	0xffc00000
 8007d44:	41dfffff 	.word	0x41dfffff
 8007d48:	94a03595 	.word	0x94a03595
 8007d4c:	3fcfffff 	.word	0x3fcfffff

08007d50 <_strtod_r>:
 8007d50:	4b01      	ldr	r3, [pc, #4]	@ (8007d58 <_strtod_r+0x8>)
 8007d52:	f7ff ba19 	b.w	8007188 <_strtod_l>
 8007d56:	bf00      	nop
 8007d58:	20000068 	.word	0x20000068

08007d5c <_strtol_l.isra.0>:
 8007d5c:	2b24      	cmp	r3, #36	@ 0x24
 8007d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d62:	4686      	mov	lr, r0
 8007d64:	4690      	mov	r8, r2
 8007d66:	d801      	bhi.n	8007d6c <_strtol_l.isra.0+0x10>
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d106      	bne.n	8007d7a <_strtol_l.isra.0+0x1e>
 8007d6c:	f7fd fdb8 	bl	80058e0 <__errno>
 8007d70:	2316      	movs	r3, #22
 8007d72:	6003      	str	r3, [r0, #0]
 8007d74:	2000      	movs	r0, #0
 8007d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7a:	4834      	ldr	r0, [pc, #208]	@ (8007e4c <_strtol_l.isra.0+0xf0>)
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	462a      	mov	r2, r5
 8007d80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d84:	5d06      	ldrb	r6, [r0, r4]
 8007d86:	f016 0608 	ands.w	r6, r6, #8
 8007d8a:	d1f8      	bne.n	8007d7e <_strtol_l.isra.0+0x22>
 8007d8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d8e:	d110      	bne.n	8007db2 <_strtol_l.isra.0+0x56>
 8007d90:	782c      	ldrb	r4, [r5, #0]
 8007d92:	2601      	movs	r6, #1
 8007d94:	1c95      	adds	r5, r2, #2
 8007d96:	f033 0210 	bics.w	r2, r3, #16
 8007d9a:	d115      	bne.n	8007dc8 <_strtol_l.isra.0+0x6c>
 8007d9c:	2c30      	cmp	r4, #48	@ 0x30
 8007d9e:	d10d      	bne.n	8007dbc <_strtol_l.isra.0+0x60>
 8007da0:	782a      	ldrb	r2, [r5, #0]
 8007da2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007da6:	2a58      	cmp	r2, #88	@ 0x58
 8007da8:	d108      	bne.n	8007dbc <_strtol_l.isra.0+0x60>
 8007daa:	786c      	ldrb	r4, [r5, #1]
 8007dac:	3502      	adds	r5, #2
 8007dae:	2310      	movs	r3, #16
 8007db0:	e00a      	b.n	8007dc8 <_strtol_l.isra.0+0x6c>
 8007db2:	2c2b      	cmp	r4, #43	@ 0x2b
 8007db4:	bf04      	itt	eq
 8007db6:	782c      	ldrbeq	r4, [r5, #0]
 8007db8:	1c95      	addeq	r5, r2, #2
 8007dba:	e7ec      	b.n	8007d96 <_strtol_l.isra.0+0x3a>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f6      	bne.n	8007dae <_strtol_l.isra.0+0x52>
 8007dc0:	2c30      	cmp	r4, #48	@ 0x30
 8007dc2:	bf14      	ite	ne
 8007dc4:	230a      	movne	r3, #10
 8007dc6:	2308      	moveq	r3, #8
 8007dc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007dcc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	fbbc f9f3 	udiv	r9, ip, r3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ddc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007de0:	2f09      	cmp	r7, #9
 8007de2:	d80f      	bhi.n	8007e04 <_strtol_l.isra.0+0xa8>
 8007de4:	463c      	mov	r4, r7
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	dd1b      	ble.n	8007e22 <_strtol_l.isra.0+0xc6>
 8007dea:	1c57      	adds	r7, r2, #1
 8007dec:	d007      	beq.n	8007dfe <_strtol_l.isra.0+0xa2>
 8007dee:	4581      	cmp	r9, r0
 8007df0:	d314      	bcc.n	8007e1c <_strtol_l.isra.0+0xc0>
 8007df2:	d101      	bne.n	8007df8 <_strtol_l.isra.0+0x9c>
 8007df4:	45a2      	cmp	sl, r4
 8007df6:	db11      	blt.n	8007e1c <_strtol_l.isra.0+0xc0>
 8007df8:	fb00 4003 	mla	r0, r0, r3, r4
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e02:	e7eb      	b.n	8007ddc <_strtol_l.isra.0+0x80>
 8007e04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e08:	2f19      	cmp	r7, #25
 8007e0a:	d801      	bhi.n	8007e10 <_strtol_l.isra.0+0xb4>
 8007e0c:	3c37      	subs	r4, #55	@ 0x37
 8007e0e:	e7ea      	b.n	8007de6 <_strtol_l.isra.0+0x8a>
 8007e10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e14:	2f19      	cmp	r7, #25
 8007e16:	d804      	bhi.n	8007e22 <_strtol_l.isra.0+0xc6>
 8007e18:	3c57      	subs	r4, #87	@ 0x57
 8007e1a:	e7e4      	b.n	8007de6 <_strtol_l.isra.0+0x8a>
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e20:	e7ed      	b.n	8007dfe <_strtol_l.isra.0+0xa2>
 8007e22:	1c53      	adds	r3, r2, #1
 8007e24:	d108      	bne.n	8007e38 <_strtol_l.isra.0+0xdc>
 8007e26:	2322      	movs	r3, #34	@ 0x22
 8007e28:	f8ce 3000 	str.w	r3, [lr]
 8007e2c:	4660      	mov	r0, ip
 8007e2e:	f1b8 0f00 	cmp.w	r8, #0
 8007e32:	d0a0      	beq.n	8007d76 <_strtol_l.isra.0+0x1a>
 8007e34:	1e69      	subs	r1, r5, #1
 8007e36:	e006      	b.n	8007e46 <_strtol_l.isra.0+0xea>
 8007e38:	b106      	cbz	r6, 8007e3c <_strtol_l.isra.0+0xe0>
 8007e3a:	4240      	negs	r0, r0
 8007e3c:	f1b8 0f00 	cmp.w	r8, #0
 8007e40:	d099      	beq.n	8007d76 <_strtol_l.isra.0+0x1a>
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	d1f6      	bne.n	8007e34 <_strtol_l.isra.0+0xd8>
 8007e46:	f8c8 1000 	str.w	r1, [r8]
 8007e4a:	e794      	b.n	8007d76 <_strtol_l.isra.0+0x1a>
 8007e4c:	08009d91 	.word	0x08009d91

08007e50 <_strtol_r>:
 8007e50:	f7ff bf84 	b.w	8007d5c <_strtol_l.isra.0>

08007e54 <__ssputs_r>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	688e      	ldr	r6, [r1, #8]
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	42be      	cmp	r6, r7
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	4682      	mov	sl, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4690      	mov	r8, r2
 8007e66:	d82d      	bhi.n	8007ec4 <__ssputs_r+0x70>
 8007e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e70:	d026      	beq.n	8007ec0 <__ssputs_r+0x6c>
 8007e72:	6965      	ldr	r5, [r4, #20]
 8007e74:	6909      	ldr	r1, [r1, #16]
 8007e76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e7a:	eba3 0901 	sub.w	r9, r3, r1
 8007e7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e82:	1c7b      	adds	r3, r7, #1
 8007e84:	444b      	add	r3, r9
 8007e86:	106d      	asrs	r5, r5, #1
 8007e88:	429d      	cmp	r5, r3
 8007e8a:	bf38      	it	cc
 8007e8c:	461d      	movcc	r5, r3
 8007e8e:	0553      	lsls	r3, r2, #21
 8007e90:	d527      	bpl.n	8007ee2 <__ssputs_r+0x8e>
 8007e92:	4629      	mov	r1, r5
 8007e94:	f7fe fc24 	bl	80066e0 <_malloc_r>
 8007e98:	4606      	mov	r6, r0
 8007e9a:	b360      	cbz	r0, 8007ef6 <__ssputs_r+0xa2>
 8007e9c:	6921      	ldr	r1, [r4, #16]
 8007e9e:	464a      	mov	r2, r9
 8007ea0:	f001 f8e6 	bl	8009070 <memcpy>
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	6126      	str	r6, [r4, #16]
 8007eb2:	6165      	str	r5, [r4, #20]
 8007eb4:	444e      	add	r6, r9
 8007eb6:	eba5 0509 	sub.w	r5, r5, r9
 8007eba:	6026      	str	r6, [r4, #0]
 8007ebc:	60a5      	str	r5, [r4, #8]
 8007ebe:	463e      	mov	r6, r7
 8007ec0:	42be      	cmp	r6, r7
 8007ec2:	d900      	bls.n	8007ec6 <__ssputs_r+0x72>
 8007ec4:	463e      	mov	r6, r7
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	4632      	mov	r2, r6
 8007eca:	4641      	mov	r1, r8
 8007ecc:	f001 f872 	bl	8008fb4 <memmove>
 8007ed0:	68a3      	ldr	r3, [r4, #8]
 8007ed2:	1b9b      	subs	r3, r3, r6
 8007ed4:	60a3      	str	r3, [r4, #8]
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	4433      	add	r3, r6
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	2000      	movs	r0, #0
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	f001 fc59 	bl	800979a <_realloc_r>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d1e0      	bne.n	8007eb0 <__ssputs_r+0x5c>
 8007eee:	6921      	ldr	r1, [r4, #16]
 8007ef0:	4650      	mov	r0, sl
 8007ef2:	f7fe fb81 	bl	80065f8 <_free_r>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	f8ca 3000 	str.w	r3, [sl]
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f08:	e7e9      	b.n	8007ede <__ssputs_r+0x8a>
	...

08007f0c <_svfiprintf_r>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	4698      	mov	r8, r3
 8007f12:	898b      	ldrh	r3, [r1, #12]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	b09d      	sub	sp, #116	@ 0x74
 8007f18:	4607      	mov	r7, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	d510      	bpl.n	8007f42 <_svfiprintf_r+0x36>
 8007f20:	690b      	ldr	r3, [r1, #16]
 8007f22:	b973      	cbnz	r3, 8007f42 <_svfiprintf_r+0x36>
 8007f24:	2140      	movs	r1, #64	@ 0x40
 8007f26:	f7fe fbdb 	bl	80066e0 <_malloc_r>
 8007f2a:	6028      	str	r0, [r5, #0]
 8007f2c:	6128      	str	r0, [r5, #16]
 8007f2e:	b930      	cbnz	r0, 8007f3e <_svfiprintf_r+0x32>
 8007f30:	230c      	movs	r3, #12
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f38:	b01d      	add	sp, #116	@ 0x74
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	2340      	movs	r3, #64	@ 0x40
 8007f40:	616b      	str	r3, [r5, #20]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f46:	2320      	movs	r3, #32
 8007f48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f50:	2330      	movs	r3, #48	@ 0x30
 8007f52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080f0 <_svfiprintf_r+0x1e4>
 8007f56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f5a:	f04f 0901 	mov.w	r9, #1
 8007f5e:	4623      	mov	r3, r4
 8007f60:	469a      	mov	sl, r3
 8007f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f66:	b10a      	cbz	r2, 8007f6c <_svfiprintf_r+0x60>
 8007f68:	2a25      	cmp	r2, #37	@ 0x25
 8007f6a:	d1f9      	bne.n	8007f60 <_svfiprintf_r+0x54>
 8007f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f70:	d00b      	beq.n	8007f8a <_svfiprintf_r+0x7e>
 8007f72:	465b      	mov	r3, fp
 8007f74:	4622      	mov	r2, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ff6b 	bl	8007e54 <__ssputs_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f000 80a7 	beq.w	80080d2 <_svfiprintf_r+0x1c6>
 8007f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f86:	445a      	add	r2, fp
 8007f88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 809f 	beq.w	80080d2 <_svfiprintf_r+0x1c6>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9e:	f10a 0a01 	add.w	sl, sl, #1
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	9307      	str	r3, [sp, #28]
 8007fa6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007faa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fac:	4654      	mov	r4, sl
 8007fae:	2205      	movs	r2, #5
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	484e      	ldr	r0, [pc, #312]	@ (80080f0 <_svfiprintf_r+0x1e4>)
 8007fb6:	f7f8 f913 	bl	80001e0 <memchr>
 8007fba:	9a04      	ldr	r2, [sp, #16]
 8007fbc:	b9d8      	cbnz	r0, 8007ff6 <_svfiprintf_r+0xea>
 8007fbe:	06d0      	lsls	r0, r2, #27
 8007fc0:	bf44      	itt	mi
 8007fc2:	2320      	movmi	r3, #32
 8007fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fc8:	0711      	lsls	r1, r2, #28
 8007fca:	bf44      	itt	mi
 8007fcc:	232b      	movmi	r3, #43	@ 0x2b
 8007fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd8:	d015      	beq.n	8008006 <_svfiprintf_r+0xfa>
 8007fda:	9a07      	ldr	r2, [sp, #28]
 8007fdc:	4654      	mov	r4, sl
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f04f 0c0a 	mov.w	ip, #10
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fea:	3b30      	subs	r3, #48	@ 0x30
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d94b      	bls.n	8008088 <_svfiprintf_r+0x17c>
 8007ff0:	b1b0      	cbz	r0, 8008020 <_svfiprintf_r+0x114>
 8007ff2:	9207      	str	r2, [sp, #28]
 8007ff4:	e014      	b.n	8008020 <_svfiprintf_r+0x114>
 8007ff6:	eba0 0308 	sub.w	r3, r0, r8
 8007ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	46a2      	mov	sl, r4
 8008004:	e7d2      	b.n	8007fac <_svfiprintf_r+0xa0>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d19      	adds	r1, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9103      	str	r1, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfbb      	ittet	lt
 8008012:	425b      	neglt	r3, r3
 8008014:	f042 0202 	orrlt.w	r2, r2, #2
 8008018:	9307      	strge	r3, [sp, #28]
 800801a:	9307      	strlt	r3, [sp, #28]
 800801c:	bfb8      	it	lt
 800801e:	9204      	strlt	r2, [sp, #16]
 8008020:	7823      	ldrb	r3, [r4, #0]
 8008022:	2b2e      	cmp	r3, #46	@ 0x2e
 8008024:	d10a      	bne.n	800803c <_svfiprintf_r+0x130>
 8008026:	7863      	ldrb	r3, [r4, #1]
 8008028:	2b2a      	cmp	r3, #42	@ 0x2a
 800802a:	d132      	bne.n	8008092 <_svfiprintf_r+0x186>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9203      	str	r2, [sp, #12]
 8008034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008038:	3402      	adds	r4, #2
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008100 <_svfiprintf_r+0x1f4>
 8008040:	7821      	ldrb	r1, [r4, #0]
 8008042:	2203      	movs	r2, #3
 8008044:	4650      	mov	r0, sl
 8008046:	f7f8 f8cb 	bl	80001e0 <memchr>
 800804a:	b138      	cbz	r0, 800805c <_svfiprintf_r+0x150>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	eba0 000a 	sub.w	r0, r0, sl
 8008052:	2240      	movs	r2, #64	@ 0x40
 8008054:	4082      	lsls	r2, r0
 8008056:	4313      	orrs	r3, r2
 8008058:	3401      	adds	r4, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008060:	4824      	ldr	r0, [pc, #144]	@ (80080f4 <_svfiprintf_r+0x1e8>)
 8008062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008066:	2206      	movs	r2, #6
 8008068:	f7f8 f8ba 	bl	80001e0 <memchr>
 800806c:	2800      	cmp	r0, #0
 800806e:	d036      	beq.n	80080de <_svfiprintf_r+0x1d2>
 8008070:	4b21      	ldr	r3, [pc, #132]	@ (80080f8 <_svfiprintf_r+0x1ec>)
 8008072:	bb1b      	cbnz	r3, 80080bc <_svfiprintf_r+0x1b0>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	3307      	adds	r3, #7
 8008078:	f023 0307 	bic.w	r3, r3, #7
 800807c:	3308      	adds	r3, #8
 800807e:	9303      	str	r3, [sp, #12]
 8008080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008082:	4433      	add	r3, r6
 8008084:	9309      	str	r3, [sp, #36]	@ 0x24
 8008086:	e76a      	b.n	8007f5e <_svfiprintf_r+0x52>
 8008088:	fb0c 3202 	mla	r2, ip, r2, r3
 800808c:	460c      	mov	r4, r1
 800808e:	2001      	movs	r0, #1
 8008090:	e7a8      	b.n	8007fe4 <_svfiprintf_r+0xd8>
 8008092:	2300      	movs	r3, #0
 8008094:	3401      	adds	r4, #1
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	4619      	mov	r1, r3
 800809a:	f04f 0c0a 	mov.w	ip, #10
 800809e:	4620      	mov	r0, r4
 80080a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a4:	3a30      	subs	r2, #48	@ 0x30
 80080a6:	2a09      	cmp	r2, #9
 80080a8:	d903      	bls.n	80080b2 <_svfiprintf_r+0x1a6>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0c6      	beq.n	800803c <_svfiprintf_r+0x130>
 80080ae:	9105      	str	r1, [sp, #20]
 80080b0:	e7c4      	b.n	800803c <_svfiprintf_r+0x130>
 80080b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b6:	4604      	mov	r4, r0
 80080b8:	2301      	movs	r3, #1
 80080ba:	e7f0      	b.n	800809e <_svfiprintf_r+0x192>
 80080bc:	ab03      	add	r3, sp, #12
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	462a      	mov	r2, r5
 80080c2:	4b0e      	ldr	r3, [pc, #56]	@ (80080fc <_svfiprintf_r+0x1f0>)
 80080c4:	a904      	add	r1, sp, #16
 80080c6:	4638      	mov	r0, r7
 80080c8:	f7fc fbf4 	bl	80048b4 <_printf_float>
 80080cc:	1c42      	adds	r2, r0, #1
 80080ce:	4606      	mov	r6, r0
 80080d0:	d1d6      	bne.n	8008080 <_svfiprintf_r+0x174>
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	065b      	lsls	r3, r3, #25
 80080d6:	f53f af2d 	bmi.w	8007f34 <_svfiprintf_r+0x28>
 80080da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080dc:	e72c      	b.n	8007f38 <_svfiprintf_r+0x2c>
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4b05      	ldr	r3, [pc, #20]	@ (80080fc <_svfiprintf_r+0x1f0>)
 80080e6:	a904      	add	r1, sp, #16
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7fc fe7b 	bl	8004de4 <_printf_i>
 80080ee:	e7ed      	b.n	80080cc <_svfiprintf_r+0x1c0>
 80080f0:	08009b73 	.word	0x08009b73
 80080f4:	08009b7d 	.word	0x08009b7d
 80080f8:	080048b5 	.word	0x080048b5
 80080fc:	08007e55 	.word	0x08007e55
 8008100:	08009b79 	.word	0x08009b79

08008104 <__sfputc_r>:
 8008104:	6893      	ldr	r3, [r2, #8]
 8008106:	3b01      	subs	r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	b410      	push	{r4}
 800810c:	6093      	str	r3, [r2, #8]
 800810e:	da08      	bge.n	8008122 <__sfputc_r+0x1e>
 8008110:	6994      	ldr	r4, [r2, #24]
 8008112:	42a3      	cmp	r3, r4
 8008114:	db01      	blt.n	800811a <__sfputc_r+0x16>
 8008116:	290a      	cmp	r1, #10
 8008118:	d103      	bne.n	8008122 <__sfputc_r+0x1e>
 800811a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811e:	f000 beb5 	b.w	8008e8c <__swbuf_r>
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	1c58      	adds	r0, r3, #1
 8008126:	6010      	str	r0, [r2, #0]
 8008128:	7019      	strb	r1, [r3, #0]
 800812a:	4608      	mov	r0, r1
 800812c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008130:	4770      	bx	lr

08008132 <__sfputs_r>:
 8008132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008134:	4606      	mov	r6, r0
 8008136:	460f      	mov	r7, r1
 8008138:	4614      	mov	r4, r2
 800813a:	18d5      	adds	r5, r2, r3
 800813c:	42ac      	cmp	r4, r5
 800813e:	d101      	bne.n	8008144 <__sfputs_r+0x12>
 8008140:	2000      	movs	r0, #0
 8008142:	e007      	b.n	8008154 <__sfputs_r+0x22>
 8008144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008148:	463a      	mov	r2, r7
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ffda 	bl	8008104 <__sfputc_r>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d1f3      	bne.n	800813c <__sfputs_r+0xa>
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008158 <_vfiprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	460d      	mov	r5, r1
 800815e:	b09d      	sub	sp, #116	@ 0x74
 8008160:	4614      	mov	r4, r2
 8008162:	4698      	mov	r8, r3
 8008164:	4606      	mov	r6, r0
 8008166:	b118      	cbz	r0, 8008170 <_vfiprintf_r+0x18>
 8008168:	6a03      	ldr	r3, [r0, #32]
 800816a:	b90b      	cbnz	r3, 8008170 <_vfiprintf_r+0x18>
 800816c:	f7fd f9f2 	bl	8005554 <__sinit>
 8008170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008172:	07d9      	lsls	r1, r3, #31
 8008174:	d405      	bmi.n	8008182 <_vfiprintf_r+0x2a>
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	059a      	lsls	r2, r3, #22
 800817a:	d402      	bmi.n	8008182 <_vfiprintf_r+0x2a>
 800817c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800817e:	f7fd fbda 	bl	8005936 <__retarget_lock_acquire_recursive>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	071b      	lsls	r3, r3, #28
 8008186:	d501      	bpl.n	800818c <_vfiprintf_r+0x34>
 8008188:	692b      	ldr	r3, [r5, #16]
 800818a:	b99b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x5c>
 800818c:	4629      	mov	r1, r5
 800818e:	4630      	mov	r0, r6
 8008190:	f000 feba 	bl	8008f08 <__swsetup_r>
 8008194:	b170      	cbz	r0, 80081b4 <_vfiprintf_r+0x5c>
 8008196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008198:	07dc      	lsls	r4, r3, #31
 800819a:	d504      	bpl.n	80081a6 <_vfiprintf_r+0x4e>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a0:	b01d      	add	sp, #116	@ 0x74
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a6:	89ab      	ldrh	r3, [r5, #12]
 80081a8:	0598      	lsls	r0, r3, #22
 80081aa:	d4f7      	bmi.n	800819c <_vfiprintf_r+0x44>
 80081ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ae:	f7fd fbc3 	bl	8005938 <__retarget_lock_release_recursive>
 80081b2:	e7f3      	b.n	800819c <_vfiprintf_r+0x44>
 80081b4:	2300      	movs	r3, #0
 80081b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b8:	2320      	movs	r3, #32
 80081ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081be:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c2:	2330      	movs	r3, #48	@ 0x30
 80081c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008374 <_vfiprintf_r+0x21c>
 80081c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081cc:	f04f 0901 	mov.w	r9, #1
 80081d0:	4623      	mov	r3, r4
 80081d2:	469a      	mov	sl, r3
 80081d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d8:	b10a      	cbz	r2, 80081de <_vfiprintf_r+0x86>
 80081da:	2a25      	cmp	r2, #37	@ 0x25
 80081dc:	d1f9      	bne.n	80081d2 <_vfiprintf_r+0x7a>
 80081de:	ebba 0b04 	subs.w	fp, sl, r4
 80081e2:	d00b      	beq.n	80081fc <_vfiprintf_r+0xa4>
 80081e4:	465b      	mov	r3, fp
 80081e6:	4622      	mov	r2, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ffa1 	bl	8008132 <__sfputs_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	f000 80a7 	beq.w	8008344 <_vfiprintf_r+0x1ec>
 80081f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f8:	445a      	add	r2, fp
 80081fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80081fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 809f 	beq.w	8008344 <_vfiprintf_r+0x1ec>
 8008206:	2300      	movs	r3, #0
 8008208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800820c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008210:	f10a 0a01 	add.w	sl, sl, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800821c:	931a      	str	r3, [sp, #104]	@ 0x68
 800821e:	4654      	mov	r4, sl
 8008220:	2205      	movs	r2, #5
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4853      	ldr	r0, [pc, #332]	@ (8008374 <_vfiprintf_r+0x21c>)
 8008228:	f7f7 ffda 	bl	80001e0 <memchr>
 800822c:	9a04      	ldr	r2, [sp, #16]
 800822e:	b9d8      	cbnz	r0, 8008268 <_vfiprintf_r+0x110>
 8008230:	06d1      	lsls	r1, r2, #27
 8008232:	bf44      	itt	mi
 8008234:	2320      	movmi	r3, #32
 8008236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823a:	0713      	lsls	r3, r2, #28
 800823c:	bf44      	itt	mi
 800823e:	232b      	movmi	r3, #43	@ 0x2b
 8008240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008244:	f89a 3000 	ldrb.w	r3, [sl]
 8008248:	2b2a      	cmp	r3, #42	@ 0x2a
 800824a:	d015      	beq.n	8008278 <_vfiprintf_r+0x120>
 800824c:	9a07      	ldr	r2, [sp, #28]
 800824e:	4654      	mov	r4, sl
 8008250:	2000      	movs	r0, #0
 8008252:	f04f 0c0a 	mov.w	ip, #10
 8008256:	4621      	mov	r1, r4
 8008258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825c:	3b30      	subs	r3, #48	@ 0x30
 800825e:	2b09      	cmp	r3, #9
 8008260:	d94b      	bls.n	80082fa <_vfiprintf_r+0x1a2>
 8008262:	b1b0      	cbz	r0, 8008292 <_vfiprintf_r+0x13a>
 8008264:	9207      	str	r2, [sp, #28]
 8008266:	e014      	b.n	8008292 <_vfiprintf_r+0x13a>
 8008268:	eba0 0308 	sub.w	r3, r0, r8
 800826c:	fa09 f303 	lsl.w	r3, r9, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	46a2      	mov	sl, r4
 8008276:	e7d2      	b.n	800821e <_vfiprintf_r+0xc6>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	1d19      	adds	r1, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	9103      	str	r1, [sp, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfbb      	ittet	lt
 8008284:	425b      	neglt	r3, r3
 8008286:	f042 0202 	orrlt.w	r2, r2, #2
 800828a:	9307      	strge	r3, [sp, #28]
 800828c:	9307      	strlt	r3, [sp, #28]
 800828e:	bfb8      	it	lt
 8008290:	9204      	strlt	r2, [sp, #16]
 8008292:	7823      	ldrb	r3, [r4, #0]
 8008294:	2b2e      	cmp	r3, #46	@ 0x2e
 8008296:	d10a      	bne.n	80082ae <_vfiprintf_r+0x156>
 8008298:	7863      	ldrb	r3, [r4, #1]
 800829a:	2b2a      	cmp	r3, #42	@ 0x2a
 800829c:	d132      	bne.n	8008304 <_vfiprintf_r+0x1ac>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9203      	str	r2, [sp, #12]
 80082a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082aa:	3402      	adds	r4, #2
 80082ac:	9305      	str	r3, [sp, #20]
 80082ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008384 <_vfiprintf_r+0x22c>
 80082b2:	7821      	ldrb	r1, [r4, #0]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4650      	mov	r0, sl
 80082b8:	f7f7 ff92 	bl	80001e0 <memchr>
 80082bc:	b138      	cbz	r0, 80082ce <_vfiprintf_r+0x176>
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	eba0 000a 	sub.w	r0, r0, sl
 80082c4:	2240      	movs	r2, #64	@ 0x40
 80082c6:	4082      	lsls	r2, r0
 80082c8:	4313      	orrs	r3, r2
 80082ca:	3401      	adds	r4, #1
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d2:	4829      	ldr	r0, [pc, #164]	@ (8008378 <_vfiprintf_r+0x220>)
 80082d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082d8:	2206      	movs	r2, #6
 80082da:	f7f7 ff81 	bl	80001e0 <memchr>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d03f      	beq.n	8008362 <_vfiprintf_r+0x20a>
 80082e2:	4b26      	ldr	r3, [pc, #152]	@ (800837c <_vfiprintf_r+0x224>)
 80082e4:	bb1b      	cbnz	r3, 800832e <_vfiprintf_r+0x1d6>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	3307      	adds	r3, #7
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	3308      	adds	r3, #8
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f4:	443b      	add	r3, r7
 80082f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f8:	e76a      	b.n	80081d0 <_vfiprintf_r+0x78>
 80082fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fe:	460c      	mov	r4, r1
 8008300:	2001      	movs	r0, #1
 8008302:	e7a8      	b.n	8008256 <_vfiprintf_r+0xfe>
 8008304:	2300      	movs	r3, #0
 8008306:	3401      	adds	r4, #1
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	4619      	mov	r1, r3
 800830c:	f04f 0c0a 	mov.w	ip, #10
 8008310:	4620      	mov	r0, r4
 8008312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008316:	3a30      	subs	r2, #48	@ 0x30
 8008318:	2a09      	cmp	r2, #9
 800831a:	d903      	bls.n	8008324 <_vfiprintf_r+0x1cc>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0c6      	beq.n	80082ae <_vfiprintf_r+0x156>
 8008320:	9105      	str	r1, [sp, #20]
 8008322:	e7c4      	b.n	80082ae <_vfiprintf_r+0x156>
 8008324:	fb0c 2101 	mla	r1, ip, r1, r2
 8008328:	4604      	mov	r4, r0
 800832a:	2301      	movs	r3, #1
 800832c:	e7f0      	b.n	8008310 <_vfiprintf_r+0x1b8>
 800832e:	ab03      	add	r3, sp, #12
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	462a      	mov	r2, r5
 8008334:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <_vfiprintf_r+0x228>)
 8008336:	a904      	add	r1, sp, #16
 8008338:	4630      	mov	r0, r6
 800833a:	f7fc fabb 	bl	80048b4 <_printf_float>
 800833e:	4607      	mov	r7, r0
 8008340:	1c78      	adds	r0, r7, #1
 8008342:	d1d6      	bne.n	80082f2 <_vfiprintf_r+0x19a>
 8008344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	d405      	bmi.n	8008356 <_vfiprintf_r+0x1fe>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	059a      	lsls	r2, r3, #22
 800834e:	d402      	bmi.n	8008356 <_vfiprintf_r+0x1fe>
 8008350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008352:	f7fd faf1 	bl	8005938 <__retarget_lock_release_recursive>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	065b      	lsls	r3, r3, #25
 800835a:	f53f af1f 	bmi.w	800819c <_vfiprintf_r+0x44>
 800835e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008360:	e71e      	b.n	80081a0 <_vfiprintf_r+0x48>
 8008362:	ab03      	add	r3, sp, #12
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	462a      	mov	r2, r5
 8008368:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <_vfiprintf_r+0x228>)
 800836a:	a904      	add	r1, sp, #16
 800836c:	4630      	mov	r0, r6
 800836e:	f7fc fd39 	bl	8004de4 <_printf_i>
 8008372:	e7e4      	b.n	800833e <_vfiprintf_r+0x1e6>
 8008374:	08009b73 	.word	0x08009b73
 8008378:	08009b7d 	.word	0x08009b7d
 800837c:	080048b5 	.word	0x080048b5
 8008380:	08008133 	.word	0x08008133
 8008384:	08009b79 	.word	0x08009b79

08008388 <__svfiscanf_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	461d      	mov	r5, r3
 800838e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008390:	07df      	lsls	r7, r3, #31
 8008392:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008396:	4606      	mov	r6, r0
 8008398:	460c      	mov	r4, r1
 800839a:	4692      	mov	sl, r2
 800839c:	d405      	bmi.n	80083aa <__svfiscanf_r+0x22>
 800839e:	898b      	ldrh	r3, [r1, #12]
 80083a0:	0598      	lsls	r0, r3, #22
 80083a2:	d402      	bmi.n	80083aa <__svfiscanf_r+0x22>
 80083a4:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80083a6:	f7fd fac6 	bl	8005936 <__retarget_lock_acquire_recursive>
 80083aa:	2300      	movs	r3, #0
 80083ac:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80083b0:	4ba8      	ldr	r3, [pc, #672]	@ (8008654 <__svfiscanf_r+0x2cc>)
 80083b2:	93a0      	str	r3, [sp, #640]	@ 0x280
 80083b4:	f10d 0804 	add.w	r8, sp, #4
 80083b8:	4ba7      	ldr	r3, [pc, #668]	@ (8008658 <__svfiscanf_r+0x2d0>)
 80083ba:	4fa8      	ldr	r7, [pc, #672]	@ (800865c <__svfiscanf_r+0x2d4>)
 80083bc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80083c0:	93a1      	str	r3, [sp, #644]	@ 0x284
 80083c2:	9500      	str	r5, [sp, #0]
 80083c4:	f89a 9000 	ldrb.w	r9, [sl]
 80083c8:	f1b9 0f00 	cmp.w	r9, #0
 80083cc:	f000 816d 	beq.w	80086aa <__svfiscanf_r+0x322>
 80083d0:	f817 3009 	ldrb.w	r3, [r7, r9]
 80083d4:	f013 0308 	ands.w	r3, r3, #8
 80083d8:	f10a 0501 	add.w	r5, sl, #1
 80083dc:	d019      	beq.n	8008412 <__svfiscanf_r+0x8a>
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd0f      	ble.n	8008404 <__svfiscanf_r+0x7c>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	5cba      	ldrb	r2, [r7, r2]
 80083ea:	0711      	lsls	r1, r2, #28
 80083ec:	d401      	bmi.n	80083f2 <__svfiscanf_r+0x6a>
 80083ee:	46aa      	mov	sl, r5
 80083f0:	e7e8      	b.n	80083c4 <__svfiscanf_r+0x3c>
 80083f2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80083f4:	3201      	adds	r2, #1
 80083f6:	9245      	str	r2, [sp, #276]	@ 0x114
 80083f8:	6862      	ldr	r2, [r4, #4]
 80083fa:	3301      	adds	r3, #1
 80083fc:	3a01      	subs	r2, #1
 80083fe:	6062      	str	r2, [r4, #4]
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	e7ec      	b.n	80083de <__svfiscanf_r+0x56>
 8008404:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008406:	4621      	mov	r1, r4
 8008408:	4630      	mov	r0, r6
 800840a:	4798      	blx	r3
 800840c:	2800      	cmp	r0, #0
 800840e:	d0e9      	beq.n	80083e4 <__svfiscanf_r+0x5c>
 8008410:	e7ed      	b.n	80083ee <__svfiscanf_r+0x66>
 8008412:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008416:	f040 8088 	bne.w	800852a <__svfiscanf_r+0x1a2>
 800841a:	9341      	str	r3, [sp, #260]	@ 0x104
 800841c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800841e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008422:	2b2a      	cmp	r3, #42	@ 0x2a
 8008424:	bf02      	ittt	eq
 8008426:	2310      	moveq	r3, #16
 8008428:	9341      	streq	r3, [sp, #260]	@ 0x104
 800842a:	f10a 0502 	addeq.w	r5, sl, #2
 800842e:	220a      	movs	r2, #10
 8008430:	46aa      	mov	sl, r5
 8008432:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008436:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800843a:	2b09      	cmp	r3, #9
 800843c:	d91f      	bls.n	800847e <__svfiscanf_r+0xf6>
 800843e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008660 <__svfiscanf_r+0x2d8>
 8008442:	2203      	movs	r2, #3
 8008444:	4658      	mov	r0, fp
 8008446:	f7f7 fecb 	bl	80001e0 <memchr>
 800844a:	b138      	cbz	r0, 800845c <__svfiscanf_r+0xd4>
 800844c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800844e:	eba0 000b 	sub.w	r0, r0, fp
 8008452:	2301      	movs	r3, #1
 8008454:	4083      	lsls	r3, r0
 8008456:	4313      	orrs	r3, r2
 8008458:	9341      	str	r3, [sp, #260]	@ 0x104
 800845a:	4655      	mov	r5, sl
 800845c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008460:	2b78      	cmp	r3, #120	@ 0x78
 8008462:	d807      	bhi.n	8008474 <__svfiscanf_r+0xec>
 8008464:	2b57      	cmp	r3, #87	@ 0x57
 8008466:	d811      	bhi.n	800848c <__svfiscanf_r+0x104>
 8008468:	2b25      	cmp	r3, #37	@ 0x25
 800846a:	d05e      	beq.n	800852a <__svfiscanf_r+0x1a2>
 800846c:	d858      	bhi.n	8008520 <__svfiscanf_r+0x198>
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 80d2 	beq.w	8008618 <__svfiscanf_r+0x290>
 8008474:	2303      	movs	r3, #3
 8008476:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008478:	230a      	movs	r3, #10
 800847a:	9342      	str	r3, [sp, #264]	@ 0x108
 800847c:	e08f      	b.n	800859e <__svfiscanf_r+0x216>
 800847e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008480:	fb02 1103 	mla	r1, r2, r3, r1
 8008484:	3930      	subs	r1, #48	@ 0x30
 8008486:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008488:	4655      	mov	r5, sl
 800848a:	e7d1      	b.n	8008430 <__svfiscanf_r+0xa8>
 800848c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008490:	2a20      	cmp	r2, #32
 8008492:	d8ef      	bhi.n	8008474 <__svfiscanf_r+0xec>
 8008494:	a101      	add	r1, pc, #4	@ (adr r1, 800849c <__svfiscanf_r+0x114>)
 8008496:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800849a:	bf00      	nop
 800849c:	0800857d 	.word	0x0800857d
 80084a0:	08008475 	.word	0x08008475
 80084a4:	08008475 	.word	0x08008475
 80084a8:	080085d7 	.word	0x080085d7
 80084ac:	08008475 	.word	0x08008475
 80084b0:	08008475 	.word	0x08008475
 80084b4:	08008475 	.word	0x08008475
 80084b8:	08008475 	.word	0x08008475
 80084bc:	08008475 	.word	0x08008475
 80084c0:	08008475 	.word	0x08008475
 80084c4:	08008475 	.word	0x08008475
 80084c8:	080085ed 	.word	0x080085ed
 80084cc:	080085d3 	.word	0x080085d3
 80084d0:	08008527 	.word	0x08008527
 80084d4:	08008527 	.word	0x08008527
 80084d8:	08008527 	.word	0x08008527
 80084dc:	08008475 	.word	0x08008475
 80084e0:	0800858f 	.word	0x0800858f
 80084e4:	08008475 	.word	0x08008475
 80084e8:	08008475 	.word	0x08008475
 80084ec:	08008475 	.word	0x08008475
 80084f0:	08008475 	.word	0x08008475
 80084f4:	080085fd 	.word	0x080085fd
 80084f8:	08008597 	.word	0x08008597
 80084fc:	08008575 	.word	0x08008575
 8008500:	08008475 	.word	0x08008475
 8008504:	08008475 	.word	0x08008475
 8008508:	080085f9 	.word	0x080085f9
 800850c:	08008475 	.word	0x08008475
 8008510:	080085d3 	.word	0x080085d3
 8008514:	08008475 	.word	0x08008475
 8008518:	08008475 	.word	0x08008475
 800851c:	0800857d 	.word	0x0800857d
 8008520:	3b45      	subs	r3, #69	@ 0x45
 8008522:	2b02      	cmp	r3, #2
 8008524:	d8a6      	bhi.n	8008474 <__svfiscanf_r+0xec>
 8008526:	2305      	movs	r3, #5
 8008528:	e038      	b.n	800859c <__svfiscanf_r+0x214>
 800852a:	6863      	ldr	r3, [r4, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd0d      	ble.n	800854c <__svfiscanf_r+0x1c4>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	781a      	ldrb	r2, [r3, #0]
 8008534:	454a      	cmp	r2, r9
 8008536:	f040 80b8 	bne.w	80086aa <__svfiscanf_r+0x322>
 800853a:	3301      	adds	r3, #1
 800853c:	6862      	ldr	r2, [r4, #4]
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008542:	3a01      	subs	r2, #1
 8008544:	3301      	adds	r3, #1
 8008546:	6062      	str	r2, [r4, #4]
 8008548:	9345      	str	r3, [sp, #276]	@ 0x114
 800854a:	e750      	b.n	80083ee <__svfiscanf_r+0x66>
 800854c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	4798      	blx	r3
 8008554:	2800      	cmp	r0, #0
 8008556:	d0eb      	beq.n	8008530 <__svfiscanf_r+0x1a8>
 8008558:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800855a:	07da      	lsls	r2, r3, #31
 800855c:	f140 809d 	bpl.w	800869a <__svfiscanf_r+0x312>
 8008560:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008562:	2800      	cmp	r0, #0
 8008564:	d061      	beq.n	800862a <__svfiscanf_r+0x2a2>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	0659      	lsls	r1, r3, #25
 800856a:	d45e      	bmi.n	800862a <__svfiscanf_r+0x2a2>
 800856c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008576:	f042 0220 	orr.w	r2, r2, #32
 800857a:	9241      	str	r2, [sp, #260]	@ 0x104
 800857c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800857e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008582:	9241      	str	r2, [sp, #260]	@ 0x104
 8008584:	2210      	movs	r2, #16
 8008586:	2b6e      	cmp	r3, #110	@ 0x6e
 8008588:	9242      	str	r2, [sp, #264]	@ 0x108
 800858a:	d902      	bls.n	8008592 <__svfiscanf_r+0x20a>
 800858c:	e005      	b.n	800859a <__svfiscanf_r+0x212>
 800858e:	2300      	movs	r3, #0
 8008590:	9342      	str	r3, [sp, #264]	@ 0x108
 8008592:	2303      	movs	r3, #3
 8008594:	e002      	b.n	800859c <__svfiscanf_r+0x214>
 8008596:	2308      	movs	r3, #8
 8008598:	9342      	str	r3, [sp, #264]	@ 0x108
 800859a:	2304      	movs	r3, #4
 800859c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dd45      	ble.n	8008630 <__svfiscanf_r+0x2a8>
 80085a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085a6:	0659      	lsls	r1, r3, #25
 80085a8:	d404      	bmi.n	80085b4 <__svfiscanf_r+0x22c>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	781a      	ldrb	r2, [r3, #0]
 80085ae:	5cba      	ldrb	r2, [r7, r2]
 80085b0:	0712      	lsls	r2, r2, #28
 80085b2:	d444      	bmi.n	800863e <__svfiscanf_r+0x2b6>
 80085b4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	dc5b      	bgt.n	8008672 <__svfiscanf_r+0x2ea>
 80085ba:	466b      	mov	r3, sp
 80085bc:	4622      	mov	r2, r4
 80085be:	a941      	add	r1, sp, #260	@ 0x104
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 f893 	bl	80086ec <_scanf_chars>
 80085c6:	2801      	cmp	r0, #1
 80085c8:	d06f      	beq.n	80086aa <__svfiscanf_r+0x322>
 80085ca:	2802      	cmp	r0, #2
 80085cc:	f47f af0f 	bne.w	80083ee <__svfiscanf_r+0x66>
 80085d0:	e7c2      	b.n	8008558 <__svfiscanf_r+0x1d0>
 80085d2:	220a      	movs	r2, #10
 80085d4:	e7d7      	b.n	8008586 <__svfiscanf_r+0x1fe>
 80085d6:	4629      	mov	r1, r5
 80085d8:	4640      	mov	r0, r8
 80085da:	f000 fb65 	bl	8008ca8 <__sccl>
 80085de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80085e6:	4605      	mov	r5, r0
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7d7      	b.n	800859c <__svfiscanf_r+0x214>
 80085ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7d1      	b.n	800859c <__svfiscanf_r+0x214>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e7cf      	b.n	800859c <__svfiscanf_r+0x214>
 80085fc:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80085fe:	06c3      	lsls	r3, r0, #27
 8008600:	f53f aef5 	bmi.w	80083ee <__svfiscanf_r+0x66>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008608:	1d19      	adds	r1, r3, #4
 800860a:	9100      	str	r1, [sp, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	07c0      	lsls	r0, r0, #31
 8008610:	bf4c      	ite	mi
 8008612:	801a      	strhmi	r2, [r3, #0]
 8008614:	601a      	strpl	r2, [r3, #0]
 8008616:	e6ea      	b.n	80083ee <__svfiscanf_r+0x66>
 8008618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800861a:	07de      	lsls	r6, r3, #31
 800861c:	d405      	bmi.n	800862a <__svfiscanf_r+0x2a2>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	059d      	lsls	r5, r3, #22
 8008622:	d402      	bmi.n	800862a <__svfiscanf_r+0x2a2>
 8008624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008626:	f7fd f987 	bl	8005938 <__retarget_lock_release_recursive>
 800862a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800862e:	e79d      	b.n	800856c <__svfiscanf_r+0x1e4>
 8008630:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008632:	4621      	mov	r1, r4
 8008634:	4630      	mov	r0, r6
 8008636:	4798      	blx	r3
 8008638:	2800      	cmp	r0, #0
 800863a:	d0b3      	beq.n	80085a4 <__svfiscanf_r+0x21c>
 800863c:	e78c      	b.n	8008558 <__svfiscanf_r+0x1d0>
 800863e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008640:	3201      	adds	r2, #1
 8008642:	9245      	str	r2, [sp, #276]	@ 0x114
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	3a01      	subs	r2, #1
 8008648:	2a00      	cmp	r2, #0
 800864a:	6062      	str	r2, [r4, #4]
 800864c:	dd0a      	ble.n	8008664 <__svfiscanf_r+0x2dc>
 800864e:	3301      	adds	r3, #1
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	e7aa      	b.n	80085aa <__svfiscanf_r+0x222>
 8008654:	08008d8f 	.word	0x08008d8f
 8008658:	08008bc1 	.word	0x08008bc1
 800865c:	08009d91 	.word	0x08009d91
 8008660:	08009b79 	.word	0x08009b79
 8008664:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008666:	4621      	mov	r1, r4
 8008668:	4630      	mov	r0, r6
 800866a:	4798      	blx	r3
 800866c:	2800      	cmp	r0, #0
 800866e:	d09c      	beq.n	80085aa <__svfiscanf_r+0x222>
 8008670:	e772      	b.n	8008558 <__svfiscanf_r+0x1d0>
 8008672:	2b04      	cmp	r3, #4
 8008674:	dc06      	bgt.n	8008684 <__svfiscanf_r+0x2fc>
 8008676:	466b      	mov	r3, sp
 8008678:	4622      	mov	r2, r4
 800867a:	a941      	add	r1, sp, #260	@ 0x104
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f88f 	bl	80087a0 <_scanf_i>
 8008682:	e7a0      	b.n	80085c6 <__svfiscanf_r+0x23e>
 8008684:	4b0e      	ldr	r3, [pc, #56]	@ (80086c0 <__svfiscanf_r+0x338>)
 8008686:	2b00      	cmp	r3, #0
 8008688:	f43f aeb1 	beq.w	80083ee <__svfiscanf_r+0x66>
 800868c:	466b      	mov	r3, sp
 800868e:	4622      	mov	r2, r4
 8008690:	a941      	add	r1, sp, #260	@ 0x104
 8008692:	4630      	mov	r0, r6
 8008694:	f7fc fcc4 	bl	8005020 <_scanf_float>
 8008698:	e795      	b.n	80085c6 <__svfiscanf_r+0x23e>
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	0598      	lsls	r0, r3, #22
 800869e:	f53f af5f 	bmi.w	8008560 <__svfiscanf_r+0x1d8>
 80086a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086a4:	f7fd f948 	bl	8005938 <__retarget_lock_release_recursive>
 80086a8:	e75a      	b.n	8008560 <__svfiscanf_r+0x1d8>
 80086aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ac:	07da      	lsls	r2, r3, #31
 80086ae:	d405      	bmi.n	80086bc <__svfiscanf_r+0x334>
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	059b      	lsls	r3, r3, #22
 80086b4:	d402      	bmi.n	80086bc <__svfiscanf_r+0x334>
 80086b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b8:	f7fd f93e 	bl	8005938 <__retarget_lock_release_recursive>
 80086bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80086be:	e755      	b.n	800856c <__svfiscanf_r+0x1e4>
 80086c0:	08005021 	.word	0x08005021

080086c4 <_vfiscanf_r>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	460d      	mov	r5, r1
 80086ca:	4616      	mov	r6, r2
 80086cc:	461f      	mov	r7, r3
 80086ce:	4604      	mov	r4, r0
 80086d0:	b118      	cbz	r0, 80086da <_vfiscanf_r+0x16>
 80086d2:	6a03      	ldr	r3, [r0, #32]
 80086d4:	b90b      	cbnz	r3, 80086da <_vfiscanf_r+0x16>
 80086d6:	f7fc ff3d 	bl	8005554 <__sinit>
 80086da:	463b      	mov	r3, r7
 80086dc:	4632      	mov	r2, r6
 80086de:	4629      	mov	r1, r5
 80086e0:	4620      	mov	r0, r4
 80086e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	f7ff be4f 	b.w	8008388 <__svfiscanf_r>
	...

080086ec <_scanf_chars>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	4615      	mov	r5, r2
 80086f2:	688a      	ldr	r2, [r1, #8]
 80086f4:	4680      	mov	r8, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	b932      	cbnz	r2, 8008708 <_scanf_chars+0x1c>
 80086fa:	698a      	ldr	r2, [r1, #24]
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	bf14      	ite	ne
 8008700:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008704:	2201      	moveq	r2, #1
 8008706:	608a      	str	r2, [r1, #8]
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800879c <_scanf_chars+0xb0>
 800870e:	06d1      	lsls	r1, r2, #27
 8008710:	bf5f      	itttt	pl
 8008712:	681a      	ldrpl	r2, [r3, #0]
 8008714:	1d11      	addpl	r1, r2, #4
 8008716:	6019      	strpl	r1, [r3, #0]
 8008718:	6816      	ldrpl	r6, [r2, #0]
 800871a:	2700      	movs	r7, #0
 800871c:	69a0      	ldr	r0, [r4, #24]
 800871e:	b188      	cbz	r0, 8008744 <_scanf_chars+0x58>
 8008720:	2801      	cmp	r0, #1
 8008722:	d107      	bne.n	8008734 <_scanf_chars+0x48>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	6963      	ldr	r3, [r4, #20]
 800872a:	5c9b      	ldrb	r3, [r3, r2]
 800872c:	b953      	cbnz	r3, 8008744 <_scanf_chars+0x58>
 800872e:	2f00      	cmp	r7, #0
 8008730:	d031      	beq.n	8008796 <_scanf_chars+0xaa>
 8008732:	e022      	b.n	800877a <_scanf_chars+0x8e>
 8008734:	2802      	cmp	r0, #2
 8008736:	d120      	bne.n	800877a <_scanf_chars+0x8e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008740:	071b      	lsls	r3, r3, #28
 8008742:	d41a      	bmi.n	800877a <_scanf_chars+0x8e>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	06da      	lsls	r2, r3, #27
 8008748:	bf5e      	ittt	pl
 800874a:	682b      	ldrpl	r3, [r5, #0]
 800874c:	781b      	ldrbpl	r3, [r3, #0]
 800874e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008752:	682a      	ldr	r2, [r5, #0]
 8008754:	686b      	ldr	r3, [r5, #4]
 8008756:	3201      	adds	r2, #1
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	68a2      	ldr	r2, [r4, #8]
 800875c:	3b01      	subs	r3, #1
 800875e:	3a01      	subs	r2, #1
 8008760:	606b      	str	r3, [r5, #4]
 8008762:	3701      	adds	r7, #1
 8008764:	60a2      	str	r2, [r4, #8]
 8008766:	b142      	cbz	r2, 800877a <_scanf_chars+0x8e>
 8008768:	2b00      	cmp	r3, #0
 800876a:	dcd7      	bgt.n	800871c <_scanf_chars+0x30>
 800876c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008770:	4629      	mov	r1, r5
 8008772:	4640      	mov	r0, r8
 8008774:	4798      	blx	r3
 8008776:	2800      	cmp	r0, #0
 8008778:	d0d0      	beq.n	800871c <_scanf_chars+0x30>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f013 0310 	ands.w	r3, r3, #16
 8008780:	d105      	bne.n	800878e <_scanf_chars+0xa2>
 8008782:	68e2      	ldr	r2, [r4, #12]
 8008784:	3201      	adds	r2, #1
 8008786:	60e2      	str	r2, [r4, #12]
 8008788:	69a2      	ldr	r2, [r4, #24]
 800878a:	b102      	cbz	r2, 800878e <_scanf_chars+0xa2>
 800878c:	7033      	strb	r3, [r6, #0]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	443b      	add	r3, r7
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	2000      	movs	r0, #0
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	bf00      	nop
 800879c:	08009d91 	.word	0x08009d91

080087a0 <_scanf_i>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4698      	mov	r8, r3
 80087a6:	4b74      	ldr	r3, [pc, #464]	@ (8008978 <_scanf_i+0x1d8>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	4682      	mov	sl, r0
 80087ac:	4616      	mov	r6, r2
 80087ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087b2:	b087      	sub	sp, #28
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80087ba:	4b70      	ldr	r3, [pc, #448]	@ (800897c <_scanf_i+0x1dc>)
 80087bc:	69a1      	ldr	r1, [r4, #24]
 80087be:	4a70      	ldr	r2, [pc, #448]	@ (8008980 <_scanf_i+0x1e0>)
 80087c0:	2903      	cmp	r1, #3
 80087c2:	bf08      	it	eq
 80087c4:	461a      	moveq	r2, r3
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	9201      	str	r2, [sp, #4]
 80087ca:	1e5a      	subs	r2, r3, #1
 80087cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80087d0:	bf88      	it	hi
 80087d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80087d6:	4627      	mov	r7, r4
 80087d8:	bf82      	ittt	hi
 80087da:	eb03 0905 	addhi.w	r9, r3, r5
 80087de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80087e2:	60a3      	strhi	r3, [r4, #8]
 80087e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80087e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80087ec:	bf98      	it	ls
 80087ee:	f04f 0900 	movls.w	r9, #0
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	463d      	mov	r5, r7
 80087f6:	f04f 0b00 	mov.w	fp, #0
 80087fa:	6831      	ldr	r1, [r6, #0]
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	7809      	ldrb	r1, [r1, #0]
 8008800:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008804:	2202      	movs	r2, #2
 8008806:	f7f7 fceb 	bl	80001e0 <memchr>
 800880a:	b328      	cbz	r0, 8008858 <_scanf_i+0xb8>
 800880c:	f1bb 0f01 	cmp.w	fp, #1
 8008810:	d159      	bne.n	80088c6 <_scanf_i+0x126>
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	b92a      	cbnz	r2, 8008822 <_scanf_i+0x82>
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	2108      	movs	r1, #8
 800881a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800881e:	6061      	str	r1, [r4, #4]
 8008820:	6022      	str	r2, [r4, #0]
 8008822:	6822      	ldr	r2, [r4, #0]
 8008824:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	68a2      	ldr	r2, [r4, #8]
 800882c:	1e51      	subs	r1, r2, #1
 800882e:	60a1      	str	r1, [r4, #8]
 8008830:	b192      	cbz	r2, 8008858 <_scanf_i+0xb8>
 8008832:	6832      	ldr	r2, [r6, #0]
 8008834:	1c51      	adds	r1, r2, #1
 8008836:	6031      	str	r1, [r6, #0]
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	f805 2b01 	strb.w	r2, [r5], #1
 800883e:	6872      	ldr	r2, [r6, #4]
 8008840:	3a01      	subs	r2, #1
 8008842:	2a00      	cmp	r2, #0
 8008844:	6072      	str	r2, [r6, #4]
 8008846:	dc07      	bgt.n	8008858 <_scanf_i+0xb8>
 8008848:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800884c:	4631      	mov	r1, r6
 800884e:	4650      	mov	r0, sl
 8008850:	4790      	blx	r2
 8008852:	2800      	cmp	r0, #0
 8008854:	f040 8085 	bne.w	8008962 <_scanf_i+0x1c2>
 8008858:	f10b 0b01 	add.w	fp, fp, #1
 800885c:	f1bb 0f03 	cmp.w	fp, #3
 8008860:	d1cb      	bne.n	80087fa <_scanf_i+0x5a>
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	b90b      	cbnz	r3, 800886a <_scanf_i+0xca>
 8008866:	230a      	movs	r3, #10
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	6863      	ldr	r3, [r4, #4]
 800886c:	4945      	ldr	r1, [pc, #276]	@ (8008984 <_scanf_i+0x1e4>)
 800886e:	6960      	ldr	r0, [r4, #20]
 8008870:	1ac9      	subs	r1, r1, r3
 8008872:	f000 fa19 	bl	8008ca8 <__sccl>
 8008876:	f04f 0b00 	mov.w	fp, #0
 800887a:	68a3      	ldr	r3, [r4, #8]
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d03d      	beq.n	80088fe <_scanf_i+0x15e>
 8008882:	6831      	ldr	r1, [r6, #0]
 8008884:	6960      	ldr	r0, [r4, #20]
 8008886:	f891 c000 	ldrb.w	ip, [r1]
 800888a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800888e:	2800      	cmp	r0, #0
 8008890:	d035      	beq.n	80088fe <_scanf_i+0x15e>
 8008892:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008896:	d124      	bne.n	80088e2 <_scanf_i+0x142>
 8008898:	0510      	lsls	r0, r2, #20
 800889a:	d522      	bpl.n	80088e2 <_scanf_i+0x142>
 800889c:	f10b 0b01 	add.w	fp, fp, #1
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	d003      	beq.n	80088ae <_scanf_i+0x10e>
 80088a6:	3301      	adds	r3, #1
 80088a8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80088ac:	60a3      	str	r3, [r4, #8]
 80088ae:	6873      	ldr	r3, [r6, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	6073      	str	r3, [r6, #4]
 80088b6:	dd1b      	ble.n	80088f0 <_scanf_i+0x150>
 80088b8:	6833      	ldr	r3, [r6, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	6033      	str	r3, [r6, #0]
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	e7d9      	b.n	800887a <_scanf_i+0xda>
 80088c6:	f1bb 0f02 	cmp.w	fp, #2
 80088ca:	d1ae      	bne.n	800882a <_scanf_i+0x8a>
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80088d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80088d6:	d1c4      	bne.n	8008862 <_scanf_i+0xc2>
 80088d8:	2110      	movs	r1, #16
 80088da:	6061      	str	r1, [r4, #4]
 80088dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088e0:	e7a2      	b.n	8008828 <_scanf_i+0x88>
 80088e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80088e6:	6022      	str	r2, [r4, #0]
 80088e8:	780b      	ldrb	r3, [r1, #0]
 80088ea:	f805 3b01 	strb.w	r3, [r5], #1
 80088ee:	e7de      	b.n	80088ae <_scanf_i+0x10e>
 80088f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088f4:	4631      	mov	r1, r6
 80088f6:	4650      	mov	r0, sl
 80088f8:	4798      	blx	r3
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0df      	beq.n	80088be <_scanf_i+0x11e>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	05d9      	lsls	r1, r3, #23
 8008902:	d50d      	bpl.n	8008920 <_scanf_i+0x180>
 8008904:	42bd      	cmp	r5, r7
 8008906:	d909      	bls.n	800891c <_scanf_i+0x17c>
 8008908:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800890c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008910:	4632      	mov	r2, r6
 8008912:	4650      	mov	r0, sl
 8008914:	4798      	blx	r3
 8008916:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800891a:	464d      	mov	r5, r9
 800891c:	42bd      	cmp	r5, r7
 800891e:	d028      	beq.n	8008972 <_scanf_i+0x1d2>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	f012 0210 	ands.w	r2, r2, #16
 8008926:	d113      	bne.n	8008950 <_scanf_i+0x1b0>
 8008928:	702a      	strb	r2, [r5, #0]
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	9e01      	ldr	r6, [sp, #4]
 800892e:	4639      	mov	r1, r7
 8008930:	4650      	mov	r0, sl
 8008932:	47b0      	blx	r6
 8008934:	f8d8 3000 	ldr.w	r3, [r8]
 8008938:	6821      	ldr	r1, [r4, #0]
 800893a:	1d1a      	adds	r2, r3, #4
 800893c:	f8c8 2000 	str.w	r2, [r8]
 8008940:	f011 0f20 	tst.w	r1, #32
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	d00f      	beq.n	8008968 <_scanf_i+0x1c8>
 8008948:	6018      	str	r0, [r3, #0]
 800894a:	68e3      	ldr	r3, [r4, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	60e3      	str	r3, [r4, #12]
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	1bed      	subs	r5, r5, r7
 8008954:	445d      	add	r5, fp
 8008956:	442b      	add	r3, r5
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	2000      	movs	r0, #0
 800895c:	b007      	add	sp, #28
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	f04f 0b00 	mov.w	fp, #0
 8008966:	e7ca      	b.n	80088fe <_scanf_i+0x15e>
 8008968:	07ca      	lsls	r2, r1, #31
 800896a:	bf4c      	ite	mi
 800896c:	8018      	strhmi	r0, [r3, #0]
 800896e:	6018      	strpl	r0, [r3, #0]
 8008970:	e7eb      	b.n	800894a <_scanf_i+0x1aa>
 8008972:	2001      	movs	r0, #1
 8008974:	e7f2      	b.n	800895c <_scanf_i+0x1bc>
 8008976:	bf00      	nop
 8008978:	08009a10 	.word	0x08009a10
 800897c:	08007e51 	.word	0x08007e51
 8008980:	080098d5 	.word	0x080098d5
 8008984:	08009b94 	.word	0x08009b94

08008988 <__sflush_r>:
 8008988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	0716      	lsls	r6, r2, #28
 8008992:	4605      	mov	r5, r0
 8008994:	460c      	mov	r4, r1
 8008996:	d454      	bmi.n	8008a42 <__sflush_r+0xba>
 8008998:	684b      	ldr	r3, [r1, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dc02      	bgt.n	80089a4 <__sflush_r+0x1c>
 800899e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd48      	ble.n	8008a36 <__sflush_r+0xae>
 80089a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	d045      	beq.n	8008a36 <__sflush_r+0xae>
 80089aa:	2300      	movs	r3, #0
 80089ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089b0:	682f      	ldr	r7, [r5, #0]
 80089b2:	6a21      	ldr	r1, [r4, #32]
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	d030      	beq.n	8008a1a <__sflush_r+0x92>
 80089b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0759      	lsls	r1, r3, #29
 80089be:	d505      	bpl.n	80089cc <__sflush_r+0x44>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	1ad2      	subs	r2, r2, r3
 80089c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089c6:	b10b      	cbz	r3, 80089cc <__sflush_r+0x44>
 80089c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089d0:	6a21      	ldr	r1, [r4, #32]
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b0      	blx	r6
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	d106      	bne.n	80089ea <__sflush_r+0x62>
 80089dc:	6829      	ldr	r1, [r5, #0]
 80089de:	291d      	cmp	r1, #29
 80089e0:	d82b      	bhi.n	8008a3a <__sflush_r+0xb2>
 80089e2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a8c <__sflush_r+0x104>)
 80089e4:	40ca      	lsrs	r2, r1
 80089e6:	07d6      	lsls	r6, r2, #31
 80089e8:	d527      	bpl.n	8008a3a <__sflush_r+0xb2>
 80089ea:	2200      	movs	r2, #0
 80089ec:	6062      	str	r2, [r4, #4]
 80089ee:	04d9      	lsls	r1, r3, #19
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	d504      	bpl.n	8008a00 <__sflush_r+0x78>
 80089f6:	1c42      	adds	r2, r0, #1
 80089f8:	d101      	bne.n	80089fe <__sflush_r+0x76>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	b903      	cbnz	r3, 8008a00 <__sflush_r+0x78>
 80089fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a02:	602f      	str	r7, [r5, #0]
 8008a04:	b1b9      	cbz	r1, 8008a36 <__sflush_r+0xae>
 8008a06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	d002      	beq.n	8008a14 <__sflush_r+0x8c>
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7fd fdf2 	bl	80065f8 <_free_r>
 8008a14:	2300      	movs	r3, #0
 8008a16:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a18:	e00d      	b.n	8008a36 <__sflush_r+0xae>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b0      	blx	r6
 8008a20:	4602      	mov	r2, r0
 8008a22:	1c50      	adds	r0, r2, #1
 8008a24:	d1c9      	bne.n	80089ba <__sflush_r+0x32>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0c6      	beq.n	80089ba <__sflush_r+0x32>
 8008a2c:	2b1d      	cmp	r3, #29
 8008a2e:	d001      	beq.n	8008a34 <__sflush_r+0xac>
 8008a30:	2b16      	cmp	r3, #22
 8008a32:	d11e      	bne.n	8008a72 <__sflush_r+0xea>
 8008a34:	602f      	str	r7, [r5, #0]
 8008a36:	2000      	movs	r0, #0
 8008a38:	e022      	b.n	8008a80 <__sflush_r+0xf8>
 8008a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	e01b      	b.n	8008a7a <__sflush_r+0xf2>
 8008a42:	690f      	ldr	r7, [r1, #16]
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	d0f6      	beq.n	8008a36 <__sflush_r+0xae>
 8008a48:	0793      	lsls	r3, r2, #30
 8008a4a:	680e      	ldr	r6, [r1, #0]
 8008a4c:	bf08      	it	eq
 8008a4e:	694b      	ldreq	r3, [r1, #20]
 8008a50:	600f      	str	r7, [r1, #0]
 8008a52:	bf18      	it	ne
 8008a54:	2300      	movne	r3, #0
 8008a56:	eba6 0807 	sub.w	r8, r6, r7
 8008a5a:	608b      	str	r3, [r1, #8]
 8008a5c:	f1b8 0f00 	cmp.w	r8, #0
 8008a60:	dde9      	ble.n	8008a36 <__sflush_r+0xae>
 8008a62:	6a21      	ldr	r1, [r4, #32]
 8008a64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a66:	4643      	mov	r3, r8
 8008a68:	463a      	mov	r2, r7
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b0      	blx	r6
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	dc08      	bgt.n	8008a84 <__sflush_r+0xfc>
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	4407      	add	r7, r0
 8008a86:	eba8 0800 	sub.w	r8, r8, r0
 8008a8a:	e7e7      	b.n	8008a5c <__sflush_r+0xd4>
 8008a8c:	20400001 	.word	0x20400001

08008a90 <_fflush_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b913      	cbnz	r3, 8008aa0 <_fflush_r+0x10>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	b118      	cbz	r0, 8008aaa <_fflush_r+0x1a>
 8008aa2:	6a03      	ldr	r3, [r0, #32]
 8008aa4:	b90b      	cbnz	r3, 8008aaa <_fflush_r+0x1a>
 8008aa6:	f7fc fd55 	bl	8005554 <__sinit>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f3      	beq.n	8008a9a <_fflush_r+0xa>
 8008ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ab4:	07d0      	lsls	r0, r2, #31
 8008ab6:	d404      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008ab8:	0599      	lsls	r1, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008abe:	f7fc ff3a 	bl	8005936 <__retarget_lock_acquire_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7ff ff5f 	bl	8008988 <__sflush_r>
 8008aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008acc:	07da      	lsls	r2, r3, #31
 8008ace:	4605      	mov	r5, r0
 8008ad0:	d4e4      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	059b      	lsls	r3, r3, #22
 8008ad6:	d4e1      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ada:	f7fc ff2d 	bl	8005938 <__retarget_lock_release_recursive>
 8008ade:	e7dd      	b.n	8008a9c <_fflush_r+0xc>

08008ae0 <__swhatbuf_r>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	b096      	sub	sp, #88	@ 0x58
 8008aec:	4615      	mov	r5, r2
 8008aee:	461e      	mov	r6, r3
 8008af0:	da0d      	bge.n	8008b0e <__swhatbuf_r+0x2e>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008af8:	f04f 0100 	mov.w	r1, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2340      	movne	r3, #64	@ 0x40
 8008b00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b04:	2000      	movs	r0, #0
 8008b06:	6031      	str	r1, [r6, #0]
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	b016      	add	sp, #88	@ 0x58
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f000 fa7c 	bl	800900c <_fstat_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	dbec      	blt.n	8008af2 <__swhatbuf_r+0x12>
 8008b18:	9901      	ldr	r1, [sp, #4]
 8008b1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b22:	4259      	negs	r1, r3
 8008b24:	4159      	adcs	r1, r3
 8008b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b2a:	e7eb      	b.n	8008b04 <__swhatbuf_r+0x24>

08008b2c <__smakebuf_r>:
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b30:	079d      	lsls	r5, r3, #30
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	d507      	bpl.n	8008b48 <__smakebuf_r+0x1c>
 8008b38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	2301      	movs	r3, #1
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	b003      	add	sp, #12
 8008b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b48:	ab01      	add	r3, sp, #4
 8008b4a:	466a      	mov	r2, sp
 8008b4c:	f7ff ffc8 	bl	8008ae0 <__swhatbuf_r>
 8008b50:	9f00      	ldr	r7, [sp, #0]
 8008b52:	4605      	mov	r5, r0
 8008b54:	4639      	mov	r1, r7
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7fd fdc2 	bl	80066e0 <_malloc_r>
 8008b5c:	b948      	cbnz	r0, 8008b72 <__smakebuf_r+0x46>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	059a      	lsls	r2, r3, #22
 8008b64:	d4ee      	bmi.n	8008b44 <__smakebuf_r+0x18>
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	e7e2      	b.n	8008b38 <__smakebuf_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	6020      	str	r0, [r4, #0]
 8008b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b82:	b15b      	cbz	r3, 8008b9c <__smakebuf_r+0x70>
 8008b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 fa51 	bl	8009030 <_isatty_r>
 8008b8e:	b128      	cbz	r0, 8008b9c <__smakebuf_r+0x70>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	431d      	orrs	r5, r3
 8008ba0:	81a5      	strh	r5, [r4, #12]
 8008ba2:	e7cf      	b.n	8008b44 <__smakebuf_r+0x18>

08008ba4 <lflush>:
 8008ba4:	898b      	ldrh	r3, [r1, #12]
 8008ba6:	f003 0309 	and.w	r3, r3, #9
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d103      	bne.n	8008bb6 <lflush+0x12>
 8008bae:	4b03      	ldr	r3, [pc, #12]	@ (8008bbc <lflush+0x18>)
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f7ff bf6d 	b.w	8008a90 <_fflush_r>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000018 	.word	0x20000018

08008bc0 <__srefill_r>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	b118      	cbz	r0, 8008bd0 <__srefill_r+0x10>
 8008bc8:	6a03      	ldr	r3, [r0, #32]
 8008bca:	b90b      	cbnz	r3, 8008bd0 <__srefill_r+0x10>
 8008bcc:	f7fc fcc2 	bl	8005554 <__sinit>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd8:	069e      	lsls	r6, r3, #26
 8008bda:	d408      	bmi.n	8008bee <__srefill_r+0x2e>
 8008bdc:	0758      	lsls	r0, r3, #29
 8008bde:	d445      	bmi.n	8008c6c <__srefill_r+0xac>
 8008be0:	06d9      	lsls	r1, r3, #27
 8008be2:	d407      	bmi.n	8008bf4 <__srefill_r+0x34>
 8008be4:	2209      	movs	r2, #9
 8008be6:	602a      	str	r2, [r5, #0]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	071a      	lsls	r2, r3, #28
 8008bf6:	d50b      	bpl.n	8008c10 <__srefill_r+0x50>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f7ff ff48 	bl	8008a90 <_fflush_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1f4      	bne.n	8008bee <__srefill_r+0x2e>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	60a0      	str	r0, [r4, #8]
 8008c08:	f023 0308 	bic.w	r3, r3, #8
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	61a0      	str	r0, [r4, #24]
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f043 0304 	orr.w	r3, r3, #4
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	b91b      	cbnz	r3, 8008c24 <__srefill_r+0x64>
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f7ff ff84 	bl	8008b2c <__smakebuf_r>
 8008c24:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8008c28:	07b3      	lsls	r3, r6, #30
 8008c2a:	d00f      	beq.n	8008c4c <__srefill_r+0x8c>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8008c9c <__srefill_r+0xdc>)
 8008c30:	491b      	ldr	r1, [pc, #108]	@ (8008ca0 <__srefill_r+0xe0>)
 8008c32:	481c      	ldr	r0, [pc, #112]	@ (8008ca4 <__srefill_r+0xe4>)
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	f7fc fca5 	bl	8005584 <_fwalk_sglue>
 8008c3a:	81a6      	strh	r6, [r4, #12]
 8008c3c:	f006 0609 	and.w	r6, r6, #9
 8008c40:	2e09      	cmp	r6, #9
 8008c42:	d103      	bne.n	8008c4c <__srefill_r+0x8c>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7ff fe9e 	bl	8008988 <__sflush_r>
 8008c4c:	6922      	ldr	r2, [r4, #16]
 8008c4e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008c50:	6963      	ldr	r3, [r4, #20]
 8008c52:	6a21      	ldr	r1, [r4, #32]
 8008c54:	6022      	str	r2, [r4, #0]
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b0      	blx	r6
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	6060      	str	r0, [r4, #4]
 8008c5e:	dc17      	bgt.n	8008c90 <__srefill_r+0xd0>
 8008c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c64:	d116      	bne.n	8008c94 <__srefill_r+0xd4>
 8008c66:	f043 0320 	orr.w	r3, r3, #32
 8008c6a:	e7bf      	b.n	8008bec <__srefill_r+0x2c>
 8008c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c6e:	2900      	cmp	r1, #0
 8008c70:	d0d2      	beq.n	8008c18 <__srefill_r+0x58>
 8008c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c76:	4299      	cmp	r1, r3
 8008c78:	d002      	beq.n	8008c80 <__srefill_r+0xc0>
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7fd fcbc 	bl	80065f8 <_free_r>
 8008c80:	2300      	movs	r3, #0
 8008c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0c5      	beq.n	8008c18 <__srefill_r+0x58>
 8008c8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	2000      	movs	r0, #0
 8008c92:	e7ae      	b.n	8008bf2 <__srefill_r+0x32>
 8008c94:	2200      	movs	r2, #0
 8008c96:	6062      	str	r2, [r4, #4]
 8008c98:	e7a6      	b.n	8008be8 <__srefill_r+0x28>
 8008c9a:	bf00      	nop
 8008c9c:	2000000c 	.word	0x2000000c
 8008ca0:	08008ba5 	.word	0x08008ba5
 8008ca4:	2000001c 	.word	0x2000001c

08008ca8 <__sccl>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	780b      	ldrb	r3, [r1, #0]
 8008cac:	4604      	mov	r4, r0
 8008cae:	2b5e      	cmp	r3, #94	@ 0x5e
 8008cb0:	bf0b      	itete	eq
 8008cb2:	784b      	ldrbeq	r3, [r1, #1]
 8008cb4:	1c4a      	addne	r2, r1, #1
 8008cb6:	1c8a      	addeq	r2, r1, #2
 8008cb8:	2100      	movne	r1, #0
 8008cba:	bf08      	it	eq
 8008cbc:	2101      	moveq	r1, #1
 8008cbe:	3801      	subs	r0, #1
 8008cc0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008cc4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008cc8:	42a8      	cmp	r0, r5
 8008cca:	d1fb      	bne.n	8008cc4 <__sccl+0x1c>
 8008ccc:	b90b      	cbnz	r3, 8008cd2 <__sccl+0x2a>
 8008cce:	1e50      	subs	r0, r2, #1
 8008cd0:	bd70      	pop	{r4, r5, r6, pc}
 8008cd2:	f081 0101 	eor.w	r1, r1, #1
 8008cd6:	54e1      	strb	r1, [r4, r3]
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4602      	mov	r2, r0
 8008cdc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ce0:	2d2d      	cmp	r5, #45	@ 0x2d
 8008ce2:	d005      	beq.n	8008cf0 <__sccl+0x48>
 8008ce4:	2d5d      	cmp	r5, #93	@ 0x5d
 8008ce6:	d016      	beq.n	8008d16 <__sccl+0x6e>
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	d0f1      	beq.n	8008cd0 <__sccl+0x28>
 8008cec:	462b      	mov	r3, r5
 8008cee:	e7f2      	b.n	8008cd6 <__sccl+0x2e>
 8008cf0:	7846      	ldrb	r6, [r0, #1]
 8008cf2:	2e5d      	cmp	r6, #93	@ 0x5d
 8008cf4:	d0fa      	beq.n	8008cec <__sccl+0x44>
 8008cf6:	42b3      	cmp	r3, r6
 8008cf8:	dcf8      	bgt.n	8008cec <__sccl+0x44>
 8008cfa:	3002      	adds	r0, #2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	3201      	adds	r2, #1
 8008d00:	4296      	cmp	r6, r2
 8008d02:	54a1      	strb	r1, [r4, r2]
 8008d04:	dcfb      	bgt.n	8008cfe <__sccl+0x56>
 8008d06:	1af2      	subs	r2, r6, r3
 8008d08:	3a01      	subs	r2, #1
 8008d0a:	1c5d      	adds	r5, r3, #1
 8008d0c:	42b3      	cmp	r3, r6
 8008d0e:	bfa8      	it	ge
 8008d10:	2200      	movge	r2, #0
 8008d12:	18ab      	adds	r3, r5, r2
 8008d14:	e7e1      	b.n	8008cda <__sccl+0x32>
 8008d16:	4610      	mov	r0, r2
 8008d18:	e7da      	b.n	8008cd0 <__sccl+0x28>

08008d1a <__submore>:
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	460c      	mov	r4, r1
 8008d20:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d26:	4299      	cmp	r1, r3
 8008d28:	d11d      	bne.n	8008d66 <__submore+0x4c>
 8008d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008d2e:	f7fd fcd7 	bl	80066e0 <_malloc_r>
 8008d32:	b918      	cbnz	r0, 8008d3c <__submore+0x22>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008d42:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008d46:	6360      	str	r0, [r4, #52]	@ 0x34
 8008d48:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008d4c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008d50:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008d54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008d58:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008d5c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008d60:	6020      	str	r0, [r4, #0]
 8008d62:	2000      	movs	r0, #0
 8008d64:	e7e8      	b.n	8008d38 <__submore+0x1e>
 8008d66:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008d68:	0077      	lsls	r7, r6, #1
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	f000 fd15 	bl	800979a <_realloc_r>
 8008d70:	4605      	mov	r5, r0
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0de      	beq.n	8008d34 <__submore+0x1a>
 8008d76:	eb00 0806 	add.w	r8, r0, r6
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	4640      	mov	r0, r8
 8008d80:	f000 f976 	bl	8009070 <memcpy>
 8008d84:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008d88:	f8c4 8000 	str.w	r8, [r4]
 8008d8c:	e7e9      	b.n	8008d62 <__submore+0x48>

08008d8e <_ungetc_r>:
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	460d      	mov	r5, r1
 8008d92:	1c69      	adds	r1, r5, #1
 8008d94:	4606      	mov	r6, r0
 8008d96:	4614      	mov	r4, r2
 8008d98:	d01e      	beq.n	8008dd8 <_ungetc_r+0x4a>
 8008d9a:	b118      	cbz	r0, 8008da4 <_ungetc_r+0x16>
 8008d9c:	6a03      	ldr	r3, [r0, #32]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <_ungetc_r+0x16>
 8008da0:	f7fc fbd8 	bl	8005554 <__sinit>
 8008da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008da6:	07da      	lsls	r2, r3, #31
 8008da8:	d405      	bmi.n	8008db6 <_ungetc_r+0x28>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	059b      	lsls	r3, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_ungetc_r+0x28>
 8008db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db2:	f7fc fdc0 	bl	8005936 <__retarget_lock_acquire_recursive>
 8008db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dba:	f023 0220 	bic.w	r2, r3, #32
 8008dbe:	0758      	lsls	r0, r3, #29
 8008dc0:	81a2      	strh	r2, [r4, #12]
 8008dc2:	d422      	bmi.n	8008e0a <_ungetc_r+0x7c>
 8008dc4:	06d9      	lsls	r1, r3, #27
 8008dc6:	d40a      	bmi.n	8008dde <_ungetc_r+0x50>
 8008dc8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dca:	07d2      	lsls	r2, r2, #31
 8008dcc:	d404      	bmi.n	8008dd8 <_ungetc_r+0x4a>
 8008dce:	0599      	lsls	r1, r3, #22
 8008dd0:	d402      	bmi.n	8008dd8 <_ungetc_r+0x4a>
 8008dd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dd4:	f7fc fdb0 	bl	8005938 <__retarget_lock_release_recursive>
 8008dd8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008ddc:	e046      	b.n	8008e6c <_ungetc_r+0xde>
 8008dde:	071b      	lsls	r3, r3, #28
 8008de0:	d50f      	bpl.n	8008e02 <_ungetc_r+0x74>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff fe53 	bl	8008a90 <_fflush_r>
 8008dea:	b120      	cbz	r0, 8008df6 <_ungetc_r+0x68>
 8008dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dee:	07d8      	lsls	r0, r3, #31
 8008df0:	d4f2      	bmi.n	8008dd8 <_ungetc_r+0x4a>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	e7eb      	b.n	8008dce <_ungetc_r+0x40>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	60a0      	str	r0, [r4, #8]
 8008dfa:	f023 0308 	bic.w	r3, r3, #8
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	61a0      	str	r0, [r4, #24]
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f043 0304 	orr.w	r3, r3, #4
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e0c:	6862      	ldr	r2, [r4, #4]
 8008e0e:	b2ed      	uxtb	r5, r5
 8008e10:	b1d3      	cbz	r3, 8008e48 <_ungetc_r+0xba>
 8008e12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008e14:	4293      	cmp	r3, r2
 8008e16:	dc05      	bgt.n	8008e24 <_ungetc_r+0x96>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7ff ff7d 	bl	8008d1a <__submore>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d1e3      	bne.n	8008dec <_ungetc_r+0x5e>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	1e5a      	subs	r2, r3, #1
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	3301      	adds	r3, #1
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e36:	07da      	lsls	r2, r3, #31
 8008e38:	d418      	bmi.n	8008e6c <_ungetc_r+0xde>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	059b      	lsls	r3, r3, #22
 8008e3e:	d415      	bmi.n	8008e6c <_ungetc_r+0xde>
 8008e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e42:	f7fc fd79 	bl	8005938 <__retarget_lock_release_recursive>
 8008e46:	e011      	b.n	8008e6c <_ungetc_r+0xde>
 8008e48:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008e4a:	6920      	ldr	r0, [r4, #16]
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	f001 0101 	and.w	r1, r1, #1
 8008e52:	b168      	cbz	r0, 8008e70 <_ungetc_r+0xe2>
 8008e54:	4298      	cmp	r0, r3
 8008e56:	d20b      	bcs.n	8008e70 <_ungetc_r+0xe2>
 8008e58:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008e5c:	42a8      	cmp	r0, r5
 8008e5e:	d107      	bne.n	8008e70 <_ungetc_r+0xe2>
 8008e60:	3b01      	subs	r3, #1
 8008e62:	3201      	adds	r2, #1
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	6062      	str	r2, [r4, #4]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d0e6      	beq.n	8008e3a <_ungetc_r+0xac>
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008e74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e78:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008e7e:	4623      	mov	r3, r4
 8008e80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	2301      	movs	r3, #1
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	e7ed      	b.n	8008e68 <_ungetc_r+0xda>

08008e8c <__swbuf_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	4605      	mov	r5, r0
 8008e94:	b118      	cbz	r0, 8008e9e <__swbuf_r+0x12>
 8008e96:	6a03      	ldr	r3, [r0, #32]
 8008e98:	b90b      	cbnz	r3, 8008e9e <__swbuf_r+0x12>
 8008e9a:	f7fc fb5b 	bl	8005554 <__sinit>
 8008e9e:	69a3      	ldr	r3, [r4, #24]
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	071a      	lsls	r2, r3, #28
 8008ea6:	d501      	bpl.n	8008eac <__swbuf_r+0x20>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	b943      	cbnz	r3, 8008ebe <__swbuf_r+0x32>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f82a 	bl	8008f08 <__swsetup_r>
 8008eb4:	b118      	cbz	r0, 8008ebe <__swbuf_r+0x32>
 8008eb6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008eba:	4638      	mov	r0, r7
 8008ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	1a98      	subs	r0, r3, r2
 8008ec4:	6963      	ldr	r3, [r4, #20]
 8008ec6:	b2f6      	uxtb	r6, r6
 8008ec8:	4283      	cmp	r3, r0
 8008eca:	4637      	mov	r7, r6
 8008ecc:	dc05      	bgt.n	8008eda <__swbuf_r+0x4e>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7ff fddd 	bl	8008a90 <_fflush_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d1ed      	bne.n	8008eb6 <__swbuf_r+0x2a>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	701e      	strb	r6, [r3, #0]
 8008ee8:	6962      	ldr	r2, [r4, #20]
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d004      	beq.n	8008efa <__swbuf_r+0x6e>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d5e1      	bpl.n	8008eba <__swbuf_r+0x2e>
 8008ef6:	2e0a      	cmp	r6, #10
 8008ef8:	d1df      	bne.n	8008eba <__swbuf_r+0x2e>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7ff fdc7 	bl	8008a90 <_fflush_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0d9      	beq.n	8008eba <__swbuf_r+0x2e>
 8008f06:	e7d6      	b.n	8008eb6 <__swbuf_r+0x2a>

08008f08 <__swsetup_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4b29      	ldr	r3, [pc, #164]	@ (8008fb0 <__swsetup_r+0xa8>)
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	460c      	mov	r4, r1
 8008f12:	b118      	cbz	r0, 8008f1c <__swsetup_r+0x14>
 8008f14:	6a03      	ldr	r3, [r0, #32]
 8008f16:	b90b      	cbnz	r3, 8008f1c <__swsetup_r+0x14>
 8008f18:	f7fc fb1c 	bl	8005554 <__sinit>
 8008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f20:	0719      	lsls	r1, r3, #28
 8008f22:	d422      	bmi.n	8008f6a <__swsetup_r+0x62>
 8008f24:	06da      	lsls	r2, r3, #27
 8008f26:	d407      	bmi.n	8008f38 <__swsetup_r+0x30>
 8008f28:	2209      	movs	r2, #9
 8008f2a:	602a      	str	r2, [r5, #0]
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f36:	e033      	b.n	8008fa0 <__swsetup_r+0x98>
 8008f38:	0758      	lsls	r0, r3, #29
 8008f3a:	d512      	bpl.n	8008f62 <__swsetup_r+0x5a>
 8008f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f3e:	b141      	cbz	r1, 8008f52 <__swsetup_r+0x4a>
 8008f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d002      	beq.n	8008f4e <__swsetup_r+0x46>
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7fd fb55 	bl	80065f8 <_free_r>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f043 0308 	orr.w	r3, r3, #8
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	b94b      	cbnz	r3, 8008f82 <__swsetup_r+0x7a>
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f78:	d003      	beq.n	8008f82 <__swsetup_r+0x7a>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7ff fdd5 	bl	8008b2c <__smakebuf_r>
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	f013 0201 	ands.w	r2, r3, #1
 8008f8a:	d00a      	beq.n	8008fa2 <__swsetup_r+0x9a>
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	60a2      	str	r2, [r4, #8]
 8008f90:	6962      	ldr	r2, [r4, #20]
 8008f92:	4252      	negs	r2, r2
 8008f94:	61a2      	str	r2, [r4, #24]
 8008f96:	6922      	ldr	r2, [r4, #16]
 8008f98:	b942      	cbnz	r2, 8008fac <__swsetup_r+0xa4>
 8008f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f9e:	d1c5      	bne.n	8008f2c <__swsetup_r+0x24>
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	0799      	lsls	r1, r3, #30
 8008fa4:	bf58      	it	pl
 8008fa6:	6962      	ldrpl	r2, [r4, #20]
 8008fa8:	60a2      	str	r2, [r4, #8]
 8008faa:	e7f4      	b.n	8008f96 <__swsetup_r+0x8e>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7f7      	b.n	8008fa0 <__swsetup_r+0x98>
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <memmove>:
 8008fb4:	4288      	cmp	r0, r1
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	eb01 0402 	add.w	r4, r1, r2
 8008fbc:	d902      	bls.n	8008fc4 <memmove+0x10>
 8008fbe:	4284      	cmp	r4, r0
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	d807      	bhi.n	8008fd4 <memmove+0x20>
 8008fc4:	1e43      	subs	r3, r0, #1
 8008fc6:	42a1      	cmp	r1, r4
 8008fc8:	d008      	beq.n	8008fdc <memmove+0x28>
 8008fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fd2:	e7f8      	b.n	8008fc6 <memmove+0x12>
 8008fd4:	4402      	add	r2, r0
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	428a      	cmp	r2, r1
 8008fda:	d100      	bne.n	8008fde <memmove+0x2a>
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fe6:	e7f7      	b.n	8008fd8 <memmove+0x24>

08008fe8 <strncmp>:
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	b16a      	cbz	r2, 8009008 <strncmp+0x20>
 8008fec:	3901      	subs	r1, #1
 8008fee:	1884      	adds	r4, r0, r2
 8008ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d103      	bne.n	8009004 <strncmp+0x1c>
 8008ffc:	42a0      	cmp	r0, r4
 8008ffe:	d001      	beq.n	8009004 <strncmp+0x1c>
 8009000:	2a00      	cmp	r2, #0
 8009002:	d1f5      	bne.n	8008ff0 <strncmp+0x8>
 8009004:	1ad0      	subs	r0, r2, r3
 8009006:	bd10      	pop	{r4, pc}
 8009008:	4610      	mov	r0, r2
 800900a:	e7fc      	b.n	8009006 <strncmp+0x1e>

0800900c <_fstat_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	@ (800902c <_fstat_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7f8 f9ab 	bl	8001374 <_fstat>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_fstat_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_fstat_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	20000408 	.word	0x20000408

08009030 <_isatty_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	@ (800904c <_isatty_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f8 f9aa 	bl	8001394 <_isatty>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_isatty_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_isatty_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	20000408 	.word	0x20000408

08009050 <_sbrk_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d06      	ldr	r5, [pc, #24]	@ (800906c <_sbrk_r+0x1c>)
 8009054:	2300      	movs	r3, #0
 8009056:	4604      	mov	r4, r0
 8009058:	4608      	mov	r0, r1
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	f7f8 f9b2 	bl	80013c4 <_sbrk>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_sbrk_r+0x1a>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_sbrk_r+0x1a>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	20000408 	.word	0x20000408

08009070 <memcpy>:
 8009070:	440a      	add	r2, r1
 8009072:	4291      	cmp	r1, r2
 8009074:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009078:	d100      	bne.n	800907c <memcpy+0xc>
 800907a:	4770      	bx	lr
 800907c:	b510      	push	{r4, lr}
 800907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009086:	4291      	cmp	r1, r2
 8009088:	d1f9      	bne.n	800907e <memcpy+0xe>
 800908a:	bd10      	pop	{r4, pc}
 800908c:	0000      	movs	r0, r0
	...

08009090 <nan>:
 8009090:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009098 <nan+0x8>
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	00000000 	.word	0x00000000
 800909c:	7ff80000 	.word	0x7ff80000

080090a0 <__assert_func>:
 80090a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090a2:	4614      	mov	r4, r2
 80090a4:	461a      	mov	r2, r3
 80090a6:	4b09      	ldr	r3, [pc, #36]	@ (80090cc <__assert_func+0x2c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4605      	mov	r5, r0
 80090ac:	68d8      	ldr	r0, [r3, #12]
 80090ae:	b14c      	cbz	r4, 80090c4 <__assert_func+0x24>
 80090b0:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <__assert_func+0x30>)
 80090b2:	9100      	str	r1, [sp, #0]
 80090b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090b8:	4906      	ldr	r1, [pc, #24]	@ (80090d4 <__assert_func+0x34>)
 80090ba:	462b      	mov	r3, r5
 80090bc:	f000 fc1a 	bl	80098f4 <fiprintf>
 80090c0:	f000 fc2a 	bl	8009918 <abort>
 80090c4:	4b04      	ldr	r3, [pc, #16]	@ (80090d8 <__assert_func+0x38>)
 80090c6:	461c      	mov	r4, r3
 80090c8:	e7f3      	b.n	80090b2 <__assert_func+0x12>
 80090ca:	bf00      	nop
 80090cc:	20000018 	.word	0x20000018
 80090d0:	08009ba7 	.word	0x08009ba7
 80090d4:	08009bb4 	.word	0x08009bb4
 80090d8:	08009be2 	.word	0x08009be2

080090dc <_calloc_r>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	fba1 5402 	umull	r5, r4, r1, r2
 80090e2:	b934      	cbnz	r4, 80090f2 <_calloc_r+0x16>
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7fd fafb 	bl	80066e0 <_malloc_r>
 80090ea:	4606      	mov	r6, r0
 80090ec:	b928      	cbnz	r0, 80090fa <_calloc_r+0x1e>
 80090ee:	4630      	mov	r0, r6
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	220c      	movs	r2, #12
 80090f4:	6002      	str	r2, [r0, #0]
 80090f6:	2600      	movs	r6, #0
 80090f8:	e7f9      	b.n	80090ee <_calloc_r+0x12>
 80090fa:	462a      	mov	r2, r5
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7fc fb9c 	bl	800583a <memset>
 8009102:	e7f4      	b.n	80090ee <_calloc_r+0x12>

08009104 <rshift>:
 8009104:	6903      	ldr	r3, [r0, #16]
 8009106:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800910a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800910e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009112:	f100 0414 	add.w	r4, r0, #20
 8009116:	dd45      	ble.n	80091a4 <rshift+0xa0>
 8009118:	f011 011f 	ands.w	r1, r1, #31
 800911c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009120:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009124:	d10c      	bne.n	8009140 <rshift+0x3c>
 8009126:	f100 0710 	add.w	r7, r0, #16
 800912a:	4629      	mov	r1, r5
 800912c:	42b1      	cmp	r1, r6
 800912e:	d334      	bcc.n	800919a <rshift+0x96>
 8009130:	1a9b      	subs	r3, r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	1eea      	subs	r2, r5, #3
 8009136:	4296      	cmp	r6, r2
 8009138:	bf38      	it	cc
 800913a:	2300      	movcc	r3, #0
 800913c:	4423      	add	r3, r4
 800913e:	e015      	b.n	800916c <rshift+0x68>
 8009140:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009144:	f1c1 0820 	rsb	r8, r1, #32
 8009148:	40cf      	lsrs	r7, r1
 800914a:	f105 0e04 	add.w	lr, r5, #4
 800914e:	46a1      	mov	r9, r4
 8009150:	4576      	cmp	r6, lr
 8009152:	46f4      	mov	ip, lr
 8009154:	d815      	bhi.n	8009182 <rshift+0x7e>
 8009156:	1a9a      	subs	r2, r3, r2
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	3a04      	subs	r2, #4
 800915c:	3501      	adds	r5, #1
 800915e:	42ae      	cmp	r6, r5
 8009160:	bf38      	it	cc
 8009162:	2200      	movcc	r2, #0
 8009164:	18a3      	adds	r3, r4, r2
 8009166:	50a7      	str	r7, [r4, r2]
 8009168:	b107      	cbz	r7, 800916c <rshift+0x68>
 800916a:	3304      	adds	r3, #4
 800916c:	1b1a      	subs	r2, r3, r4
 800916e:	42a3      	cmp	r3, r4
 8009170:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009174:	bf08      	it	eq
 8009176:	2300      	moveq	r3, #0
 8009178:	6102      	str	r2, [r0, #16]
 800917a:	bf08      	it	eq
 800917c:	6143      	streq	r3, [r0, #20]
 800917e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009182:	f8dc c000 	ldr.w	ip, [ip]
 8009186:	fa0c fc08 	lsl.w	ip, ip, r8
 800918a:	ea4c 0707 	orr.w	r7, ip, r7
 800918e:	f849 7b04 	str.w	r7, [r9], #4
 8009192:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009196:	40cf      	lsrs	r7, r1
 8009198:	e7da      	b.n	8009150 <rshift+0x4c>
 800919a:	f851 cb04 	ldr.w	ip, [r1], #4
 800919e:	f847 cf04 	str.w	ip, [r7, #4]!
 80091a2:	e7c3      	b.n	800912c <rshift+0x28>
 80091a4:	4623      	mov	r3, r4
 80091a6:	e7e1      	b.n	800916c <rshift+0x68>

080091a8 <__hexdig_fun>:
 80091a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	d802      	bhi.n	80091b6 <__hexdig_fun+0xe>
 80091b0:	3820      	subs	r0, #32
 80091b2:	b2c0      	uxtb	r0, r0
 80091b4:	4770      	bx	lr
 80091b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d801      	bhi.n	80091c2 <__hexdig_fun+0x1a>
 80091be:	3847      	subs	r0, #71	@ 0x47
 80091c0:	e7f7      	b.n	80091b2 <__hexdig_fun+0xa>
 80091c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	d801      	bhi.n	80091ce <__hexdig_fun+0x26>
 80091ca:	3827      	subs	r0, #39	@ 0x27
 80091cc:	e7f1      	b.n	80091b2 <__hexdig_fun+0xa>
 80091ce:	2000      	movs	r0, #0
 80091d0:	4770      	bx	lr
	...

080091d4 <__gethex>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	b085      	sub	sp, #20
 80091da:	468a      	mov	sl, r1
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	680b      	ldr	r3, [r1, #0]
 80091e0:	9001      	str	r0, [sp, #4]
 80091e2:	4690      	mov	r8, r2
 80091e4:	1c9c      	adds	r4, r3, #2
 80091e6:	46a1      	mov	r9, r4
 80091e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80091ec:	2830      	cmp	r0, #48	@ 0x30
 80091ee:	d0fa      	beq.n	80091e6 <__gethex+0x12>
 80091f0:	eba9 0303 	sub.w	r3, r9, r3
 80091f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80091f8:	f7ff ffd6 	bl	80091a8 <__hexdig_fun>
 80091fc:	4605      	mov	r5, r0
 80091fe:	2800      	cmp	r0, #0
 8009200:	d168      	bne.n	80092d4 <__gethex+0x100>
 8009202:	49a0      	ldr	r1, [pc, #640]	@ (8009484 <__gethex+0x2b0>)
 8009204:	2201      	movs	r2, #1
 8009206:	4648      	mov	r0, r9
 8009208:	f7ff feee 	bl	8008fe8 <strncmp>
 800920c:	4607      	mov	r7, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	d167      	bne.n	80092e2 <__gethex+0x10e>
 8009212:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009216:	4626      	mov	r6, r4
 8009218:	f7ff ffc6 	bl	80091a8 <__hexdig_fun>
 800921c:	2800      	cmp	r0, #0
 800921e:	d062      	beq.n	80092e6 <__gethex+0x112>
 8009220:	4623      	mov	r3, r4
 8009222:	7818      	ldrb	r0, [r3, #0]
 8009224:	2830      	cmp	r0, #48	@ 0x30
 8009226:	4699      	mov	r9, r3
 8009228:	f103 0301 	add.w	r3, r3, #1
 800922c:	d0f9      	beq.n	8009222 <__gethex+0x4e>
 800922e:	f7ff ffbb 	bl	80091a8 <__hexdig_fun>
 8009232:	fab0 f580 	clz	r5, r0
 8009236:	096d      	lsrs	r5, r5, #5
 8009238:	f04f 0b01 	mov.w	fp, #1
 800923c:	464a      	mov	r2, r9
 800923e:	4616      	mov	r6, r2
 8009240:	3201      	adds	r2, #1
 8009242:	7830      	ldrb	r0, [r6, #0]
 8009244:	f7ff ffb0 	bl	80091a8 <__hexdig_fun>
 8009248:	2800      	cmp	r0, #0
 800924a:	d1f8      	bne.n	800923e <__gethex+0x6a>
 800924c:	498d      	ldr	r1, [pc, #564]	@ (8009484 <__gethex+0x2b0>)
 800924e:	2201      	movs	r2, #1
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff fec9 	bl	8008fe8 <strncmp>
 8009256:	2800      	cmp	r0, #0
 8009258:	d13f      	bne.n	80092da <__gethex+0x106>
 800925a:	b944      	cbnz	r4, 800926e <__gethex+0x9a>
 800925c:	1c74      	adds	r4, r6, #1
 800925e:	4622      	mov	r2, r4
 8009260:	4616      	mov	r6, r2
 8009262:	3201      	adds	r2, #1
 8009264:	7830      	ldrb	r0, [r6, #0]
 8009266:	f7ff ff9f 	bl	80091a8 <__hexdig_fun>
 800926a:	2800      	cmp	r0, #0
 800926c:	d1f8      	bne.n	8009260 <__gethex+0x8c>
 800926e:	1ba4      	subs	r4, r4, r6
 8009270:	00a7      	lsls	r7, r4, #2
 8009272:	7833      	ldrb	r3, [r6, #0]
 8009274:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009278:	2b50      	cmp	r3, #80	@ 0x50
 800927a:	d13e      	bne.n	80092fa <__gethex+0x126>
 800927c:	7873      	ldrb	r3, [r6, #1]
 800927e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009280:	d033      	beq.n	80092ea <__gethex+0x116>
 8009282:	2b2d      	cmp	r3, #45	@ 0x2d
 8009284:	d034      	beq.n	80092f0 <__gethex+0x11c>
 8009286:	1c71      	adds	r1, r6, #1
 8009288:	2400      	movs	r4, #0
 800928a:	7808      	ldrb	r0, [r1, #0]
 800928c:	f7ff ff8c 	bl	80091a8 <__hexdig_fun>
 8009290:	1e43      	subs	r3, r0, #1
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b18      	cmp	r3, #24
 8009296:	d830      	bhi.n	80092fa <__gethex+0x126>
 8009298:	f1a0 0210 	sub.w	r2, r0, #16
 800929c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092a0:	f7ff ff82 	bl	80091a8 <__hexdig_fun>
 80092a4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80092a8:	fa5f fc8c 	uxtb.w	ip, ip
 80092ac:	f1bc 0f18 	cmp.w	ip, #24
 80092b0:	f04f 030a 	mov.w	r3, #10
 80092b4:	d91e      	bls.n	80092f4 <__gethex+0x120>
 80092b6:	b104      	cbz	r4, 80092ba <__gethex+0xe6>
 80092b8:	4252      	negs	r2, r2
 80092ba:	4417      	add	r7, r2
 80092bc:	f8ca 1000 	str.w	r1, [sl]
 80092c0:	b1ed      	cbz	r5, 80092fe <__gethex+0x12a>
 80092c2:	f1bb 0f00 	cmp.w	fp, #0
 80092c6:	bf0c      	ite	eq
 80092c8:	2506      	moveq	r5, #6
 80092ca:	2500      	movne	r5, #0
 80092cc:	4628      	mov	r0, r5
 80092ce:	b005      	add	sp, #20
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	2500      	movs	r5, #0
 80092d6:	462c      	mov	r4, r5
 80092d8:	e7b0      	b.n	800923c <__gethex+0x68>
 80092da:	2c00      	cmp	r4, #0
 80092dc:	d1c7      	bne.n	800926e <__gethex+0x9a>
 80092de:	4627      	mov	r7, r4
 80092e0:	e7c7      	b.n	8009272 <__gethex+0x9e>
 80092e2:	464e      	mov	r6, r9
 80092e4:	462f      	mov	r7, r5
 80092e6:	2501      	movs	r5, #1
 80092e8:	e7c3      	b.n	8009272 <__gethex+0x9e>
 80092ea:	2400      	movs	r4, #0
 80092ec:	1cb1      	adds	r1, r6, #2
 80092ee:	e7cc      	b.n	800928a <__gethex+0xb6>
 80092f0:	2401      	movs	r4, #1
 80092f2:	e7fb      	b.n	80092ec <__gethex+0x118>
 80092f4:	fb03 0002 	mla	r0, r3, r2, r0
 80092f8:	e7ce      	b.n	8009298 <__gethex+0xc4>
 80092fa:	4631      	mov	r1, r6
 80092fc:	e7de      	b.n	80092bc <__gethex+0xe8>
 80092fe:	eba6 0309 	sub.w	r3, r6, r9
 8009302:	3b01      	subs	r3, #1
 8009304:	4629      	mov	r1, r5
 8009306:	2b07      	cmp	r3, #7
 8009308:	dc0a      	bgt.n	8009320 <__gethex+0x14c>
 800930a:	9801      	ldr	r0, [sp, #4]
 800930c:	f7fd fa74 	bl	80067f8 <_Balloc>
 8009310:	4604      	mov	r4, r0
 8009312:	b940      	cbnz	r0, 8009326 <__gethex+0x152>
 8009314:	4b5c      	ldr	r3, [pc, #368]	@ (8009488 <__gethex+0x2b4>)
 8009316:	4602      	mov	r2, r0
 8009318:	21e4      	movs	r1, #228	@ 0xe4
 800931a:	485c      	ldr	r0, [pc, #368]	@ (800948c <__gethex+0x2b8>)
 800931c:	f7ff fec0 	bl	80090a0 <__assert_func>
 8009320:	3101      	adds	r1, #1
 8009322:	105b      	asrs	r3, r3, #1
 8009324:	e7ef      	b.n	8009306 <__gethex+0x132>
 8009326:	f100 0a14 	add.w	sl, r0, #20
 800932a:	2300      	movs	r3, #0
 800932c:	4655      	mov	r5, sl
 800932e:	469b      	mov	fp, r3
 8009330:	45b1      	cmp	r9, r6
 8009332:	d337      	bcc.n	80093a4 <__gethex+0x1d0>
 8009334:	f845 bb04 	str.w	fp, [r5], #4
 8009338:	eba5 050a 	sub.w	r5, r5, sl
 800933c:	10ad      	asrs	r5, r5, #2
 800933e:	6125      	str	r5, [r4, #16]
 8009340:	4658      	mov	r0, fp
 8009342:	f7fd fb4b 	bl	80069dc <__hi0bits>
 8009346:	016d      	lsls	r5, r5, #5
 8009348:	f8d8 6000 	ldr.w	r6, [r8]
 800934c:	1a2d      	subs	r5, r5, r0
 800934e:	42b5      	cmp	r5, r6
 8009350:	dd54      	ble.n	80093fc <__gethex+0x228>
 8009352:	1bad      	subs	r5, r5, r6
 8009354:	4629      	mov	r1, r5
 8009356:	4620      	mov	r0, r4
 8009358:	f7fd fed7 	bl	800710a <__any_on>
 800935c:	4681      	mov	r9, r0
 800935e:	b178      	cbz	r0, 8009380 <__gethex+0x1ac>
 8009360:	1e6b      	subs	r3, r5, #1
 8009362:	1159      	asrs	r1, r3, #5
 8009364:	f003 021f 	and.w	r2, r3, #31
 8009368:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800936c:	f04f 0901 	mov.w	r9, #1
 8009370:	fa09 f202 	lsl.w	r2, r9, r2
 8009374:	420a      	tst	r2, r1
 8009376:	d003      	beq.n	8009380 <__gethex+0x1ac>
 8009378:	454b      	cmp	r3, r9
 800937a:	dc36      	bgt.n	80093ea <__gethex+0x216>
 800937c:	f04f 0902 	mov.w	r9, #2
 8009380:	4629      	mov	r1, r5
 8009382:	4620      	mov	r0, r4
 8009384:	f7ff febe 	bl	8009104 <rshift>
 8009388:	442f      	add	r7, r5
 800938a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800938e:	42bb      	cmp	r3, r7
 8009390:	da42      	bge.n	8009418 <__gethex+0x244>
 8009392:	9801      	ldr	r0, [sp, #4]
 8009394:	4621      	mov	r1, r4
 8009396:	f7fd fa6f 	bl	8006878 <_Bfree>
 800939a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800939c:	2300      	movs	r3, #0
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	25a3      	movs	r5, #163	@ 0xa3
 80093a2:	e793      	b.n	80092cc <__gethex+0xf8>
 80093a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80093aa:	d012      	beq.n	80093d2 <__gethex+0x1fe>
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	d104      	bne.n	80093ba <__gethex+0x1e6>
 80093b0:	f845 bb04 	str.w	fp, [r5], #4
 80093b4:	f04f 0b00 	mov.w	fp, #0
 80093b8:	465b      	mov	r3, fp
 80093ba:	7830      	ldrb	r0, [r6, #0]
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	f7ff fef3 	bl	80091a8 <__hexdig_fun>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	f000 000f 	and.w	r0, r0, #15
 80093c8:	4098      	lsls	r0, r3
 80093ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80093ce:	3304      	adds	r3, #4
 80093d0:	e7ae      	b.n	8009330 <__gethex+0x15c>
 80093d2:	45b1      	cmp	r9, r6
 80093d4:	d8ea      	bhi.n	80093ac <__gethex+0x1d8>
 80093d6:	492b      	ldr	r1, [pc, #172]	@ (8009484 <__gethex+0x2b0>)
 80093d8:	9303      	str	r3, [sp, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff fe03 	bl	8008fe8 <strncmp>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d1e1      	bne.n	80093ac <__gethex+0x1d8>
 80093e8:	e7a2      	b.n	8009330 <__gethex+0x15c>
 80093ea:	1ea9      	subs	r1, r5, #2
 80093ec:	4620      	mov	r0, r4
 80093ee:	f7fd fe8c 	bl	800710a <__any_on>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0c2      	beq.n	800937c <__gethex+0x1a8>
 80093f6:	f04f 0903 	mov.w	r9, #3
 80093fa:	e7c1      	b.n	8009380 <__gethex+0x1ac>
 80093fc:	da09      	bge.n	8009412 <__gethex+0x23e>
 80093fe:	1b75      	subs	r5, r6, r5
 8009400:	4621      	mov	r1, r4
 8009402:	9801      	ldr	r0, [sp, #4]
 8009404:	462a      	mov	r2, r5
 8009406:	f7fd fc47 	bl	8006c98 <__lshift>
 800940a:	1b7f      	subs	r7, r7, r5
 800940c:	4604      	mov	r4, r0
 800940e:	f100 0a14 	add.w	sl, r0, #20
 8009412:	f04f 0900 	mov.w	r9, #0
 8009416:	e7b8      	b.n	800938a <__gethex+0x1b6>
 8009418:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800941c:	42bd      	cmp	r5, r7
 800941e:	dd6f      	ble.n	8009500 <__gethex+0x32c>
 8009420:	1bed      	subs	r5, r5, r7
 8009422:	42ae      	cmp	r6, r5
 8009424:	dc34      	bgt.n	8009490 <__gethex+0x2bc>
 8009426:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d022      	beq.n	8009474 <__gethex+0x2a0>
 800942e:	2b03      	cmp	r3, #3
 8009430:	d024      	beq.n	800947c <__gethex+0x2a8>
 8009432:	2b01      	cmp	r3, #1
 8009434:	d115      	bne.n	8009462 <__gethex+0x28e>
 8009436:	42ae      	cmp	r6, r5
 8009438:	d113      	bne.n	8009462 <__gethex+0x28e>
 800943a:	2e01      	cmp	r6, #1
 800943c:	d10b      	bne.n	8009456 <__gethex+0x282>
 800943e:	9a02      	ldr	r2, [sp, #8]
 8009440:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	2301      	movs	r3, #1
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	f8ca 3000 	str.w	r3, [sl]
 800944e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009450:	2562      	movs	r5, #98	@ 0x62
 8009452:	601c      	str	r4, [r3, #0]
 8009454:	e73a      	b.n	80092cc <__gethex+0xf8>
 8009456:	1e71      	subs	r1, r6, #1
 8009458:	4620      	mov	r0, r4
 800945a:	f7fd fe56 	bl	800710a <__any_on>
 800945e:	2800      	cmp	r0, #0
 8009460:	d1ed      	bne.n	800943e <__gethex+0x26a>
 8009462:	9801      	ldr	r0, [sp, #4]
 8009464:	4621      	mov	r1, r4
 8009466:	f7fd fa07 	bl	8006878 <_Bfree>
 800946a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800946c:	2300      	movs	r3, #0
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	2550      	movs	r5, #80	@ 0x50
 8009472:	e72b      	b.n	80092cc <__gethex+0xf8>
 8009474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f3      	bne.n	8009462 <__gethex+0x28e>
 800947a:	e7e0      	b.n	800943e <__gethex+0x26a>
 800947c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1dd      	bne.n	800943e <__gethex+0x26a>
 8009482:	e7ee      	b.n	8009462 <__gethex+0x28e>
 8009484:	08009b71 	.word	0x08009b71
 8009488:	08009b07 	.word	0x08009b07
 800948c:	08009be3 	.word	0x08009be3
 8009490:	1e6f      	subs	r7, r5, #1
 8009492:	f1b9 0f00 	cmp.w	r9, #0
 8009496:	d130      	bne.n	80094fa <__gethex+0x326>
 8009498:	b127      	cbz	r7, 80094a4 <__gethex+0x2d0>
 800949a:	4639      	mov	r1, r7
 800949c:	4620      	mov	r0, r4
 800949e:	f7fd fe34 	bl	800710a <__any_on>
 80094a2:	4681      	mov	r9, r0
 80094a4:	117a      	asrs	r2, r7, #5
 80094a6:	2301      	movs	r3, #1
 80094a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094ac:	f007 071f 	and.w	r7, r7, #31
 80094b0:	40bb      	lsls	r3, r7
 80094b2:	4213      	tst	r3, r2
 80094b4:	4629      	mov	r1, r5
 80094b6:	4620      	mov	r0, r4
 80094b8:	bf18      	it	ne
 80094ba:	f049 0902 	orrne.w	r9, r9, #2
 80094be:	f7ff fe21 	bl	8009104 <rshift>
 80094c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094c6:	1b76      	subs	r6, r6, r5
 80094c8:	2502      	movs	r5, #2
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	d047      	beq.n	8009560 <__gethex+0x38c>
 80094d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d015      	beq.n	8009504 <__gethex+0x330>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d017      	beq.n	800950c <__gethex+0x338>
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d109      	bne.n	80094f4 <__gethex+0x320>
 80094e0:	f019 0f02 	tst.w	r9, #2
 80094e4:	d006      	beq.n	80094f4 <__gethex+0x320>
 80094e6:	f8da 3000 	ldr.w	r3, [sl]
 80094ea:	ea49 0903 	orr.w	r9, r9, r3
 80094ee:	f019 0f01 	tst.w	r9, #1
 80094f2:	d10e      	bne.n	8009512 <__gethex+0x33e>
 80094f4:	f045 0510 	orr.w	r5, r5, #16
 80094f8:	e032      	b.n	8009560 <__gethex+0x38c>
 80094fa:	f04f 0901 	mov.w	r9, #1
 80094fe:	e7d1      	b.n	80094a4 <__gethex+0x2d0>
 8009500:	2501      	movs	r5, #1
 8009502:	e7e2      	b.n	80094ca <__gethex+0x2f6>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	f1c3 0301 	rsb	r3, r3, #1
 800950a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800950c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0f0      	beq.n	80094f4 <__gethex+0x320>
 8009512:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009516:	f104 0314 	add.w	r3, r4, #20
 800951a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800951e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009522:	f04f 0c00 	mov.w	ip, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f853 2b04 	ldr.w	r2, [r3], #4
 800952c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009530:	d01b      	beq.n	800956a <__gethex+0x396>
 8009532:	3201      	adds	r2, #1
 8009534:	6002      	str	r2, [r0, #0]
 8009536:	2d02      	cmp	r5, #2
 8009538:	f104 0314 	add.w	r3, r4, #20
 800953c:	d13c      	bne.n	80095b8 <__gethex+0x3e4>
 800953e:	f8d8 2000 	ldr.w	r2, [r8]
 8009542:	3a01      	subs	r2, #1
 8009544:	42b2      	cmp	r2, r6
 8009546:	d109      	bne.n	800955c <__gethex+0x388>
 8009548:	1171      	asrs	r1, r6, #5
 800954a:	2201      	movs	r2, #1
 800954c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009550:	f006 061f 	and.w	r6, r6, #31
 8009554:	fa02 f606 	lsl.w	r6, r2, r6
 8009558:	421e      	tst	r6, r3
 800955a:	d13a      	bne.n	80095d2 <__gethex+0x3fe>
 800955c:	f045 0520 	orr.w	r5, r5, #32
 8009560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009562:	601c      	str	r4, [r3, #0]
 8009564:	9b02      	ldr	r3, [sp, #8]
 8009566:	601f      	str	r7, [r3, #0]
 8009568:	e6b0      	b.n	80092cc <__gethex+0xf8>
 800956a:	4299      	cmp	r1, r3
 800956c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009570:	d8d9      	bhi.n	8009526 <__gethex+0x352>
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	459b      	cmp	fp, r3
 8009576:	db17      	blt.n	80095a8 <__gethex+0x3d4>
 8009578:	6861      	ldr	r1, [r4, #4]
 800957a:	9801      	ldr	r0, [sp, #4]
 800957c:	3101      	adds	r1, #1
 800957e:	f7fd f93b 	bl	80067f8 <_Balloc>
 8009582:	4681      	mov	r9, r0
 8009584:	b918      	cbnz	r0, 800958e <__gethex+0x3ba>
 8009586:	4b1a      	ldr	r3, [pc, #104]	@ (80095f0 <__gethex+0x41c>)
 8009588:	4602      	mov	r2, r0
 800958a:	2184      	movs	r1, #132	@ 0x84
 800958c:	e6c5      	b.n	800931a <__gethex+0x146>
 800958e:	6922      	ldr	r2, [r4, #16]
 8009590:	3202      	adds	r2, #2
 8009592:	f104 010c 	add.w	r1, r4, #12
 8009596:	0092      	lsls	r2, r2, #2
 8009598:	300c      	adds	r0, #12
 800959a:	f7ff fd69 	bl	8009070 <memcpy>
 800959e:	4621      	mov	r1, r4
 80095a0:	9801      	ldr	r0, [sp, #4]
 80095a2:	f7fd f969 	bl	8006878 <_Bfree>
 80095a6:	464c      	mov	r4, r9
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095b0:	6122      	str	r2, [r4, #16]
 80095b2:	2201      	movs	r2, #1
 80095b4:	615a      	str	r2, [r3, #20]
 80095b6:	e7be      	b.n	8009536 <__gethex+0x362>
 80095b8:	6922      	ldr	r2, [r4, #16]
 80095ba:	455a      	cmp	r2, fp
 80095bc:	dd0b      	ble.n	80095d6 <__gethex+0x402>
 80095be:	2101      	movs	r1, #1
 80095c0:	4620      	mov	r0, r4
 80095c2:	f7ff fd9f 	bl	8009104 <rshift>
 80095c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ca:	3701      	adds	r7, #1
 80095cc:	42bb      	cmp	r3, r7
 80095ce:	f6ff aee0 	blt.w	8009392 <__gethex+0x1be>
 80095d2:	2501      	movs	r5, #1
 80095d4:	e7c2      	b.n	800955c <__gethex+0x388>
 80095d6:	f016 061f 	ands.w	r6, r6, #31
 80095da:	d0fa      	beq.n	80095d2 <__gethex+0x3fe>
 80095dc:	4453      	add	r3, sl
 80095de:	f1c6 0620 	rsb	r6, r6, #32
 80095e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80095e6:	f7fd f9f9 	bl	80069dc <__hi0bits>
 80095ea:	42b0      	cmp	r0, r6
 80095ec:	dbe7      	blt.n	80095be <__gethex+0x3ea>
 80095ee:	e7f0      	b.n	80095d2 <__gethex+0x3fe>
 80095f0:	08009b07 	.word	0x08009b07

080095f4 <L_shift>:
 80095f4:	f1c2 0208 	rsb	r2, r2, #8
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	b570      	push	{r4, r5, r6, lr}
 80095fc:	f1c2 0620 	rsb	r6, r2, #32
 8009600:	6843      	ldr	r3, [r0, #4]
 8009602:	6804      	ldr	r4, [r0, #0]
 8009604:	fa03 f506 	lsl.w	r5, r3, r6
 8009608:	432c      	orrs	r4, r5
 800960a:	40d3      	lsrs	r3, r2
 800960c:	6004      	str	r4, [r0, #0]
 800960e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009612:	4288      	cmp	r0, r1
 8009614:	d3f4      	bcc.n	8009600 <L_shift+0xc>
 8009616:	bd70      	pop	{r4, r5, r6, pc}

08009618 <__match>:
 8009618:	b530      	push	{r4, r5, lr}
 800961a:	6803      	ldr	r3, [r0, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009622:	b914      	cbnz	r4, 800962a <__match+0x12>
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	2001      	movs	r0, #1
 8009628:	bd30      	pop	{r4, r5, pc}
 800962a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009632:	2d19      	cmp	r5, #25
 8009634:	bf98      	it	ls
 8009636:	3220      	addls	r2, #32
 8009638:	42a2      	cmp	r2, r4
 800963a:	d0f0      	beq.n	800961e <__match+0x6>
 800963c:	2000      	movs	r0, #0
 800963e:	e7f3      	b.n	8009628 <__match+0x10>

08009640 <__hexnan>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	680b      	ldr	r3, [r1, #0]
 8009646:	6801      	ldr	r1, [r0, #0]
 8009648:	115e      	asrs	r6, r3, #5
 800964a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800964e:	f013 031f 	ands.w	r3, r3, #31
 8009652:	b087      	sub	sp, #28
 8009654:	bf18      	it	ne
 8009656:	3604      	addne	r6, #4
 8009658:	2500      	movs	r5, #0
 800965a:	1f37      	subs	r7, r6, #4
 800965c:	4682      	mov	sl, r0
 800965e:	4690      	mov	r8, r2
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	f846 5c04 	str.w	r5, [r6, #-4]
 8009666:	46b9      	mov	r9, r7
 8009668:	463c      	mov	r4, r7
 800966a:	9502      	str	r5, [sp, #8]
 800966c:	46ab      	mov	fp, r5
 800966e:	784a      	ldrb	r2, [r1, #1]
 8009670:	1c4b      	adds	r3, r1, #1
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	b342      	cbz	r2, 80096c8 <__hexnan+0x88>
 8009676:	4610      	mov	r0, r2
 8009678:	9105      	str	r1, [sp, #20]
 800967a:	9204      	str	r2, [sp, #16]
 800967c:	f7ff fd94 	bl	80091a8 <__hexdig_fun>
 8009680:	2800      	cmp	r0, #0
 8009682:	d151      	bne.n	8009728 <__hexnan+0xe8>
 8009684:	9a04      	ldr	r2, [sp, #16]
 8009686:	9905      	ldr	r1, [sp, #20]
 8009688:	2a20      	cmp	r2, #32
 800968a:	d818      	bhi.n	80096be <__hexnan+0x7e>
 800968c:	9b02      	ldr	r3, [sp, #8]
 800968e:	459b      	cmp	fp, r3
 8009690:	dd13      	ble.n	80096ba <__hexnan+0x7a>
 8009692:	454c      	cmp	r4, r9
 8009694:	d206      	bcs.n	80096a4 <__hexnan+0x64>
 8009696:	2d07      	cmp	r5, #7
 8009698:	dc04      	bgt.n	80096a4 <__hexnan+0x64>
 800969a:	462a      	mov	r2, r5
 800969c:	4649      	mov	r1, r9
 800969e:	4620      	mov	r0, r4
 80096a0:	f7ff ffa8 	bl	80095f4 <L_shift>
 80096a4:	4544      	cmp	r4, r8
 80096a6:	d952      	bls.n	800974e <__hexnan+0x10e>
 80096a8:	2300      	movs	r3, #0
 80096aa:	f1a4 0904 	sub.w	r9, r4, #4
 80096ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80096b2:	f8cd b008 	str.w	fp, [sp, #8]
 80096b6:	464c      	mov	r4, r9
 80096b8:	461d      	mov	r5, r3
 80096ba:	9903      	ldr	r1, [sp, #12]
 80096bc:	e7d7      	b.n	800966e <__hexnan+0x2e>
 80096be:	2a29      	cmp	r2, #41	@ 0x29
 80096c0:	d157      	bne.n	8009772 <__hexnan+0x132>
 80096c2:	3102      	adds	r1, #2
 80096c4:	f8ca 1000 	str.w	r1, [sl]
 80096c8:	f1bb 0f00 	cmp.w	fp, #0
 80096cc:	d051      	beq.n	8009772 <__hexnan+0x132>
 80096ce:	454c      	cmp	r4, r9
 80096d0:	d206      	bcs.n	80096e0 <__hexnan+0xa0>
 80096d2:	2d07      	cmp	r5, #7
 80096d4:	dc04      	bgt.n	80096e0 <__hexnan+0xa0>
 80096d6:	462a      	mov	r2, r5
 80096d8:	4649      	mov	r1, r9
 80096da:	4620      	mov	r0, r4
 80096dc:	f7ff ff8a 	bl	80095f4 <L_shift>
 80096e0:	4544      	cmp	r4, r8
 80096e2:	d936      	bls.n	8009752 <__hexnan+0x112>
 80096e4:	f1a8 0204 	sub.w	r2, r8, #4
 80096e8:	4623      	mov	r3, r4
 80096ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80096ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80096f2:	429f      	cmp	r7, r3
 80096f4:	d2f9      	bcs.n	80096ea <__hexnan+0xaa>
 80096f6:	1b3b      	subs	r3, r7, r4
 80096f8:	f023 0303 	bic.w	r3, r3, #3
 80096fc:	3304      	adds	r3, #4
 80096fe:	3401      	adds	r4, #1
 8009700:	3e03      	subs	r6, #3
 8009702:	42b4      	cmp	r4, r6
 8009704:	bf88      	it	hi
 8009706:	2304      	movhi	r3, #4
 8009708:	4443      	add	r3, r8
 800970a:	2200      	movs	r2, #0
 800970c:	f843 2b04 	str.w	r2, [r3], #4
 8009710:	429f      	cmp	r7, r3
 8009712:	d2fb      	bcs.n	800970c <__hexnan+0xcc>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	b91b      	cbnz	r3, 8009720 <__hexnan+0xe0>
 8009718:	4547      	cmp	r7, r8
 800971a:	d128      	bne.n	800976e <__hexnan+0x12e>
 800971c:	2301      	movs	r3, #1
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	2005      	movs	r0, #5
 8009722:	b007      	add	sp, #28
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	3501      	adds	r5, #1
 800972a:	2d08      	cmp	r5, #8
 800972c:	f10b 0b01 	add.w	fp, fp, #1
 8009730:	dd06      	ble.n	8009740 <__hexnan+0x100>
 8009732:	4544      	cmp	r4, r8
 8009734:	d9c1      	bls.n	80096ba <__hexnan+0x7a>
 8009736:	2300      	movs	r3, #0
 8009738:	f844 3c04 	str.w	r3, [r4, #-4]
 800973c:	2501      	movs	r5, #1
 800973e:	3c04      	subs	r4, #4
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	f000 000f 	and.w	r0, r0, #15
 8009746:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800974a:	6020      	str	r0, [r4, #0]
 800974c:	e7b5      	b.n	80096ba <__hexnan+0x7a>
 800974e:	2508      	movs	r5, #8
 8009750:	e7b3      	b.n	80096ba <__hexnan+0x7a>
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0dd      	beq.n	8009714 <__hexnan+0xd4>
 8009758:	f1c3 0320 	rsb	r3, r3, #32
 800975c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009760:	40da      	lsrs	r2, r3
 8009762:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009766:	4013      	ands	r3, r2
 8009768:	f846 3c04 	str.w	r3, [r6, #-4]
 800976c:	e7d2      	b.n	8009714 <__hexnan+0xd4>
 800976e:	3f04      	subs	r7, #4
 8009770:	e7d0      	b.n	8009714 <__hexnan+0xd4>
 8009772:	2004      	movs	r0, #4
 8009774:	e7d5      	b.n	8009722 <__hexnan+0xe2>

08009776 <__ascii_mbtowc>:
 8009776:	b082      	sub	sp, #8
 8009778:	b901      	cbnz	r1, 800977c <__ascii_mbtowc+0x6>
 800977a:	a901      	add	r1, sp, #4
 800977c:	b142      	cbz	r2, 8009790 <__ascii_mbtowc+0x1a>
 800977e:	b14b      	cbz	r3, 8009794 <__ascii_mbtowc+0x1e>
 8009780:	7813      	ldrb	r3, [r2, #0]
 8009782:	600b      	str	r3, [r1, #0]
 8009784:	7812      	ldrb	r2, [r2, #0]
 8009786:	1e10      	subs	r0, r2, #0
 8009788:	bf18      	it	ne
 800978a:	2001      	movne	r0, #1
 800978c:	b002      	add	sp, #8
 800978e:	4770      	bx	lr
 8009790:	4610      	mov	r0, r2
 8009792:	e7fb      	b.n	800978c <__ascii_mbtowc+0x16>
 8009794:	f06f 0001 	mvn.w	r0, #1
 8009798:	e7f8      	b.n	800978c <__ascii_mbtowc+0x16>

0800979a <_realloc_r>:
 800979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	4607      	mov	r7, r0
 80097a0:	4614      	mov	r4, r2
 80097a2:	460d      	mov	r5, r1
 80097a4:	b921      	cbnz	r1, 80097b0 <_realloc_r+0x16>
 80097a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097aa:	4611      	mov	r1, r2
 80097ac:	f7fc bf98 	b.w	80066e0 <_malloc_r>
 80097b0:	b92a      	cbnz	r2, 80097be <_realloc_r+0x24>
 80097b2:	f7fc ff21 	bl	80065f8 <_free_r>
 80097b6:	4625      	mov	r5, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097be:	f000 f8b2 	bl	8009926 <_malloc_usable_size_r>
 80097c2:	4284      	cmp	r4, r0
 80097c4:	4606      	mov	r6, r0
 80097c6:	d802      	bhi.n	80097ce <_realloc_r+0x34>
 80097c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097cc:	d8f4      	bhi.n	80097b8 <_realloc_r+0x1e>
 80097ce:	4621      	mov	r1, r4
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7fc ff85 	bl	80066e0 <_malloc_r>
 80097d6:	4680      	mov	r8, r0
 80097d8:	b908      	cbnz	r0, 80097de <_realloc_r+0x44>
 80097da:	4645      	mov	r5, r8
 80097dc:	e7ec      	b.n	80097b8 <_realloc_r+0x1e>
 80097de:	42b4      	cmp	r4, r6
 80097e0:	4622      	mov	r2, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	bf28      	it	cs
 80097e6:	4632      	movcs	r2, r6
 80097e8:	f7ff fc42 	bl	8009070 <memcpy>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7fc ff02 	bl	80065f8 <_free_r>
 80097f4:	e7f1      	b.n	80097da <_realloc_r+0x40>
	...

080097f8 <_strtoul_l.isra.0>:
 80097f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097fc:	4e34      	ldr	r6, [pc, #208]	@ (80098d0 <_strtoul_l.isra.0+0xd8>)
 80097fe:	4686      	mov	lr, r0
 8009800:	460d      	mov	r5, r1
 8009802:	4628      	mov	r0, r5
 8009804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009808:	5d37      	ldrb	r7, [r6, r4]
 800980a:	f017 0708 	ands.w	r7, r7, #8
 800980e:	d1f8      	bne.n	8009802 <_strtoul_l.isra.0+0xa>
 8009810:	2c2d      	cmp	r4, #45	@ 0x2d
 8009812:	d110      	bne.n	8009836 <_strtoul_l.isra.0+0x3e>
 8009814:	782c      	ldrb	r4, [r5, #0]
 8009816:	2701      	movs	r7, #1
 8009818:	1c85      	adds	r5, r0, #2
 800981a:	f033 0010 	bics.w	r0, r3, #16
 800981e:	d115      	bne.n	800984c <_strtoul_l.isra.0+0x54>
 8009820:	2c30      	cmp	r4, #48	@ 0x30
 8009822:	d10d      	bne.n	8009840 <_strtoul_l.isra.0+0x48>
 8009824:	7828      	ldrb	r0, [r5, #0]
 8009826:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800982a:	2858      	cmp	r0, #88	@ 0x58
 800982c:	d108      	bne.n	8009840 <_strtoul_l.isra.0+0x48>
 800982e:	786c      	ldrb	r4, [r5, #1]
 8009830:	3502      	adds	r5, #2
 8009832:	2310      	movs	r3, #16
 8009834:	e00a      	b.n	800984c <_strtoul_l.isra.0+0x54>
 8009836:	2c2b      	cmp	r4, #43	@ 0x2b
 8009838:	bf04      	itt	eq
 800983a:	782c      	ldrbeq	r4, [r5, #0]
 800983c:	1c85      	addeq	r5, r0, #2
 800983e:	e7ec      	b.n	800981a <_strtoul_l.isra.0+0x22>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1f6      	bne.n	8009832 <_strtoul_l.isra.0+0x3a>
 8009844:	2c30      	cmp	r4, #48	@ 0x30
 8009846:	bf14      	ite	ne
 8009848:	230a      	movne	r3, #10
 800984a:	2308      	moveq	r3, #8
 800984c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009850:	2600      	movs	r6, #0
 8009852:	fbb8 f8f3 	udiv	r8, r8, r3
 8009856:	fb03 f908 	mul.w	r9, r3, r8
 800985a:	ea6f 0909 	mvn.w	r9, r9
 800985e:	4630      	mov	r0, r6
 8009860:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009864:	f1bc 0f09 	cmp.w	ip, #9
 8009868:	d810      	bhi.n	800988c <_strtoul_l.isra.0+0x94>
 800986a:	4664      	mov	r4, ip
 800986c:	42a3      	cmp	r3, r4
 800986e:	dd1e      	ble.n	80098ae <_strtoul_l.isra.0+0xb6>
 8009870:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009874:	d007      	beq.n	8009886 <_strtoul_l.isra.0+0x8e>
 8009876:	4580      	cmp	r8, r0
 8009878:	d316      	bcc.n	80098a8 <_strtoul_l.isra.0+0xb0>
 800987a:	d101      	bne.n	8009880 <_strtoul_l.isra.0+0x88>
 800987c:	45a1      	cmp	r9, r4
 800987e:	db13      	blt.n	80098a8 <_strtoul_l.isra.0+0xb0>
 8009880:	fb00 4003 	mla	r0, r0, r3, r4
 8009884:	2601      	movs	r6, #1
 8009886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800988a:	e7e9      	b.n	8009860 <_strtoul_l.isra.0+0x68>
 800988c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009890:	f1bc 0f19 	cmp.w	ip, #25
 8009894:	d801      	bhi.n	800989a <_strtoul_l.isra.0+0xa2>
 8009896:	3c37      	subs	r4, #55	@ 0x37
 8009898:	e7e8      	b.n	800986c <_strtoul_l.isra.0+0x74>
 800989a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800989e:	f1bc 0f19 	cmp.w	ip, #25
 80098a2:	d804      	bhi.n	80098ae <_strtoul_l.isra.0+0xb6>
 80098a4:	3c57      	subs	r4, #87	@ 0x57
 80098a6:	e7e1      	b.n	800986c <_strtoul_l.isra.0+0x74>
 80098a8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80098ac:	e7eb      	b.n	8009886 <_strtoul_l.isra.0+0x8e>
 80098ae:	1c73      	adds	r3, r6, #1
 80098b0:	d106      	bne.n	80098c0 <_strtoul_l.isra.0+0xc8>
 80098b2:	2322      	movs	r3, #34	@ 0x22
 80098b4:	f8ce 3000 	str.w	r3, [lr]
 80098b8:	4630      	mov	r0, r6
 80098ba:	b932      	cbnz	r2, 80098ca <_strtoul_l.isra.0+0xd2>
 80098bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098c0:	b107      	cbz	r7, 80098c4 <_strtoul_l.isra.0+0xcc>
 80098c2:	4240      	negs	r0, r0
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	d0f9      	beq.n	80098bc <_strtoul_l.isra.0+0xc4>
 80098c8:	b106      	cbz	r6, 80098cc <_strtoul_l.isra.0+0xd4>
 80098ca:	1e69      	subs	r1, r5, #1
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	e7f5      	b.n	80098bc <_strtoul_l.isra.0+0xc4>
 80098d0:	08009d91 	.word	0x08009d91

080098d4 <_strtoul_r>:
 80098d4:	f7ff bf90 	b.w	80097f8 <_strtoul_l.isra.0>

080098d8 <__ascii_wctomb>:
 80098d8:	4603      	mov	r3, r0
 80098da:	4608      	mov	r0, r1
 80098dc:	b141      	cbz	r1, 80098f0 <__ascii_wctomb+0x18>
 80098de:	2aff      	cmp	r2, #255	@ 0xff
 80098e0:	d904      	bls.n	80098ec <__ascii_wctomb+0x14>
 80098e2:	228a      	movs	r2, #138	@ 0x8a
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098ea:	4770      	bx	lr
 80098ec:	700a      	strb	r2, [r1, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	4770      	bx	lr
	...

080098f4 <fiprintf>:
 80098f4:	b40e      	push	{r1, r2, r3}
 80098f6:	b503      	push	{r0, r1, lr}
 80098f8:	4601      	mov	r1, r0
 80098fa:	ab03      	add	r3, sp, #12
 80098fc:	4805      	ldr	r0, [pc, #20]	@ (8009914 <fiprintf+0x20>)
 80098fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009902:	6800      	ldr	r0, [r0, #0]
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	f7fe fc27 	bl	8008158 <_vfiprintf_r>
 800990a:	b002      	add	sp, #8
 800990c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009910:	b003      	add	sp, #12
 8009912:	4770      	bx	lr
 8009914:	20000018 	.word	0x20000018

08009918 <abort>:
 8009918:	b508      	push	{r3, lr}
 800991a:	2006      	movs	r0, #6
 800991c:	f000 f834 	bl	8009988 <raise>
 8009920:	2001      	movs	r0, #1
 8009922:	f7f7 fcd7 	bl	80012d4 <_exit>

08009926 <_malloc_usable_size_r>:
 8009926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800992a:	1f18      	subs	r0, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfbc      	itt	lt
 8009930:	580b      	ldrlt	r3, [r1, r0]
 8009932:	18c0      	addlt	r0, r0, r3
 8009934:	4770      	bx	lr

08009936 <_raise_r>:
 8009936:	291f      	cmp	r1, #31
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4605      	mov	r5, r0
 800993c:	460c      	mov	r4, r1
 800993e:	d904      	bls.n	800994a <_raise_r+0x14>
 8009940:	2316      	movs	r3, #22
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800994c:	b112      	cbz	r2, 8009954 <_raise_r+0x1e>
 800994e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009952:	b94b      	cbnz	r3, 8009968 <_raise_r+0x32>
 8009954:	4628      	mov	r0, r5
 8009956:	f000 f831 	bl	80099bc <_getpid_r>
 800995a:	4622      	mov	r2, r4
 800995c:	4601      	mov	r1, r0
 800995e:	4628      	mov	r0, r5
 8009960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009964:	f000 b818 	b.w	8009998 <_kill_r>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d00a      	beq.n	8009982 <_raise_r+0x4c>
 800996c:	1c59      	adds	r1, r3, #1
 800996e:	d103      	bne.n	8009978 <_raise_r+0x42>
 8009970:	2316      	movs	r3, #22
 8009972:	6003      	str	r3, [r0, #0]
 8009974:	2001      	movs	r0, #1
 8009976:	e7e7      	b.n	8009948 <_raise_r+0x12>
 8009978:	2100      	movs	r1, #0
 800997a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800997e:	4620      	mov	r0, r4
 8009980:	4798      	blx	r3
 8009982:	2000      	movs	r0, #0
 8009984:	e7e0      	b.n	8009948 <_raise_r+0x12>
	...

08009988 <raise>:
 8009988:	4b02      	ldr	r3, [pc, #8]	@ (8009994 <raise+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f7ff bfd2 	b.w	8009936 <_raise_r>
 8009992:	bf00      	nop
 8009994:	20000018 	.word	0x20000018

08009998 <_kill_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_kill_r+0x20>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	602b      	str	r3, [r5, #0]
 80099a6:	f7f7 fc85 	bl	80012b4 <_kill>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d102      	bne.n	80099b4 <_kill_r+0x1c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	b103      	cbz	r3, 80099b4 <_kill_r+0x1c>
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	bd38      	pop	{r3, r4, r5, pc}
 80099b6:	bf00      	nop
 80099b8:	20000408 	.word	0x20000408

080099bc <_getpid_r>:
 80099bc:	f7f7 bc72 	b.w	80012a4 <_getpid>

080099c0 <_init>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr

080099cc <_fini>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr
