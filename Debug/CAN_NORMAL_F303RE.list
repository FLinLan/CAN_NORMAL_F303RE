
CAN_NORMAL_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009ca0  08009ca0  0000aca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a174  0800a174  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a174  0800a174  0000b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a17c  0800a17c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a17c  0800a17c  0000b17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a180  0800a180  0000b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a184  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be62  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bcf  00000000  00000000  00018066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  00019c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ae  00000000  00000000  0001a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f3f  00000000  00000000  0001abae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae5f  00000000  00000000  0003baed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e97  00000000  00000000  0004694c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b7e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  0010b828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010f3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c88 	.word	0x08009c88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009c88 	.word	0x08009c88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d0c:	1d39      	adds	r1, r7, #4
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	2201      	movs	r2, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <__io_putchar+0x20>)
 8000d16:	f003 f8f3 	bl	8003f00 <HAL_UART_Transmit>
  return ch;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000218 	.word	0x20000218

08000d28 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <__io_getchar+0x38>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2208      	movs	r2, #8
 8000d38:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d3a:	1df9      	adds	r1, r7, #7
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d40:	2201      	movs	r2, #1
 8000d42:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <__io_getchar+0x38>)
 8000d44:	f003 f965 	bl	8004012 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <__io_getchar+0x38>)
 8000d52:	f003 f8d5 	bl	8003f00 <HAL_UART_Transmit>
  return ch;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000218 	.word	0x20000218

08000d64 <floatToUpperBytes>:
 *  uint8_t* byteArr: Array of bytes with size of 8
 *
 * Function:
 * 	converts a 4 byte float value and fill in bytes 0-3 in an 8 bytes array in little endian
*/
void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d6e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <motorCalibration>:
  } u;
  u.var = val;
  memcpy(byteArr + 4, u.buf, sizeof(float)); // Write to bytes 4–7
}

void motorCalibration(CAN_TxHeaderTypeDef TxHeader) {
 8000d88:	b084      	sub	sp, #16
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	f107 0c10 	add.w	ip, r7, #16
 8000d94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t axisState[8];
	TxHeader.StdId = (NODE_ID << 5) | 0x07;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]

	axisState[0] = 0x03; // FULL_CALIBRATION_SEQUENCE
 8000da8:	2303      	movs	r3, #3
 8000daa:	703b      	strb	r3, [r7, #0]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, axisState, &TxMailbox);
 8000dac:	463a      	mov	r2, r7
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <motorCalibration+0x40>)
 8000db0:	f107 0110 	add.w	r1, r7, #16
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <motorCalibration+0x44>)
 8000db6:	f000 fe22 	bl	80019fe <HAL_CAN_AddTxMessage>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4770      	bx	lr
 8000dc8:	200002c0 	.word	0x200002c0
 8000dcc:	200001f0 	.word	0x200001f0

08000dd0 <setPositionCommand>:

void setPositionCommand(float position) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Set Position Mode
    memset(TxData, 0, sizeof(TxData));
 8000dda:	2208      	movs	r2, #8
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4823      	ldr	r0, [pc, #140]	@ (8000e6c <setPositionCommand+0x9c>)
 8000de0:	f004 ff24 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x0B;
 8000de4:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <setPositionCommand+0xa0>)
 8000de6:	220b      	movs	r2, #11
 8000de8:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <setPositionCommand+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <setPositionCommand+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <setPositionCommand+0xa0>)
 8000df8:	2208      	movs	r2, #8
 8000dfa:	611a      	str	r2, [r3, #16]

    TxData[0] = 0x01; // InputMode.PASSTHROUGH
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <setPositionCommand+0x9c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
    TxData[4] = 0x03; // ControlMode.POSITION_CONTROL
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	711a      	strb	r2, [r3, #4]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <setPositionCommand+0xa4>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e0c:	4918      	ldr	r1, [pc, #96]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e0e:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <setPositionCommand+0xa8>)
 8000e10:	f000 fdf5 	bl	80019fe <HAL_CAN_AddTxMessage>

    // Set Closed Loop State
    memset(TxData, 0, sizeof(TxData));
 8000e14:	2208      	movs	r2, #8
 8000e16:	2100      	movs	r1, #0
 8000e18:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e1a:	f004 ff07 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x07;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
    TxData[0] = 0x08; // AXIS_STATE_CLOSED_LOOP_CONTROL
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	701a      	strb	r2, [r3, #0]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <setPositionCommand+0xa4>)
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e2e:	4910      	ldr	r1, [pc, #64]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <setPositionCommand+0xa8>)
 8000e32:	f000 fde4 	bl	80019fe <HAL_CAN_AddTxMessage>

    // Send Position Command
    memset(TxData, 0, sizeof(TxData));
 8000e36:	2208      	movs	r2, #8
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e3c:	f004 fef6 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x0C;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	611a      	str	r2, [r3, #16]
    floatToUpperBytes(position, TxData);
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e52:	f7ff ff87 	bl	8000d64 <floatToUpperBytes>
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <setPositionCommand+0xa4>)
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <setPositionCommand+0x9c>)
 8000e5a:	4905      	ldr	r1, [pc, #20]	@ (8000e70 <setPositionCommand+0xa0>)
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <setPositionCommand+0xa8>)
 8000e5e:	f000 fdce 	bl	80019fe <HAL_CAN_AddTxMessage>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200002b8 	.word	0x200002b8
 8000e70:	200002a0 	.word	0x200002a0
 8000e74:	200002c0 	.word	0x200002c0
 8000e78:	200001f0 	.word	0x200001f0

08000e7c <setVelocityCommand>:

void setVelocityCommand(float velocity) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	ed87 0a01 	vstr	s0, [r7, #4]
    // Set Velocity Mode
    memset(TxData, 0, sizeof(TxData));
 8000e86:	2208      	movs	r2, #8
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4823      	ldr	r0, [pc, #140]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000e8c:	f004 fece 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x0B;
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000e92:	220b      	movs	r2, #11
 8000e94:	601a      	str	r2, [r3, #0]
    TxHeader.IDE = CAN_ID_STD;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	611a      	str	r2, [r3, #16]

    TxData[0] = 0x02; // InputMode.PASSTHROUGH
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
    TxData[4] = 0x01; // ControlMode.VELOCITY_CONTROL
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	711a      	strb	r2, [r3, #4]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <setVelocityCommand+0xa4>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000eb8:	4918      	ldr	r1, [pc, #96]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000eba:	481a      	ldr	r0, [pc, #104]	@ (8000f24 <setVelocityCommand+0xa8>)
 8000ebc:	f000 fd9f 	bl	80019fe <HAL_CAN_AddTxMessage>

    // Set Closed Loop State
    memset(TxData, 0, sizeof(TxData));
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000ec6:	f004 feb1 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x07;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
    TxData[0] = 0x08; // AXIS_STATE_CLOSED_LOOP_CONTROL
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	701a      	strb	r2, [r3, #0]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <setVelocityCommand+0xa4>)
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000eda:	4910      	ldr	r1, [pc, #64]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <setVelocityCommand+0xa8>)
 8000ede:	f000 fd8e 	bl	80019fe <HAL_CAN_AddTxMessage>

    // Send Velocity Command
    memset(TxData, 0, sizeof(TxData));
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000ee8:	f004 fea0 	bl	8005c2c <memset>
    TxHeader.StdId = (NODE_ID << 5) | 0x0D;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000eee:	220d      	movs	r2, #13
 8000ef0:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	611a      	str	r2, [r3, #16]
    floatToUpperBytes(velocity, TxData);
 8000ef8:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8000efe:	f7ff ff31 	bl	8000d64 <floatToUpperBytes>
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <setVelocityCommand+0xa4>)
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <setVelocityCommand+0x9c>)
 8000f06:	4905      	ldr	r1, [pc, #20]	@ (8000f1c <setVelocityCommand+0xa0>)
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <setVelocityCommand+0xa8>)
 8000f0a:	f000 fd78 	bl	80019fe <HAL_CAN_AddTxMessage>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002b8 	.word	0x200002b8
 8000f1c:	200002a0 	.word	0x200002a0
 8000f20:	200002c0 	.word	0x200002c0
 8000f24:	200001f0 	.word	0x200001f0

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 fbc1 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f891 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 f953 	bl	80011e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 f921 	bl	8001180 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000f3e:	f000 f8e9 	bl	8001114 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000f42:	483c      	ldr	r0, [pc, #240]	@ (8001034 <main+0x10c>)
 8000f44:	f000 fd17 	bl	8001976 <HAL_CAN_Start>
  setvbuf(stdin, NULL, _IONBF, 0); // for scanf setup, avoiding errors in syscalls.c
 8000f48:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <main+0x110>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6858      	ldr	r0, [r3, #4]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2202      	movs	r2, #2
 8000f52:	2100      	movs	r1, #0
 8000f54:	f004 fcbc 	bl	80058d0 <setvbuf>

  int cmd_id = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  int dlc = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  float value = 0.0;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  // motorCalibration(TxHeader); // calibrate the motor for one time


  while (1)
  {
	if (scanf("%x", &cmd_id) == 'z') {
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4833      	ldr	r0, [pc, #204]	@ (800103c <main+0x114>)
 8000f6e:	f004 fc9d 	bl	80058ac <iscanf>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f76:	d10d      	bne.n	8000f94 <main+0x6c>
		printf("Full Calibration \r\n");
 8000f78:	4831      	ldr	r0, [pc, #196]	@ (8001040 <main+0x118>)
 8000f7a:	f004 fc8f 	bl	800589c <puts>
		motorCalibration(TxHeader);
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <main+0x11c>)
 8000f80:	466c      	mov	r4, sp
 8000f82:	f103 0210 	add.w	r2, r3, #16
 8000f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f90:	f7ff fefa 	bl	8000d88 <motorCalibration>
	}

	if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	f107 0208 	add.w	r2, r7, #8
 8000f9a:	f107 010c 	add.w	r1, r7, #12
 8000f9e:	482a      	ldr	r0, [pc, #168]	@ (8001048 <main+0x120>)
 8000fa0:	f004 fc84 	bl	80058ac <iscanf>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d1dd      	bne.n	8000f66 <main+0x3e>
	{
		printf("packet sent: CMD:0x%x, DLC:%d, VALUE:%f \r\n", cmd_id, dlc, value);
 8000faa:	68fc      	ldr	r4, [r7, #12]
 8000fac:	68bd      	ldr	r5, [r7, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fad1 	bl	8000558 <__aeabi_f2d>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	e9cd 2300 	strd	r2, r3, [sp]
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	4822      	ldr	r0, [pc, #136]	@ (800104c <main+0x124>)
 8000fc4:	f004 fc02 	bl	80057cc <iprintf>
		memset(TxData, 0, sizeof(TxData));
 8000fc8:	2208      	movs	r2, #8
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4820      	ldr	r0, [pc, #128]	@ (8001050 <main+0x128>)
 8000fce:	f004 fe2d 	bl	8005c2c <memset>

	      switch (cmd_id) {
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b0c      	cmp	r3, #12
 8000fd6:	d002      	beq.n	8000fde <main+0xb6>
 8000fd8:	2b0d      	cmp	r3, #13
 8000fda:	d007      	beq.n	8000fec <main+0xc4>
	              break;
	          case 0x0d: // Velocity command
	              setVelocityCommand(value);
	              break;
	          default:
	              break;
 8000fdc:	e00d      	b.n	8000ffa <main+0xd2>
	              setPositionCommand(value);
 8000fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	f7ff fef3 	bl	8000dd0 <setPositionCommand>
	              break;
 8000fea:	e006      	b.n	8000ffa <main+0xd2>
	              setVelocityCommand(value);
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	f7ff ff42 	bl	8000e7c <setVelocityCommand>
	              break;
 8000ff8:	bf00      	nop
	    }

		TxHeader.StdId = (NODE_ID << 5) | cmd_id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <main+0x11c>)
 8001000:	601a      	str	r2, [r3, #0]
		TxHeader.IDE = CAN_ID_STD;
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <main+0x11c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <main+0x11c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = dlc;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	461a      	mov	r2, r3
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <main+0x11c>)
 8001014:	611a      	str	r2, [r3, #16]

		// example usage: "0x0D 8 2.0" VELOCITY_MODE with DLC = 8 and spinning at INPUT_VEL 2 rev/s
		floatToUpperBytes(value, TxData); // setting bytes 0-3
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <main+0x128>)
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	f7ff fea0 	bl	8000d64 <floatToUpperBytes>
		//		floatToLowerBytes(lowerVal, TxData); // setting bytes 4-7
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <main+0x12c>)
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <main+0x128>)
 8001028:	4906      	ldr	r1, [pc, #24]	@ (8001044 <main+0x11c>)
 800102a:	4802      	ldr	r0, [pc, #8]	@ (8001034 <main+0x10c>)
 800102c:	f000 fce7 	bl	80019fe <HAL_CAN_AddTxMessage>
	if (scanf("%x", &cmd_id) == 'z') {
 8001030:	e799      	b.n	8000f66 <main+0x3e>
 8001032:	bf00      	nop
 8001034:	200001f0 	.word	0x200001f0
 8001038:	20000018 	.word	0x20000018
 800103c:	08009ca0 	.word	0x08009ca0
 8001040:	08009ca4 	.word	0x08009ca4
 8001044:	200002a0 	.word	0x200002a0
 8001048:	08009cb8 	.word	0x08009cb8
 800104c:	08009cc4 	.word	0x08009cc4
 8001050:	200002b8 	.word	0x200002b8
 8001054:	200002c0 	.word	0x200002c0

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0a6      	sub	sp, #152	@ 0x98
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001062:	2228      	movs	r2, #40	@ 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 fde0 	bl	8005c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2258      	movs	r2, #88	@ 0x58
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fdd2 	bl	8005c2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001090:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001092:	2301      	movs	r3, #1
 8001094:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fa82 	bl	80025c0 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010c2:	f000 f8fb 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fa90 	bl	8003608 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ee:	f000 f8e5 	bl	80012bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fc95 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001108:	f000 f8d8 	bl	80012bc <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3798      	adds	r7, #152	@ 0x98
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_CAN_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	@ (800117c <MX_CAN_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_CAN_Init+0x64>)
 8001120:	2208      	movs	r2, #8
 8001122:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_CAN_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_CAN_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_CAN_Init+0x64>)
 8001132:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8001136:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_CAN_Init+0x64>)
 800113a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800113e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <MX_CAN_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_CAN_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_CAN_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_CAN_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <MX_CAN_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_CAN_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_CAN_Init+0x64>)
 8001166:	f000 fb0b 	bl	8001780 <HAL_CAN_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001170:	f000 f8a4 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001f0 	.word	0x200001f0
 800117c:	40006400 	.word	0x40006400

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <MX_USART2_UART_Init+0x5c>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011c4:	f002 fe4e 	bl	8003e64 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 f875 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000218 	.word	0x20000218
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 80011fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	4b29      	ldr	r3, [pc, #164]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a28      	ldr	r2, [pc, #160]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a22      	ldr	r2, [pc, #136]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	6153      	str	r3, [r2, #20]
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001248:	6153      	str	r3, [r2, #20]
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_GPIO_Init+0xd4>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2120      	movs	r1, #32
 800125a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125e:	f001 f973 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001268:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <MX_GPIO_Init+0xd8>)
 800127a:	f000 ffdb 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800127e:	2320      	movs	r3, #32
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f000 ffcc 	bl	8002234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2028      	movs	r0, #40	@ 0x28
 80012a2:	f000 ff90 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a6:	2028      	movs	r0, #40	@ 0x28
 80012a8:	f000 ffa9 	bl	80021fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000800 	.word	0x48000800

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x44>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x44>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_MspInit+0x44>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012fe:	2007      	movs	r0, #7
 8001300:	f000 ff56 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <HAL_CAN_MspInit+0x90>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d131      	bne.n	8001396 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a1b      	ldr	r2, [pc, #108]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 8001338:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_CAN_MspInit+0x94>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001362:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001374:	2309      	movs	r3, #9
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f000 ff57 	bl	8002234 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2014      	movs	r0, #20
 800138c:	f000 ff1b 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001390:	2014      	movs	r0, #20
 8001392:	f000 ff34 	bl	80021fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40006400 	.word	0x40006400
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <HAL_UART_MspInit+0x7c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d128      	bne.n	800141c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a16      	ldr	r2, [pc, #88]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ec:	6153      	str	r3, [r2, #20]
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <HAL_UART_MspInit+0x80>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140a:	2307      	movs	r3, #7
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f000 ff0c 	bl	8002234 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40004400 	.word	0x40004400
 8001428:	40021000 	.word	0x40021000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 f95d 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001492:	f000 fb84 	bl	8001b9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f0 	.word	0x200001f0

080014a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014a8:	f001 f866 	bl	8002578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_kill>:

int _kill(int pid, int sig)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ca:	f004 fc01 	bl	8005cd0 <__errno>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2216      	movs	r2, #22
 80014d2:	601a      	str	r2, [r3, #0]
  return -1;
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_exit>:

void _exit (int status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ffe7 	bl	80014c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <_exit+0x12>

080014f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e00a      	b.n	800151e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001508:	f7ff fc0e 	bl	8000d28 <__io_getchar>
 800150c:	4601      	mov	r1, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	b2ca      	uxtb	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf0      	blt.n	8001508 <_read+0x12>
  }

  return len;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e009      	b.n	8001556 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbda 	bl	8000d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	dbf1      	blt.n	8001542 <_write+0x12>
  }
  return len;
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_close>:

int _close(int file)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001590:	605a      	str	r2, [r3, #4]
  return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_isatty>:

int _isatty(int file)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b085      	sub	sp, #20
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f004 fb66 	bl	8005cd0 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20010000 	.word	0x20010000
 8001630:	00000400 	.word	0x00000400
 8001634:	200002c4 	.word	0x200002c4
 8001638:	20000418 	.word	0x20000418

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f004 fb25 	bl	8005cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff fc49 	bl	8000f28 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016a4:	0800a184 	.word	0x0800a184
  ldr r2, =_sbss
 80016a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016ac:	20000418 	.word	0x20000418

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fd73 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fdfa 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd8b 	bl	800221a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800171c:	f000 fd53 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000008 	.word	0x20000008
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	200002c8 	.word	0x200002c8

08001768 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;  
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200002c8 	.word	0x200002c8

08001780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ed      	b.n	800196e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fdb6 	bl	8001310 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff ffd8 	bl	8001768 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ba:	e012      	b.n	80017e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017bc:	f7ff ffd4 	bl	8001768 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d90b      	bls.n	80017e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0c5      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0e5      	beq.n	80017bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0202 	bic.w	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff ffb2 	bl	8001768 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001806:	e012      	b.n	800182e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001808:	f7ff ffae 	bl	8001768 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d90b      	bls.n	800182e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e09f      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e5b      	ldrb	r3, [r3, #25]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800188e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e9b      	ldrb	r3, [r3, #26]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0220 	bic.w	r2, r2, #32
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7edb      	ldrb	r3, [r3, #27]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0210 	bic.w	r2, r2, #16
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0210 	orr.w	r2, r2, #16
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7f1b      	ldrb	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0208 	bic.w	r2, r2, #8
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7f5b      	ldrb	r3, [r3, #29]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e007      	b.n	8001938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	ea42 0103 	orr.w	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12e      	bne.n	80019e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a2:	f7ff fee1 	bl	8001768 <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a8:	e012      	b.n	80019d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019aa:	f7ff fedd 	bl	8001768 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d90b      	bls.n	80019d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e5      	bne.n	80019aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e006      	b.n	80019f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
  }
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b089      	sub	sp, #36	@ 0x24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d003      	beq.n	8001a2a <HAL_CAN_AddTxMessage+0x2c>
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 80ad 	bne.w	8001b84 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8095 	beq.w	8001b74 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	0e1b      	lsrs	r3, r3, #24
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a54:	2201      	movs	r2, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10d      	bne.n	8001a82 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3318      	adds	r3, #24
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e00f      	b.n	8001aa2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a92:	68f9      	ldr	r1, [r7, #12]
 8001a94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3318      	adds	r3, #24
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	440b      	add	r3, r1
 8001aa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	7d1b      	ldrb	r3, [r3, #20]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d111      	bne.n	8001ae2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	440b      	add	r3, r1
 8001ade:	3304      	adds	r3, #4
 8001ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3306      	adds	r3, #6
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3305      	adds	r3, #5
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	3204      	adds	r2, #4
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	4610      	mov	r0, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	ea43 0200 	orr.w	r2, r3, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	061a      	lsls	r2, r3, #24
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4313      	orrs	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6811      	ldr	r1, [r2, #0]
 8001b40:	ea43 0200 	orr.w	r2, r3, r0
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3318      	adds	r3, #24
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e00e      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e006      	b.n	8001b92 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b08a      	sub	sp, #40	@ 0x28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d07c      	beq.n	8001cde <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d023      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f983 	bl	8001f0c <HAL_CAN_TxMailbox0CompleteCallback>
 8001c06:	e016      	b.n	8001c36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	e00c      	b.n	8001c36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2e:	e002      	b.n	8001c36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f989 	bl	8001f48 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d024      	beq.n	8001c8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f963 	bl	8001f20 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c5a:	e016      	b.n	8001c8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c6e:	e00c      	b.n	8001c8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c82:	e002      	b.n	8001c8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f969 	bl	8001f5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d024      	beq.n	8001cde <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f943 	bl	8001f34 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cae:	e016      	b.n	8001cde <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc2:	e00c      	b.n	8001cde <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd6:	e002      	b.n	8001cde <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f949 	bl	8001f70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00c      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2210      	movs	r2, #16
 8001d00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f93a 	bl	8001f98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f921 	bl	8001f84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00c      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2208      	movs	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f91c 	bl	8001fc0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f903 	bl	8001fac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f906 	bl	8001fd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f8ff 	bl	8001fe8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d07b      	beq.n	8001eec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d072      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03e      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e6c:	2b60      	cmp	r3, #96	@ 0x60
 8001e6e:	d02b      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x32a>
 8001e70:	2b60      	cmp	r3, #96	@ 0x60
 8001e72:	d82e      	bhi.n	8001ed2 <HAL_CAN_IRQHandler+0x334>
 8001e74:	2b50      	cmp	r3, #80	@ 0x50
 8001e76:	d022      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x320>
 8001e78:	2b50      	cmp	r3, #80	@ 0x50
 8001e7a:	d82a      	bhi.n	8001ed2 <HAL_CAN_IRQHandler+0x334>
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d019      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x316>
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d826      	bhi.n	8001ed2 <HAL_CAN_IRQHandler+0x334>
 8001e84:	2b30      	cmp	r3, #48	@ 0x30
 8001e86:	d010      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x30c>
 8001e88:	2b30      	cmp	r3, #48	@ 0x30
 8001e8a:	d822      	bhi.n	8001ed2 <HAL_CAN_IRQHandler+0x334>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d002      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x2f8>
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d005      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e94:	e01d      	b.n	8001ed2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e9e:	e019      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea8:	e014      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f043 0320 	orr.w	r3, r3, #32
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb2:	e00f      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ebc:	e00a      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec6:	e005      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ed2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ee2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f87c 	bl	8001ffc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	@ 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	@ (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e160      	b.n	8002506 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8152 	beq.w	8002500 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d005      	beq.n	8002274 <HAL_GPIO_Init+0x40>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d130      	bne.n	80022d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022aa:	2201      	movs	r2, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 0201 	and.w	r2, r3, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d017      	beq.n	8002312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d123      	bne.n	8002366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	6939      	ldr	r1, [r7, #16]
 8002362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0203 	and.w	r2, r3, #3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80ac 	beq.w	8002500 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002524 <HAL_GPIO_Init+0x2f0>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002524 <HAL_GPIO_Init+0x2f0>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002524 <HAL_GPIO_Init+0x2f0>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023c0:	4a59      	ldr	r2, [pc, #356]	@ (8002528 <HAL_GPIO_Init+0x2f4>)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ea:	d025      	beq.n	8002438 <HAL_GPIO_Init+0x204>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a4f      	ldr	r2, [pc, #316]	@ (800252c <HAL_GPIO_Init+0x2f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01f      	beq.n	8002434 <HAL_GPIO_Init+0x200>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <HAL_GPIO_Init+0x2fc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d019      	beq.n	8002430 <HAL_GPIO_Init+0x1fc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_GPIO_Init+0x300>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1f8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x304>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4b      	ldr	r2, [pc, #300]	@ (800253c <HAL_GPIO_Init+0x308>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1f0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_GPIO_Init+0x30c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1ec>
 800241c:	2306      	movs	r3, #6
 800241e:	e00c      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002420:	2307      	movs	r3, #7
 8002422:	e00a      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002424:	2305      	movs	r3, #5
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002428:	2304      	movs	r3, #4
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x206>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x206>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244a:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_GPIO_Init+0x2f4>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <HAL_GPIO_Init+0x310>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800247c:	4a31      	ldr	r2, [pc, #196]	@ (8002544 <HAL_GPIO_Init+0x310>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002482:	4b30      	ldr	r3, [pc, #192]	@ (8002544 <HAL_GPIO_Init+0x310>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024a6:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_GPIO_Init+0x310>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ac:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <HAL_GPIO_Init+0x310>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <HAL_GPIO_Init+0x310>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_GPIO_Init+0x310>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024fa:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <HAL_GPIO_Init+0x310>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f ae97 	bne.w	8002244 <HAL_GPIO_Init+0x10>
  }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	48000c00 	.word	0x48000c00
 8002538:	48001000 	.word	0x48001000
 800253c:	48001400 	.word	0x48001400
 8002540:	48001800 	.word	0x48001800
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002564:	e002      	b.n	800256c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f806 	bl	80025a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f001 b80a 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8161 	beq.w	80028be <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025fc:	4bae      	ldr	r3, [pc, #696]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b04      	cmp	r3, #4
 8002606:	d00c      	beq.n	8002622 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002608:	4bab      	ldr	r3, [pc, #684]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d157      	bne.n	80026c4 <HAL_RCC_OscConfig+0x104>
 8002614:	4ba8      	ldr	r3, [pc, #672]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002620:	d150      	bne.n	80026c4 <HAL_RCC_OscConfig+0x104>
 8002622:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002626:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002636:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b3f      	cmp	r3, #63	@ 0x3f
 8002642:	d802      	bhi.n	800264a <HAL_RCC_OscConfig+0x8a>
 8002644:	4b9c      	ldr	r3, [pc, #624]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0xb6>
 800264a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800265e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002662:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002666:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002672:	4b91      	ldr	r3, [pc, #580]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800267a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800267e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800268a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8108 	beq.w	80028bc <HAL_RCC_OscConfig+0x2fc>
 80026ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 80ff 	bne.w	80028bc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f000 bf9b 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x124>
 80026d6:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a77      	ldr	r2, [pc, #476]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e036      	b.n	8002752 <HAL_RCC_OscConfig+0x192>
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x14e>
 80026f4:	4b70      	ldr	r3, [pc, #448]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6f      	ldr	r2, [pc, #444]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b6d      	ldr	r3, [pc, #436]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6c      	ldr	r2, [pc, #432]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e021      	b.n	8002752 <HAL_RCC_OscConfig+0x192>
 800270e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002712:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x17a>
 8002720:	4b65      	ldr	r3, [pc, #404]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a64      	ldr	r2, [pc, #400]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b62      	ldr	r3, [pc, #392]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a61      	ldr	r2, [pc, #388]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x192>
 800273a:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a5e      	ldr	r2, [pc, #376]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b5c      	ldr	r3, [pc, #368]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5b      	ldr	r2, [pc, #364]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 800274c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002750:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002756:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d054      	beq.n	800280c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f801 	bl	8001768 <HAL_GetTick>
 8002766:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fffc 	bl	8001768 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	@ 0x64
 800277a:	d902      	bls.n	8002782 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	f000 bf3c 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 8002782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002786:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002796:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80027a2:	d802      	bhi.n	80027aa <HAL_RCC_OscConfig+0x1ea>
 80027a4:	4b44      	ldr	r3, [pc, #272]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x216>
 80027aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80027be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027da:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80027de:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80027ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0b0      	beq.n	800276c <HAL_RCC_OscConfig+0x1ac>
 800280a:	e058      	b.n	80028be <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe ffac 	bl	8001768 <HAL_GetTick>
 8002810:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002816:	f7fe ffa7 	bl	8001768 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d902      	bls.n	800282c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	f000 bee7 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002840:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b3f      	cmp	r3, #63	@ 0x3f
 800284c:	d802      	bhi.n	8002854 <HAL_RCC_OscConfig+0x294>
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e015      	b.n	8002880 <HAL_RCC_OscConfig+0x2c0>
 8002854:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002858:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002868:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800286c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_RCC_OscConfig+0x2f8>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002884:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002888:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002894:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b0      	bne.n	8002816 <HAL_RCC_OscConfig+0x256>
 80028b4:	e003      	b.n	80028be <HAL_RCC_OscConfig+0x2fe>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 816d 	beq.w	8002bae <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d4:	4bcd      	ldr	r3, [pc, #820]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e0:	4bca      	ldr	r3, [pc, #808]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d16e      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
 80028ec:	4bc7      	ldr	r3, [pc, #796]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80028f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f8:	d167      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800290c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b3f      	cmp	r3, #63	@ 0x3f
 8002918:	d802      	bhi.n	8002920 <HAL_RCC_OscConfig+0x360>
 800291a:	4bbc      	ldr	r3, [pc, #752]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e013      	b.n	8002948 <HAL_RCC_OscConfig+0x388>
 8002920:	2302      	movs	r3, #2
 8002922:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002932:	2302      	movs	r3, #2
 8002934:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002938:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002944:	4bb1      	ldr	r3, [pc, #708]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	2202      	movs	r2, #2
 800294a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800294e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800295a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCC_OscConfig+0x3d0>
 800297a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d002      	beq.n	8002990 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f000 be35 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b9e      	ldr	r3, [pc, #632]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	21f8      	movs	r1, #248	@ 0xf8
 80029a6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80029ae:	fa91 f1a1 	rbit	r1, r1
 80029b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80029b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029ba:	fab1 f181 	clz	r1, r1
 80029be:	b2c9      	uxtb	r1, r1
 80029c0:	408b      	lsls	r3, r1
 80029c2:	4992      	ldr	r1, [pc, #584]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	e0f1      	b.n	8002bae <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8083 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x522>
 80029dc:	2301      	movs	r3, #1
 80029de:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80029ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	461a      	mov	r2, r3
 8002a04:	2301      	movs	r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe feae 	bl	8001768 <HAL_GetTick>
 8002a0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fea9 	bl	8001768 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	f000 bde9 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002a3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a46:	d802      	bhi.n	8002a4e <HAL_RCC_OscConfig+0x48e>
 8002a48:	4b70      	ldr	r3, [pc, #448]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e013      	b.n	8002a76 <HAL_RCC_OscConfig+0x4b6>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a60:	2302      	movs	r3, #2
 8002a62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a66:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a72:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	2202      	movs	r2, #2
 8002a78:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002a7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002a88:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0b4      	beq.n	8002a12 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b58      	ldr	r3, [pc, #352]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	21f8      	movs	r1, #248	@ 0xf8
 8002abe:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002ac6:	fa91 f1a1 	rbit	r1, r1
 8002aca:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002ace:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ad2:	fab1 f181 	clz	r1, r1
 8002ad6:	b2c9      	uxtb	r1, r1
 8002ad8:	408b      	lsls	r3, r1
 8002ada:	494c      	ldr	r1, [pc, #304]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e065      	b.n	8002bae <HAL_RCC_OscConfig+0x5ee>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002af4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fe2b 	bl	8001768 <HAL_GetTick>
 8002b12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fe26 	bl	8001768 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d902      	bls.n	8002b2e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	f000 bd66 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002b40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b4c:	d802      	bhi.n	8002b54 <HAL_RCC_OscConfig+0x594>
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0x5bc>
 8002b54:	2302      	movs	r3, #2
 8002b56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b78:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_RCC_OscConfig+0x64c>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002b82:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002b8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1b4      	bne.n	8002b18 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8119 	beq.w	8002df6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8082 	beq.w	8002cda <HAL_RCC_OscConfig+0x71a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_OscConfig+0x650>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fdb2 	bl	8001768 <HAL_GetTick>
 8002c04:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c08:	e00f      	b.n	8002c2a <HAL_RCC_OscConfig+0x66a>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fda8 	bl	8001768 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d902      	bls.n	8002c2a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	f000 bce8 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	4bb0      	ldr	r3, [pc, #704]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c96:	2102      	movs	r1, #2
 8002c98:	6019      	str	r1, [r3, #0]
 8002c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f1a3 	rbit	r1, r3
 8002ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cb0:	6019      	str	r1, [r3, #0]
  return result;
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d09d      	beq.n	8002c14 <HAL_RCC_OscConfig+0x654>
 8002cd8:	e08d      	b.n	8002df6 <HAL_RCC_OscConfig+0x836>
 8002cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cfc:	601a      	str	r2, [r3, #0]
  return result;
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d06:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b8f      	ldr	r3, [pc, #572]	@ (8002f50 <HAL_RCC_OscConfig+0x990>)
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fd24 	bl	8001768 <HAL_GetTick>
 8002d20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fd1f 	bl	8001768 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	f000 bc5f 	b.w	80035fa <HAL_RCC_OscConfig+0x103a>
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d44:	2202      	movs	r2, #2
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d68:	2202      	movs	r2, #2
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002da6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b68      	ldr	r3, [pc, #416]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002db4:	2102      	movs	r1, #2
 8002db6:	6019      	str	r1, [r3, #0]
 8002db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f1a3 	rbit	r1, r3
 8002dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002dce:	6019      	str	r1, [r3, #0]
  return result;
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d197      	bne.n	8002d26 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 819c 	beq.w	8003144 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	61d3      	str	r3, [r2, #28]
 8002e2a:	4b48      	ldr	r3, [pc, #288]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b41      	ldr	r3, [pc, #260]	@ (8002f54 <HAL_RCC_OscConfig+0x994>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11a      	bne.n	8002e8e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e58:	4b3e      	ldr	r3, [pc, #248]	@ (8002f54 <HAL_RCC_OscConfig+0x994>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f54 <HAL_RCC_OscConfig+0x994>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fc80 	bl	8001768 <HAL_GetTick>
 8002e68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e009      	b.n	8002e82 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe fc7b 	bl	8001768 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e3bb      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <HAL_RCC_OscConfig+0x994>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x8ec>
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	e035      	b.n	8002f18 <HAL_RCC_OscConfig+0x958>
 8002eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x916>
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	e020      	b.n	8002f18 <HAL_RCC_OscConfig+0x958>
 8002ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x940>
 8002ee6:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0x958>
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	@ (8002f4c <HAL_RCC_OscConfig+0x98c>)
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8085 	beq.w	8003034 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc1d 	bl	8001768 <HAL_GetTick>
 8002f2e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	e011      	b.n	8002f58 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fc18 	bl	8001768 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d907      	bls.n	8002f58 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e356      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	10908120 	.word	0x10908120
 8002f54:	40007000 	.word	0x40007000
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f60:	2202      	movs	r2, #2
 8002f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f76:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f80:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fa8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xa00>
 8002fba:	4b98      	ldr	r3, [pc, #608]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	e013      	b.n	8002fe8 <HAL_RCC_OscConfig+0xa28>
 8002fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fde:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	6011      	str	r1, [r2, #0]
 8002ff4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	fa92 f1a2 	rbit	r1, r2
 8003002:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003006:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800300a:	6011      	str	r1, [r2, #0]
  return result;
 800300c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003010:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fab2 f282 	clz	r2, r2
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f002 021f 	and.w	r2, r2, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d080      	beq.n	8002f34 <HAL_RCC_OscConfig+0x974>
 8003032:	e07d      	b.n	8003130 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003034:	f7fe fb98 	bl	8001768 <HAL_GetTick>
 8003038:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fb93 	bl	8001768 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e2d1      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 8003056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003066:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003074:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003082:	2202      	movs	r2, #2
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800308a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003098:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800309c:	601a      	str	r2, [r3, #0]
  return result;
 800309e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0xafe>
 80030b8:	4b58      	ldr	r3, [pc, #352]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	e013      	b.n	80030e6 <HAL_RCC_OscConfig+0xb26>
 80030be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030dc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	4b4e      	ldr	r3, [pc, #312]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030ee:	2102      	movs	r1, #2
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030f6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	fa92 f1a2 	rbit	r1, r2
 8003100:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003104:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003108:	6011      	str	r1, [r2, #0]
  return result;
 800310a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800310e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d186      	bne.n	800303e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003130:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b38      	ldr	r3, [pc, #224]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a37      	ldr	r2, [pc, #220]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003148:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8251 	beq.w	80035f8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	f000 820f 	beq.w	8003582 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b02      	cmp	r3, #2
 8003172:	f040 8165 	bne.w	8003440 <HAL_RCC_OscConfig+0xe80>
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800317e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003188:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003196:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800319a:	601a      	str	r2, [r3, #0]
  return result;
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	461a      	mov	r2, r3
 80031b8:	2300      	movs	r3, #0
 80031ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fad4 	bl	8001768 <HAL_GetTick>
 80031c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	e009      	b.n	80031da <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe facf 	bl	8001768 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e20f      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 80031da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031fe:	601a      	str	r2, [r3, #0]
  return result;
 8003200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003204:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003208:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b3f      	cmp	r3, #63	@ 0x3f
 8003212:	d805      	bhi.n	8003220 <HAL_RCC_OscConfig+0xc60>
 8003214:	4b01      	ldr	r3, [pc, #4]	@ (800321c <HAL_RCC_OscConfig+0xc5c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	e02a      	b.n	8003270 <HAL_RCC_OscConfig+0xcb0>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003224:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003232:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003240:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800324a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800324e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003258:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	fa93 f2a3 	rbit	r2, r3
 8003262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003266:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	4bca      	ldr	r3, [pc, #808]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003274:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003278:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800327c:	6011      	str	r1, [r2, #0]
 800327e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003282:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	fa92 f1a2 	rbit	r1, r2
 800328c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003290:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003294:	6011      	str	r1, [r2, #0]
  return result;
 8003296:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800329a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	fab2 f282 	clz	r2, r2
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f002 021f 	and.w	r2, r2, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f202 	lsl.w	r2, r1, r2
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d184      	bne.n	80031c6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032bc:	4bb6      	ldr	r3, [pc, #728]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	f023 020f 	bic.w	r2, r3, #15
 80032c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	49b1      	ldr	r1, [pc, #708]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80032d6:	4bb0      	ldr	r3, [pc, #704]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80032de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a19      	ldr	r1, [r3, #32]
 80032ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	49a7      	ldr	r1, [pc, #668]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
 80032fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003302:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003306:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003310:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003322:	601a      	str	r2, [r3, #0]
  return result;
 8003324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003328:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800332c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003338:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	2301      	movs	r3, #1
 8003342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fa10 	bl	8001768 <HAL_GetTick>
 8003348:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	e009      	b.n	8003362 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fa0b 	bl	8001768 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e14b      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 8003362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003366:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800336a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003374:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003382:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003386:	601a      	str	r2, [r3, #0]
  return result;
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b3f      	cmp	r3, #63	@ 0x3f
 800339a:	d802      	bhi.n	80033a2 <HAL_RCC_OscConfig+0xde2>
 800339c:	4b7e      	ldr	r3, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	e027      	b.n	80033f2 <HAL_RCC_OscConfig+0xe32>
 80033a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033f6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033fe:	6011      	str	r1, [r2, #0]
 8003400:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003404:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	fa92 f1a2 	rbit	r1, r2
 800340e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003412:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003416:	6011      	str	r1, [r2, #0]
  return result;
 8003418:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800341c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	fab2 f282 	clz	r2, r2
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f042 0220 	orr.w	r2, r2, #32
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	f002 021f 	and.w	r2, r2, #31
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d087      	beq.n	800334e <HAL_RCC_OscConfig+0xd8e>
 800343e:	e0db      	b.n	80035f8 <HAL_RCC_OscConfig+0x1038>
 8003440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003444:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003452:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003460:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003464:	601a      	str	r2, [r3, #0]
  return result;
 8003466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800346a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800346e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800347a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	2300      	movs	r3, #0
 8003484:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe f96f 	bl	8001768 <HAL_GetTick>
 800348a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe f96a 	bl	8001768 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0aa      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 80034a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b3f      	cmp	r3, #63	@ 0x3f
 80034dc:	d802      	bhi.n	80034e4 <HAL_RCC_OscConfig+0xf24>
 80034de:	4b2e      	ldr	r3, [pc, #184]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e027      	b.n	8003534 <HAL_RCC_OscConfig+0xf74>
 80034e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fa93 f2a3 	rbit	r2, r3
 8003500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003504:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCC_OscConfig+0xfd8>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003538:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800353c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003540:	6011      	str	r1, [r2, #0]
 8003542:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003546:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fa92 f1a2 	rbit	r1, r2
 8003550:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003554:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003558:	6011      	str	r1, [r2, #0]
  return result;
 800355a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800355e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d187      	bne.n	8003490 <HAL_RCC_OscConfig+0xed0>
 8003580:	e03a      	b.n	80035f8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003586:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d104      	bne.n	800359c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e031      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b19      	ldr	r3, [pc, #100]	@ (8003604 <HAL_RCC_OscConfig+0x1044>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <HAL_RCC_OscConfig+0x1044>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035b0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80035b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d117      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035c8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d8:	429a      	cmp	r2, r3
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035e0:	f003 020f 	and.w	r2, r3, #15
 80035e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b09e      	sub	sp, #120	@ 0x78
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e154      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b89      	ldr	r3, [pc, #548]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d910      	bls.n	8003650 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b86      	ldr	r3, [pc, #536]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4984      	ldr	r1, [pc, #528]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b82      	ldr	r3, [pc, #520]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e13c      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b7b      	ldr	r3, [pc, #492]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4978      	ldr	r1, [pc, #480]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80cd 	beq.w	8003816 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d137      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xec>
 8003684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003688:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b3f      	cmp	r3, #63	@ 0x3f
 800369c:	d802      	bhi.n	80036a4 <HAL_RCC_ClockConfig+0x9c>
 800369e:	4b6b      	ldr	r3, [pc, #428]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e00f      	b.n	80036c4 <HAL_RCC_ClockConfig+0xbc>
 80036a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80036b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80036b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036c0:	4b62      	ldr	r3, [pc, #392]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036cc:	fa92 f2a2 	rbit	r2, r2
 80036d0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036d4:	fab2 f282 	clz	r2, r2
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f042 0220 	orr.w	r2, r2, #32
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f002 021f 	and.w	r2, r2, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d171      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0ea      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d137      	bne.n	800376c <HAL_RCC_ClockConfig+0x164>
 80036fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003700:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800370a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b3f      	cmp	r3, #63	@ 0x3f
 8003714:	d802      	bhi.n	800371c <HAL_RCC_ClockConfig+0x114>
 8003716:	4b4d      	ldr	r3, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_RCC_ClockConfig+0x134>
 800371c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	647b      	str	r3, [r7, #68]	@ 0x44
 800372a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003738:	4b44      	ldr	r3, [pc, #272]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003740:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003742:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800374a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d135      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ae      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
 800376c:	2302      	movs	r3, #2
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b3f      	cmp	r3, #63	@ 0x3f
 8003782:	d802      	bhi.n	800378a <HAL_RCC_ClockConfig+0x182>
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	e00d      	b.n	80037a6 <HAL_RCC_ClockConfig+0x19e>
 800378a:	2302      	movs	r3, #2
 800378c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2202      	movs	r2, #2
 80037a8:	61ba      	str	r2, [r7, #24]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	fa92 f2a2 	rbit	r2, r2
 80037b0:	617a      	str	r2, [r7, #20]
  return result;
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	fab2 f282 	clz	r2, r2
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f042 0220 	orr.w	r2, r2, #32
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f002 021f 	and.w	r2, r2, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e07a      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 0203 	bic.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	491a      	ldr	r1, [pc, #104]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e6:	f7fd ffbf 	bl	8001768 <HAL_GetTick>
 80037ea:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ee:	f7fd ffbb 	bl	8001768 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e062      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_RCC_ClockConfig+0x244>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 020c 	and.w	r2, r3, #12
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	429a      	cmp	r2, r3
 8003814:	d1eb      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d215      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0207 	bic.w	r2, r3, #7
 800382c:	4906      	ldr	r1, [pc, #24]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003834:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <HAL_RCC_ClockConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d006      	beq.n	8003850 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e041      	b.n	80038ca <HAL_RCC_ClockConfig+0x2c2>
 8003846:	bf00      	nop
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b1d      	ldr	r3, [pc, #116]	@ (80038d4 <HAL_RCC_ClockConfig+0x2cc>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	491a      	ldr	r1, [pc, #104]	@ (80038d4 <HAL_RCC_ClockConfig+0x2cc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <HAL_RCC_ClockConfig+0x2cc>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4912      	ldr	r1, [pc, #72]	@ (80038d4 <HAL_RCC_ClockConfig+0x2cc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800388e:	f000 f829 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003892:	4601      	mov	r1, r0
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <HAL_RCC_ClockConfig+0x2cc>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800389c:	22f0      	movs	r2, #240	@ 0xf0
 800389e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	60fa      	str	r2, [r7, #12]
  return result;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	40d3      	lsrs	r3, r2
 80038b2:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x2d0>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <HAL_RCC_ClockConfig+0x2d4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <HAL_RCC_ClockConfig+0x2d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd ff0c 	bl	80016e0 <HAL_InitTick>
  
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3778      	adds	r7, #120	@ 0x78
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	08009cfc 	.word	0x08009cfc
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x30>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x36>
 8003912:	e029      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	e029      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0c9b      	lsrs	r3, r3, #18
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <HAL_RCC_GetSysClockFreq+0x98>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003940:	4a0f      	ldr	r2, [pc, #60]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f2f3 	udiv	r2, r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e007      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003952:	4a0b      	ldr	r2, [pc, #44]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	fbb2 f2f3 	udiv	r2, r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x9c>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	08009d14 	.word	0x08009d14
 8003988:	08009d24 	.word	0x08009d24

0800398c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039aa:	f7ff ffef 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ae:	4601      	mov	r1, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	603a      	str	r2, [r7, #0]
  return result;
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08009d0c 	.word	0x08009d0c

080039e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039ee:	f7ff ffcd 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80039fc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	fa92 f2a2 	rbit	r2, r2
 8003a08:	603a      	str	r2, [r7, #0]
  return result;
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	fab2 f282 	clz	r2, r2
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	40d3      	lsrs	r3, r2
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08009d0c 	.word	0x08009d0c

08003a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b092      	sub	sp, #72	@ 0x48
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80d2 	beq.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a50:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10e      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	61d3      	str	r3, [r2, #28]
 8003a68:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7fd fe69 	bl	8001768 <HAL_GetTick>
 8003a96:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fd fe65 	bl	8001768 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	@ 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1d4      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab8:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8082 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d07a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	461a      	mov	r2, r3
 8003b02:	2301      	movs	r3, #1
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b2a:	4a17      	ldr	r2, [pc, #92]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d049      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fe15 	bl	8001768 <HAL_GetTick>
 8003b3e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fd fe11 	bl	8001768 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e17e      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b64:	2302      	movs	r3, #2
 8003b66:	623b      	str	r3, [r7, #32]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b82:	4b01      	ldr	r3, [pc, #4]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	e00d      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	10908100 	.word	0x10908100
 8003b94:	2302      	movs	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	613a      	str	r2, [r7, #16]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	fa92 f2a2 	rbit	r2, r2
 8003bae:	60fa      	str	r2, [r7, #12]
  return result;
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	fab2 f282 	clz	r2, r2
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	f002 021f 	and.w	r2, r2, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0b9      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bce:	4b8f      	ldr	r3, [pc, #572]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	498c      	ldr	r1, [pc, #560]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003be0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4a87      	ldr	r2, [pc, #540]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c00:	4b82      	ldr	r3, [pc, #520]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	f023 0203 	bic.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	497f      	ldr	r1, [pc, #508]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4978      	ldr	r1, [pc, #480]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3c:	4b73      	ldr	r3, [pc, #460]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4970      	ldr	r1, [pc, #448]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	f023 0210 	bic.w	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4969      	ldr	r1, [pc, #420]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	4961      	ldr	r1, [pc, #388]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c96:	4b5d      	ldr	r3, [pc, #372]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	f023 0220 	bic.w	r2, r3, #32
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	495a      	ldr	r1, [pc, #360]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb4:	4b55      	ldr	r3, [pc, #340]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	4952      	ldr	r1, [pc, #328]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	494b      	ldr	r1, [pc, #300]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cf0:	4b46      	ldr	r3, [pc, #280]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4943      	ldr	r1, [pc, #268]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	493c      	ldr	r1, [pc, #240]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d2c:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	4934      	ldr	r1, [pc, #208]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d4a:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	492d      	ldr	r1, [pc, #180]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	4925      	ldr	r1, [pc, #148]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d86:	4b21      	ldr	r3, [pc, #132]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	491e      	ldr	r1, [pc, #120]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003da4:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	4916      	ldr	r1, [pc, #88]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003dc2:	4b12      	ldr	r3, [pc, #72]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	490f      	ldr	r1, [pc, #60]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dec:	4907      	ldr	r1, [pc, #28]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003dfe:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	4913      	ldr	r1, [pc, #76]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e30:	490b      	ldr	r1, [pc, #44]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	4904      	ldr	r1, [pc, #16]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3748      	adds	r7, #72	@ 0x48
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e040      	b.n	8003ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fa8e 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fb4e 	bl	800454c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f977 	bl	80041a4 <UART_SetConfig>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01b      	b.n	8003ef8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fbcd 	bl	8004690 <UART_CheckIdleState>
 8003ef6:	4603      	mov	r3, r0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	@ 0x28
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d177      	bne.n	8004008 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Transmit+0x24>
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e070      	b.n	800400a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2221      	movs	r2, #33	@ 0x21
 8003f34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f36:	f7fd fc17 	bl	8001768 <HAL_GetTick>
 8003f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	88fa      	ldrh	r2, [r7, #6]
 8003f48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f54:	d108      	bne.n	8003f68 <HAL_UART_Transmit+0x68>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f70:	e02f      	b.n	8003fd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	@ 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fc2f 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e03b      	b.n	800400a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	3302      	adds	r3, #2
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e007      	b.n	8003fc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1c9      	bne.n	8003f72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fbf9 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e005      	b.n	800400a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	@ 0x28
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004028:	2b20      	cmp	r3, #32
 800402a:	f040 80b6 	bne.w	800419a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_UART_Receive+0x28>
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0ae      	b.n	800419c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2222      	movs	r2, #34	@ 0x22
 800404a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004054:	f7fd fb88 	bl	8001768 <HAL_GetTick>
 8004058:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004072:	d10e      	bne.n	8004092 <HAL_UART_Receive+0x80>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_UART_Receive+0x76>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004082:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004086:	e02d      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	22ff      	movs	r2, #255	@ 0xff
 800408c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004090:	e028      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10d      	bne.n	80040b6 <HAL_UART_Receive+0xa4>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Receive+0x9a>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	22ff      	movs	r2, #255	@ 0xff
 80040a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040aa:	e01b      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	227f      	movs	r2, #127	@ 0x7f
 80040b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040b4:	e016      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040be:	d10d      	bne.n	80040dc <HAL_UART_Receive+0xca>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_UART_Receive+0xc0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	227f      	movs	r2, #127	@ 0x7f
 80040cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040d0:	e008      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	223f      	movs	r2, #63	@ 0x3f
 80040d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040da:	e003      	b.n	80040e4 <HAL_UART_Receive+0xd2>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f4:	d108      	bne.n	8004108 <HAL_UART_Receive+0xf6>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e003      	b.n	8004110 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004110:	e037      	b.n	8004182 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2120      	movs	r1, #32
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fb5f 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e033      	b.n	800419c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004140:	b29a      	uxth	r2, r3
 8004142:	8a7b      	ldrh	r3, [r7, #18]
 8004144:	4013      	ands	r3, r2
 8004146:	b29a      	uxth	r2, r3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	3302      	adds	r3, #2
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	e00d      	b.n	8004170 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	8a7b      	ldrh	r3, [r7, #18]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4013      	ands	r3, r2
 8004164:	b2da      	uxtb	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1c1      	bne.n	8004112 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b92      	ldr	r3, [pc, #584]	@ (8004418 <UART_SetConfig+0x274>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a80      	ldr	r2, [pc, #512]	@ (800441c <UART_SetConfig+0x278>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d120      	bne.n	8004262 <UART_SetConfig+0xbe>
 8004220:	4b7f      	ldr	r3, [pc, #508]	@ (8004420 <UART_SetConfig+0x27c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b03      	cmp	r3, #3
 800422a:	d817      	bhi.n	800425c <UART_SetConfig+0xb8>
 800422c:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <UART_SetConfig+0x90>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004245 	.word	0x08004245
 8004238:	08004251 	.word	0x08004251
 800423c:	08004257 	.word	0x08004257
 8004240:	0800424b 	.word	0x0800424b
 8004244:	2301      	movs	r3, #1
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e0b5      	b.n	80043b6 <UART_SetConfig+0x212>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0b2      	b.n	80043b6 <UART_SetConfig+0x212>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e0af      	b.n	80043b6 <UART_SetConfig+0x212>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e0ac      	b.n	80043b6 <UART_SetConfig+0x212>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e0a9      	b.n	80043b6 <UART_SetConfig+0x212>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6f      	ldr	r2, [pc, #444]	@ (8004424 <UART_SetConfig+0x280>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d124      	bne.n	80042b6 <UART_SetConfig+0x112>
 800426c:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <UART_SetConfig+0x27c>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004278:	d011      	beq.n	800429e <UART_SetConfig+0xfa>
 800427a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800427e:	d817      	bhi.n	80042b0 <UART_SetConfig+0x10c>
 8004280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004284:	d011      	beq.n	80042aa <UART_SetConfig+0x106>
 8004286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800428a:	d811      	bhi.n	80042b0 <UART_SetConfig+0x10c>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <UART_SetConfig+0xf4>
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004294:	d006      	beq.n	80042a4 <UART_SetConfig+0x100>
 8004296:	e00b      	b.n	80042b0 <UART_SetConfig+0x10c>
 8004298:	2300      	movs	r3, #0
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e08b      	b.n	80043b6 <UART_SetConfig+0x212>
 800429e:	2302      	movs	r3, #2
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e088      	b.n	80043b6 <UART_SetConfig+0x212>
 80042a4:	2304      	movs	r3, #4
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e085      	b.n	80043b6 <UART_SetConfig+0x212>
 80042aa:	2308      	movs	r3, #8
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e082      	b.n	80043b6 <UART_SetConfig+0x212>
 80042b0:	2310      	movs	r3, #16
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e07f      	b.n	80043b6 <UART_SetConfig+0x212>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004428 <UART_SetConfig+0x284>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d124      	bne.n	800430a <UART_SetConfig+0x166>
 80042c0:	4b57      	ldr	r3, [pc, #348]	@ (8004420 <UART_SetConfig+0x27c>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80042c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042cc:	d011      	beq.n	80042f2 <UART_SetConfig+0x14e>
 80042ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042d2:	d817      	bhi.n	8004304 <UART_SetConfig+0x160>
 80042d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042d8:	d011      	beq.n	80042fe <UART_SetConfig+0x15a>
 80042da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042de:	d811      	bhi.n	8004304 <UART_SetConfig+0x160>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <UART_SetConfig+0x148>
 80042e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x154>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x160>
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e061      	b.n	80043b6 <UART_SetConfig+0x212>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e05e      	b.n	80043b6 <UART_SetConfig+0x212>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e05b      	b.n	80043b6 <UART_SetConfig+0x212>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e058      	b.n	80043b6 <UART_SetConfig+0x212>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e055      	b.n	80043b6 <UART_SetConfig+0x212>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a47      	ldr	r2, [pc, #284]	@ (800442c <UART_SetConfig+0x288>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d124      	bne.n	800435e <UART_SetConfig+0x1ba>
 8004314:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <UART_SetConfig+0x27c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800431c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004320:	d011      	beq.n	8004346 <UART_SetConfig+0x1a2>
 8004322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004326:	d817      	bhi.n	8004358 <UART_SetConfig+0x1b4>
 8004328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432c:	d011      	beq.n	8004352 <UART_SetConfig+0x1ae>
 800432e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004332:	d811      	bhi.n	8004358 <UART_SetConfig+0x1b4>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x19c>
 8004338:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800433c:	d006      	beq.n	800434c <UART_SetConfig+0x1a8>
 800433e:	e00b      	b.n	8004358 <UART_SetConfig+0x1b4>
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e037      	b.n	80043b6 <UART_SetConfig+0x212>
 8004346:	2302      	movs	r3, #2
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e034      	b.n	80043b6 <UART_SetConfig+0x212>
 800434c:	2304      	movs	r3, #4
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e031      	b.n	80043b6 <UART_SetConfig+0x212>
 8004352:	2308      	movs	r3, #8
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e02e      	b.n	80043b6 <UART_SetConfig+0x212>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e02b      	b.n	80043b6 <UART_SetConfig+0x212>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a33      	ldr	r2, [pc, #204]	@ (8004430 <UART_SetConfig+0x28c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d124      	bne.n	80043b2 <UART_SetConfig+0x20e>
 8004368:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <UART_SetConfig+0x27c>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004370:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004374:	d011      	beq.n	800439a <UART_SetConfig+0x1f6>
 8004376:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800437a:	d817      	bhi.n	80043ac <UART_SetConfig+0x208>
 800437c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004380:	d011      	beq.n	80043a6 <UART_SetConfig+0x202>
 8004382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004386:	d811      	bhi.n	80043ac <UART_SetConfig+0x208>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x1f0>
 800438c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004390:	d006      	beq.n	80043a0 <UART_SetConfig+0x1fc>
 8004392:	e00b      	b.n	80043ac <UART_SetConfig+0x208>
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e00d      	b.n	80043b6 <UART_SetConfig+0x212>
 800439a:	2302      	movs	r3, #2
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e00a      	b.n	80043b6 <UART_SetConfig+0x212>
 80043a0:	2304      	movs	r3, #4
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e007      	b.n	80043b6 <UART_SetConfig+0x212>
 80043a6:	2308      	movs	r3, #8
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e004      	b.n	80043b6 <UART_SetConfig+0x212>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e001      	b.n	80043b6 <UART_SetConfig+0x212>
 80043b2:	2310      	movs	r3, #16
 80043b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043be:	d16b      	bne.n	8004498 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d838      	bhi.n	8004438 <UART_SetConfig+0x294>
 80043c6:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <UART_SetConfig+0x228>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004439 	.word	0x08004439
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004439 	.word	0x08004439
 80043e4:	08004439 	.word	0x08004439
 80043e8:	08004439 	.word	0x08004439
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff fad8 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80043f4:	61b8      	str	r0, [r7, #24]
        break;
 80043f6:	e024      	b.n	8004442 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7ff faf6 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 80043fc:	61b8      	str	r0, [r7, #24]
        break;
 80043fe:	e020      	b.n	8004442 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <UART_SetConfig+0x290>)
 8004402:	61bb      	str	r3, [r7, #24]
        break;
 8004404:	e01d      	b.n	8004442 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7ff fa6d 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800440a:	61b8      	str	r0, [r7, #24]
        break;
 800440c:	e019      	b.n	8004442 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	61bb      	str	r3, [r7, #24]
        break;
 8004414:	e015      	b.n	8004442 <UART_SetConfig+0x29e>
 8004416:	bf00      	nop
 8004418:	efff69f3 	.word	0xefff69f3
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	40004800 	.word	0x40004800
 800442c:	40004c00 	.word	0x40004c00
 8004430:	40005000 	.word	0x40005000
 8004434:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	77bb      	strb	r3, [r7, #30]
        break;
 8004440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d073      	beq.n	8004530 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	005a      	lsls	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d916      	bls.n	8004492 <UART_SetConfig+0x2ee>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446a:	d212      	bcs.n	8004492 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f023 030f 	bic.w	r3, r3, #15
 8004474:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	b29b      	uxth	r3, r3
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	b29a      	uxth	r2, r3
 8004482:	89fb      	ldrh	r3, [r7, #14]
 8004484:	4313      	orrs	r3, r2
 8004486:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	89fa      	ldrh	r2, [r7, #14]
 800448e:	60da      	str	r2, [r3, #12]
 8004490:	e04e      	b.n	8004530 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	77bb      	strb	r3, [r7, #30]
 8004496:	e04b      	b.n	8004530 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004498:	7ffb      	ldrb	r3, [r7, #31]
 800449a:	2b08      	cmp	r3, #8
 800449c:	d827      	bhi.n	80044ee <UART_SetConfig+0x34a>
 800449e:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <UART_SetConfig+0x300>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044d1 	.word	0x080044d1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044ef 	.word	0x080044ef
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	080044ef 	.word	0x080044ef
 80044c0:	080044ef 	.word	0x080044ef
 80044c4:	080044e7 	.word	0x080044e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7ff fa6c 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80044cc:	61b8      	str	r0, [r7, #24]
        break;
 80044ce:	e013      	b.n	80044f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d0:	f7ff fa8a 	bl	80039e8 <HAL_RCC_GetPCLK2Freq>
 80044d4:	61b8      	str	r0, [r7, #24]
        break;
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <UART_SetConfig+0x3a4>)
 80044da:	61bb      	str	r3, [r7, #24]
        break;
 80044dc:	e00c      	b.n	80044f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044de:	f7ff fa01 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80044e2:	61b8      	str	r0, [r7, #24]
        break;
 80044e4:	e008      	b.n	80044f8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ea:	61bb      	str	r3, [r7, #24]
        break;
 80044ec:	e004      	b.n	80044f8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	77bb      	strb	r3, [r7, #30]
        break;
 80044f6:	bf00      	nop
    }

    if (pclk != 0U)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	085a      	lsrs	r2, r3, #1
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	441a      	add	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d909      	bls.n	800452c <UART_SetConfig+0x388>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451e:	d205      	bcs.n	800452c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e001      	b.n	8004530 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800453c:	7fbb      	ldrb	r3, [r7, #30]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	007a1200 	.word	0x007a1200

0800454c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01a      	beq.n	8004662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800464a:	d10a      	bne.n	8004662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b098      	sub	sp, #96	@ 0x60
 8004694:	af02      	add	r7, sp, #8
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a0:	f7fd f862 	bl	8001768 <HAL_GetTick>
 80046a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d12e      	bne.n	8004712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046bc:	2200      	movs	r2, #0
 80046be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f88c 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d021      	beq.n	8004712 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e6      	bne.n	80046ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e062      	b.n	80047d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d149      	bne.n	80047b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f856 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03c      	beq.n	80047b4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	623b      	str	r3, [r7, #32]
   return(result);
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800474e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
 800475a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800475e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	60fb      	str	r3, [r7, #12]
   return(result);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800478c:	61fa      	str	r2, [r7, #28]
 800478e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	617b      	str	r3, [r7, #20]
   return(result);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e011      	b.n	80047d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3758      	adds	r7, #88	@ 0x58
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	e04f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f8:	d04b      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fc ffb5 	bl	8001768 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <UART_WaitOnFlagUntilTimeout+0x30>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e04e      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d037      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b80      	cmp	r3, #128	@ 0x80
 8004826:	d034      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	d031      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d110      	bne.n	800485e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f838 	bl	80048ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2208      	movs	r2, #8
 800484e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e029      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486c:	d111      	bne.n	8004892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f81e 	bl	80048ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e00f      	b.n	80048b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4013      	ands	r3, r2
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d0a0      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b095      	sub	sp, #84	@ 0x54
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	61fb      	str	r3, [r7, #28]
   return(result);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800491a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	2b01      	cmp	r3, #1
 800492e:	d118      	bne.n	8004962 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	60bb      	str	r3, [r7, #8]
   return(result);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	647b      	str	r3, [r7, #68]	@ 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e6      	bne.n	8004930 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004976:	bf00      	nop
 8004978:	3754      	adds	r7, #84	@ 0x54
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <__cvt>:
 8004982:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004986:	ec57 6b10 	vmov	r6, r7, d0
 800498a:	2f00      	cmp	r7, #0
 800498c:	460c      	mov	r4, r1
 800498e:	4619      	mov	r1, r3
 8004990:	463b      	mov	r3, r7
 8004992:	bfbb      	ittet	lt
 8004994:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004998:	461f      	movlt	r7, r3
 800499a:	2300      	movge	r3, #0
 800499c:	232d      	movlt	r3, #45	@ 0x2d
 800499e:	700b      	strb	r3, [r1, #0]
 80049a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049a6:	4691      	mov	r9, r2
 80049a8:	f023 0820 	bic.w	r8, r3, #32
 80049ac:	bfbc      	itt	lt
 80049ae:	4632      	movlt	r2, r6
 80049b0:	4616      	movlt	r6, r2
 80049b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049b6:	d005      	beq.n	80049c4 <__cvt+0x42>
 80049b8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049bc:	d100      	bne.n	80049c0 <__cvt+0x3e>
 80049be:	3401      	adds	r4, #1
 80049c0:	2102      	movs	r1, #2
 80049c2:	e000      	b.n	80049c6 <__cvt+0x44>
 80049c4:	2103      	movs	r1, #3
 80049c6:	ab03      	add	r3, sp, #12
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	ab02      	add	r3, sp, #8
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	ec47 6b10 	vmov	d0, r6, r7
 80049d2:	4653      	mov	r3, sl
 80049d4:	4622      	mov	r2, r4
 80049d6:	f001 fa37 	bl	8005e48 <_dtoa_r>
 80049da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049de:	4605      	mov	r5, r0
 80049e0:	d119      	bne.n	8004a16 <__cvt+0x94>
 80049e2:	f019 0f01 	tst.w	r9, #1
 80049e6:	d00e      	beq.n	8004a06 <__cvt+0x84>
 80049e8:	eb00 0904 	add.w	r9, r0, r4
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	4630      	mov	r0, r6
 80049f2:	4639      	mov	r1, r7
 80049f4:	f7fc f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80049f8:	b108      	cbz	r0, 80049fe <__cvt+0x7c>
 80049fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80049fe:	2230      	movs	r2, #48	@ 0x30
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	454b      	cmp	r3, r9
 8004a04:	d31e      	bcc.n	8004a44 <__cvt+0xc2>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a0a:	1b5b      	subs	r3, r3, r5
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	b004      	add	sp, #16
 8004a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a1a:	eb00 0904 	add.w	r9, r0, r4
 8004a1e:	d1e5      	bne.n	80049ec <__cvt+0x6a>
 8004a20:	7803      	ldrb	r3, [r0, #0]
 8004a22:	2b30      	cmp	r3, #48	@ 0x30
 8004a24:	d10a      	bne.n	8004a3c <__cvt+0xba>
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	f7fc f853 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a32:	b918      	cbnz	r0, 8004a3c <__cvt+0xba>
 8004a34:	f1c4 0401 	rsb	r4, r4, #1
 8004a38:	f8ca 4000 	str.w	r4, [sl]
 8004a3c:	f8da 3000 	ldr.w	r3, [sl]
 8004a40:	4499      	add	r9, r3
 8004a42:	e7d3      	b.n	80049ec <__cvt+0x6a>
 8004a44:	1c59      	adds	r1, r3, #1
 8004a46:	9103      	str	r1, [sp, #12]
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e7d9      	b.n	8004a00 <__cvt+0x7e>

08004a4c <__exponent>:
 8004a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4e:	2900      	cmp	r1, #0
 8004a50:	bfba      	itte	lt
 8004a52:	4249      	neglt	r1, r1
 8004a54:	232d      	movlt	r3, #45	@ 0x2d
 8004a56:	232b      	movge	r3, #43	@ 0x2b
 8004a58:	2909      	cmp	r1, #9
 8004a5a:	7002      	strb	r2, [r0, #0]
 8004a5c:	7043      	strb	r3, [r0, #1]
 8004a5e:	dd29      	ble.n	8004ab4 <__exponent+0x68>
 8004a60:	f10d 0307 	add.w	r3, sp, #7
 8004a64:	461d      	mov	r5, r3
 8004a66:	270a      	movs	r7, #10
 8004a68:	461a      	mov	r2, r3
 8004a6a:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a6e:	fb07 1416 	mls	r4, r7, r6, r1
 8004a72:	3430      	adds	r4, #48	@ 0x30
 8004a74:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a78:	460c      	mov	r4, r1
 8004a7a:	2c63      	cmp	r4, #99	@ 0x63
 8004a7c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004a80:	4631      	mov	r1, r6
 8004a82:	dcf1      	bgt.n	8004a68 <__exponent+0x1c>
 8004a84:	3130      	adds	r1, #48	@ 0x30
 8004a86:	1e94      	subs	r4, r2, #2
 8004a88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a8c:	1c41      	adds	r1, r0, #1
 8004a8e:	4623      	mov	r3, r4
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	d30a      	bcc.n	8004aaa <__exponent+0x5e>
 8004a94:	f10d 0309 	add.w	r3, sp, #9
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42ac      	cmp	r4, r5
 8004a9c:	bf88      	it	hi
 8004a9e:	2300      	movhi	r3, #0
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	4403      	add	r3, r0
 8004aa4:	1a18      	subs	r0, r3, r0
 8004aa6:	b003      	add	sp, #12
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004aae:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ab2:	e7ed      	b.n	8004a90 <__exponent+0x44>
 8004ab4:	2330      	movs	r3, #48	@ 0x30
 8004ab6:	3130      	adds	r1, #48	@ 0x30
 8004ab8:	7083      	strb	r3, [r0, #2]
 8004aba:	70c1      	strb	r1, [r0, #3]
 8004abc:	1d03      	adds	r3, r0, #4
 8004abe:	e7f1      	b.n	8004aa4 <__exponent+0x58>

08004ac0 <_printf_float>:
 8004ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	b08d      	sub	sp, #52	@ 0x34
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004acc:	4616      	mov	r6, r2
 8004ace:	461f      	mov	r7, r3
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	f001 f8b3 	bl	8005c3c <_localeconv_r>
 8004ad6:	6803      	ldr	r3, [r0, #0]
 8004ad8:	9304      	str	r3, [sp, #16]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fb fbd0 	bl	8000280 <strlen>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae8:	9005      	str	r0, [sp, #20]
 8004aea:	3307      	adds	r3, #7
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	f103 0208 	add.w	r2, r3, #8
 8004af4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004af8:	f8d4 b000 	ldr.w	fp, [r4]
 8004afc:	f8c8 2000 	str.w	r2, [r8]
 8004b00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b04:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b08:	9307      	str	r3, [sp, #28]
 8004b0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b0e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b16:	4b9c      	ldr	r3, [pc, #624]	@ (8004d88 <_printf_float+0x2c8>)
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b1c:	f7fc f80e 	bl	8000b3c <__aeabi_dcmpun>
 8004b20:	bb70      	cbnz	r0, 8004b80 <_printf_float+0xc0>
 8004b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b26:	4b98      	ldr	r3, [pc, #608]	@ (8004d88 <_printf_float+0x2c8>)
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b2c:	f7fb ffe8 	bl	8000b00 <__aeabi_dcmple>
 8004b30:	bb30      	cbnz	r0, 8004b80 <_printf_float+0xc0>
 8004b32:	2200      	movs	r2, #0
 8004b34:	2300      	movs	r3, #0
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb ffd7 	bl	8000aec <__aeabi_dcmplt>
 8004b3e:	b110      	cbz	r0, 8004b46 <_printf_float+0x86>
 8004b40:	232d      	movs	r3, #45	@ 0x2d
 8004b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b46:	4a91      	ldr	r2, [pc, #580]	@ (8004d8c <_printf_float+0x2cc>)
 8004b48:	4b91      	ldr	r3, [pc, #580]	@ (8004d90 <_printf_float+0x2d0>)
 8004b4a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b4e:	bf8c      	ite	hi
 8004b50:	4690      	movhi	r8, r2
 8004b52:	4698      	movls	r8, r3
 8004b54:	2303      	movs	r3, #3
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	f02b 0304 	bic.w	r3, fp, #4
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	f04f 0900 	mov.w	r9, #0
 8004b62:	9700      	str	r7, [sp, #0]
 8004b64:	4633      	mov	r3, r6
 8004b66:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f9d2 	bl	8004f14 <_printf_common>
 8004b70:	3001      	adds	r0, #1
 8004b72:	f040 808d 	bne.w	8004c90 <_printf_float+0x1d0>
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b7a:	b00d      	add	sp, #52	@ 0x34
 8004b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	4640      	mov	r0, r8
 8004b86:	4649      	mov	r1, r9
 8004b88:	f7fb ffd8 	bl	8000b3c <__aeabi_dcmpun>
 8004b8c:	b140      	cbz	r0, 8004ba0 <_printf_float+0xe0>
 8004b8e:	464b      	mov	r3, r9
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbc      	itt	lt
 8004b94:	232d      	movlt	r3, #45	@ 0x2d
 8004b96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d94 <_printf_float+0x2d4>)
 8004b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d98 <_printf_float+0x2d8>)
 8004b9e:	e7d4      	b.n	8004b4a <_printf_float+0x8a>
 8004ba0:	6863      	ldr	r3, [r4, #4]
 8004ba2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ba6:	9206      	str	r2, [sp, #24]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	d13b      	bne.n	8004c24 <_printf_float+0x164>
 8004bac:	2306      	movs	r3, #6
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	9303      	str	r3, [sp, #12]
 8004bba:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bbc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bc0:	ab09      	add	r3, sp, #36	@ 0x24
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	6861      	ldr	r1, [r4, #4]
 8004bc6:	ec49 8b10 	vmov	d0, r8, r9
 8004bca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7ff fed7 	bl	8004982 <__cvt>
 8004bd4:	9b06      	ldr	r3, [sp, #24]
 8004bd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bd8:	2b47      	cmp	r3, #71	@ 0x47
 8004bda:	4680      	mov	r8, r0
 8004bdc:	d129      	bne.n	8004c32 <_printf_float+0x172>
 8004bde:	1cc8      	adds	r0, r1, #3
 8004be0:	db02      	blt.n	8004be8 <_printf_float+0x128>
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	4299      	cmp	r1, r3
 8004be6:	dd41      	ble.n	8004c6c <_printf_float+0x1ac>
 8004be8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bec:	fa5f fa8a 	uxtb.w	sl, sl
 8004bf0:	3901      	subs	r1, #1
 8004bf2:	4652      	mov	r2, sl
 8004bf4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bf8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bfa:	f7ff ff27 	bl	8004a4c <__exponent>
 8004bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c00:	1813      	adds	r3, r2, r0
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	4681      	mov	r9, r0
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	dc02      	bgt.n	8004c10 <_printf_float+0x150>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	07d2      	lsls	r2, r2, #31
 8004c0e:	d501      	bpl.n	8004c14 <_printf_float+0x154>
 8004c10:	3301      	adds	r3, #1
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0a2      	beq.n	8004b62 <_printf_float+0xa2>
 8004c1c:	232d      	movs	r3, #45	@ 0x2d
 8004c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c22:	e79e      	b.n	8004b62 <_printf_float+0xa2>
 8004c24:	9a06      	ldr	r2, [sp, #24]
 8004c26:	2a47      	cmp	r2, #71	@ 0x47
 8004c28:	d1c2      	bne.n	8004bb0 <_printf_float+0xf0>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1c0      	bne.n	8004bb0 <_printf_float+0xf0>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e7bd      	b.n	8004bae <_printf_float+0xee>
 8004c32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c36:	d9db      	bls.n	8004bf0 <_printf_float+0x130>
 8004c38:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c3c:	d118      	bne.n	8004c70 <_printf_float+0x1b0>
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	dd0b      	ble.n	8004c5c <_printf_float+0x19c>
 8004c44:	6121      	str	r1, [r4, #16]
 8004c46:	b913      	cbnz	r3, 8004c4e <_printf_float+0x18e>
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	07d0      	lsls	r0, r2, #31
 8004c4c:	d502      	bpl.n	8004c54 <_printf_float+0x194>
 8004c4e:	3301      	adds	r3, #1
 8004c50:	440b      	add	r3, r1
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c56:	f04f 0900 	mov.w	r9, #0
 8004c5a:	e7db      	b.n	8004c14 <_printf_float+0x154>
 8004c5c:	b913      	cbnz	r3, 8004c64 <_printf_float+0x1a4>
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	07d2      	lsls	r2, r2, #31
 8004c62:	d501      	bpl.n	8004c68 <_printf_float+0x1a8>
 8004c64:	3302      	adds	r3, #2
 8004c66:	e7f4      	b.n	8004c52 <_printf_float+0x192>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e7f2      	b.n	8004c52 <_printf_float+0x192>
 8004c6c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c72:	4299      	cmp	r1, r3
 8004c74:	db05      	blt.n	8004c82 <_printf_float+0x1c2>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	6121      	str	r1, [r4, #16]
 8004c7a:	07d8      	lsls	r0, r3, #31
 8004c7c:	d5ea      	bpl.n	8004c54 <_printf_float+0x194>
 8004c7e:	1c4b      	adds	r3, r1, #1
 8004c80:	e7e7      	b.n	8004c52 <_printf_float+0x192>
 8004c82:	2900      	cmp	r1, #0
 8004c84:	bfd4      	ite	le
 8004c86:	f1c1 0202 	rsble	r2, r1, #2
 8004c8a:	2201      	movgt	r2, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	e7e0      	b.n	8004c52 <_printf_float+0x192>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	055a      	lsls	r2, r3, #21
 8004c94:	d407      	bmi.n	8004ca6 <_printf_float+0x1e6>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	4642      	mov	r2, r8
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d12b      	bne.n	8004cfc <_printf_float+0x23c>
 8004ca4:	e767      	b.n	8004b76 <_printf_float+0xb6>
 8004ca6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004caa:	f240 80dd 	bls.w	8004e68 <_printf_float+0x3a8>
 8004cae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f7fb ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d033      	beq.n	8004d26 <_printf_float+0x266>
 8004cbe:	4a37      	ldr	r2, [pc, #220]	@ (8004d9c <_printf_float+0x2dc>)
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f af54 	beq.w	8004b76 <_printf_float+0xb6>
 8004cce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004cd2:	4543      	cmp	r3, r8
 8004cd4:	db02      	blt.n	8004cdc <_printf_float+0x21c>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	07d8      	lsls	r0, r3, #31
 8004cda:	d50f      	bpl.n	8004cfc <_printf_float+0x23c>
 8004cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af45 	beq.w	8004b76 <_printf_float+0xb6>
 8004cec:	f04f 0900 	mov.w	r9, #0
 8004cf0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004cf4:	f104 0a1a 	add.w	sl, r4, #26
 8004cf8:	45c8      	cmp	r8, r9
 8004cfa:	dc09      	bgt.n	8004d10 <_printf_float+0x250>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	079b      	lsls	r3, r3, #30
 8004d00:	f100 8103 	bmi.w	8004f0a <_printf_float+0x44a>
 8004d04:	68e0      	ldr	r0, [r4, #12]
 8004d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d08:	4298      	cmp	r0, r3
 8004d0a:	bfb8      	it	lt
 8004d0c:	4618      	movlt	r0, r3
 8004d0e:	e734      	b.n	8004b7a <_printf_float+0xba>
 8004d10:	2301      	movs	r3, #1
 8004d12:	4652      	mov	r2, sl
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f af2b 	beq.w	8004b76 <_printf_float+0xb6>
 8004d20:	f109 0901 	add.w	r9, r9, #1
 8004d24:	e7e8      	b.n	8004cf8 <_printf_float+0x238>
 8004d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dc39      	bgt.n	8004da0 <_printf_float+0x2e0>
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d9c <_printf_float+0x2dc>)
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af1d 	beq.w	8004b76 <_printf_float+0xb6>
 8004d3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d40:	ea59 0303 	orrs.w	r3, r9, r3
 8004d44:	d102      	bne.n	8004d4c <_printf_float+0x28c>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	07d9      	lsls	r1, r3, #31
 8004d4a:	d5d7      	bpl.n	8004cfc <_printf_float+0x23c>
 8004d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af0d 	beq.w	8004b76 <_printf_float+0xb6>
 8004d5c:	f04f 0a00 	mov.w	sl, #0
 8004d60:	f104 0b1a 	add.w	fp, r4, #26
 8004d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d66:	425b      	negs	r3, r3
 8004d68:	4553      	cmp	r3, sl
 8004d6a:	dc01      	bgt.n	8004d70 <_printf_float+0x2b0>
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	e793      	b.n	8004c98 <_printf_float+0x1d8>
 8004d70:	2301      	movs	r3, #1
 8004d72:	465a      	mov	r2, fp
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f aefb 	beq.w	8004b76 <_printf_float+0xb6>
 8004d80:	f10a 0a01 	add.w	sl, sl, #1
 8004d84:	e7ee      	b.n	8004d64 <_printf_float+0x2a4>
 8004d86:	bf00      	nop
 8004d88:	7fefffff 	.word	0x7fefffff
 8004d8c:	08009d38 	.word	0x08009d38
 8004d90:	08009d34 	.word	0x08009d34
 8004d94:	08009d40 	.word	0x08009d40
 8004d98:	08009d3c 	.word	0x08009d3c
 8004d9c:	08009e7a 	.word	0x08009e7a
 8004da0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004da2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004da6:	4553      	cmp	r3, sl
 8004da8:	bfa8      	it	ge
 8004daa:	4653      	movge	r3, sl
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	4699      	mov	r9, r3
 8004db0:	dc36      	bgt.n	8004e20 <_printf_float+0x360>
 8004db2:	f04f 0b00 	mov.w	fp, #0
 8004db6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dba:	f104 021a 	add.w	r2, r4, #26
 8004dbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dc0:	9306      	str	r3, [sp, #24]
 8004dc2:	eba3 0309 	sub.w	r3, r3, r9
 8004dc6:	455b      	cmp	r3, fp
 8004dc8:	dc31      	bgt.n	8004e2e <_printf_float+0x36e>
 8004dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dcc:	459a      	cmp	sl, r3
 8004dce:	dc3a      	bgt.n	8004e46 <_printf_float+0x386>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07da      	lsls	r2, r3, #31
 8004dd4:	d437      	bmi.n	8004e46 <_printf_float+0x386>
 8004dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd8:	ebaa 0903 	sub.w	r9, sl, r3
 8004ddc:	9b06      	ldr	r3, [sp, #24]
 8004dde:	ebaa 0303 	sub.w	r3, sl, r3
 8004de2:	4599      	cmp	r9, r3
 8004de4:	bfa8      	it	ge
 8004de6:	4699      	movge	r9, r3
 8004de8:	f1b9 0f00 	cmp.w	r9, #0
 8004dec:	dc33      	bgt.n	8004e56 <_printf_float+0x396>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df6:	f104 0b1a 	add.w	fp, r4, #26
 8004dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfc:	ebaa 0303 	sub.w	r3, sl, r3
 8004e00:	eba3 0309 	sub.w	r3, r3, r9
 8004e04:	4543      	cmp	r3, r8
 8004e06:	f77f af79 	ble.w	8004cfc <_printf_float+0x23c>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	465a      	mov	r2, fp
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f aeae 	beq.w	8004b76 <_printf_float+0xb6>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	e7ec      	b.n	8004dfa <_printf_float+0x33a>
 8004e20:	4642      	mov	r2, r8
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b8      	blx	r7
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d1c2      	bne.n	8004db2 <_printf_float+0x2f2>
 8004e2c:	e6a3      	b.n	8004b76 <_printf_float+0xb6>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	9206      	str	r2, [sp, #24]
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae9c 	beq.w	8004b76 <_printf_float+0xb6>
 8004e3e:	9a06      	ldr	r2, [sp, #24]
 8004e40:	f10b 0b01 	add.w	fp, fp, #1
 8004e44:	e7bb      	b.n	8004dbe <_printf_float+0x2fe>
 8004e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1c0      	bne.n	8004dd6 <_printf_float+0x316>
 8004e54:	e68f      	b.n	8004b76 <_printf_float+0xb6>
 8004e56:	9a06      	ldr	r2, [sp, #24]
 8004e58:	464b      	mov	r3, r9
 8004e5a:	4442      	add	r2, r8
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	d1c3      	bne.n	8004dee <_printf_float+0x32e>
 8004e66:	e686      	b.n	8004b76 <_printf_float+0xb6>
 8004e68:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e6c:	f1ba 0f01 	cmp.w	sl, #1
 8004e70:	dc01      	bgt.n	8004e76 <_printf_float+0x3b6>
 8004e72:	07db      	lsls	r3, r3, #31
 8004e74:	d536      	bpl.n	8004ee4 <_printf_float+0x424>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4642      	mov	r2, r8
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae78 	beq.w	8004b76 <_printf_float+0xb6>
 8004e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae70 	beq.w	8004b76 <_printf_float+0xb6>
 8004e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004ea2:	f7fb fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ea6:	b9c0      	cbnz	r0, 8004eda <_printf_float+0x41a>
 8004ea8:	4653      	mov	r3, sl
 8004eaa:	f108 0201 	add.w	r2, r8, #1
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d10c      	bne.n	8004ed2 <_printf_float+0x412>
 8004eb8:	e65d      	b.n	8004b76 <_printf_float+0xb6>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	465a      	mov	r2, fp
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	f43f ae56 	beq.w	8004b76 <_printf_float+0xb6>
 8004eca:	f108 0801 	add.w	r8, r8, #1
 8004ece:	45d0      	cmp	r8, sl
 8004ed0:	dbf3      	blt.n	8004eba <_printf_float+0x3fa>
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ed8:	e6df      	b.n	8004c9a <_printf_float+0x1da>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	f104 0b1a 	add.w	fp, r4, #26
 8004ee2:	e7f4      	b.n	8004ece <_printf_float+0x40e>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	e7e1      	b.n	8004eae <_printf_float+0x3ee>
 8004eea:	2301      	movs	r3, #1
 8004eec:	464a      	mov	r2, r9
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b8      	blx	r7
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f ae3e 	beq.w	8004b76 <_printf_float+0xb6>
 8004efa:	f108 0801 	add.w	r8, r8, #1
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	4543      	cmp	r3, r8
 8004f06:	dcf0      	bgt.n	8004eea <_printf_float+0x42a>
 8004f08:	e6fc      	b.n	8004d04 <_printf_float+0x244>
 8004f0a:	f04f 0800 	mov.w	r8, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f4      	b.n	8004efe <_printf_float+0x43e>

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4698      	mov	r8, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfb8      	it	lt
 8004f28:	4613      	movlt	r3, r2
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f30:	4607      	mov	r7, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc26      	bgt.n	8004faa <_printf_common+0x96>
 8004f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	3b00      	subs	r3, #0
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42b      	bmi.n	8004fc4 <_printf_common+0xb0>
 8004f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f70:	4641      	mov	r1, r8
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c8      	blx	r9
 8004f76:	3001      	adds	r0, #1
 8004f78:	d01e      	beq.n	8004fb8 <_printf_common+0xa4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	6922      	ldr	r2, [r4, #16]
 8004f7e:	f003 0306 	and.w	r3, r3, #6
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf02      	ittt	eq
 8004f86:	68e5      	ldreq	r5, [r4, #12]
 8004f88:	6833      	ldreq	r3, [r6, #0]
 8004f8a:	1aed      	subeq	r5, r5, r3
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	bf0c      	ite	eq
 8004f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f94:	2500      	movne	r5, #0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	1a9b      	subgt	r3, r3, r2
 8004f9c:	18ed      	addgt	r5, r5, r3
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xc8>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xa8>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4641      	mov	r1, r8
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c8      	blx	r9
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xac>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c6      	b.n	8004f52 <_printf_common+0x3e>
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	2030      	movs	r0, #48	@ 0x30
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fce:	4422      	add	r2, r4
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd8:	3302      	adds	r3, #2
 8004fda:	e7c7      	b.n	8004f6c <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa4>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x8e>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff8:	2f78      	cmp	r7, #120	@ 0x78
 8004ffa:	4691      	mov	r9, r2
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	469a      	mov	sl, r3
 8005002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	@ 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d1 	beq.w	80051b4 <_printf_i+0x1c4>
 8005012:	2f58      	cmp	r7, #88	@ 0x58
 8005014:	f000 80b8 	beq.w	8005188 <_printf_i+0x198>
 8005018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	@ (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	0800519b 	.word	0x0800519b
 8005060:	080050c7 	.word	0x080050c7
 8005064:	08005155 	.word	0x08005155
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051bd 	.word	0x080051bd
 8005074:	08005019 	.word	0x08005019
 8005078:	080050c7 	.word	0x080050c7
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	0800515d 	.word	0x0800515d
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e09c      	b.n	80051d6 <_printf_i+0x1e6>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6031      	str	r1, [r6, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xbc>
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	e003      	b.n	80050b4 <_printf_i+0xc4>
 80050ac:	0645      	lsls	r5, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xb8>
 80050b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	da03      	bge.n	80050c0 <_printf_i+0xd0>
 80050b8:	232d      	movs	r3, #45	@ 0x2d
 80050ba:	426d      	negs	r5, r5
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c0:	4858      	ldr	r0, [pc, #352]	@ (8005224 <_printf_i+0x234>)
 80050c2:	230a      	movs	r3, #10
 80050c4:	e011      	b.n	80050ea <_printf_i+0xfa>
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	0608      	lsls	r0, r1, #24
 80050cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d0:	d402      	bmi.n	80050d8 <_printf_i+0xe8>
 80050d2:	0649      	lsls	r1, r1, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050da:	4852      	ldr	r0, [pc, #328]	@ (8005224 <_printf_i+0x234>)
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	bf14      	ite	ne
 80050e0:	230a      	movne	r3, #10
 80050e2:	2308      	moveq	r3, #8
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	60a6      	str	r6, [r4, #8]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	db05      	blt.n	80050fe <_printf_i+0x10e>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	432e      	orrs	r6, r5
 80050f6:	f021 0104 	bic.w	r1, r1, #4
 80050fa:	6021      	str	r1, [r4, #0]
 80050fc:	d04b      	beq.n	8005196 <_printf_i+0x1a6>
 80050fe:	4616      	mov	r6, r2
 8005100:	fbb5 f1f3 	udiv	r1, r5, r3
 8005104:	fb03 5711 	mls	r7, r3, r1, r5
 8005108:	5dc7      	ldrb	r7, [r0, r7]
 800510a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800510e:	462f      	mov	r7, r5
 8005110:	42bb      	cmp	r3, r7
 8005112:	460d      	mov	r5, r1
 8005114:	d9f4      	bls.n	8005100 <_printf_i+0x110>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d10b      	bne.n	8005132 <_printf_i+0x142>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	07df      	lsls	r7, r3, #31
 800511e:	d508      	bpl.n	8005132 <_printf_i+0x142>
 8005120:	6923      	ldr	r3, [r4, #16]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	4299      	cmp	r1, r3
 8005126:	bfde      	ittt	le
 8005128:	2330      	movle	r3, #48	@ 0x30
 800512a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800512e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005132:	1b92      	subs	r2, r2, r6
 8005134:	6122      	str	r2, [r4, #16]
 8005136:	f8cd a000 	str.w	sl, [sp]
 800513a:	464b      	mov	r3, r9
 800513c:	aa03      	add	r2, sp, #12
 800513e:	4621      	mov	r1, r4
 8005140:	4640      	mov	r0, r8
 8005142:	f7ff fee7 	bl	8004f14 <_printf_common>
 8005146:	3001      	adds	r0, #1
 8005148:	d14a      	bne.n	80051e0 <_printf_i+0x1f0>
 800514a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800514e:	b004      	add	sp, #16
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	4832      	ldr	r0, [pc, #200]	@ (8005228 <_printf_i+0x238>)
 800515e:	2778      	movs	r7, #120	@ 0x78
 8005160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	061f      	lsls	r7, r3, #24
 800516a:	f851 5b04 	ldr.w	r5, [r1], #4
 800516e:	d402      	bmi.n	8005176 <_printf_i+0x186>
 8005170:	065f      	lsls	r7, r3, #25
 8005172:	bf48      	it	mi
 8005174:	b2ad      	uxthmi	r5, r5
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	07d9      	lsls	r1, r3, #31
 800517a:	bf44      	itt	mi
 800517c:	f043 0320 	orrmi.w	r3, r3, #32
 8005180:	6023      	strmi	r3, [r4, #0]
 8005182:	b11d      	cbz	r5, 800518c <_printf_i+0x19c>
 8005184:	2310      	movs	r3, #16
 8005186:	e7ad      	b.n	80050e4 <_printf_i+0xf4>
 8005188:	4826      	ldr	r0, [pc, #152]	@ (8005224 <_printf_i+0x234>)
 800518a:	e7e9      	b.n	8005160 <_printf_i+0x170>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	f023 0320 	bic.w	r3, r3, #32
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	e7f6      	b.n	8005184 <_printf_i+0x194>
 8005196:	4616      	mov	r6, r2
 8005198:	e7bd      	b.n	8005116 <_printf_i+0x126>
 800519a:	6833      	ldr	r3, [r6, #0]
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	6961      	ldr	r1, [r4, #20]
 80051a0:	1d18      	adds	r0, r3, #4
 80051a2:	6030      	str	r0, [r6, #0]
 80051a4:	062e      	lsls	r6, r5, #24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	d501      	bpl.n	80051ae <_printf_i+0x1be>
 80051aa:	6019      	str	r1, [r3, #0]
 80051ac:	e002      	b.n	80051b4 <_printf_i+0x1c4>
 80051ae:	0668      	lsls	r0, r5, #25
 80051b0:	d5fb      	bpl.n	80051aa <_printf_i+0x1ba>
 80051b2:	8019      	strh	r1, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	4616      	mov	r6, r2
 80051ba:	e7bc      	b.n	8005136 <_printf_i+0x146>
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	6032      	str	r2, [r6, #0]
 80051c2:	681e      	ldr	r6, [r3, #0]
 80051c4:	6862      	ldr	r2, [r4, #4]
 80051c6:	2100      	movs	r1, #0
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7fb f809 	bl	80001e0 <memchr>
 80051ce:	b108      	cbz	r0, 80051d4 <_printf_i+0x1e4>
 80051d0:	1b80      	subs	r0, r0, r6
 80051d2:	6060      	str	r0, [r4, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	2300      	movs	r3, #0
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051de:	e7aa      	b.n	8005136 <_printf_i+0x146>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	4632      	mov	r2, r6
 80051e4:	4649      	mov	r1, r9
 80051e6:	4640      	mov	r0, r8
 80051e8:	47d0      	blx	sl
 80051ea:	3001      	adds	r0, #1
 80051ec:	d0ad      	beq.n	800514a <_printf_i+0x15a>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	079b      	lsls	r3, r3, #30
 80051f2:	d413      	bmi.n	800521c <_printf_i+0x22c>
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	4298      	cmp	r0, r3
 80051fa:	bfb8      	it	lt
 80051fc:	4618      	movlt	r0, r3
 80051fe:	e7a6      	b.n	800514e <_printf_i+0x15e>
 8005200:	2301      	movs	r3, #1
 8005202:	4632      	mov	r2, r6
 8005204:	4649      	mov	r1, r9
 8005206:	4640      	mov	r0, r8
 8005208:	47d0      	blx	sl
 800520a:	3001      	adds	r0, #1
 800520c:	d09d      	beq.n	800514a <_printf_i+0x15a>
 800520e:	3501      	adds	r5, #1
 8005210:	68e3      	ldr	r3, [r4, #12]
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	1a5b      	subs	r3, r3, r1
 8005216:	42ab      	cmp	r3, r5
 8005218:	dcf2      	bgt.n	8005200 <_printf_i+0x210>
 800521a:	e7eb      	b.n	80051f4 <_printf_i+0x204>
 800521c:	2500      	movs	r5, #0
 800521e:	f104 0619 	add.w	r6, r4, #25
 8005222:	e7f5      	b.n	8005210 <_printf_i+0x220>
 8005224:	08009d44 	.word	0x08009d44
 8005228:	08009d55 	.word	0x08009d55

0800522c <_scanf_float>:
 800522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	b087      	sub	sp, #28
 8005232:	4691      	mov	r9, r2
 8005234:	9303      	str	r3, [sp, #12]
 8005236:	688b      	ldr	r3, [r1, #8]
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800523e:	bf81      	itttt	hi
 8005240:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005244:	eb03 0b05 	addhi.w	fp, r3, r5
 8005248:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800524c:	608b      	strhi	r3, [r1, #8]
 800524e:	680b      	ldr	r3, [r1, #0]
 8005250:	460a      	mov	r2, r1
 8005252:	f04f 0500 	mov.w	r5, #0
 8005256:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800525a:	f842 3b1c 	str.w	r3, [r2], #28
 800525e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005262:	4680      	mov	r8, r0
 8005264:	460c      	mov	r4, r1
 8005266:	bf98      	it	ls
 8005268:	f04f 0b00 	movls.w	fp, #0
 800526c:	9201      	str	r2, [sp, #4]
 800526e:	4616      	mov	r6, r2
 8005270:	46aa      	mov	sl, r5
 8005272:	462f      	mov	r7, r5
 8005274:	9502      	str	r5, [sp, #8]
 8005276:	68a2      	ldr	r2, [r4, #8]
 8005278:	b15a      	cbz	r2, 8005292 <_scanf_float+0x66>
 800527a:	f8d9 3000 	ldr.w	r3, [r9]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b4e      	cmp	r3, #78	@ 0x4e
 8005282:	d863      	bhi.n	800534c <_scanf_float+0x120>
 8005284:	2b40      	cmp	r3, #64	@ 0x40
 8005286:	d83b      	bhi.n	8005300 <_scanf_float+0xd4>
 8005288:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800528c:	b2c8      	uxtb	r0, r1
 800528e:	280e      	cmp	r0, #14
 8005290:	d939      	bls.n	8005306 <_scanf_float+0xda>
 8005292:	b11f      	cbz	r7, 800529c <_scanf_float+0x70>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80052a0:	f1ba 0f01 	cmp.w	sl, #1
 80052a4:	f200 8114 	bhi.w	80054d0 <_scanf_float+0x2a4>
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	429e      	cmp	r6, r3
 80052ac:	f200 8105 	bhi.w	80054ba <_scanf_float+0x28e>
 80052b0:	2001      	movs	r0, #1
 80052b2:	b007      	add	sp, #28
 80052b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80052bc:	2a0d      	cmp	r2, #13
 80052be:	d8e8      	bhi.n	8005292 <_scanf_float+0x66>
 80052c0:	a101      	add	r1, pc, #4	@ (adr r1, 80052c8 <_scanf_float+0x9c>)
 80052c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	08005411 	.word	0x08005411
 80052cc:	08005293 	.word	0x08005293
 80052d0:	08005293 	.word	0x08005293
 80052d4:	08005293 	.word	0x08005293
 80052d8:	0800546d 	.word	0x0800546d
 80052dc:	08005447 	.word	0x08005447
 80052e0:	08005293 	.word	0x08005293
 80052e4:	08005293 	.word	0x08005293
 80052e8:	0800541f 	.word	0x0800541f
 80052ec:	08005293 	.word	0x08005293
 80052f0:	08005293 	.word	0x08005293
 80052f4:	08005293 	.word	0x08005293
 80052f8:	08005293 	.word	0x08005293
 80052fc:	080053db 	.word	0x080053db
 8005300:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005304:	e7da      	b.n	80052bc <_scanf_float+0x90>
 8005306:	290e      	cmp	r1, #14
 8005308:	d8c3      	bhi.n	8005292 <_scanf_float+0x66>
 800530a:	a001      	add	r0, pc, #4	@ (adr r0, 8005310 <_scanf_float+0xe4>)
 800530c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005310:	080053cb 	.word	0x080053cb
 8005314:	08005293 	.word	0x08005293
 8005318:	080053cb 	.word	0x080053cb
 800531c:	0800545b 	.word	0x0800545b
 8005320:	08005293 	.word	0x08005293
 8005324:	0800536d 	.word	0x0800536d
 8005328:	080053b1 	.word	0x080053b1
 800532c:	080053b1 	.word	0x080053b1
 8005330:	080053b1 	.word	0x080053b1
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053b1 	.word	0x080053b1
 800533c:	080053b1 	.word	0x080053b1
 8005340:	080053b1 	.word	0x080053b1
 8005344:	080053b1 	.word	0x080053b1
 8005348:	080053b1 	.word	0x080053b1
 800534c:	2b6e      	cmp	r3, #110	@ 0x6e
 800534e:	d809      	bhi.n	8005364 <_scanf_float+0x138>
 8005350:	2b60      	cmp	r3, #96	@ 0x60
 8005352:	d8b1      	bhi.n	80052b8 <_scanf_float+0x8c>
 8005354:	2b54      	cmp	r3, #84	@ 0x54
 8005356:	d07b      	beq.n	8005450 <_scanf_float+0x224>
 8005358:	2b59      	cmp	r3, #89	@ 0x59
 800535a:	d19a      	bne.n	8005292 <_scanf_float+0x66>
 800535c:	2d07      	cmp	r5, #7
 800535e:	d198      	bne.n	8005292 <_scanf_float+0x66>
 8005360:	2508      	movs	r5, #8
 8005362:	e02f      	b.n	80053c4 <_scanf_float+0x198>
 8005364:	2b74      	cmp	r3, #116	@ 0x74
 8005366:	d073      	beq.n	8005450 <_scanf_float+0x224>
 8005368:	2b79      	cmp	r3, #121	@ 0x79
 800536a:	e7f6      	b.n	800535a <_scanf_float+0x12e>
 800536c:	6821      	ldr	r1, [r4, #0]
 800536e:	05c8      	lsls	r0, r1, #23
 8005370:	d51e      	bpl.n	80053b0 <_scanf_float+0x184>
 8005372:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005376:	6021      	str	r1, [r4, #0]
 8005378:	3701      	adds	r7, #1
 800537a:	f1bb 0f00 	cmp.w	fp, #0
 800537e:	d003      	beq.n	8005388 <_scanf_float+0x15c>
 8005380:	3201      	adds	r2, #1
 8005382:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005386:	60a2      	str	r2, [r4, #8]
 8005388:	68a3      	ldr	r3, [r4, #8]
 800538a:	3b01      	subs	r3, #1
 800538c:	60a3      	str	r3, [r4, #8]
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	3301      	adds	r3, #1
 8005392:	6123      	str	r3, [r4, #16]
 8005394:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005398:	3b01      	subs	r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	f8c9 3004 	str.w	r3, [r9, #4]
 80053a0:	f340 8082 	ble.w	80054a8 <_scanf_float+0x27c>
 80053a4:	f8d9 3000 	ldr.w	r3, [r9]
 80053a8:	3301      	adds	r3, #1
 80053aa:	f8c9 3000 	str.w	r3, [r9]
 80053ae:	e762      	b.n	8005276 <_scanf_float+0x4a>
 80053b0:	eb1a 0105 	adds.w	r1, sl, r5
 80053b4:	f47f af6d 	bne.w	8005292 <_scanf_float+0x66>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80053be:	6022      	str	r2, [r4, #0]
 80053c0:	460d      	mov	r5, r1
 80053c2:	468a      	mov	sl, r1
 80053c4:	f806 3b01 	strb.w	r3, [r6], #1
 80053c8:	e7de      	b.n	8005388 <_scanf_float+0x15c>
 80053ca:	6822      	ldr	r2, [r4, #0]
 80053cc:	0610      	lsls	r0, r2, #24
 80053ce:	f57f af60 	bpl.w	8005292 <_scanf_float+0x66>
 80053d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053d6:	6022      	str	r2, [r4, #0]
 80053d8:	e7f4      	b.n	80053c4 <_scanf_float+0x198>
 80053da:	f1ba 0f00 	cmp.w	sl, #0
 80053de:	d10c      	bne.n	80053fa <_scanf_float+0x1ce>
 80053e0:	b977      	cbnz	r7, 8005400 <_scanf_float+0x1d4>
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80053e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80053ec:	d108      	bne.n	8005400 <_scanf_float+0x1d4>
 80053ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	f04f 0a01 	mov.w	sl, #1
 80053f8:	e7e4      	b.n	80053c4 <_scanf_float+0x198>
 80053fa:	f1ba 0f02 	cmp.w	sl, #2
 80053fe:	d050      	beq.n	80054a2 <_scanf_float+0x276>
 8005400:	2d01      	cmp	r5, #1
 8005402:	d002      	beq.n	800540a <_scanf_float+0x1de>
 8005404:	2d04      	cmp	r5, #4
 8005406:	f47f af44 	bne.w	8005292 <_scanf_float+0x66>
 800540a:	3501      	adds	r5, #1
 800540c:	b2ed      	uxtb	r5, r5
 800540e:	e7d9      	b.n	80053c4 <_scanf_float+0x198>
 8005410:	f1ba 0f01 	cmp.w	sl, #1
 8005414:	f47f af3d 	bne.w	8005292 <_scanf_float+0x66>
 8005418:	f04f 0a02 	mov.w	sl, #2
 800541c:	e7d2      	b.n	80053c4 <_scanf_float+0x198>
 800541e:	b975      	cbnz	r5, 800543e <_scanf_float+0x212>
 8005420:	2f00      	cmp	r7, #0
 8005422:	f47f af37 	bne.w	8005294 <_scanf_float+0x68>
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800542c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005430:	f040 8103 	bne.w	800563a <_scanf_float+0x40e>
 8005434:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	2501      	movs	r5, #1
 800543c:	e7c2      	b.n	80053c4 <_scanf_float+0x198>
 800543e:	2d03      	cmp	r5, #3
 8005440:	d0e3      	beq.n	800540a <_scanf_float+0x1de>
 8005442:	2d05      	cmp	r5, #5
 8005444:	e7df      	b.n	8005406 <_scanf_float+0x1da>
 8005446:	2d02      	cmp	r5, #2
 8005448:	f47f af23 	bne.w	8005292 <_scanf_float+0x66>
 800544c:	2503      	movs	r5, #3
 800544e:	e7b9      	b.n	80053c4 <_scanf_float+0x198>
 8005450:	2d06      	cmp	r5, #6
 8005452:	f47f af1e 	bne.w	8005292 <_scanf_float+0x66>
 8005456:	2507      	movs	r5, #7
 8005458:	e7b4      	b.n	80053c4 <_scanf_float+0x198>
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	0591      	lsls	r1, r2, #22
 800545e:	f57f af18 	bpl.w	8005292 <_scanf_float+0x66>
 8005462:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	9702      	str	r7, [sp, #8]
 800546a:	e7ab      	b.n	80053c4 <_scanf_float+0x198>
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005472:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005476:	d005      	beq.n	8005484 <_scanf_float+0x258>
 8005478:	0550      	lsls	r0, r2, #21
 800547a:	f57f af0a 	bpl.w	8005292 <_scanf_float+0x66>
 800547e:	2f00      	cmp	r7, #0
 8005480:	f000 80db 	beq.w	800563a <_scanf_float+0x40e>
 8005484:	0591      	lsls	r1, r2, #22
 8005486:	bf58      	it	pl
 8005488:	9902      	ldrpl	r1, [sp, #8]
 800548a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800548e:	bf58      	it	pl
 8005490:	1a79      	subpl	r1, r7, r1
 8005492:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005496:	bf58      	it	pl
 8005498:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	2700      	movs	r7, #0
 80054a0:	e790      	b.n	80053c4 <_scanf_float+0x198>
 80054a2:	f04f 0a03 	mov.w	sl, #3
 80054a6:	e78d      	b.n	80053c4 <_scanf_float+0x198>
 80054a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80054ac:	4649      	mov	r1, r9
 80054ae:	4640      	mov	r0, r8
 80054b0:	4798      	blx	r3
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f43f aedf 	beq.w	8005276 <_scanf_float+0x4a>
 80054b8:	e6eb      	b.n	8005292 <_scanf_float+0x66>
 80054ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054c2:	464a      	mov	r2, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	4798      	blx	r3
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	e6eb      	b.n	80052a8 <_scanf_float+0x7c>
 80054d0:	1e6b      	subs	r3, r5, #1
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d824      	bhi.n	8005520 <_scanf_float+0x2f4>
 80054d6:	2d02      	cmp	r5, #2
 80054d8:	d836      	bhi.n	8005548 <_scanf_float+0x31c>
 80054da:	9b01      	ldr	r3, [sp, #4]
 80054dc:	429e      	cmp	r6, r3
 80054de:	f67f aee7 	bls.w	80052b0 <_scanf_float+0x84>
 80054e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ea:	464a      	mov	r2, r9
 80054ec:	4640      	mov	r0, r8
 80054ee:	4798      	blx	r3
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	e7f0      	b.n	80054da <_scanf_float+0x2ae>
 80054f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005500:	464a      	mov	r2, r9
 8005502:	4640      	mov	r0, r8
 8005504:	4798      	blx	r3
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	3b01      	subs	r3, #1
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005510:	fa5f fa8a 	uxtb.w	sl, sl
 8005514:	f1ba 0f02 	cmp.w	sl, #2
 8005518:	d1ee      	bne.n	80054f8 <_scanf_float+0x2cc>
 800551a:	3d03      	subs	r5, #3
 800551c:	b2ed      	uxtb	r5, r5
 800551e:	1b76      	subs	r6, r6, r5
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	05da      	lsls	r2, r3, #23
 8005524:	d530      	bpl.n	8005588 <_scanf_float+0x35c>
 8005526:	055b      	lsls	r3, r3, #21
 8005528:	d511      	bpl.n	800554e <_scanf_float+0x322>
 800552a:	9b01      	ldr	r3, [sp, #4]
 800552c:	429e      	cmp	r6, r3
 800552e:	f67f aebf 	bls.w	80052b0 <_scanf_float+0x84>
 8005532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005536:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800553a:	464a      	mov	r2, r9
 800553c:	4640      	mov	r0, r8
 800553e:	4798      	blx	r3
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	3b01      	subs	r3, #1
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	e7f0      	b.n	800552a <_scanf_float+0x2fe>
 8005548:	46aa      	mov	sl, r5
 800554a:	46b3      	mov	fp, r6
 800554c:	e7de      	b.n	800550c <_scanf_float+0x2e0>
 800554e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	2965      	cmp	r1, #101	@ 0x65
 8005556:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800555a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	d00c      	beq.n	800557c <_scanf_float+0x350>
 8005562:	2945      	cmp	r1, #69	@ 0x45
 8005564:	d00a      	beq.n	800557c <_scanf_float+0x350>
 8005566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800556a:	464a      	mov	r2, r9
 800556c:	4640      	mov	r0, r8
 800556e:	4798      	blx	r3
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005576:	3b01      	subs	r3, #1
 8005578:	1eb5      	subs	r5, r6, #2
 800557a:	6123      	str	r3, [r4, #16]
 800557c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005580:	464a      	mov	r2, r9
 8005582:	4640      	mov	r0, r8
 8005584:	4798      	blx	r3
 8005586:	462e      	mov	r6, r5
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	f012 0210 	ands.w	r2, r2, #16
 800558e:	d001      	beq.n	8005594 <_scanf_float+0x368>
 8005590:	2000      	movs	r0, #0
 8005592:	e68e      	b.n	80052b2 <_scanf_float+0x86>
 8005594:	7032      	strb	r2, [r6, #0]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d125      	bne.n	80055ee <_scanf_float+0x3c2>
 80055a2:	9b02      	ldr	r3, [sp, #8]
 80055a4:	429f      	cmp	r7, r3
 80055a6:	d00a      	beq.n	80055be <_scanf_float+0x392>
 80055a8:	1bda      	subs	r2, r3, r7
 80055aa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80055ae:	429e      	cmp	r6, r3
 80055b0:	bf28      	it	cs
 80055b2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80055b6:	4922      	ldr	r1, [pc, #136]	@ (8005640 <_scanf_float+0x414>)
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 fa3d 	bl	8005a38 <siprintf>
 80055be:	9901      	ldr	r1, [sp, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	4640      	mov	r0, r8
 80055c4:	f002 fdbc 	bl	8008140 <_strtod_r>
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	6821      	ldr	r1, [r4, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f011 0f02 	tst.w	r1, #2
 80055d2:	ec57 6b10 	vmov	r6, r7, d0
 80055d6:	f103 0204 	add.w	r2, r3, #4
 80055da:	d015      	beq.n	8005608 <_scanf_float+0x3dc>
 80055dc:	9903      	ldr	r1, [sp, #12]
 80055de:	600a      	str	r2, [r1, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	e9c3 6700 	strd	r6, r7, [r3]
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	60e3      	str	r3, [r4, #12]
 80055ec:	e7d0      	b.n	8005590 <_scanf_float+0x364>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0e4      	beq.n	80055be <_scanf_float+0x392>
 80055f4:	9905      	ldr	r1, [sp, #20]
 80055f6:	230a      	movs	r3, #10
 80055f8:	3101      	adds	r1, #1
 80055fa:	4640      	mov	r0, r8
 80055fc:	f002 fe20 	bl	8008240 <_strtol_r>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	9e05      	ldr	r6, [sp, #20]
 8005604:	1ac2      	subs	r2, r0, r3
 8005606:	e7d0      	b.n	80055aa <_scanf_float+0x37e>
 8005608:	f011 0f04 	tst.w	r1, #4
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	600a      	str	r2, [r1, #0]
 8005610:	d1e6      	bne.n	80055e0 <_scanf_float+0x3b4>
 8005612:	681d      	ldr	r5, [r3, #0]
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4630      	mov	r0, r6
 800561a:	4639      	mov	r1, r7
 800561c:	f7fb fa8e 	bl	8000b3c <__aeabi_dcmpun>
 8005620:	b128      	cbz	r0, 800562e <_scanf_float+0x402>
 8005622:	4808      	ldr	r0, [pc, #32]	@ (8005644 <_scanf_float+0x418>)
 8005624:	f000 fb82 	bl	8005d2c <nanf>
 8005628:	ed85 0a00 	vstr	s0, [r5]
 800562c:	e7db      	b.n	80055e6 <_scanf_float+0x3ba>
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fb fae1 	bl	8000bf8 <__aeabi_d2f>
 8005636:	6028      	str	r0, [r5, #0]
 8005638:	e7d5      	b.n	80055e6 <_scanf_float+0x3ba>
 800563a:	2700      	movs	r7, #0
 800563c:	e62e      	b.n	800529c <_scanf_float+0x70>
 800563e:	bf00      	nop
 8005640:	08009d66 	.word	0x08009d66
 8005644:	08009ec2 	.word	0x08009ec2

08005648 <std>:
 8005648:	2300      	movs	r3, #0
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	e9c0 3300 	strd	r3, r3, [r0]
 8005652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005656:	6083      	str	r3, [r0, #8]
 8005658:	8181      	strh	r1, [r0, #12]
 800565a:	6643      	str	r3, [r0, #100]	@ 0x64
 800565c:	81c2      	strh	r2, [r0, #14]
 800565e:	6183      	str	r3, [r0, #24]
 8005660:	4619      	mov	r1, r3
 8005662:	2208      	movs	r2, #8
 8005664:	305c      	adds	r0, #92	@ 0x5c
 8005666:	f000 fae1 	bl	8005c2c <memset>
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <std+0x58>)
 800566c:	6263      	str	r3, [r4, #36]	@ 0x24
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <std+0x5c>)
 8005670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <std+0x60>)
 8005674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x64>)
 8005678:	6323      	str	r3, [r4, #48]	@ 0x30
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x68>)
 800567c:	6224      	str	r4, [r4, #32]
 800567e:	429c      	cmp	r4, r3
 8005680:	d006      	beq.n	8005690 <std+0x48>
 8005682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005686:	4294      	cmp	r4, r2
 8005688:	d002      	beq.n	8005690 <std+0x48>
 800568a:	33d0      	adds	r3, #208	@ 0xd0
 800568c:	429c      	cmp	r4, r3
 800568e:	d105      	bne.n	800569c <std+0x54>
 8005690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f000 bb44 	b.w	8005d24 <__retarget_lock_init_recursive>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	08005a7d 	.word	0x08005a7d
 80056a4:	08005a9f 	.word	0x08005a9f
 80056a8:	08005ad7 	.word	0x08005ad7
 80056ac:	08005afb 	.word	0x08005afb
 80056b0:	200002cc 	.word	0x200002cc

080056b4 <stdio_exit_handler>:
 80056b4:	4a02      	ldr	r2, [pc, #8]	@ (80056c0 <stdio_exit_handler+0xc>)
 80056b6:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <stdio_exit_handler+0x10>)
 80056b8:	4803      	ldr	r0, [pc, #12]	@ (80056c8 <stdio_exit_handler+0x14>)
 80056ba:	f000 b869 	b.w	8005790 <_fwalk_sglue>
 80056be:	bf00      	nop
 80056c0:	2000000c 	.word	0x2000000c
 80056c4:	08008e81 	.word	0x08008e81
 80056c8:	2000001c 	.word	0x2000001c

080056cc <cleanup_stdio>:
 80056cc:	6841      	ldr	r1, [r0, #4]
 80056ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <cleanup_stdio+0x34>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	b510      	push	{r4, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	d001      	beq.n	80056dc <cleanup_stdio+0x10>
 80056d8:	f003 fbd2 	bl	8008e80 <_fflush_r>
 80056dc:	68a1      	ldr	r1, [r4, #8]
 80056de:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <cleanup_stdio+0x38>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d002      	beq.n	80056ea <cleanup_stdio+0x1e>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f003 fbcb 	bl	8008e80 <_fflush_r>
 80056ea:	68e1      	ldr	r1, [r4, #12]
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <cleanup_stdio+0x3c>)
 80056ee:	4299      	cmp	r1, r3
 80056f0:	d004      	beq.n	80056fc <cleanup_stdio+0x30>
 80056f2:	4620      	mov	r0, r4
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f003 bbc2 	b.w	8008e80 <_fflush_r>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	200002cc 	.word	0x200002cc
 8005704:	20000334 	.word	0x20000334
 8005708:	2000039c 	.word	0x2000039c

0800570c <global_stdio_init.part.0>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <global_stdio_init.part.0+0x30>)
 8005710:	4c0b      	ldr	r4, [pc, #44]	@ (8005740 <global_stdio_init.part.0+0x34>)
 8005712:	4a0c      	ldr	r2, [pc, #48]	@ (8005744 <global_stdio_init.part.0+0x38>)
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	4620      	mov	r0, r4
 8005718:	2200      	movs	r2, #0
 800571a:	2104      	movs	r1, #4
 800571c:	f7ff ff94 	bl	8005648 <std>
 8005720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005724:	2201      	movs	r2, #1
 8005726:	2109      	movs	r1, #9
 8005728:	f7ff ff8e 	bl	8005648 <std>
 800572c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005730:	2202      	movs	r2, #2
 8005732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005736:	2112      	movs	r1, #18
 8005738:	f7ff bf86 	b.w	8005648 <std>
 800573c:	20000404 	.word	0x20000404
 8005740:	200002cc 	.word	0x200002cc
 8005744:	080056b5 	.word	0x080056b5

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	@ (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 baec 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	2000040d 	.word	0x2000040d

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	@ (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 bae7 	b.w	8005d28 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	2000040d 	.word	0x2000040d

08005760 <__sinit>:
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	f7ff fff0 	bl	8005748 <__sfp_lock_acquire>
 8005768:	6a23      	ldr	r3, [r4, #32]
 800576a:	b11b      	cbz	r3, 8005774 <__sinit+0x14>
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f7ff bff0 	b.w	8005754 <__sfp_lock_release>
 8005774:	4b04      	ldr	r3, [pc, #16]	@ (8005788 <__sinit+0x28>)
 8005776:	6223      	str	r3, [r4, #32]
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <__sinit+0x2c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f5      	bne.n	800576c <__sinit+0xc>
 8005780:	f7ff ffc4 	bl	800570c <global_stdio_init.part.0>
 8005784:	e7f2      	b.n	800576c <__sinit+0xc>
 8005786:	bf00      	nop
 8005788:	080056cd 	.word	0x080056cd
 800578c:	20000404 	.word	0x20000404

08005790 <_fwalk_sglue>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	4607      	mov	r7, r0
 8005796:	4688      	mov	r8, r1
 8005798:	4614      	mov	r4, r2
 800579a:	2600      	movs	r6, #0
 800579c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a0:	f1b9 0901 	subs.w	r9, r9, #1
 80057a4:	d505      	bpl.n	80057b2 <_fwalk_sglue+0x22>
 80057a6:	6824      	ldr	r4, [r4, #0]
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d1f7      	bne.n	800579c <_fwalk_sglue+0xc>
 80057ac:	4630      	mov	r0, r6
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d907      	bls.n	80057c8 <_fwalk_sglue+0x38>
 80057b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057bc:	3301      	adds	r3, #1
 80057be:	d003      	beq.n	80057c8 <_fwalk_sglue+0x38>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c0      	blx	r8
 80057c6:	4306      	orrs	r6, r0
 80057c8:	3568      	adds	r5, #104	@ 0x68
 80057ca:	e7e9      	b.n	80057a0 <_fwalk_sglue+0x10>

080057cc <iprintf>:
 80057cc:	b40f      	push	{r0, r1, r2, r3}
 80057ce:	b507      	push	{r0, r1, r2, lr}
 80057d0:	4906      	ldr	r1, [pc, #24]	@ (80057ec <iprintf+0x20>)
 80057d2:	ab04      	add	r3, sp, #16
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057da:	6881      	ldr	r1, [r0, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	f002 feb3 	bl	8008548 <_vfiprintf_r>
 80057e2:	b003      	add	sp, #12
 80057e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e8:	b004      	add	sp, #16
 80057ea:	4770      	bx	lr
 80057ec:	20000018 	.word	0x20000018

080057f0 <_puts_r>:
 80057f0:	6a03      	ldr	r3, [r0, #32]
 80057f2:	b570      	push	{r4, r5, r6, lr}
 80057f4:	6884      	ldr	r4, [r0, #8]
 80057f6:	4605      	mov	r5, r0
 80057f8:	460e      	mov	r6, r1
 80057fa:	b90b      	cbnz	r3, 8005800 <_puts_r+0x10>
 80057fc:	f7ff ffb0 	bl	8005760 <__sinit>
 8005800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005802:	07db      	lsls	r3, r3, #31
 8005804:	d405      	bmi.n	8005812 <_puts_r+0x22>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	0598      	lsls	r0, r3, #22
 800580a:	d402      	bmi.n	8005812 <_puts_r+0x22>
 800580c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580e:	f000 fa8a 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	0719      	lsls	r1, r3, #28
 8005816:	d502      	bpl.n	800581e <_puts_r+0x2e>
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d135      	bne.n	800588a <_puts_r+0x9a>
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f9ad 	bl	8005b80 <__swsetup_r>
 8005826:	b380      	cbz	r0, 800588a <_puts_r+0x9a>
 8005828:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800582c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800582e:	07da      	lsls	r2, r3, #31
 8005830:	d405      	bmi.n	800583e <_puts_r+0x4e>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	059b      	lsls	r3, r3, #22
 8005836:	d402      	bmi.n	800583e <_puts_r+0x4e>
 8005838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800583a:	f000 fa75 	bl	8005d28 <__retarget_lock_release_recursive>
 800583e:	4628      	mov	r0, r5
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	2b00      	cmp	r3, #0
 8005844:	da04      	bge.n	8005850 <_puts_r+0x60>
 8005846:	69a2      	ldr	r2, [r4, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	dc17      	bgt.n	800587c <_puts_r+0x8c>
 800584c:	290a      	cmp	r1, #10
 800584e:	d015      	beq.n	800587c <_puts_r+0x8c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	7019      	strb	r1, [r3, #0]
 8005858:	68a3      	ldr	r3, [r4, #8]
 800585a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800585e:	3b01      	subs	r3, #1
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	2900      	cmp	r1, #0
 8005864:	d1ed      	bne.n	8005842 <_puts_r+0x52>
 8005866:	2b00      	cmp	r3, #0
 8005868:	da11      	bge.n	800588e <_puts_r+0x9e>
 800586a:	4622      	mov	r2, r4
 800586c:	210a      	movs	r1, #10
 800586e:	4628      	mov	r0, r5
 8005870:	f000 f947 	bl	8005b02 <__swbuf_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d0d7      	beq.n	8005828 <_puts_r+0x38>
 8005878:	250a      	movs	r5, #10
 800587a:	e7d7      	b.n	800582c <_puts_r+0x3c>
 800587c:	4622      	mov	r2, r4
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f93f 	bl	8005b02 <__swbuf_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d1e7      	bne.n	8005858 <_puts_r+0x68>
 8005888:	e7ce      	b.n	8005828 <_puts_r+0x38>
 800588a:	3e01      	subs	r6, #1
 800588c:	e7e4      	b.n	8005858 <_puts_r+0x68>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	220a      	movs	r2, #10
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e7ee      	b.n	8005878 <_puts_r+0x88>
	...

0800589c <puts>:
 800589c:	4b02      	ldr	r3, [pc, #8]	@ (80058a8 <puts+0xc>)
 800589e:	4601      	mov	r1, r0
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f7ff bfa5 	b.w	80057f0 <_puts_r>
 80058a6:	bf00      	nop
 80058a8:	20000018 	.word	0x20000018

080058ac <iscanf>:
 80058ac:	b40f      	push	{r0, r1, r2, r3}
 80058ae:	b507      	push	{r0, r1, r2, lr}
 80058b0:	4906      	ldr	r1, [pc, #24]	@ (80058cc <iscanf+0x20>)
 80058b2:	ab04      	add	r3, sp, #16
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ba:	6841      	ldr	r1, [r0, #4]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	f003 f8f9 	bl	8008ab4 <_vfiscanf_r>
 80058c2:	b003      	add	sp, #12
 80058c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c8:	b004      	add	sp, #16
 80058ca:	4770      	bx	lr
 80058cc:	20000018 	.word	0x20000018

080058d0 <setvbuf>:
 80058d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	461d      	mov	r5, r3
 80058d6:	4b57      	ldr	r3, [pc, #348]	@ (8005a34 <setvbuf+0x164>)
 80058d8:	681f      	ldr	r7, [r3, #0]
 80058da:	4604      	mov	r4, r0
 80058dc:	460e      	mov	r6, r1
 80058de:	4690      	mov	r8, r2
 80058e0:	b127      	cbz	r7, 80058ec <setvbuf+0x1c>
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	b913      	cbnz	r3, 80058ec <setvbuf+0x1c>
 80058e6:	4638      	mov	r0, r7
 80058e8:	f7ff ff3a 	bl	8005760 <__sinit>
 80058ec:	f1b8 0f02 	cmp.w	r8, #2
 80058f0:	d006      	beq.n	8005900 <setvbuf+0x30>
 80058f2:	f1b8 0f01 	cmp.w	r8, #1
 80058f6:	f200 809a 	bhi.w	8005a2e <setvbuf+0x15e>
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	f2c0 8097 	blt.w	8005a2e <setvbuf+0x15e>
 8005900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005902:	07d9      	lsls	r1, r3, #31
 8005904:	d405      	bmi.n	8005912 <setvbuf+0x42>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	059a      	lsls	r2, r3, #22
 800590a:	d402      	bmi.n	8005912 <setvbuf+0x42>
 800590c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590e:	f000 fa0a 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8005912:	4621      	mov	r1, r4
 8005914:	4638      	mov	r0, r7
 8005916:	f003 fab3 	bl	8008e80 <_fflush_r>
 800591a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800591c:	b141      	cbz	r1, 8005930 <setvbuf+0x60>
 800591e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005922:	4299      	cmp	r1, r3
 8005924:	d002      	beq.n	800592c <setvbuf+0x5c>
 8005926:	4638      	mov	r0, r7
 8005928:	f001 f85e 	bl	80069e8 <_free_r>
 800592c:	2300      	movs	r3, #0
 800592e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005930:	2300      	movs	r3, #0
 8005932:	61a3      	str	r3, [r4, #24]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	d503      	bpl.n	8005944 <setvbuf+0x74>
 800593c:	6921      	ldr	r1, [r4, #16]
 800593e:	4638      	mov	r0, r7
 8005940:	f001 f852 	bl	80069e8 <_free_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	f1b8 0f02 	cmp.w	r8, #2
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	d061      	beq.n	8005a1a <setvbuf+0x14a>
 8005956:	ab01      	add	r3, sp, #4
 8005958:	466a      	mov	r2, sp
 800595a:	4621      	mov	r1, r4
 800595c:	4638      	mov	r0, r7
 800595e:	f003 fab7 	bl	8008ed0 <__swhatbuf_r>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	4318      	orrs	r0, r3
 8005966:	81a0      	strh	r0, [r4, #12]
 8005968:	bb2d      	cbnz	r5, 80059b6 <setvbuf+0xe6>
 800596a:	9d00      	ldr	r5, [sp, #0]
 800596c:	4628      	mov	r0, r5
 800596e:	f001 f885 	bl	8006a7c <malloc>
 8005972:	4606      	mov	r6, r0
 8005974:	2800      	cmp	r0, #0
 8005976:	d152      	bne.n	8005a1e <setvbuf+0x14e>
 8005978:	f8dd 9000 	ldr.w	r9, [sp]
 800597c:	45a9      	cmp	r9, r5
 800597e:	d140      	bne.n	8005a02 <setvbuf+0x132>
 8005980:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005988:	f043 0202 	orr.w	r2, r3, #2
 800598c:	81a2      	strh	r2, [r4, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	60a2      	str	r2, [r4, #8]
 8005992:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005996:	6022      	str	r2, [r4, #0]
 8005998:	6122      	str	r2, [r4, #16]
 800599a:	2201      	movs	r2, #1
 800599c:	6162      	str	r2, [r4, #20]
 800599e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059a0:	07d6      	lsls	r6, r2, #31
 80059a2:	d404      	bmi.n	80059ae <setvbuf+0xde>
 80059a4:	0598      	lsls	r0, r3, #22
 80059a6:	d402      	bmi.n	80059ae <setvbuf+0xde>
 80059a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059aa:	f000 f9bd 	bl	8005d28 <__retarget_lock_release_recursive>
 80059ae:	4628      	mov	r0, r5
 80059b0:	b003      	add	sp, #12
 80059b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059b6:	2e00      	cmp	r6, #0
 80059b8:	d0d8      	beq.n	800596c <setvbuf+0x9c>
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	b913      	cbnz	r3, 80059c4 <setvbuf+0xf4>
 80059be:	4638      	mov	r0, r7
 80059c0:	f7ff fece 	bl	8005760 <__sinit>
 80059c4:	f1b8 0f01 	cmp.w	r8, #1
 80059c8:	bf08      	it	eq
 80059ca:	89a3      	ldrheq	r3, [r4, #12]
 80059cc:	6026      	str	r6, [r4, #0]
 80059ce:	bf04      	itt	eq
 80059d0:	f043 0301 	orreq.w	r3, r3, #1
 80059d4:	81a3      	strheq	r3, [r4, #12]
 80059d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059da:	f013 0208 	ands.w	r2, r3, #8
 80059de:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80059e2:	d01e      	beq.n	8005a22 <setvbuf+0x152>
 80059e4:	07d9      	lsls	r1, r3, #31
 80059e6:	bf41      	itttt	mi
 80059e8:	2200      	movmi	r2, #0
 80059ea:	426d      	negmi	r5, r5
 80059ec:	60a2      	strmi	r2, [r4, #8]
 80059ee:	61a5      	strmi	r5, [r4, #24]
 80059f0:	bf58      	it	pl
 80059f2:	60a5      	strpl	r5, [r4, #8]
 80059f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059f6:	07d2      	lsls	r2, r2, #31
 80059f8:	d401      	bmi.n	80059fe <setvbuf+0x12e>
 80059fa:	059b      	lsls	r3, r3, #22
 80059fc:	d513      	bpl.n	8005a26 <setvbuf+0x156>
 80059fe:	2500      	movs	r5, #0
 8005a00:	e7d5      	b.n	80059ae <setvbuf+0xde>
 8005a02:	4648      	mov	r0, r9
 8005a04:	f001 f83a 	bl	8006a7c <malloc>
 8005a08:	4606      	mov	r6, r0
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0b8      	beq.n	8005980 <setvbuf+0xb0>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	464d      	mov	r5, r9
 8005a18:	e7cf      	b.n	80059ba <setvbuf+0xea>
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	e7b2      	b.n	8005984 <setvbuf+0xb4>
 8005a1e:	46a9      	mov	r9, r5
 8005a20:	e7f5      	b.n	8005a0e <setvbuf+0x13e>
 8005a22:	60a2      	str	r2, [r4, #8]
 8005a24:	e7e6      	b.n	80059f4 <setvbuf+0x124>
 8005a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a28:	f000 f97e 	bl	8005d28 <__retarget_lock_release_recursive>
 8005a2c:	e7e7      	b.n	80059fe <setvbuf+0x12e>
 8005a2e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005a32:	e7bc      	b.n	80059ae <setvbuf+0xde>
 8005a34:	20000018 	.word	0x20000018

08005a38 <siprintf>:
 8005a38:	b40e      	push	{r1, r2, r3}
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	b09d      	sub	sp, #116	@ 0x74
 8005a3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	9006      	str	r0, [sp, #24]
 8005a44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a48:	480a      	ldr	r0, [pc, #40]	@ (8005a74 <siprintf+0x3c>)
 8005a4a:	9107      	str	r1, [sp, #28]
 8005a4c:	9104      	str	r1, [sp, #16]
 8005a4e:	490a      	ldr	r1, [pc, #40]	@ (8005a78 <siprintf+0x40>)
 8005a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	2400      	movs	r4, #0
 8005a58:	a902      	add	r1, sp, #8
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a60:	f002 fc4c 	bl	80082fc <_svfiprintf_r>
 8005a64:	9b02      	ldr	r3, [sp, #8]
 8005a66:	701c      	strb	r4, [r3, #0]
 8005a68:	b01d      	add	sp, #116	@ 0x74
 8005a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a6e:	b003      	add	sp, #12
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000018 	.word	0x20000018
 8005a78:	ffff0208 	.word	0xffff0208

08005a7c <__sread>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	460c      	mov	r4, r1
 8005a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a84:	f000 f900 	bl	8005c88 <_read_r>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	bfab      	itete	ge
 8005a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005a90:	181b      	addge	r3, r3, r0
 8005a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a96:	bfac      	ite	ge
 8005a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a9a:	81a3      	strhlt	r3, [r4, #12]
 8005a9c:	bd10      	pop	{r4, pc}

08005a9e <__swrite>:
 8005a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa2:	461f      	mov	r7, r3
 8005aa4:	898b      	ldrh	r3, [r1, #12]
 8005aa6:	05db      	lsls	r3, r3, #23
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	4616      	mov	r6, r2
 8005aae:	d505      	bpl.n	8005abc <__swrite+0x1e>
 8005ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f000 f8d4 	bl	8005c64 <_lseek_r>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ac6:	81a3      	strh	r3, [r4, #12]
 8005ac8:	4632      	mov	r2, r6
 8005aca:	463b      	mov	r3, r7
 8005acc:	4628      	mov	r0, r5
 8005ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad2:	f000 b8eb 	b.w	8005cac <_write_r>

08005ad6 <__sseek>:
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	460c      	mov	r4, r1
 8005ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ade:	f000 f8c1 	bl	8005c64 <_lseek_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	bf15      	itete	ne
 8005ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005af2:	81a3      	strheq	r3, [r4, #12]
 8005af4:	bf18      	it	ne
 8005af6:	81a3      	strhne	r3, [r4, #12]
 8005af8:	bd10      	pop	{r4, pc}

08005afa <__sclose>:
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 b8a1 	b.w	8005c44 <_close_r>

08005b02 <__swbuf_r>:
 8005b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b04:	460e      	mov	r6, r1
 8005b06:	4614      	mov	r4, r2
 8005b08:	4605      	mov	r5, r0
 8005b0a:	b118      	cbz	r0, 8005b14 <__swbuf_r+0x12>
 8005b0c:	6a03      	ldr	r3, [r0, #32]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <__swbuf_r+0x12>
 8005b10:	f7ff fe26 	bl	8005760 <__sinit>
 8005b14:	69a3      	ldr	r3, [r4, #24]
 8005b16:	60a3      	str	r3, [r4, #8]
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	071a      	lsls	r2, r3, #28
 8005b1c:	d501      	bpl.n	8005b22 <__swbuf_r+0x20>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	b943      	cbnz	r3, 8005b34 <__swbuf_r+0x32>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 f82b 	bl	8005b80 <__swsetup_r>
 8005b2a:	b118      	cbz	r0, 8005b34 <__swbuf_r+0x32>
 8005b2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005b30:	4638      	mov	r0, r7
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	1a98      	subs	r0, r3, r2
 8005b3a:	6963      	ldr	r3, [r4, #20]
 8005b3c:	b2f6      	uxtb	r6, r6
 8005b3e:	4283      	cmp	r3, r0
 8005b40:	4637      	mov	r7, r6
 8005b42:	dc05      	bgt.n	8005b50 <__swbuf_r+0x4e>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f003 f99a 	bl	8008e80 <_fflush_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d1ed      	bne.n	8005b2c <__swbuf_r+0x2a>
 8005b50:	68a3      	ldr	r3, [r4, #8]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	60a3      	str	r3, [r4, #8]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	701e      	strb	r6, [r3, #0]
 8005b5e:	6962      	ldr	r2, [r4, #20]
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d004      	beq.n	8005b70 <__swbuf_r+0x6e>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	07db      	lsls	r3, r3, #31
 8005b6a:	d5e1      	bpl.n	8005b30 <__swbuf_r+0x2e>
 8005b6c:	2e0a      	cmp	r6, #10
 8005b6e:	d1df      	bne.n	8005b30 <__swbuf_r+0x2e>
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f003 f984 	bl	8008e80 <_fflush_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d0d9      	beq.n	8005b30 <__swbuf_r+0x2e>
 8005b7c:	e7d6      	b.n	8005b2c <__swbuf_r+0x2a>
	...

08005b80 <__swsetup_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <__swsetup_r+0xa8>)
 8005b84:	4605      	mov	r5, r0
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	460c      	mov	r4, r1
 8005b8a:	b118      	cbz	r0, 8005b94 <__swsetup_r+0x14>
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	b90b      	cbnz	r3, 8005b94 <__swsetup_r+0x14>
 8005b90:	f7ff fde6 	bl	8005760 <__sinit>
 8005b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b98:	0719      	lsls	r1, r3, #28
 8005b9a:	d422      	bmi.n	8005be2 <__swsetup_r+0x62>
 8005b9c:	06da      	lsls	r2, r3, #27
 8005b9e:	d407      	bmi.n	8005bb0 <__swsetup_r+0x30>
 8005ba0:	2209      	movs	r2, #9
 8005ba2:	602a      	str	r2, [r5, #0]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bae:	e033      	b.n	8005c18 <__swsetup_r+0x98>
 8005bb0:	0758      	lsls	r0, r3, #29
 8005bb2:	d512      	bpl.n	8005bda <__swsetup_r+0x5a>
 8005bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb6:	b141      	cbz	r1, 8005bca <__swsetup_r+0x4a>
 8005bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d002      	beq.n	8005bc6 <__swsetup_r+0x46>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 ff11 	bl	80069e8 <_free_r>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6063      	str	r3, [r4, #4]
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f043 0308 	orr.w	r3, r3, #8
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	b94b      	cbnz	r3, 8005bfa <__swsetup_r+0x7a>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf0:	d003      	beq.n	8005bfa <__swsetup_r+0x7a>
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f003 f991 	bl	8008f1c <__smakebuf_r>
 8005bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfe:	f013 0201 	ands.w	r2, r3, #1
 8005c02:	d00a      	beq.n	8005c1a <__swsetup_r+0x9a>
 8005c04:	2200      	movs	r2, #0
 8005c06:	60a2      	str	r2, [r4, #8]
 8005c08:	6962      	ldr	r2, [r4, #20]
 8005c0a:	4252      	negs	r2, r2
 8005c0c:	61a2      	str	r2, [r4, #24]
 8005c0e:	6922      	ldr	r2, [r4, #16]
 8005c10:	b942      	cbnz	r2, 8005c24 <__swsetup_r+0xa4>
 8005c12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c16:	d1c5      	bne.n	8005ba4 <__swsetup_r+0x24>
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	0799      	lsls	r1, r3, #30
 8005c1c:	bf58      	it	pl
 8005c1e:	6962      	ldrpl	r2, [r4, #20]
 8005c20:	60a2      	str	r2, [r4, #8]
 8005c22:	e7f4      	b.n	8005c0e <__swsetup_r+0x8e>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e7f7      	b.n	8005c18 <__swsetup_r+0x98>
 8005c28:	20000018 	.word	0x20000018

08005c2c <memset>:
 8005c2c:	4402      	add	r2, r0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d100      	bne.n	8005c36 <memset+0xa>
 8005c34:	4770      	bx	lr
 8005c36:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3a:	e7f9      	b.n	8005c30 <memset+0x4>

08005c3c <_localeconv_r>:
 8005c3c:	4800      	ldr	r0, [pc, #0]	@ (8005c40 <_localeconv_r+0x4>)
 8005c3e:	4770      	bx	lr
 8005c40:	20000158 	.word	0x20000158

08005c44 <_close_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d06      	ldr	r5, [pc, #24]	@ (8005c60 <_close_r+0x1c>)
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	f7fb fc8a 	bl	8001568 <_close>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_close_r+0x1a>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_close_r+0x1a>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	20000408 	.word	0x20000408

08005c64 <_lseek_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d07      	ldr	r5, [pc, #28]	@ (8005c84 <_lseek_r+0x20>)
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	2200      	movs	r2, #0
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fb fc9f 	bl	80015b6 <_lseek>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_lseek_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_lseek_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	20000408 	.word	0x20000408

08005c88 <_read_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ca8 <_read_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fb fc2d 	bl	80014f6 <_read>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_read_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_read_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	20000408 	.word	0x20000408

08005cac <_write_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_write_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb fc38 	bl	8001530 <_write>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_write_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_write_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	20000408 	.word	0x20000408

08005cd0 <__errno>:
 8005cd0:	4b01      	ldr	r3, [pc, #4]	@ (8005cd8 <__errno+0x8>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000018 	.word	0x20000018

08005cdc <__libc_init_array>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4d0d      	ldr	r5, [pc, #52]	@ (8005d14 <__libc_init_array+0x38>)
 8005ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d18 <__libc_init_array+0x3c>)
 8005ce2:	1b64      	subs	r4, r4, r5
 8005ce4:	10a4      	asrs	r4, r4, #2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	42a6      	cmp	r6, r4
 8005cea:	d109      	bne.n	8005d00 <__libc_init_array+0x24>
 8005cec:	4d0b      	ldr	r5, [pc, #44]	@ (8005d1c <__libc_init_array+0x40>)
 8005cee:	4c0c      	ldr	r4, [pc, #48]	@ (8005d20 <__libc_init_array+0x44>)
 8005cf0:	f003 ffca 	bl	8009c88 <_init>
 8005cf4:	1b64      	subs	r4, r4, r5
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	d105      	bne.n	8005d0a <__libc_init_array+0x2e>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d04:	4798      	blx	r3
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7ee      	b.n	8005ce8 <__libc_init_array+0xc>
 8005d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0e:	4798      	blx	r3
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7f2      	b.n	8005cfa <__libc_init_array+0x1e>
 8005d14:	0800a17c 	.word	0x0800a17c
 8005d18:	0800a17c 	.word	0x0800a17c
 8005d1c:	0800a17c 	.word	0x0800a17c
 8005d20:	0800a180 	.word	0x0800a180

08005d24 <__retarget_lock_init_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_acquire_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__retarget_lock_release_recursive>:
 8005d28:	4770      	bx	lr
	...

08005d2c <nanf>:
 8005d2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005d34 <nanf+0x8>
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	7fc00000 	.word	0x7fc00000

08005d38 <quorem>:
 8005d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	6903      	ldr	r3, [r0, #16]
 8005d3e:	690c      	ldr	r4, [r1, #16]
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	4607      	mov	r7, r0
 8005d44:	db7e      	blt.n	8005e44 <quorem+0x10c>
 8005d46:	3c01      	subs	r4, #1
 8005d48:	f101 0814 	add.w	r8, r1, #20
 8005d4c:	00a3      	lsls	r3, r4, #2
 8005d4e:	f100 0514 	add.w	r5, r0, #20
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d62:	3301      	adds	r3, #1
 8005d64:	429a      	cmp	r2, r3
 8005d66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d6e:	d32e      	bcc.n	8005dce <quorem+0x96>
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	46c4      	mov	ip, r8
 8005d76:	46ae      	mov	lr, r5
 8005d78:	46d3      	mov	fp, sl
 8005d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d7e:	b298      	uxth	r0, r3
 8005d80:	fb06 a000 	mla	r0, r6, r0, sl
 8005d84:	0c02      	lsrs	r2, r0, #16
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	fb06 2303 	mla	r3, r6, r3, r2
 8005d8c:	f8de 2000 	ldr.w	r2, [lr]
 8005d90:	b280      	uxth	r0, r0
 8005d92:	b292      	uxth	r2, r2
 8005d94:	1a12      	subs	r2, r2, r0
 8005d96:	445a      	add	r2, fp
 8005d98:	f8de 0000 	ldr.w	r0, [lr]
 8005d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005da6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005daa:	b292      	uxth	r2, r2
 8005dac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005db0:	45e1      	cmp	r9, ip
 8005db2:	f84e 2b04 	str.w	r2, [lr], #4
 8005db6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dba:	d2de      	bcs.n	8005d7a <quorem+0x42>
 8005dbc:	9b00      	ldr	r3, [sp, #0]
 8005dbe:	58eb      	ldr	r3, [r5, r3]
 8005dc0:	b92b      	cbnz	r3, 8005dce <quorem+0x96>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	3b04      	subs	r3, #4
 8005dc6:	429d      	cmp	r5, r3
 8005dc8:	461a      	mov	r2, r3
 8005dca:	d32f      	bcc.n	8005e2c <quorem+0xf4>
 8005dcc:	613c      	str	r4, [r7, #16]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f001 f9c6 	bl	8007160 <__mcmp>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	db25      	blt.n	8005e24 <quorem+0xec>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	2000      	movs	r0, #0
 8005ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005de0:	f8d1 c000 	ldr.w	ip, [r1]
 8005de4:	fa1f fe82 	uxth.w	lr, r2
 8005de8:	fa1f f38c 	uxth.w	r3, ip
 8005dec:	eba3 030e 	sub.w	r3, r3, lr
 8005df0:	4403      	add	r3, r0
 8005df2:	0c12      	lsrs	r2, r2, #16
 8005df4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005df8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e02:	45c1      	cmp	r9, r8
 8005e04:	f841 3b04 	str.w	r3, [r1], #4
 8005e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e0c:	d2e6      	bcs.n	8005ddc <quorem+0xa4>
 8005e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e16:	b922      	cbnz	r2, 8005e22 <quorem+0xea>
 8005e18:	3b04      	subs	r3, #4
 8005e1a:	429d      	cmp	r5, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	d30b      	bcc.n	8005e38 <quorem+0x100>
 8005e20:	613c      	str	r4, [r7, #16]
 8005e22:	3601      	adds	r6, #1
 8005e24:	4630      	mov	r0, r6
 8005e26:	b003      	add	sp, #12
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d1cb      	bne.n	8005dcc <quorem+0x94>
 8005e34:	3c01      	subs	r4, #1
 8005e36:	e7c6      	b.n	8005dc6 <quorem+0x8e>
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	d1ef      	bne.n	8005e20 <quorem+0xe8>
 8005e40:	3c01      	subs	r4, #1
 8005e42:	e7ea      	b.n	8005e1a <quorem+0xe2>
 8005e44:	2000      	movs	r0, #0
 8005e46:	e7ee      	b.n	8005e26 <quorem+0xee>

08005e48 <_dtoa_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	69c7      	ldr	r7, [r0, #28]
 8005e4e:	b097      	sub	sp, #92	@ 0x5c
 8005e50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005e54:	ec55 4b10 	vmov	r4, r5, d0
 8005e58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005e5a:	9107      	str	r1, [sp, #28]
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e60:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e62:	b97f      	cbnz	r7, 8005e84 <_dtoa_r+0x3c>
 8005e64:	2010      	movs	r0, #16
 8005e66:	f000 fe09 	bl	8006a7c <malloc>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005e70:	b920      	cbnz	r0, 8005e7c <_dtoa_r+0x34>
 8005e72:	4ba9      	ldr	r3, [pc, #676]	@ (8006118 <_dtoa_r+0x2d0>)
 8005e74:	21ef      	movs	r1, #239	@ 0xef
 8005e76:	48a9      	ldr	r0, [pc, #676]	@ (800611c <_dtoa_r+0x2d4>)
 8005e78:	f003 fa76 	bl	8009368 <__assert_func>
 8005e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e80:	6007      	str	r7, [r0, #0]
 8005e82:	60c7      	str	r7, [r0, #12]
 8005e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	b159      	cbz	r1, 8005ea4 <_dtoa_r+0x5c>
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	604a      	str	r2, [r1, #4]
 8005e90:	2301      	movs	r3, #1
 8005e92:	4093      	lsls	r3, r2
 8005e94:	608b      	str	r3, [r1, #8]
 8005e96:	4648      	mov	r0, r9
 8005e98:	f000 fee6 	bl	8006c68 <_Bfree>
 8005e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	1e2b      	subs	r3, r5, #0
 8005ea6:	bfb9      	ittee	lt
 8005ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005eac:	9305      	strlt	r3, [sp, #20]
 8005eae:	2300      	movge	r3, #0
 8005eb0:	6033      	strge	r3, [r6, #0]
 8005eb2:	9f05      	ldr	r7, [sp, #20]
 8005eb4:	4b9a      	ldr	r3, [pc, #616]	@ (8006120 <_dtoa_r+0x2d8>)
 8005eb6:	bfbc      	itt	lt
 8005eb8:	2201      	movlt	r2, #1
 8005eba:	6032      	strlt	r2, [r6, #0]
 8005ebc:	43bb      	bics	r3, r7
 8005ebe:	d112      	bne.n	8005ee6 <_dtoa_r+0x9e>
 8005ec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ecc:	4323      	orrs	r3, r4
 8005ece:	f000 855a 	beq.w	8006986 <_dtoa_r+0xb3e>
 8005ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ed4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006134 <_dtoa_r+0x2ec>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 855c 	beq.w	8006996 <_dtoa_r+0xb4e>
 8005ede:	f10a 0303 	add.w	r3, sl, #3
 8005ee2:	f000 bd56 	b.w	8006992 <_dtoa_r+0xb4a>
 8005ee6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005eea:	2200      	movs	r2, #0
 8005eec:	ec51 0b17 	vmov	r0, r1, d7
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005ef6:	f7fa fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 8005efa:	4680      	mov	r8, r0
 8005efc:	b158      	cbz	r0, 8005f16 <_dtoa_r+0xce>
 8005efe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f00:	2301      	movs	r3, #1
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f06:	b113      	cbz	r3, 8005f0e <_dtoa_r+0xc6>
 8005f08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f0a:	4b86      	ldr	r3, [pc, #536]	@ (8006124 <_dtoa_r+0x2dc>)
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006138 <_dtoa_r+0x2f0>
 8005f12:	f000 bd40 	b.w	8006996 <_dtoa_r+0xb4e>
 8005f16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005f1a:	aa14      	add	r2, sp, #80	@ 0x50
 8005f1c:	a915      	add	r1, sp, #84	@ 0x54
 8005f1e:	4648      	mov	r0, r9
 8005f20:	f001 fa3e 	bl	80073a0 <__d2b>
 8005f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f28:	9002      	str	r0, [sp, #8]
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d078      	beq.n	8006020 <_dtoa_r+0x1d8>
 8005f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4b76      	ldr	r3, [pc, #472]	@ (8006128 <_dtoa_r+0x2e0>)
 8005f4e:	f7fa f9a3 	bl	8000298 <__aeabi_dsub>
 8005f52:	a36b      	add	r3, pc, #428	@ (adr r3, 8006100 <_dtoa_r+0x2b8>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f7fa fb56 	bl	8000608 <__aeabi_dmul>
 8005f5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006108 <_dtoa_r+0x2c0>)
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f7fa f99b 	bl	800029c <__adddf3>
 8005f66:	4604      	mov	r4, r0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	f7fa fae2 	bl	8000534 <__aeabi_i2d>
 8005f70:	a367      	add	r3, pc, #412	@ (adr r3, 8006110 <_dtoa_r+0x2c8>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa fb47 	bl	8000608 <__aeabi_dmul>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f7fa f98b 	bl	800029c <__adddf3>
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	f7fa fded 	bl	8000b68 <__aeabi_d2iz>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4607      	mov	r7, r0
 8005f92:	2300      	movs	r3, #0
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7fa fda8 	bl	8000aec <__aeabi_dcmplt>
 8005f9c:	b140      	cbz	r0, 8005fb0 <_dtoa_r+0x168>
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f7fa fac8 	bl	8000534 <__aeabi_i2d>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	f7fa fd96 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fac:	b900      	cbnz	r0, 8005fb0 <_dtoa_r+0x168>
 8005fae:	3f01      	subs	r7, #1
 8005fb0:	2f16      	cmp	r7, #22
 8005fb2:	d852      	bhi.n	800605a <_dtoa_r+0x212>
 8005fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800612c <_dtoa_r+0x2e4>)
 8005fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fc2:	f7fa fd93 	bl	8000aec <__aeabi_dcmplt>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d049      	beq.n	800605e <_dtoa_r+0x216>
 8005fca:	3f01      	subs	r7, #1
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fd2:	1b9b      	subs	r3, r3, r6
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	bf45      	ittet	mi
 8005fd8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fdc:	9300      	strmi	r3, [sp, #0]
 8005fde:	2300      	movpl	r3, #0
 8005fe0:	2300      	movmi	r3, #0
 8005fe2:	9206      	str	r2, [sp, #24]
 8005fe4:	bf54      	ite	pl
 8005fe6:	9300      	strpl	r3, [sp, #0]
 8005fe8:	9306      	strmi	r3, [sp, #24]
 8005fea:	2f00      	cmp	r7, #0
 8005fec:	db39      	blt.n	8006062 <_dtoa_r+0x21a>
 8005fee:	9b06      	ldr	r3, [sp, #24]
 8005ff0:	970d      	str	r7, [sp, #52]	@ 0x34
 8005ff2:	443b      	add	r3, r7
 8005ff4:	9306      	str	r3, [sp, #24]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9308      	str	r3, [sp, #32]
 8005ffa:	9b07      	ldr	r3, [sp, #28]
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d863      	bhi.n	80060c8 <_dtoa_r+0x280>
 8006000:	2b05      	cmp	r3, #5
 8006002:	bfc4      	itt	gt
 8006004:	3b04      	subgt	r3, #4
 8006006:	9307      	strgt	r3, [sp, #28]
 8006008:	9b07      	ldr	r3, [sp, #28]
 800600a:	f1a3 0302 	sub.w	r3, r3, #2
 800600e:	bfcc      	ite	gt
 8006010:	2400      	movgt	r4, #0
 8006012:	2401      	movle	r4, #1
 8006014:	2b03      	cmp	r3, #3
 8006016:	d863      	bhi.n	80060e0 <_dtoa_r+0x298>
 8006018:	e8df f003 	tbb	[pc, r3]
 800601c:	2b375452 	.word	0x2b375452
 8006020:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006024:	441e      	add	r6, r3
 8006026:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800602a:	2b20      	cmp	r3, #32
 800602c:	bfc1      	itttt	gt
 800602e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006032:	409f      	lslgt	r7, r3
 8006034:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006038:	fa24 f303 	lsrgt.w	r3, r4, r3
 800603c:	bfd6      	itet	le
 800603e:	f1c3 0320 	rsble	r3, r3, #32
 8006042:	ea47 0003 	orrgt.w	r0, r7, r3
 8006046:	fa04 f003 	lslle.w	r0, r4, r3
 800604a:	f7fa fa63 	bl	8000514 <__aeabi_ui2d>
 800604e:	2201      	movs	r2, #1
 8006050:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006054:	3e01      	subs	r6, #1
 8006056:	9212      	str	r2, [sp, #72]	@ 0x48
 8006058:	e776      	b.n	8005f48 <_dtoa_r+0x100>
 800605a:	2301      	movs	r3, #1
 800605c:	e7b7      	b.n	8005fce <_dtoa_r+0x186>
 800605e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006060:	e7b6      	b.n	8005fd0 <_dtoa_r+0x188>
 8006062:	9b00      	ldr	r3, [sp, #0]
 8006064:	1bdb      	subs	r3, r3, r7
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	427b      	negs	r3, r7
 800606a:	9308      	str	r3, [sp, #32]
 800606c:	2300      	movs	r3, #0
 800606e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006070:	e7c3      	b.n	8005ffa <_dtoa_r+0x1b2>
 8006072:	2301      	movs	r3, #1
 8006074:	9309      	str	r3, [sp, #36]	@ 0x24
 8006076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006078:	eb07 0b03 	add.w	fp, r7, r3
 800607c:	f10b 0301 	add.w	r3, fp, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	bfb8      	it	lt
 8006086:	2301      	movlt	r3, #1
 8006088:	e006      	b.n	8006098 <_dtoa_r+0x250>
 800608a:	2301      	movs	r3, #1
 800608c:	9309      	str	r3, [sp, #36]	@ 0x24
 800608e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd28      	ble.n	80060e6 <_dtoa_r+0x29e>
 8006094:	469b      	mov	fp, r3
 8006096:	9303      	str	r3, [sp, #12]
 8006098:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800609c:	2100      	movs	r1, #0
 800609e:	2204      	movs	r2, #4
 80060a0:	f102 0514 	add.w	r5, r2, #20
 80060a4:	429d      	cmp	r5, r3
 80060a6:	d926      	bls.n	80060f6 <_dtoa_r+0x2ae>
 80060a8:	6041      	str	r1, [r0, #4]
 80060aa:	4648      	mov	r0, r9
 80060ac:	f000 fd9c 	bl	8006be8 <_Balloc>
 80060b0:	4682      	mov	sl, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d142      	bne.n	800613c <_dtoa_r+0x2f4>
 80060b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006130 <_dtoa_r+0x2e8>)
 80060b8:	4602      	mov	r2, r0
 80060ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80060be:	e6da      	b.n	8005e76 <_dtoa_r+0x2e>
 80060c0:	2300      	movs	r3, #0
 80060c2:	e7e3      	b.n	800608c <_dtoa_r+0x244>
 80060c4:	2300      	movs	r3, #0
 80060c6:	e7d5      	b.n	8006074 <_dtoa_r+0x22c>
 80060c8:	2401      	movs	r4, #1
 80060ca:	2300      	movs	r3, #0
 80060cc:	9307      	str	r3, [sp, #28]
 80060ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80060d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80060da:	2312      	movs	r3, #18
 80060dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80060de:	e7db      	b.n	8006098 <_dtoa_r+0x250>
 80060e0:	2301      	movs	r3, #1
 80060e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e4:	e7f4      	b.n	80060d0 <_dtoa_r+0x288>
 80060e6:	f04f 0b01 	mov.w	fp, #1
 80060ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80060ee:	465b      	mov	r3, fp
 80060f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80060f4:	e7d0      	b.n	8006098 <_dtoa_r+0x250>
 80060f6:	3101      	adds	r1, #1
 80060f8:	0052      	lsls	r2, r2, #1
 80060fa:	e7d1      	b.n	80060a0 <_dtoa_r+0x258>
 80060fc:	f3af 8000 	nop.w
 8006100:	636f4361 	.word	0x636f4361
 8006104:	3fd287a7 	.word	0x3fd287a7
 8006108:	8b60c8b3 	.word	0x8b60c8b3
 800610c:	3fc68a28 	.word	0x3fc68a28
 8006110:	509f79fb 	.word	0x509f79fb
 8006114:	3fd34413 	.word	0x3fd34413
 8006118:	08009d78 	.word	0x08009d78
 800611c:	08009d8f 	.word	0x08009d8f
 8006120:	7ff00000 	.word	0x7ff00000
 8006124:	08009e7b 	.word	0x08009e7b
 8006128:	3ff80000 	.word	0x3ff80000
 800612c:	08009f58 	.word	0x08009f58
 8006130:	08009de7 	.word	0x08009de7
 8006134:	08009d74 	.word	0x08009d74
 8006138:	08009e7a 	.word	0x08009e7a
 800613c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006140:	6018      	str	r0, [r3, #0]
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	2b0e      	cmp	r3, #14
 8006146:	f200 80a1 	bhi.w	800628c <_dtoa_r+0x444>
 800614a:	2c00      	cmp	r4, #0
 800614c:	f000 809e 	beq.w	800628c <_dtoa_r+0x444>
 8006150:	2f00      	cmp	r7, #0
 8006152:	dd33      	ble.n	80061bc <_dtoa_r+0x374>
 8006154:	4b9c      	ldr	r3, [pc, #624]	@ (80063c8 <_dtoa_r+0x580>)
 8006156:	f007 020f 	and.w	r2, r7, #15
 800615a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615e:	ed93 7b00 	vldr	d7, [r3]
 8006162:	05f8      	lsls	r0, r7, #23
 8006164:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800616c:	d516      	bpl.n	800619c <_dtoa_r+0x354>
 800616e:	4b97      	ldr	r3, [pc, #604]	@ (80063cc <_dtoa_r+0x584>)
 8006170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006174:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006178:	f7fa fb70 	bl	800085c <__aeabi_ddiv>
 800617c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006180:	f004 040f 	and.w	r4, r4, #15
 8006184:	2603      	movs	r6, #3
 8006186:	4d91      	ldr	r5, [pc, #580]	@ (80063cc <_dtoa_r+0x584>)
 8006188:	b954      	cbnz	r4, 80061a0 <_dtoa_r+0x358>
 800618a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800618e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006192:	f7fa fb63 	bl	800085c <__aeabi_ddiv>
 8006196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800619a:	e028      	b.n	80061ee <_dtoa_r+0x3a6>
 800619c:	2602      	movs	r6, #2
 800619e:	e7f2      	b.n	8006186 <_dtoa_r+0x33e>
 80061a0:	07e1      	lsls	r1, r4, #31
 80061a2:	d508      	bpl.n	80061b6 <_dtoa_r+0x36e>
 80061a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061ac:	f7fa fa2c 	bl	8000608 <__aeabi_dmul>
 80061b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061b4:	3601      	adds	r6, #1
 80061b6:	1064      	asrs	r4, r4, #1
 80061b8:	3508      	adds	r5, #8
 80061ba:	e7e5      	b.n	8006188 <_dtoa_r+0x340>
 80061bc:	f000 80af 	beq.w	800631e <_dtoa_r+0x4d6>
 80061c0:	427c      	negs	r4, r7
 80061c2:	4b81      	ldr	r3, [pc, #516]	@ (80063c8 <_dtoa_r+0x580>)
 80061c4:	4d81      	ldr	r5, [pc, #516]	@ (80063cc <_dtoa_r+0x584>)
 80061c6:	f004 020f 	and.w	r2, r4, #15
 80061ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061d6:	f7fa fa17 	bl	8000608 <__aeabi_dmul>
 80061da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061de:	1124      	asrs	r4, r4, #4
 80061e0:	2300      	movs	r3, #0
 80061e2:	2602      	movs	r6, #2
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	f040 808f 	bne.w	8006308 <_dtoa_r+0x4c0>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1d3      	bne.n	8006196 <_dtoa_r+0x34e>
 80061ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8094 	beq.w	8006322 <_dtoa_r+0x4da>
 80061fa:	4b75      	ldr	r3, [pc, #468]	@ (80063d0 <_dtoa_r+0x588>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa fc73 	bl	8000aec <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f000 808b 	beq.w	8006322 <_dtoa_r+0x4da>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8087 	beq.w	8006322 <_dtoa_r+0x4da>
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	dd34      	ble.n	8006284 <_dtoa_r+0x43c>
 800621a:	4620      	mov	r0, r4
 800621c:	4b6d      	ldr	r3, [pc, #436]	@ (80063d4 <_dtoa_r+0x58c>)
 800621e:	2200      	movs	r2, #0
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa f9f1 	bl	8000608 <__aeabi_dmul>
 8006226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800622a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800622e:	3601      	adds	r6, #1
 8006230:	465c      	mov	r4, fp
 8006232:	4630      	mov	r0, r6
 8006234:	f7fa f97e 	bl	8000534 <__aeabi_i2d>
 8006238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623c:	f7fa f9e4 	bl	8000608 <__aeabi_dmul>
 8006240:	4b65      	ldr	r3, [pc, #404]	@ (80063d8 <_dtoa_r+0x590>)
 8006242:	2200      	movs	r2, #0
 8006244:	f7fa f82a 	bl	800029c <__adddf3>
 8006248:	4605      	mov	r5, r0
 800624a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800624e:	2c00      	cmp	r4, #0
 8006250:	d16a      	bne.n	8006328 <_dtoa_r+0x4e0>
 8006252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006256:	4b61      	ldr	r3, [pc, #388]	@ (80063dc <_dtoa_r+0x594>)
 8006258:	2200      	movs	r2, #0
 800625a:	f7fa f81d 	bl	8000298 <__aeabi_dsub>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006266:	462a      	mov	r2, r5
 8006268:	4633      	mov	r3, r6
 800626a:	f7fa fc5d 	bl	8000b28 <__aeabi_dcmpgt>
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 8298 	bne.w	80067a4 <_dtoa_r+0x95c>
 8006274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006278:	462a      	mov	r2, r5
 800627a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800627e:	f7fa fc35 	bl	8000aec <__aeabi_dcmplt>
 8006282:	bb38      	cbnz	r0, 80062d4 <_dtoa_r+0x48c>
 8006284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006288:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800628c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800628e:	2b00      	cmp	r3, #0
 8006290:	f2c0 8157 	blt.w	8006542 <_dtoa_r+0x6fa>
 8006294:	2f0e      	cmp	r7, #14
 8006296:	f300 8154 	bgt.w	8006542 <_dtoa_r+0x6fa>
 800629a:	4b4b      	ldr	r3, [pc, #300]	@ (80063c8 <_dtoa_r+0x580>)
 800629c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062a0:	ed93 7b00 	vldr	d7, [r3]
 80062a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	ed8d 7b00 	vstr	d7, [sp]
 80062ac:	f280 80e5 	bge.w	800647a <_dtoa_r+0x632>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f300 80e1 	bgt.w	800647a <_dtoa_r+0x632>
 80062b8:	d10c      	bne.n	80062d4 <_dtoa_r+0x48c>
 80062ba:	4b48      	ldr	r3, [pc, #288]	@ (80063dc <_dtoa_r+0x594>)
 80062bc:	2200      	movs	r2, #0
 80062be:	ec51 0b17 	vmov	r0, r1, d7
 80062c2:	f7fa f9a1 	bl	8000608 <__aeabi_dmul>
 80062c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ca:	f7fa fc23 	bl	8000b14 <__aeabi_dcmpge>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f000 8266 	beq.w	80067a0 <_dtoa_r+0x958>
 80062d4:	2400      	movs	r4, #0
 80062d6:	4625      	mov	r5, r4
 80062d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062da:	4656      	mov	r6, sl
 80062dc:	ea6f 0803 	mvn.w	r8, r3
 80062e0:	2700      	movs	r7, #0
 80062e2:	4621      	mov	r1, r4
 80062e4:	4648      	mov	r0, r9
 80062e6:	f000 fcbf 	bl	8006c68 <_Bfree>
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	f000 80bd 	beq.w	800646a <_dtoa_r+0x622>
 80062f0:	b12f      	cbz	r7, 80062fe <_dtoa_r+0x4b6>
 80062f2:	42af      	cmp	r7, r5
 80062f4:	d003      	beq.n	80062fe <_dtoa_r+0x4b6>
 80062f6:	4639      	mov	r1, r7
 80062f8:	4648      	mov	r0, r9
 80062fa:	f000 fcb5 	bl	8006c68 <_Bfree>
 80062fe:	4629      	mov	r1, r5
 8006300:	4648      	mov	r0, r9
 8006302:	f000 fcb1 	bl	8006c68 <_Bfree>
 8006306:	e0b0      	b.n	800646a <_dtoa_r+0x622>
 8006308:	07e2      	lsls	r2, r4, #31
 800630a:	d505      	bpl.n	8006318 <_dtoa_r+0x4d0>
 800630c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006310:	f7fa f97a 	bl	8000608 <__aeabi_dmul>
 8006314:	3601      	adds	r6, #1
 8006316:	2301      	movs	r3, #1
 8006318:	1064      	asrs	r4, r4, #1
 800631a:	3508      	adds	r5, #8
 800631c:	e762      	b.n	80061e4 <_dtoa_r+0x39c>
 800631e:	2602      	movs	r6, #2
 8006320:	e765      	b.n	80061ee <_dtoa_r+0x3a6>
 8006322:	9c03      	ldr	r4, [sp, #12]
 8006324:	46b8      	mov	r8, r7
 8006326:	e784      	b.n	8006232 <_dtoa_r+0x3ea>
 8006328:	4b27      	ldr	r3, [pc, #156]	@ (80063c8 <_dtoa_r+0x580>)
 800632a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800632c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006334:	4454      	add	r4, sl
 8006336:	2900      	cmp	r1, #0
 8006338:	d054      	beq.n	80063e4 <_dtoa_r+0x59c>
 800633a:	4929      	ldr	r1, [pc, #164]	@ (80063e0 <_dtoa_r+0x598>)
 800633c:	2000      	movs	r0, #0
 800633e:	f7fa fa8d 	bl	800085c <__aeabi_ddiv>
 8006342:	4633      	mov	r3, r6
 8006344:	462a      	mov	r2, r5
 8006346:	f7f9 ffa7 	bl	8000298 <__aeabi_dsub>
 800634a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800634e:	4656      	mov	r6, sl
 8006350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006354:	f7fa fc08 	bl	8000b68 <__aeabi_d2iz>
 8006358:	4605      	mov	r5, r0
 800635a:	f7fa f8eb 	bl	8000534 <__aeabi_i2d>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006366:	f7f9 ff97 	bl	8000298 <__aeabi_dsub>
 800636a:	3530      	adds	r5, #48	@ 0x30
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006374:	f806 5b01 	strb.w	r5, [r6], #1
 8006378:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800637c:	f7fa fbb6 	bl	8000aec <__aeabi_dcmplt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d172      	bne.n	800646a <_dtoa_r+0x622>
 8006384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006388:	4911      	ldr	r1, [pc, #68]	@ (80063d0 <_dtoa_r+0x588>)
 800638a:	2000      	movs	r0, #0
 800638c:	f7f9 ff84 	bl	8000298 <__aeabi_dsub>
 8006390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006394:	f7fa fbaa 	bl	8000aec <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	f040 80b4 	bne.w	8006506 <_dtoa_r+0x6be>
 800639e:	42a6      	cmp	r6, r4
 80063a0:	f43f af70 	beq.w	8006284 <_dtoa_r+0x43c>
 80063a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <_dtoa_r+0x58c>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	f7fa f92c 	bl	8000608 <__aeabi_dmul>
 80063b0:	4b08      	ldr	r3, [pc, #32]	@ (80063d4 <_dtoa_r+0x58c>)
 80063b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063b6:	2200      	movs	r2, #0
 80063b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063bc:	f7fa f924 	bl	8000608 <__aeabi_dmul>
 80063c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063c4:	e7c4      	b.n	8006350 <_dtoa_r+0x508>
 80063c6:	bf00      	nop
 80063c8:	08009f58 	.word	0x08009f58
 80063cc:	08009f30 	.word	0x08009f30
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	40240000 	.word	0x40240000
 80063d8:	401c0000 	.word	0x401c0000
 80063dc:	40140000 	.word	0x40140000
 80063e0:	3fe00000 	.word	0x3fe00000
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7fa f90e 	bl	8000608 <__aeabi_dmul>
 80063ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80063f2:	4656      	mov	r6, sl
 80063f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f8:	f7fa fbb6 	bl	8000b68 <__aeabi_d2iz>
 80063fc:	4605      	mov	r5, r0
 80063fe:	f7fa f899 	bl	8000534 <__aeabi_i2d>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800640a:	f7f9 ff45 	bl	8000298 <__aeabi_dsub>
 800640e:	3530      	adds	r5, #48	@ 0x30
 8006410:	f806 5b01 	strb.w	r5, [r6], #1
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	42a6      	cmp	r6, r4
 800641a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	d124      	bne.n	800646e <_dtoa_r+0x626>
 8006424:	4baf      	ldr	r3, [pc, #700]	@ (80066e4 <_dtoa_r+0x89c>)
 8006426:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800642a:	f7f9 ff37 	bl	800029c <__adddf3>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006436:	f7fa fb77 	bl	8000b28 <__aeabi_dcmpgt>
 800643a:	2800      	cmp	r0, #0
 800643c:	d163      	bne.n	8006506 <_dtoa_r+0x6be>
 800643e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006442:	49a8      	ldr	r1, [pc, #672]	@ (80066e4 <_dtoa_r+0x89c>)
 8006444:	2000      	movs	r0, #0
 8006446:	f7f9 ff27 	bl	8000298 <__aeabi_dsub>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006452:	f7fa fb4b 	bl	8000aec <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f af14 	beq.w	8006284 <_dtoa_r+0x43c>
 800645c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800645e:	1e73      	subs	r3, r6, #1
 8006460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d0f8      	beq.n	800645c <_dtoa_r+0x614>
 800646a:	4647      	mov	r7, r8
 800646c:	e03b      	b.n	80064e6 <_dtoa_r+0x69e>
 800646e:	4b9e      	ldr	r3, [pc, #632]	@ (80066e8 <_dtoa_r+0x8a0>)
 8006470:	f7fa f8ca 	bl	8000608 <__aeabi_dmul>
 8006474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006478:	e7bc      	b.n	80063f4 <_dtoa_r+0x5ac>
 800647a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800647e:	4656      	mov	r6, sl
 8006480:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7fa f9e8 	bl	800085c <__aeabi_ddiv>
 800648c:	f7fa fb6c 	bl	8000b68 <__aeabi_d2iz>
 8006490:	4680      	mov	r8, r0
 8006492:	f7fa f84f 	bl	8000534 <__aeabi_i2d>
 8006496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800649a:	f7fa f8b5 	bl	8000608 <__aeabi_dmul>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064aa:	f7f9 fef5 	bl	8000298 <__aeabi_dsub>
 80064ae:	f806 4b01 	strb.w	r4, [r6], #1
 80064b2:	9d03      	ldr	r5, [sp, #12]
 80064b4:	eba6 040a 	sub.w	r4, r6, sl
 80064b8:	42a5      	cmp	r5, r4
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	d133      	bne.n	8006528 <_dtoa_r+0x6e0>
 80064c0:	f7f9 feec 	bl	800029c <__adddf3>
 80064c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	f7fa fb2c 	bl	8000b28 <__aeabi_dcmpgt>
 80064d0:	b9c0      	cbnz	r0, 8006504 <_dtoa_r+0x6bc>
 80064d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f7fa fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 80064de:	b110      	cbz	r0, 80064e6 <_dtoa_r+0x69e>
 80064e0:	f018 0f01 	tst.w	r8, #1
 80064e4:	d10e      	bne.n	8006504 <_dtoa_r+0x6bc>
 80064e6:	9902      	ldr	r1, [sp, #8]
 80064e8:	4648      	mov	r0, r9
 80064ea:	f000 fbbd 	bl	8006c68 <_Bfree>
 80064ee:	2300      	movs	r3, #0
 80064f0:	7033      	strb	r3, [r6, #0]
 80064f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064f4:	3701      	adds	r7, #1
 80064f6:	601f      	str	r7, [r3, #0]
 80064f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 824b 	beq.w	8006996 <_dtoa_r+0xb4e>
 8006500:	601e      	str	r6, [r3, #0]
 8006502:	e248      	b.n	8006996 <_dtoa_r+0xb4e>
 8006504:	46b8      	mov	r8, r7
 8006506:	4633      	mov	r3, r6
 8006508:	461e      	mov	r6, r3
 800650a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800650e:	2a39      	cmp	r2, #57	@ 0x39
 8006510:	d106      	bne.n	8006520 <_dtoa_r+0x6d8>
 8006512:	459a      	cmp	sl, r3
 8006514:	d1f8      	bne.n	8006508 <_dtoa_r+0x6c0>
 8006516:	2230      	movs	r2, #48	@ 0x30
 8006518:	f108 0801 	add.w	r8, r8, #1
 800651c:	f88a 2000 	strb.w	r2, [sl]
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	3201      	adds	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e7a0      	b.n	800646a <_dtoa_r+0x622>
 8006528:	4b6f      	ldr	r3, [pc, #444]	@ (80066e8 <_dtoa_r+0x8a0>)
 800652a:	2200      	movs	r2, #0
 800652c:	f7fa f86c 	bl	8000608 <__aeabi_dmul>
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	4604      	mov	r4, r0
 8006536:	460d      	mov	r5, r1
 8006538:	f7fa face 	bl	8000ad8 <__aeabi_dcmpeq>
 800653c:	2800      	cmp	r0, #0
 800653e:	d09f      	beq.n	8006480 <_dtoa_r+0x638>
 8006540:	e7d1      	b.n	80064e6 <_dtoa_r+0x69e>
 8006542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006544:	2a00      	cmp	r2, #0
 8006546:	f000 80ea 	beq.w	800671e <_dtoa_r+0x8d6>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	2a01      	cmp	r2, #1
 800654e:	f300 80cd 	bgt.w	80066ec <_dtoa_r+0x8a4>
 8006552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006554:	2a00      	cmp	r2, #0
 8006556:	f000 80c1 	beq.w	80066dc <_dtoa_r+0x894>
 800655a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800655e:	9c08      	ldr	r4, [sp, #32]
 8006560:	9e00      	ldr	r6, [sp, #0]
 8006562:	9a00      	ldr	r2, [sp, #0]
 8006564:	441a      	add	r2, r3
 8006566:	9200      	str	r2, [sp, #0]
 8006568:	9a06      	ldr	r2, [sp, #24]
 800656a:	2101      	movs	r1, #1
 800656c:	441a      	add	r2, r3
 800656e:	4648      	mov	r0, r9
 8006570:	9206      	str	r2, [sp, #24]
 8006572:	f000 fc77 	bl	8006e64 <__i2b>
 8006576:	4605      	mov	r5, r0
 8006578:	b166      	cbz	r6, 8006594 <_dtoa_r+0x74c>
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	dd09      	ble.n	8006594 <_dtoa_r+0x74c>
 8006580:	42b3      	cmp	r3, r6
 8006582:	9a00      	ldr	r2, [sp, #0]
 8006584:	bfa8      	it	ge
 8006586:	4633      	movge	r3, r6
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	9200      	str	r2, [sp, #0]
 800658c:	9a06      	ldr	r2, [sp, #24]
 800658e:	1af6      	subs	r6, r6, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	9306      	str	r3, [sp, #24]
 8006594:	9b08      	ldr	r3, [sp, #32]
 8006596:	b30b      	cbz	r3, 80065dc <_dtoa_r+0x794>
 8006598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80c6 	beq.w	800672c <_dtoa_r+0x8e4>
 80065a0:	2c00      	cmp	r4, #0
 80065a2:	f000 80c0 	beq.w	8006726 <_dtoa_r+0x8de>
 80065a6:	4629      	mov	r1, r5
 80065a8:	4622      	mov	r2, r4
 80065aa:	4648      	mov	r0, r9
 80065ac:	f000 fd12 	bl	8006fd4 <__pow5mult>
 80065b0:	9a02      	ldr	r2, [sp, #8]
 80065b2:	4601      	mov	r1, r0
 80065b4:	4605      	mov	r5, r0
 80065b6:	4648      	mov	r0, r9
 80065b8:	f000 fc6a 	bl	8006e90 <__multiply>
 80065bc:	9902      	ldr	r1, [sp, #8]
 80065be:	4680      	mov	r8, r0
 80065c0:	4648      	mov	r0, r9
 80065c2:	f000 fb51 	bl	8006c68 <_Bfree>
 80065c6:	9b08      	ldr	r3, [sp, #32]
 80065c8:	1b1b      	subs	r3, r3, r4
 80065ca:	9308      	str	r3, [sp, #32]
 80065cc:	f000 80b1 	beq.w	8006732 <_dtoa_r+0x8ea>
 80065d0:	9a08      	ldr	r2, [sp, #32]
 80065d2:	4641      	mov	r1, r8
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 fcfd 	bl	8006fd4 <__pow5mult>
 80065da:	9002      	str	r0, [sp, #8]
 80065dc:	2101      	movs	r1, #1
 80065de:	4648      	mov	r0, r9
 80065e0:	f000 fc40 	bl	8006e64 <__i2b>
 80065e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e6:	4604      	mov	r4, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 81d8 	beq.w	800699e <_dtoa_r+0xb56>
 80065ee:	461a      	mov	r2, r3
 80065f0:	4601      	mov	r1, r0
 80065f2:	4648      	mov	r0, r9
 80065f4:	f000 fcee 	bl	8006fd4 <__pow5mult>
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	4604      	mov	r4, r0
 80065fe:	f300 809f 	bgt.w	8006740 <_dtoa_r+0x8f8>
 8006602:	9b04      	ldr	r3, [sp, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 8097 	bne.w	8006738 <_dtoa_r+0x8f0>
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 8093 	bne.w	800673c <_dtoa_r+0x8f4>
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800661c:	0d1b      	lsrs	r3, r3, #20
 800661e:	051b      	lsls	r3, r3, #20
 8006620:	b133      	cbz	r3, 8006630 <_dtoa_r+0x7e8>
 8006622:	9b00      	ldr	r3, [sp, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	9b06      	ldr	r3, [sp, #24]
 800662a:	3301      	adds	r3, #1
 800662c:	9306      	str	r3, [sp, #24]
 800662e:	2301      	movs	r3, #1
 8006630:	9308      	str	r3, [sp, #32]
 8006632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 81b8 	beq.w	80069aa <_dtoa_r+0xb62>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006640:	6918      	ldr	r0, [r3, #16]
 8006642:	f000 fbc3 	bl	8006dcc <__hi0bits>
 8006646:	f1c0 0020 	rsb	r0, r0, #32
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	4418      	add	r0, r3
 800664e:	f010 001f 	ands.w	r0, r0, #31
 8006652:	f000 8082 	beq.w	800675a <_dtoa_r+0x912>
 8006656:	f1c0 0320 	rsb	r3, r0, #32
 800665a:	2b04      	cmp	r3, #4
 800665c:	dd73      	ble.n	8006746 <_dtoa_r+0x8fe>
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	f1c0 001c 	rsb	r0, r0, #28
 8006664:	4403      	add	r3, r0
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	4403      	add	r3, r0
 800666c:	4406      	add	r6, r0
 800666e:	9306      	str	r3, [sp, #24]
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd05      	ble.n	8006682 <_dtoa_r+0x83a>
 8006676:	9902      	ldr	r1, [sp, #8]
 8006678:	461a      	mov	r2, r3
 800667a:	4648      	mov	r0, r9
 800667c:	f000 fd04 	bl	8007088 <__lshift>
 8006680:	9002      	str	r0, [sp, #8]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd05      	ble.n	8006694 <_dtoa_r+0x84c>
 8006688:	4621      	mov	r1, r4
 800668a:	461a      	mov	r2, r3
 800668c:	4648      	mov	r0, r9
 800668e:	f000 fcfb 	bl	8007088 <__lshift>
 8006692:	4604      	mov	r4, r0
 8006694:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d061      	beq.n	800675e <_dtoa_r+0x916>
 800669a:	9802      	ldr	r0, [sp, #8]
 800669c:	4621      	mov	r1, r4
 800669e:	f000 fd5f 	bl	8007160 <__mcmp>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	da5b      	bge.n	800675e <_dtoa_r+0x916>
 80066a6:	2300      	movs	r3, #0
 80066a8:	9902      	ldr	r1, [sp, #8]
 80066aa:	220a      	movs	r2, #10
 80066ac:	4648      	mov	r0, r9
 80066ae:	f000 fafd 	bl	8006cac <__multadd>
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	9002      	str	r0, [sp, #8]
 80066b6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8177 	beq.w	80069ae <_dtoa_r+0xb66>
 80066c0:	4629      	mov	r1, r5
 80066c2:	2300      	movs	r3, #0
 80066c4:	220a      	movs	r2, #10
 80066c6:	4648      	mov	r0, r9
 80066c8:	f000 faf0 	bl	8006cac <__multadd>
 80066cc:	f1bb 0f00 	cmp.w	fp, #0
 80066d0:	4605      	mov	r5, r0
 80066d2:	dc6f      	bgt.n	80067b4 <_dtoa_r+0x96c>
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	dc49      	bgt.n	800676e <_dtoa_r+0x926>
 80066da:	e06b      	b.n	80067b4 <_dtoa_r+0x96c>
 80066dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066e2:	e73c      	b.n	800655e <_dtoa_r+0x716>
 80066e4:	3fe00000 	.word	0x3fe00000
 80066e8:	40240000 	.word	0x40240000
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	1e5c      	subs	r4, r3, #1
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	db09      	blt.n	800670a <_dtoa_r+0x8c2>
 80066f6:	1b1c      	subs	r4, r3, r4
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f6bf af30 	bge.w	8006560 <_dtoa_r+0x718>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	9a03      	ldr	r2, [sp, #12]
 8006704:	1a9e      	subs	r6, r3, r2
 8006706:	2300      	movs	r3, #0
 8006708:	e72b      	b.n	8006562 <_dtoa_r+0x71a>
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800670e:	9408      	str	r4, [sp, #32]
 8006710:	1ae3      	subs	r3, r4, r3
 8006712:	441a      	add	r2, r3
 8006714:	9e00      	ldr	r6, [sp, #0]
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	920d      	str	r2, [sp, #52]	@ 0x34
 800671a:	2400      	movs	r4, #0
 800671c:	e721      	b.n	8006562 <_dtoa_r+0x71a>
 800671e:	9c08      	ldr	r4, [sp, #32]
 8006720:	9e00      	ldr	r6, [sp, #0]
 8006722:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006724:	e728      	b.n	8006578 <_dtoa_r+0x730>
 8006726:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800672a:	e751      	b.n	80065d0 <_dtoa_r+0x788>
 800672c:	9a08      	ldr	r2, [sp, #32]
 800672e:	9902      	ldr	r1, [sp, #8]
 8006730:	e750      	b.n	80065d4 <_dtoa_r+0x78c>
 8006732:	f8cd 8008 	str.w	r8, [sp, #8]
 8006736:	e751      	b.n	80065dc <_dtoa_r+0x794>
 8006738:	2300      	movs	r3, #0
 800673a:	e779      	b.n	8006630 <_dtoa_r+0x7e8>
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	e777      	b.n	8006630 <_dtoa_r+0x7e8>
 8006740:	2300      	movs	r3, #0
 8006742:	9308      	str	r3, [sp, #32]
 8006744:	e779      	b.n	800663a <_dtoa_r+0x7f2>
 8006746:	d093      	beq.n	8006670 <_dtoa_r+0x828>
 8006748:	9a00      	ldr	r2, [sp, #0]
 800674a:	331c      	adds	r3, #28
 800674c:	441a      	add	r2, r3
 800674e:	9200      	str	r2, [sp, #0]
 8006750:	9a06      	ldr	r2, [sp, #24]
 8006752:	441a      	add	r2, r3
 8006754:	441e      	add	r6, r3
 8006756:	9206      	str	r2, [sp, #24]
 8006758:	e78a      	b.n	8006670 <_dtoa_r+0x828>
 800675a:	4603      	mov	r3, r0
 800675c:	e7f4      	b.n	8006748 <_dtoa_r+0x900>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	46b8      	mov	r8, r7
 8006764:	dc20      	bgt.n	80067a8 <_dtoa_r+0x960>
 8006766:	469b      	mov	fp, r3
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	2b02      	cmp	r3, #2
 800676c:	dd1e      	ble.n	80067ac <_dtoa_r+0x964>
 800676e:	f1bb 0f00 	cmp.w	fp, #0
 8006772:	f47f adb1 	bne.w	80062d8 <_dtoa_r+0x490>
 8006776:	4621      	mov	r1, r4
 8006778:	465b      	mov	r3, fp
 800677a:	2205      	movs	r2, #5
 800677c:	4648      	mov	r0, r9
 800677e:	f000 fa95 	bl	8006cac <__multadd>
 8006782:	4601      	mov	r1, r0
 8006784:	4604      	mov	r4, r0
 8006786:	9802      	ldr	r0, [sp, #8]
 8006788:	f000 fcea 	bl	8007160 <__mcmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	f77f ada3 	ble.w	80062d8 <_dtoa_r+0x490>
 8006792:	4656      	mov	r6, sl
 8006794:	2331      	movs	r3, #49	@ 0x31
 8006796:	f806 3b01 	strb.w	r3, [r6], #1
 800679a:	f108 0801 	add.w	r8, r8, #1
 800679e:	e59f      	b.n	80062e0 <_dtoa_r+0x498>
 80067a0:	9c03      	ldr	r4, [sp, #12]
 80067a2:	46b8      	mov	r8, r7
 80067a4:	4625      	mov	r5, r4
 80067a6:	e7f4      	b.n	8006792 <_dtoa_r+0x94a>
 80067a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80067ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8101 	beq.w	80069b6 <_dtoa_r+0xb6e>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	dd05      	ble.n	80067c4 <_dtoa_r+0x97c>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4632      	mov	r2, r6
 80067bc:	4648      	mov	r0, r9
 80067be:	f000 fc63 	bl	8007088 <__lshift>
 80067c2:	4605      	mov	r5, r0
 80067c4:	9b08      	ldr	r3, [sp, #32]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d05c      	beq.n	8006884 <_dtoa_r+0xa3c>
 80067ca:	6869      	ldr	r1, [r5, #4]
 80067cc:	4648      	mov	r0, r9
 80067ce:	f000 fa0b 	bl	8006be8 <_Balloc>
 80067d2:	4606      	mov	r6, r0
 80067d4:	b928      	cbnz	r0, 80067e2 <_dtoa_r+0x99a>
 80067d6:	4b82      	ldr	r3, [pc, #520]	@ (80069e0 <_dtoa_r+0xb98>)
 80067d8:	4602      	mov	r2, r0
 80067da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067de:	f7ff bb4a 	b.w	8005e76 <_dtoa_r+0x2e>
 80067e2:	692a      	ldr	r2, [r5, #16]
 80067e4:	3202      	adds	r2, #2
 80067e6:	0092      	lsls	r2, r2, #2
 80067e8:	f105 010c 	add.w	r1, r5, #12
 80067ec:	300c      	adds	r0, #12
 80067ee:	f002 fda3 	bl	8009338 <memcpy>
 80067f2:	2201      	movs	r2, #1
 80067f4:	4631      	mov	r1, r6
 80067f6:	4648      	mov	r0, r9
 80067f8:	f000 fc46 	bl	8007088 <__lshift>
 80067fc:	f10a 0301 	add.w	r3, sl, #1
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	eb0a 030b 	add.w	r3, sl, fp
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	9b04      	ldr	r3, [sp, #16]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	462f      	mov	r7, r5
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	4605      	mov	r5, r0
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	9802      	ldr	r0, [sp, #8]
 8006818:	4621      	mov	r1, r4
 800681a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800681e:	f7ff fa8b 	bl	8005d38 <quorem>
 8006822:	4603      	mov	r3, r0
 8006824:	3330      	adds	r3, #48	@ 0x30
 8006826:	9003      	str	r0, [sp, #12]
 8006828:	4639      	mov	r1, r7
 800682a:	9802      	ldr	r0, [sp, #8]
 800682c:	9309      	str	r3, [sp, #36]	@ 0x24
 800682e:	f000 fc97 	bl	8007160 <__mcmp>
 8006832:	462a      	mov	r2, r5
 8006834:	9004      	str	r0, [sp, #16]
 8006836:	4621      	mov	r1, r4
 8006838:	4648      	mov	r0, r9
 800683a:	f000 fcad 	bl	8007198 <__mdiff>
 800683e:	68c2      	ldr	r2, [r0, #12]
 8006840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006842:	4606      	mov	r6, r0
 8006844:	bb02      	cbnz	r2, 8006888 <_dtoa_r+0xa40>
 8006846:	4601      	mov	r1, r0
 8006848:	9802      	ldr	r0, [sp, #8]
 800684a:	f000 fc89 	bl	8007160 <__mcmp>
 800684e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006850:	4602      	mov	r2, r0
 8006852:	4631      	mov	r1, r6
 8006854:	4648      	mov	r0, r9
 8006856:	920c      	str	r2, [sp, #48]	@ 0x30
 8006858:	9309      	str	r3, [sp, #36]	@ 0x24
 800685a:	f000 fa05 	bl	8006c68 <_Bfree>
 800685e:	9b07      	ldr	r3, [sp, #28]
 8006860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006862:	9e00      	ldr	r6, [sp, #0]
 8006864:	ea42 0103 	orr.w	r1, r2, r3
 8006868:	9b06      	ldr	r3, [sp, #24]
 800686a:	4319      	orrs	r1, r3
 800686c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686e:	d10d      	bne.n	800688c <_dtoa_r+0xa44>
 8006870:	2b39      	cmp	r3, #57	@ 0x39
 8006872:	d027      	beq.n	80068c4 <_dtoa_r+0xa7c>
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	2a00      	cmp	r2, #0
 8006878:	dd01      	ble.n	800687e <_dtoa_r+0xa36>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	3331      	adds	r3, #49	@ 0x31
 800687e:	f88b 3000 	strb.w	r3, [fp]
 8006882:	e52e      	b.n	80062e2 <_dtoa_r+0x49a>
 8006884:	4628      	mov	r0, r5
 8006886:	e7b9      	b.n	80067fc <_dtoa_r+0x9b4>
 8006888:	2201      	movs	r2, #1
 800688a:	e7e2      	b.n	8006852 <_dtoa_r+0xa0a>
 800688c:	9904      	ldr	r1, [sp, #16]
 800688e:	2900      	cmp	r1, #0
 8006890:	db04      	blt.n	800689c <_dtoa_r+0xa54>
 8006892:	9807      	ldr	r0, [sp, #28]
 8006894:	4301      	orrs	r1, r0
 8006896:	9806      	ldr	r0, [sp, #24]
 8006898:	4301      	orrs	r1, r0
 800689a:	d120      	bne.n	80068de <_dtoa_r+0xa96>
 800689c:	2a00      	cmp	r2, #0
 800689e:	ddee      	ble.n	800687e <_dtoa_r+0xa36>
 80068a0:	9902      	ldr	r1, [sp, #8]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2201      	movs	r2, #1
 80068a6:	4648      	mov	r0, r9
 80068a8:	f000 fbee 	bl	8007088 <__lshift>
 80068ac:	4621      	mov	r1, r4
 80068ae:	9002      	str	r0, [sp, #8]
 80068b0:	f000 fc56 	bl	8007160 <__mcmp>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	9b00      	ldr	r3, [sp, #0]
 80068b8:	dc02      	bgt.n	80068c0 <_dtoa_r+0xa78>
 80068ba:	d1e0      	bne.n	800687e <_dtoa_r+0xa36>
 80068bc:	07da      	lsls	r2, r3, #31
 80068be:	d5de      	bpl.n	800687e <_dtoa_r+0xa36>
 80068c0:	2b39      	cmp	r3, #57	@ 0x39
 80068c2:	d1da      	bne.n	800687a <_dtoa_r+0xa32>
 80068c4:	2339      	movs	r3, #57	@ 0x39
 80068c6:	f88b 3000 	strb.w	r3, [fp]
 80068ca:	4633      	mov	r3, r6
 80068cc:	461e      	mov	r6, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068d4:	2a39      	cmp	r2, #57	@ 0x39
 80068d6:	d04e      	beq.n	8006976 <_dtoa_r+0xb2e>
 80068d8:	3201      	adds	r2, #1
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	e501      	b.n	80062e2 <_dtoa_r+0x49a>
 80068de:	2a00      	cmp	r2, #0
 80068e0:	dd03      	ble.n	80068ea <_dtoa_r+0xaa2>
 80068e2:	2b39      	cmp	r3, #57	@ 0x39
 80068e4:	d0ee      	beq.n	80068c4 <_dtoa_r+0xa7c>
 80068e6:	3301      	adds	r3, #1
 80068e8:	e7c9      	b.n	800687e <_dtoa_r+0xa36>
 80068ea:	9a00      	ldr	r2, [sp, #0]
 80068ec:	9908      	ldr	r1, [sp, #32]
 80068ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068f2:	428a      	cmp	r2, r1
 80068f4:	d028      	beq.n	8006948 <_dtoa_r+0xb00>
 80068f6:	9902      	ldr	r1, [sp, #8]
 80068f8:	2300      	movs	r3, #0
 80068fa:	220a      	movs	r2, #10
 80068fc:	4648      	mov	r0, r9
 80068fe:	f000 f9d5 	bl	8006cac <__multadd>
 8006902:	42af      	cmp	r7, r5
 8006904:	9002      	str	r0, [sp, #8]
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	f04f 020a 	mov.w	r2, #10
 800690e:	4639      	mov	r1, r7
 8006910:	4648      	mov	r0, r9
 8006912:	d107      	bne.n	8006924 <_dtoa_r+0xadc>
 8006914:	f000 f9ca 	bl	8006cac <__multadd>
 8006918:	4607      	mov	r7, r0
 800691a:	4605      	mov	r5, r0
 800691c:	9b00      	ldr	r3, [sp, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	e777      	b.n	8006814 <_dtoa_r+0x9cc>
 8006924:	f000 f9c2 	bl	8006cac <__multadd>
 8006928:	4629      	mov	r1, r5
 800692a:	4607      	mov	r7, r0
 800692c:	2300      	movs	r3, #0
 800692e:	220a      	movs	r2, #10
 8006930:	4648      	mov	r0, r9
 8006932:	f000 f9bb 	bl	8006cac <__multadd>
 8006936:	4605      	mov	r5, r0
 8006938:	e7f0      	b.n	800691c <_dtoa_r+0xad4>
 800693a:	f1bb 0f00 	cmp.w	fp, #0
 800693e:	bfcc      	ite	gt
 8006940:	465e      	movgt	r6, fp
 8006942:	2601      	movle	r6, #1
 8006944:	4456      	add	r6, sl
 8006946:	2700      	movs	r7, #0
 8006948:	9902      	ldr	r1, [sp, #8]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	4648      	mov	r0, r9
 8006950:	f000 fb9a 	bl	8007088 <__lshift>
 8006954:	4621      	mov	r1, r4
 8006956:	9002      	str	r0, [sp, #8]
 8006958:	f000 fc02 	bl	8007160 <__mcmp>
 800695c:	2800      	cmp	r0, #0
 800695e:	dcb4      	bgt.n	80068ca <_dtoa_r+0xa82>
 8006960:	d102      	bne.n	8006968 <_dtoa_r+0xb20>
 8006962:	9b00      	ldr	r3, [sp, #0]
 8006964:	07db      	lsls	r3, r3, #31
 8006966:	d4b0      	bmi.n	80068ca <_dtoa_r+0xa82>
 8006968:	4633      	mov	r3, r6
 800696a:	461e      	mov	r6, r3
 800696c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006970:	2a30      	cmp	r2, #48	@ 0x30
 8006972:	d0fa      	beq.n	800696a <_dtoa_r+0xb22>
 8006974:	e4b5      	b.n	80062e2 <_dtoa_r+0x49a>
 8006976:	459a      	cmp	sl, r3
 8006978:	d1a8      	bne.n	80068cc <_dtoa_r+0xa84>
 800697a:	2331      	movs	r3, #49	@ 0x31
 800697c:	f108 0801 	add.w	r8, r8, #1
 8006980:	f88a 3000 	strb.w	r3, [sl]
 8006984:	e4ad      	b.n	80062e2 <_dtoa_r+0x49a>
 8006986:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80069e4 <_dtoa_r+0xb9c>
 800698c:	b11b      	cbz	r3, 8006996 <_dtoa_r+0xb4e>
 800698e:	f10a 0308 	add.w	r3, sl, #8
 8006992:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4650      	mov	r0, sl
 8006998:	b017      	add	sp, #92	@ 0x5c
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	9b07      	ldr	r3, [sp, #28]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f77f ae2e 	ble.w	8006602 <_dtoa_r+0x7ba>
 80069a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	2001      	movs	r0, #1
 80069ac:	e64d      	b.n	800664a <_dtoa_r+0x802>
 80069ae:	f1bb 0f00 	cmp.w	fp, #0
 80069b2:	f77f aed9 	ble.w	8006768 <_dtoa_r+0x920>
 80069b6:	4656      	mov	r6, sl
 80069b8:	9802      	ldr	r0, [sp, #8]
 80069ba:	4621      	mov	r1, r4
 80069bc:	f7ff f9bc 	bl	8005d38 <quorem>
 80069c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80069c4:	f806 3b01 	strb.w	r3, [r6], #1
 80069c8:	eba6 020a 	sub.w	r2, r6, sl
 80069cc:	4593      	cmp	fp, r2
 80069ce:	ddb4      	ble.n	800693a <_dtoa_r+0xaf2>
 80069d0:	9902      	ldr	r1, [sp, #8]
 80069d2:	2300      	movs	r3, #0
 80069d4:	220a      	movs	r2, #10
 80069d6:	4648      	mov	r0, r9
 80069d8:	f000 f968 	bl	8006cac <__multadd>
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	e7eb      	b.n	80069b8 <_dtoa_r+0xb70>
 80069e0:	08009de7 	.word	0x08009de7
 80069e4:	08009d6b 	.word	0x08009d6b

080069e8 <_free_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4605      	mov	r5, r0
 80069ec:	2900      	cmp	r1, #0
 80069ee:	d041      	beq.n	8006a74 <_free_r+0x8c>
 80069f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f4:	1f0c      	subs	r4, r1, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfb8      	it	lt
 80069fa:	18e4      	addlt	r4, r4, r3
 80069fc:	f000 f8e8 	bl	8006bd0 <__malloc_lock>
 8006a00:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <_free_r+0x90>)
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	b933      	cbnz	r3, 8006a14 <_free_r+0x2c>
 8006a06:	6063      	str	r3, [r4, #4]
 8006a08:	6014      	str	r4, [r2, #0]
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a10:	f000 b8e4 	b.w	8006bdc <__malloc_unlock>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d908      	bls.n	8006a2a <_free_r+0x42>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	1821      	adds	r1, r4, r0
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	bf01      	itttt	eq
 8006a20:	6819      	ldreq	r1, [r3, #0]
 8006a22:	685b      	ldreq	r3, [r3, #4]
 8006a24:	1809      	addeq	r1, r1, r0
 8006a26:	6021      	streq	r1, [r4, #0]
 8006a28:	e7ed      	b.n	8006a06 <_free_r+0x1e>
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	b10b      	cbz	r3, 8006a34 <_free_r+0x4c>
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	d9fa      	bls.n	8006a2a <_free_r+0x42>
 8006a34:	6811      	ldr	r1, [r2, #0]
 8006a36:	1850      	adds	r0, r2, r1
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d10b      	bne.n	8006a54 <_free_r+0x6c>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	4401      	add	r1, r0
 8006a40:	1850      	adds	r0, r2, r1
 8006a42:	4283      	cmp	r3, r0
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	d1e0      	bne.n	8006a0a <_free_r+0x22>
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	6053      	str	r3, [r2, #4]
 8006a4e:	4408      	add	r0, r1
 8006a50:	6010      	str	r0, [r2, #0]
 8006a52:	e7da      	b.n	8006a0a <_free_r+0x22>
 8006a54:	d902      	bls.n	8006a5c <_free_r+0x74>
 8006a56:	230c      	movs	r3, #12
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	e7d6      	b.n	8006a0a <_free_r+0x22>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	1821      	adds	r1, r4, r0
 8006a60:	428b      	cmp	r3, r1
 8006a62:	bf04      	itt	eq
 8006a64:	6819      	ldreq	r1, [r3, #0]
 8006a66:	685b      	ldreq	r3, [r3, #4]
 8006a68:	6063      	str	r3, [r4, #4]
 8006a6a:	bf04      	itt	eq
 8006a6c:	1809      	addeq	r1, r1, r0
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	6054      	str	r4, [r2, #4]
 8006a72:	e7ca      	b.n	8006a0a <_free_r+0x22>
 8006a74:	bd38      	pop	{r3, r4, r5, pc}
 8006a76:	bf00      	nop
 8006a78:	20000414 	.word	0x20000414

08006a7c <malloc>:
 8006a7c:	4b02      	ldr	r3, [pc, #8]	@ (8006a88 <malloc+0xc>)
 8006a7e:	4601      	mov	r1, r0
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f000 b825 	b.w	8006ad0 <_malloc_r>
 8006a86:	bf00      	nop
 8006a88:	20000018 	.word	0x20000018

08006a8c <sbrk_aligned>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006acc <sbrk_aligned+0x40>)
 8006a90:	460c      	mov	r4, r1
 8006a92:	6831      	ldr	r1, [r6, #0]
 8006a94:	4605      	mov	r5, r0
 8006a96:	b911      	cbnz	r1, 8006a9e <sbrk_aligned+0x12>
 8006a98:	f002 fc3e 	bl	8009318 <_sbrk_r>
 8006a9c:	6030      	str	r0, [r6, #0]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f002 fc39 	bl	8009318 <_sbrk_r>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d103      	bne.n	8006ab2 <sbrk_aligned+0x26>
 8006aaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006aae:	4620      	mov	r0, r4
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d0f8      	beq.n	8006aae <sbrk_aligned+0x22>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f002 fc2a 	bl	8009318 <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d1f2      	bne.n	8006aae <sbrk_aligned+0x22>
 8006ac8:	e7ef      	b.n	8006aaa <sbrk_aligned+0x1e>
 8006aca:	bf00      	nop
 8006acc:	20000410 	.word	0x20000410

08006ad0 <_malloc_r>:
 8006ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad4:	1ccd      	adds	r5, r1, #3
 8006ad6:	f025 0503 	bic.w	r5, r5, #3
 8006ada:	3508      	adds	r5, #8
 8006adc:	2d0c      	cmp	r5, #12
 8006ade:	bf38      	it	cc
 8006ae0:	250c      	movcc	r5, #12
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	db01      	blt.n	8006aec <_malloc_r+0x1c>
 8006ae8:	42a9      	cmp	r1, r5
 8006aea:	d904      	bls.n	8006af6 <_malloc_r+0x26>
 8006aec:	230c      	movs	r3, #12
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bcc <_malloc_r+0xfc>
 8006afa:	f000 f869 	bl	8006bd0 <__malloc_lock>
 8006afe:	f8d8 3000 	ldr.w	r3, [r8]
 8006b02:	461c      	mov	r4, r3
 8006b04:	bb44      	cbnz	r4, 8006b58 <_malloc_r+0x88>
 8006b06:	4629      	mov	r1, r5
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff ffbf 	bl	8006a8c <sbrk_aligned>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	4604      	mov	r4, r0
 8006b12:	d158      	bne.n	8006bc6 <_malloc_r+0xf6>
 8006b14:	f8d8 4000 	ldr.w	r4, [r8]
 8006b18:	4627      	mov	r7, r4
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	d143      	bne.n	8006ba6 <_malloc_r+0xd6>
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d04b      	beq.n	8006bba <_malloc_r+0xea>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	4639      	mov	r1, r7
 8006b26:	4630      	mov	r0, r6
 8006b28:	eb04 0903 	add.w	r9, r4, r3
 8006b2c:	f002 fbf4 	bl	8009318 <_sbrk_r>
 8006b30:	4581      	cmp	r9, r0
 8006b32:	d142      	bne.n	8006bba <_malloc_r+0xea>
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	1a6d      	subs	r5, r5, r1
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7ff ffa6 	bl	8006a8c <sbrk_aligned>
 8006b40:	3001      	adds	r0, #1
 8006b42:	d03a      	beq.n	8006bba <_malloc_r+0xea>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	442b      	add	r3, r5
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	bb62      	cbnz	r2, 8006bac <_malloc_r+0xdc>
 8006b52:	f8c8 7000 	str.w	r7, [r8]
 8006b56:	e00f      	b.n	8006b78 <_malloc_r+0xa8>
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	1b52      	subs	r2, r2, r5
 8006b5c:	d420      	bmi.n	8006ba0 <_malloc_r+0xd0>
 8006b5e:	2a0b      	cmp	r2, #11
 8006b60:	d917      	bls.n	8006b92 <_malloc_r+0xc2>
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	6025      	str	r5, [r4, #0]
 8006b68:	bf18      	it	ne
 8006b6a:	6059      	strne	r1, [r3, #4]
 8006b6c:	6863      	ldr	r3, [r4, #4]
 8006b6e:	bf08      	it	eq
 8006b70:	f8c8 1000 	streq.w	r1, [r8]
 8006b74:	5162      	str	r2, [r4, r5]
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 f82f 	bl	8006bdc <__malloc_unlock>
 8006b7e:	f104 000b 	add.w	r0, r4, #11
 8006b82:	1d23      	adds	r3, r4, #4
 8006b84:	f020 0007 	bic.w	r0, r0, #7
 8006b88:	1ac2      	subs	r2, r0, r3
 8006b8a:	bf1c      	itt	ne
 8006b8c:	1a1b      	subne	r3, r3, r0
 8006b8e:	50a3      	strne	r3, [r4, r2]
 8006b90:	e7af      	b.n	8006af2 <_malloc_r+0x22>
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	bf0c      	ite	eq
 8006b98:	f8c8 2000 	streq.w	r2, [r8]
 8006b9c:	605a      	strne	r2, [r3, #4]
 8006b9e:	e7eb      	b.n	8006b78 <_malloc_r+0xa8>
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	6864      	ldr	r4, [r4, #4]
 8006ba4:	e7ae      	b.n	8006b04 <_malloc_r+0x34>
 8006ba6:	463c      	mov	r4, r7
 8006ba8:	687f      	ldr	r7, [r7, #4]
 8006baa:	e7b6      	b.n	8006b1a <_malloc_r+0x4a>
 8006bac:	461a      	mov	r2, r3
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d1fb      	bne.n	8006bac <_malloc_r+0xdc>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6053      	str	r3, [r2, #4]
 8006bb8:	e7de      	b.n	8006b78 <_malloc_r+0xa8>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f80c 	bl	8006bdc <__malloc_unlock>
 8006bc4:	e794      	b.n	8006af0 <_malloc_r+0x20>
 8006bc6:	6005      	str	r5, [r0, #0]
 8006bc8:	e7d6      	b.n	8006b78 <_malloc_r+0xa8>
 8006bca:	bf00      	nop
 8006bcc:	20000414 	.word	0x20000414

08006bd0 <__malloc_lock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_lock+0x8>)
 8006bd2:	f7ff b8a8 	b.w	8005d26 <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000040c 	.word	0x2000040c

08006bdc <__malloc_unlock>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	@ (8006be4 <__malloc_unlock+0x8>)
 8006bde:	f7ff b8a3 	b.w	8005d28 <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	2000040c 	.word	0x2000040c

08006be8 <_Balloc>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	69c6      	ldr	r6, [r0, #28]
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	b976      	cbnz	r6, 8006c10 <_Balloc+0x28>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7ff ff42 	bl	8006a7c <malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	61e0      	str	r0, [r4, #28]
 8006bfc:	b920      	cbnz	r0, 8006c08 <_Balloc+0x20>
 8006bfe:	4b18      	ldr	r3, [pc, #96]	@ (8006c60 <_Balloc+0x78>)
 8006c00:	4818      	ldr	r0, [pc, #96]	@ (8006c64 <_Balloc+0x7c>)
 8006c02:	216b      	movs	r1, #107	@ 0x6b
 8006c04:	f002 fbb0 	bl	8009368 <__assert_func>
 8006c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c0c:	6006      	str	r6, [r0, #0]
 8006c0e:	60c6      	str	r6, [r0, #12]
 8006c10:	69e6      	ldr	r6, [r4, #28]
 8006c12:	68f3      	ldr	r3, [r6, #12]
 8006c14:	b183      	cbz	r3, 8006c38 <_Balloc+0x50>
 8006c16:	69e3      	ldr	r3, [r4, #28]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c1e:	b9b8      	cbnz	r0, 8006c50 <_Balloc+0x68>
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f605 	lsl.w	r6, r1, r5
 8006c26:	1d72      	adds	r2, r6, #5
 8006c28:	0092      	lsls	r2, r2, #2
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f002 fbba 	bl	80093a4 <_calloc_r>
 8006c30:	b160      	cbz	r0, 8006c4c <_Balloc+0x64>
 8006c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c36:	e00e      	b.n	8006c56 <_Balloc+0x6e>
 8006c38:	2221      	movs	r2, #33	@ 0x21
 8006c3a:	2104      	movs	r1, #4
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f002 fbb1 	bl	80093a4 <_calloc_r>
 8006c42:	69e3      	ldr	r3, [r4, #28]
 8006c44:	60f0      	str	r0, [r6, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e4      	bne.n	8006c16 <_Balloc+0x2e>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c56:	2300      	movs	r3, #0
 8006c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c5c:	e7f7      	b.n	8006c4e <_Balloc+0x66>
 8006c5e:	bf00      	nop
 8006c60:	08009d78 	.word	0x08009d78
 8006c64:	08009df8 	.word	0x08009df8

08006c68 <_Bfree>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	69c6      	ldr	r6, [r0, #28]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	b976      	cbnz	r6, 8006c90 <_Bfree+0x28>
 8006c72:	2010      	movs	r0, #16
 8006c74:	f7ff ff02 	bl	8006a7c <malloc>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	61e8      	str	r0, [r5, #28]
 8006c7c:	b920      	cbnz	r0, 8006c88 <_Bfree+0x20>
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <_Bfree+0x3c>)
 8006c80:	4809      	ldr	r0, [pc, #36]	@ (8006ca8 <_Bfree+0x40>)
 8006c82:	218f      	movs	r1, #143	@ 0x8f
 8006c84:	f002 fb70 	bl	8009368 <__assert_func>
 8006c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c8c:	6006      	str	r6, [r0, #0]
 8006c8e:	60c6      	str	r6, [r0, #12]
 8006c90:	b13c      	cbz	r4, 8006ca2 <_Bfree+0x3a>
 8006c92:	69eb      	ldr	r3, [r5, #28]
 8006c94:	6862      	ldr	r2, [r4, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c9c:	6021      	str	r1, [r4, #0]
 8006c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	08009d78 	.word	0x08009d78
 8006ca8:	08009df8 	.word	0x08009df8

08006cac <__multadd>:
 8006cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb0:	690d      	ldr	r5, [r1, #16]
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	f101 0c14 	add.w	ip, r1, #20
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cc8:	0c1e      	lsrs	r6, r3, #16
 8006cca:	0c0b      	lsrs	r3, r1, #16
 8006ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8006cd0:	b289      	uxth	r1, r1
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cd8:	4285      	cmp	r5, r0
 8006cda:	f84c 1b04 	str.w	r1, [ip], #4
 8006cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ce2:	dcec      	bgt.n	8006cbe <__multadd+0x12>
 8006ce4:	b30e      	cbz	r6, 8006d2a <__multadd+0x7e>
 8006ce6:	68a3      	ldr	r3, [r4, #8]
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc19      	bgt.n	8006d20 <__multadd+0x74>
 8006cec:	6861      	ldr	r1, [r4, #4]
 8006cee:	4638      	mov	r0, r7
 8006cf0:	3101      	adds	r1, #1
 8006cf2:	f7ff ff79 	bl	8006be8 <_Balloc>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <__multadd+0x5a>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <__multadd+0x84>)
 8006cfe:	480d      	ldr	r0, [pc, #52]	@ (8006d34 <__multadd+0x88>)
 8006d00:	21ba      	movs	r1, #186	@ 0xba
 8006d02:	f002 fb31 	bl	8009368 <__assert_func>
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	f104 010c 	add.w	r1, r4, #12
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	300c      	adds	r0, #12
 8006d12:	f002 fb11 	bl	8009338 <memcpy>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa5 	bl	8006c68 <_Bfree>
 8006d1e:	4644      	mov	r4, r8
 8006d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d24:	3501      	adds	r5, #1
 8006d26:	615e      	str	r6, [r3, #20]
 8006d28:	6125      	str	r5, [r4, #16]
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d30:	08009de7 	.word	0x08009de7
 8006d34:	08009df8 	.word	0x08009df8

08006d38 <__s2b>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	4615      	mov	r5, r2
 8006d40:	461f      	mov	r7, r3
 8006d42:	2209      	movs	r2, #9
 8006d44:	3308      	adds	r3, #8
 8006d46:	4606      	mov	r6, r0
 8006d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	2201      	movs	r2, #1
 8006d50:	429a      	cmp	r2, r3
 8006d52:	db09      	blt.n	8006d68 <__s2b+0x30>
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff ff47 	bl	8006be8 <_Balloc>
 8006d5a:	b940      	cbnz	r0, 8006d6e <__s2b+0x36>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4b19      	ldr	r3, [pc, #100]	@ (8006dc4 <__s2b+0x8c>)
 8006d60:	4819      	ldr	r0, [pc, #100]	@ (8006dc8 <__s2b+0x90>)
 8006d62:	21d3      	movs	r1, #211	@ 0xd3
 8006d64:	f002 fb00 	bl	8009368 <__assert_func>
 8006d68:	0052      	lsls	r2, r2, #1
 8006d6a:	3101      	adds	r1, #1
 8006d6c:	e7f0      	b.n	8006d50 <__s2b+0x18>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	6143      	str	r3, [r0, #20]
 8006d72:	2d09      	cmp	r5, #9
 8006d74:	f04f 0301 	mov.w	r3, #1
 8006d78:	6103      	str	r3, [r0, #16]
 8006d7a:	dd16      	ble.n	8006daa <__s2b+0x72>
 8006d7c:	f104 0909 	add.w	r9, r4, #9
 8006d80:	46c8      	mov	r8, r9
 8006d82:	442c      	add	r4, r5
 8006d84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d88:	4601      	mov	r1, r0
 8006d8a:	3b30      	subs	r3, #48	@ 0x30
 8006d8c:	220a      	movs	r2, #10
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ff8c 	bl	8006cac <__multadd>
 8006d94:	45a0      	cmp	r8, r4
 8006d96:	d1f5      	bne.n	8006d84 <__s2b+0x4c>
 8006d98:	f1a5 0408 	sub.w	r4, r5, #8
 8006d9c:	444c      	add	r4, r9
 8006d9e:	1b2d      	subs	r5, r5, r4
 8006da0:	1963      	adds	r3, r4, r5
 8006da2:	42bb      	cmp	r3, r7
 8006da4:	db04      	blt.n	8006db0 <__s2b+0x78>
 8006da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006daa:	340a      	adds	r4, #10
 8006dac:	2509      	movs	r5, #9
 8006dae:	e7f6      	b.n	8006d9e <__s2b+0x66>
 8006db0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006db4:	4601      	mov	r1, r0
 8006db6:	3b30      	subs	r3, #48	@ 0x30
 8006db8:	220a      	movs	r2, #10
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ff76 	bl	8006cac <__multadd>
 8006dc0:	e7ee      	b.n	8006da0 <__s2b+0x68>
 8006dc2:	bf00      	nop
 8006dc4:	08009de7 	.word	0x08009de7
 8006dc8:	08009df8 	.word	0x08009df8

08006dcc <__hi0bits>:
 8006dcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	bf36      	itet	cc
 8006dd4:	0403      	lslcc	r3, r0, #16
 8006dd6:	2000      	movcs	r0, #0
 8006dd8:	2010      	movcc	r0, #16
 8006dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dde:	bf3c      	itt	cc
 8006de0:	021b      	lslcc	r3, r3, #8
 8006de2:	3008      	addcc	r0, #8
 8006de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de8:	bf3c      	itt	cc
 8006dea:	011b      	lslcc	r3, r3, #4
 8006dec:	3004      	addcc	r0, #4
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df2:	bf3c      	itt	cc
 8006df4:	009b      	lslcc	r3, r3, #2
 8006df6:	3002      	addcc	r0, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db05      	blt.n	8006e08 <__hi0bits+0x3c>
 8006dfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e00:	f100 0001 	add.w	r0, r0, #1
 8006e04:	bf08      	it	eq
 8006e06:	2020      	moveq	r0, #32
 8006e08:	4770      	bx	lr

08006e0a <__lo0bits>:
 8006e0a:	6803      	ldr	r3, [r0, #0]
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f013 0007 	ands.w	r0, r3, #7
 8006e12:	d00b      	beq.n	8006e2c <__lo0bits+0x22>
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d421      	bmi.n	8006e5c <__lo0bits+0x52>
 8006e18:	0798      	lsls	r0, r3, #30
 8006e1a:	bf49      	itett	mi
 8006e1c:	085b      	lsrmi	r3, r3, #1
 8006e1e:	089b      	lsrpl	r3, r3, #2
 8006e20:	2001      	movmi	r0, #1
 8006e22:	6013      	strmi	r3, [r2, #0]
 8006e24:	bf5c      	itt	pl
 8006e26:	6013      	strpl	r3, [r2, #0]
 8006e28:	2002      	movpl	r0, #2
 8006e2a:	4770      	bx	lr
 8006e2c:	b299      	uxth	r1, r3
 8006e2e:	b909      	cbnz	r1, 8006e34 <__lo0bits+0x2a>
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	2010      	movs	r0, #16
 8006e34:	b2d9      	uxtb	r1, r3
 8006e36:	b909      	cbnz	r1, 8006e3c <__lo0bits+0x32>
 8006e38:	3008      	adds	r0, #8
 8006e3a:	0a1b      	lsrs	r3, r3, #8
 8006e3c:	0719      	lsls	r1, r3, #28
 8006e3e:	bf04      	itt	eq
 8006e40:	091b      	lsreq	r3, r3, #4
 8006e42:	3004      	addeq	r0, #4
 8006e44:	0799      	lsls	r1, r3, #30
 8006e46:	bf04      	itt	eq
 8006e48:	089b      	lsreq	r3, r3, #2
 8006e4a:	3002      	addeq	r0, #2
 8006e4c:	07d9      	lsls	r1, r3, #31
 8006e4e:	d403      	bmi.n	8006e58 <__lo0bits+0x4e>
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	f100 0001 	add.w	r0, r0, #1
 8006e56:	d003      	beq.n	8006e60 <__lo0bits+0x56>
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4770      	bx	lr
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4770      	bx	lr
 8006e60:	2020      	movs	r0, #32
 8006e62:	4770      	bx	lr

08006e64 <__i2b>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	460c      	mov	r4, r1
 8006e68:	2101      	movs	r1, #1
 8006e6a:	f7ff febd 	bl	8006be8 <_Balloc>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	b928      	cbnz	r0, 8006e7e <__i2b+0x1a>
 8006e72:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <__i2b+0x24>)
 8006e74:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <__i2b+0x28>)
 8006e76:	f240 1145 	movw	r1, #325	@ 0x145
 8006e7a:	f002 fa75 	bl	8009368 <__assert_func>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	6144      	str	r4, [r0, #20]
 8006e82:	6103      	str	r3, [r0, #16]
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	bf00      	nop
 8006e88:	08009de7 	.word	0x08009de7
 8006e8c:	08009df8 	.word	0x08009df8

08006e90 <__multiply>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	4617      	mov	r7, r2
 8006e96:	690a      	ldr	r2, [r1, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bfa8      	it	ge
 8006e9e:	463b      	movge	r3, r7
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	bfa4      	itt	ge
 8006ea4:	460f      	movge	r7, r1
 8006ea6:	4699      	movge	r9, r3
 8006ea8:	693d      	ldr	r5, [r7, #16]
 8006eaa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	eb05 060a 	add.w	r6, r5, sl
 8006eb6:	42b3      	cmp	r3, r6
 8006eb8:	b085      	sub	sp, #20
 8006eba:	bfb8      	it	lt
 8006ebc:	3101      	addlt	r1, #1
 8006ebe:	f7ff fe93 	bl	8006be8 <_Balloc>
 8006ec2:	b930      	cbnz	r0, 8006ed2 <__multiply+0x42>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b41      	ldr	r3, [pc, #260]	@ (8006fcc <__multiply+0x13c>)
 8006ec8:	4841      	ldr	r0, [pc, #260]	@ (8006fd0 <__multiply+0x140>)
 8006eca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ece:	f002 fa4b 	bl	8009368 <__assert_func>
 8006ed2:	f100 0414 	add.w	r4, r0, #20
 8006ed6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006eda:	4623      	mov	r3, r4
 8006edc:	2200      	movs	r2, #0
 8006ede:	4573      	cmp	r3, lr
 8006ee0:	d320      	bcc.n	8006f24 <__multiply+0x94>
 8006ee2:	f107 0814 	add.w	r8, r7, #20
 8006ee6:	f109 0114 	add.w	r1, r9, #20
 8006eea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006eee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	1beb      	subs	r3, r5, r7
 8006ef6:	3b15      	subs	r3, #21
 8006ef8:	f023 0303 	bic.w	r3, r3, #3
 8006efc:	3304      	adds	r3, #4
 8006efe:	3715      	adds	r7, #21
 8006f00:	42bd      	cmp	r5, r7
 8006f02:	bf38      	it	cc
 8006f04:	2304      	movcc	r3, #4
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	d80c      	bhi.n	8006f2a <__multiply+0x9a>
 8006f10:	2e00      	cmp	r6, #0
 8006f12:	dd03      	ble.n	8006f1c <__multiply+0x8c>
 8006f14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d055      	beq.n	8006fc8 <__multiply+0x138>
 8006f1c:	6106      	str	r6, [r0, #16]
 8006f1e:	b005      	add	sp, #20
 8006f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	f843 2b04 	str.w	r2, [r3], #4
 8006f28:	e7d9      	b.n	8006ede <__multiply+0x4e>
 8006f2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f2e:	f1ba 0f00 	cmp.w	sl, #0
 8006f32:	d01f      	beq.n	8006f74 <__multiply+0xe4>
 8006f34:	46c4      	mov	ip, r8
 8006f36:	46a1      	mov	r9, r4
 8006f38:	2700      	movs	r7, #0
 8006f3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f3e:	f8d9 3000 	ldr.w	r3, [r9]
 8006f42:	fa1f fb82 	uxth.w	fp, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f4c:	443b      	add	r3, r7
 8006f4e:	f8d9 7000 	ldr.w	r7, [r9]
 8006f52:	0c12      	lsrs	r2, r2, #16
 8006f54:	0c3f      	lsrs	r7, r7, #16
 8006f56:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f64:	4565      	cmp	r5, ip
 8006f66:	f849 3b04 	str.w	r3, [r9], #4
 8006f6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f6e:	d8e4      	bhi.n	8006f3a <__multiply+0xaa>
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	50e7      	str	r7, [r4, r3]
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f7a:	3104      	adds	r1, #4
 8006f7c:	f1b9 0f00 	cmp.w	r9, #0
 8006f80:	d020      	beq.n	8006fc4 <__multiply+0x134>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	4647      	mov	r7, r8
 8006f86:	46a4      	mov	ip, r4
 8006f88:	f04f 0a00 	mov.w	sl, #0
 8006f8c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f94:	fb09 220b 	mla	r2, r9, fp, r2
 8006f98:	4452      	add	r2, sl
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa0:	f84c 3b04 	str.w	r3, [ip], #4
 8006fa4:	f857 3b04 	ldr.w	r3, [r7], #4
 8006fa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fac:	f8bc 3000 	ldrh.w	r3, [ip]
 8006fb0:	fb09 330a 	mla	r3, r9, sl, r3
 8006fb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006fb8:	42bd      	cmp	r5, r7
 8006fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fbe:	d8e5      	bhi.n	8006f8c <__multiply+0xfc>
 8006fc0:	9a01      	ldr	r2, [sp, #4]
 8006fc2:	50a3      	str	r3, [r4, r2]
 8006fc4:	3404      	adds	r4, #4
 8006fc6:	e79f      	b.n	8006f08 <__multiply+0x78>
 8006fc8:	3e01      	subs	r6, #1
 8006fca:	e7a1      	b.n	8006f10 <__multiply+0x80>
 8006fcc:	08009de7 	.word	0x08009de7
 8006fd0:	08009df8 	.word	0x08009df8

08006fd4 <__pow5mult>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	4615      	mov	r5, r2
 8006fda:	f012 0203 	ands.w	r2, r2, #3
 8006fde:	4607      	mov	r7, r0
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	d007      	beq.n	8006ff4 <__pow5mult+0x20>
 8006fe4:	4c25      	ldr	r4, [pc, #148]	@ (800707c <__pow5mult+0xa8>)
 8006fe6:	3a01      	subs	r2, #1
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fee:	f7ff fe5d 	bl	8006cac <__multadd>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	10ad      	asrs	r5, r5, #2
 8006ff6:	d03d      	beq.n	8007074 <__pow5mult+0xa0>
 8006ff8:	69fc      	ldr	r4, [r7, #28]
 8006ffa:	b97c      	cbnz	r4, 800701c <__pow5mult+0x48>
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	f7ff fd3d 	bl	8006a7c <malloc>
 8007002:	4602      	mov	r2, r0
 8007004:	61f8      	str	r0, [r7, #28]
 8007006:	b928      	cbnz	r0, 8007014 <__pow5mult+0x40>
 8007008:	4b1d      	ldr	r3, [pc, #116]	@ (8007080 <__pow5mult+0xac>)
 800700a:	481e      	ldr	r0, [pc, #120]	@ (8007084 <__pow5mult+0xb0>)
 800700c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007010:	f002 f9aa 	bl	8009368 <__assert_func>
 8007014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007018:	6004      	str	r4, [r0, #0]
 800701a:	60c4      	str	r4, [r0, #12]
 800701c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007024:	b94c      	cbnz	r4, 800703a <__pow5mult+0x66>
 8007026:	f240 2171 	movw	r1, #625	@ 0x271
 800702a:	4638      	mov	r0, r7
 800702c:	f7ff ff1a 	bl	8006e64 <__i2b>
 8007030:	2300      	movs	r3, #0
 8007032:	f8c8 0008 	str.w	r0, [r8, #8]
 8007036:	4604      	mov	r4, r0
 8007038:	6003      	str	r3, [r0, #0]
 800703a:	f04f 0900 	mov.w	r9, #0
 800703e:	07eb      	lsls	r3, r5, #31
 8007040:	d50a      	bpl.n	8007058 <__pow5mult+0x84>
 8007042:	4631      	mov	r1, r6
 8007044:	4622      	mov	r2, r4
 8007046:	4638      	mov	r0, r7
 8007048:	f7ff ff22 	bl	8006e90 <__multiply>
 800704c:	4631      	mov	r1, r6
 800704e:	4680      	mov	r8, r0
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff fe09 	bl	8006c68 <_Bfree>
 8007056:	4646      	mov	r6, r8
 8007058:	106d      	asrs	r5, r5, #1
 800705a:	d00b      	beq.n	8007074 <__pow5mult+0xa0>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	b938      	cbnz	r0, 8007070 <__pow5mult+0x9c>
 8007060:	4622      	mov	r2, r4
 8007062:	4621      	mov	r1, r4
 8007064:	4638      	mov	r0, r7
 8007066:	f7ff ff13 	bl	8006e90 <__multiply>
 800706a:	6020      	str	r0, [r4, #0]
 800706c:	f8c0 9000 	str.w	r9, [r0]
 8007070:	4604      	mov	r4, r0
 8007072:	e7e4      	b.n	800703e <__pow5mult+0x6a>
 8007074:	4630      	mov	r0, r6
 8007076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800707a:	bf00      	nop
 800707c:	08009f24 	.word	0x08009f24
 8007080:	08009d78 	.word	0x08009d78
 8007084:	08009df8 	.word	0x08009df8

08007088 <__lshift>:
 8007088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	6849      	ldr	r1, [r1, #4]
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	4607      	mov	r7, r0
 800709a:	4691      	mov	r9, r2
 800709c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070a0:	f108 0601 	add.w	r6, r8, #1
 80070a4:	42b3      	cmp	r3, r6
 80070a6:	db0b      	blt.n	80070c0 <__lshift+0x38>
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff fd9d 	bl	8006be8 <_Balloc>
 80070ae:	4605      	mov	r5, r0
 80070b0:	b948      	cbnz	r0, 80070c6 <__lshift+0x3e>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b28      	ldr	r3, [pc, #160]	@ (8007158 <__lshift+0xd0>)
 80070b6:	4829      	ldr	r0, [pc, #164]	@ (800715c <__lshift+0xd4>)
 80070b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070bc:	f002 f954 	bl	8009368 <__assert_func>
 80070c0:	3101      	adds	r1, #1
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	e7ee      	b.n	80070a4 <__lshift+0x1c>
 80070c6:	2300      	movs	r3, #0
 80070c8:	f100 0114 	add.w	r1, r0, #20
 80070cc:	f100 0210 	add.w	r2, r0, #16
 80070d0:	4618      	mov	r0, r3
 80070d2:	4553      	cmp	r3, sl
 80070d4:	db33      	blt.n	800713e <__lshift+0xb6>
 80070d6:	6920      	ldr	r0, [r4, #16]
 80070d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070dc:	f104 0314 	add.w	r3, r4, #20
 80070e0:	f019 091f 	ands.w	r9, r9, #31
 80070e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070ec:	d02b      	beq.n	8007146 <__lshift+0xbe>
 80070ee:	f1c9 0e20 	rsb	lr, r9, #32
 80070f2:	468a      	mov	sl, r1
 80070f4:	2200      	movs	r2, #0
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	fa00 f009 	lsl.w	r0, r0, r9
 80070fc:	4310      	orrs	r0, r2
 80070fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007102:	f853 2b04 	ldr.w	r2, [r3], #4
 8007106:	459c      	cmp	ip, r3
 8007108:	fa22 f20e 	lsr.w	r2, r2, lr
 800710c:	d8f3      	bhi.n	80070f6 <__lshift+0x6e>
 800710e:	ebac 0304 	sub.w	r3, ip, r4
 8007112:	3b15      	subs	r3, #21
 8007114:	f023 0303 	bic.w	r3, r3, #3
 8007118:	3304      	adds	r3, #4
 800711a:	f104 0015 	add.w	r0, r4, #21
 800711e:	4560      	cmp	r0, ip
 8007120:	bf88      	it	hi
 8007122:	2304      	movhi	r3, #4
 8007124:	50ca      	str	r2, [r1, r3]
 8007126:	b10a      	cbz	r2, 800712c <__lshift+0xa4>
 8007128:	f108 0602 	add.w	r6, r8, #2
 800712c:	3e01      	subs	r6, #1
 800712e:	4638      	mov	r0, r7
 8007130:	612e      	str	r6, [r5, #16]
 8007132:	4621      	mov	r1, r4
 8007134:	f7ff fd98 	bl	8006c68 <_Bfree>
 8007138:	4628      	mov	r0, r5
 800713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007142:	3301      	adds	r3, #1
 8007144:	e7c5      	b.n	80070d2 <__lshift+0x4a>
 8007146:	3904      	subs	r1, #4
 8007148:	f853 2b04 	ldr.w	r2, [r3], #4
 800714c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007150:	459c      	cmp	ip, r3
 8007152:	d8f9      	bhi.n	8007148 <__lshift+0xc0>
 8007154:	e7ea      	b.n	800712c <__lshift+0xa4>
 8007156:	bf00      	nop
 8007158:	08009de7 	.word	0x08009de7
 800715c:	08009df8 	.word	0x08009df8

08007160 <__mcmp>:
 8007160:	690a      	ldr	r2, [r1, #16]
 8007162:	4603      	mov	r3, r0
 8007164:	6900      	ldr	r0, [r0, #16]
 8007166:	1a80      	subs	r0, r0, r2
 8007168:	b530      	push	{r4, r5, lr}
 800716a:	d10e      	bne.n	800718a <__mcmp+0x2a>
 800716c:	3314      	adds	r3, #20
 800716e:	3114      	adds	r1, #20
 8007170:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007174:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800717c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007180:	4295      	cmp	r5, r2
 8007182:	d003      	beq.n	800718c <__mcmp+0x2c>
 8007184:	d205      	bcs.n	8007192 <__mcmp+0x32>
 8007186:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800718a:	bd30      	pop	{r4, r5, pc}
 800718c:	42a3      	cmp	r3, r4
 800718e:	d3f3      	bcc.n	8007178 <__mcmp+0x18>
 8007190:	e7fb      	b.n	800718a <__mcmp+0x2a>
 8007192:	2001      	movs	r0, #1
 8007194:	e7f9      	b.n	800718a <__mcmp+0x2a>
	...

08007198 <__mdiff>:
 8007198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4689      	mov	r9, r1
 800719e:	4606      	mov	r6, r0
 80071a0:	4611      	mov	r1, r2
 80071a2:	4648      	mov	r0, r9
 80071a4:	4614      	mov	r4, r2
 80071a6:	f7ff ffdb 	bl	8007160 <__mcmp>
 80071aa:	1e05      	subs	r5, r0, #0
 80071ac:	d112      	bne.n	80071d4 <__mdiff+0x3c>
 80071ae:	4629      	mov	r1, r5
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff fd19 	bl	8006be8 <_Balloc>
 80071b6:	4602      	mov	r2, r0
 80071b8:	b928      	cbnz	r0, 80071c6 <__mdiff+0x2e>
 80071ba:	4b3f      	ldr	r3, [pc, #252]	@ (80072b8 <__mdiff+0x120>)
 80071bc:	f240 2137 	movw	r1, #567	@ 0x237
 80071c0:	483e      	ldr	r0, [pc, #248]	@ (80072bc <__mdiff+0x124>)
 80071c2:	f002 f8d1 	bl	8009368 <__assert_func>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071cc:	4610      	mov	r0, r2
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	bfbc      	itt	lt
 80071d6:	464b      	movlt	r3, r9
 80071d8:	46a1      	movlt	r9, r4
 80071da:	4630      	mov	r0, r6
 80071dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071e0:	bfba      	itte	lt
 80071e2:	461c      	movlt	r4, r3
 80071e4:	2501      	movlt	r5, #1
 80071e6:	2500      	movge	r5, #0
 80071e8:	f7ff fcfe 	bl	8006be8 <_Balloc>
 80071ec:	4602      	mov	r2, r0
 80071ee:	b918      	cbnz	r0, 80071f8 <__mdiff+0x60>
 80071f0:	4b31      	ldr	r3, [pc, #196]	@ (80072b8 <__mdiff+0x120>)
 80071f2:	f240 2145 	movw	r1, #581	@ 0x245
 80071f6:	e7e3      	b.n	80071c0 <__mdiff+0x28>
 80071f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071fc:	6926      	ldr	r6, [r4, #16]
 80071fe:	60c5      	str	r5, [r0, #12]
 8007200:	f109 0310 	add.w	r3, r9, #16
 8007204:	f109 0514 	add.w	r5, r9, #20
 8007208:	f104 0e14 	add.w	lr, r4, #20
 800720c:	f100 0b14 	add.w	fp, r0, #20
 8007210:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007214:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	46d9      	mov	r9, fp
 800721c:	f04f 0c00 	mov.w	ip, #0
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007226:	f853 af04 	ldr.w	sl, [r3, #4]!
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	fa1f f38a 	uxth.w	r3, sl
 8007230:	4619      	mov	r1, r3
 8007232:	b283      	uxth	r3, r0
 8007234:	1acb      	subs	r3, r1, r3
 8007236:	0c00      	lsrs	r0, r0, #16
 8007238:	4463      	add	r3, ip
 800723a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800723e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007242:	b29b      	uxth	r3, r3
 8007244:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007248:	4576      	cmp	r6, lr
 800724a:	f849 3b04 	str.w	r3, [r9], #4
 800724e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007252:	d8e5      	bhi.n	8007220 <__mdiff+0x88>
 8007254:	1b33      	subs	r3, r6, r4
 8007256:	3b15      	subs	r3, #21
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3415      	adds	r4, #21
 800725e:	3304      	adds	r3, #4
 8007260:	42a6      	cmp	r6, r4
 8007262:	bf38      	it	cc
 8007264:	2304      	movcc	r3, #4
 8007266:	441d      	add	r5, r3
 8007268:	445b      	add	r3, fp
 800726a:	461e      	mov	r6, r3
 800726c:	462c      	mov	r4, r5
 800726e:	4544      	cmp	r4, r8
 8007270:	d30e      	bcc.n	8007290 <__mdiff+0xf8>
 8007272:	f108 0103 	add.w	r1, r8, #3
 8007276:	1b49      	subs	r1, r1, r5
 8007278:	f021 0103 	bic.w	r1, r1, #3
 800727c:	3d03      	subs	r5, #3
 800727e:	45a8      	cmp	r8, r5
 8007280:	bf38      	it	cc
 8007282:	2100      	movcc	r1, #0
 8007284:	440b      	add	r3, r1
 8007286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800728a:	b191      	cbz	r1, 80072b2 <__mdiff+0x11a>
 800728c:	6117      	str	r7, [r2, #16]
 800728e:	e79d      	b.n	80071cc <__mdiff+0x34>
 8007290:	f854 1b04 	ldr.w	r1, [r4], #4
 8007294:	46e6      	mov	lr, ip
 8007296:	0c08      	lsrs	r0, r1, #16
 8007298:	fa1c fc81 	uxtah	ip, ip, r1
 800729c:	4471      	add	r1, lr
 800729e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072a2:	b289      	uxth	r1, r1
 80072a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072a8:	f846 1b04 	str.w	r1, [r6], #4
 80072ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072b0:	e7dd      	b.n	800726e <__mdiff+0xd6>
 80072b2:	3f01      	subs	r7, #1
 80072b4:	e7e7      	b.n	8007286 <__mdiff+0xee>
 80072b6:	bf00      	nop
 80072b8:	08009de7 	.word	0x08009de7
 80072bc:	08009df8 	.word	0x08009df8

080072c0 <__ulp>:
 80072c0:	b082      	sub	sp, #8
 80072c2:	ed8d 0b00 	vstr	d0, [sp]
 80072c6:	9a01      	ldr	r2, [sp, #4]
 80072c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <__ulp+0x48>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dc08      	bgt.n	80072e6 <__ulp+0x26>
 80072d4:	425b      	negs	r3, r3
 80072d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80072da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072de:	da04      	bge.n	80072ea <__ulp+0x2a>
 80072e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80072e4:	4113      	asrs	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	e008      	b.n	80072fc <__ulp+0x3c>
 80072ea:	f1a2 0314 	sub.w	r3, r2, #20
 80072ee:	2b1e      	cmp	r3, #30
 80072f0:	bfda      	itte	le
 80072f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072f6:	40da      	lsrle	r2, r3
 80072f8:	2201      	movgt	r2, #1
 80072fa:	2300      	movs	r3, #0
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	ec41 0b10 	vmov	d0, r0, r1
 8007304:	b002      	add	sp, #8
 8007306:	4770      	bx	lr
 8007308:	7ff00000 	.word	0x7ff00000

0800730c <__b2d>:
 800730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007310:	6906      	ldr	r6, [r0, #16]
 8007312:	f100 0814 	add.w	r8, r0, #20
 8007316:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800731a:	1f37      	subs	r7, r6, #4
 800731c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007320:	4610      	mov	r0, r2
 8007322:	f7ff fd53 	bl	8006dcc <__hi0bits>
 8007326:	f1c0 0320 	rsb	r3, r0, #32
 800732a:	280a      	cmp	r0, #10
 800732c:	600b      	str	r3, [r1, #0]
 800732e:	491b      	ldr	r1, [pc, #108]	@ (800739c <__b2d+0x90>)
 8007330:	dc15      	bgt.n	800735e <__b2d+0x52>
 8007332:	f1c0 0c0b 	rsb	ip, r0, #11
 8007336:	fa22 f30c 	lsr.w	r3, r2, ip
 800733a:	45b8      	cmp	r8, r7
 800733c:	ea43 0501 	orr.w	r5, r3, r1
 8007340:	bf34      	ite	cc
 8007342:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007346:	2300      	movcs	r3, #0
 8007348:	3015      	adds	r0, #21
 800734a:	fa02 f000 	lsl.w	r0, r2, r0
 800734e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007352:	4303      	orrs	r3, r0
 8007354:	461c      	mov	r4, r3
 8007356:	ec45 4b10 	vmov	d0, r4, r5
 800735a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735e:	45b8      	cmp	r8, r7
 8007360:	bf3a      	itte	cc
 8007362:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007366:	f1a6 0708 	subcc.w	r7, r6, #8
 800736a:	2300      	movcs	r3, #0
 800736c:	380b      	subs	r0, #11
 800736e:	d012      	beq.n	8007396 <__b2d+0x8a>
 8007370:	f1c0 0120 	rsb	r1, r0, #32
 8007374:	fa23 f401 	lsr.w	r4, r3, r1
 8007378:	4082      	lsls	r2, r0
 800737a:	4322      	orrs	r2, r4
 800737c:	4547      	cmp	r7, r8
 800737e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007382:	bf8c      	ite	hi
 8007384:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007388:	2200      	movls	r2, #0
 800738a:	4083      	lsls	r3, r0
 800738c:	40ca      	lsrs	r2, r1
 800738e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007392:	4313      	orrs	r3, r2
 8007394:	e7de      	b.n	8007354 <__b2d+0x48>
 8007396:	ea42 0501 	orr.w	r5, r2, r1
 800739a:	e7db      	b.n	8007354 <__b2d+0x48>
 800739c:	3ff00000 	.word	0x3ff00000

080073a0 <__d2b>:
 80073a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	460f      	mov	r7, r1
 80073a6:	2101      	movs	r1, #1
 80073a8:	ec59 8b10 	vmov	r8, r9, d0
 80073ac:	4616      	mov	r6, r2
 80073ae:	f7ff fc1b 	bl	8006be8 <_Balloc>
 80073b2:	4604      	mov	r4, r0
 80073b4:	b930      	cbnz	r0, 80073c4 <__d2b+0x24>
 80073b6:	4602      	mov	r2, r0
 80073b8:	4b23      	ldr	r3, [pc, #140]	@ (8007448 <__d2b+0xa8>)
 80073ba:	4824      	ldr	r0, [pc, #144]	@ (800744c <__d2b+0xac>)
 80073bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80073c0:	f001 ffd2 	bl	8009368 <__assert_func>
 80073c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073cc:	b10d      	cbz	r5, 80073d2 <__d2b+0x32>
 80073ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	f1b8 0300 	subs.w	r3, r8, #0
 80073d8:	d023      	beq.n	8007422 <__d2b+0x82>
 80073da:	4668      	mov	r0, sp
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	f7ff fd14 	bl	8006e0a <__lo0bits>
 80073e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073e6:	b1d0      	cbz	r0, 800741e <__d2b+0x7e>
 80073e8:	f1c0 0320 	rsb	r3, r0, #32
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	430b      	orrs	r3, r1
 80073f2:	40c2      	lsrs	r2, r0
 80073f4:	6163      	str	r3, [r4, #20]
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	61a3      	str	r3, [r4, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf0c      	ite	eq
 8007400:	2201      	moveq	r2, #1
 8007402:	2202      	movne	r2, #2
 8007404:	6122      	str	r2, [r4, #16]
 8007406:	b1a5      	cbz	r5, 8007432 <__d2b+0x92>
 8007408:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800740c:	4405      	add	r5, r0
 800740e:	603d      	str	r5, [r7, #0]
 8007410:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4620      	mov	r0, r4
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741e:	6161      	str	r1, [r4, #20]
 8007420:	e7ea      	b.n	80073f8 <__d2b+0x58>
 8007422:	a801      	add	r0, sp, #4
 8007424:	f7ff fcf1 	bl	8006e0a <__lo0bits>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	6163      	str	r3, [r4, #20]
 800742c:	3020      	adds	r0, #32
 800742e:	2201      	movs	r2, #1
 8007430:	e7e8      	b.n	8007404 <__d2b+0x64>
 8007432:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007436:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800743a:	6038      	str	r0, [r7, #0]
 800743c:	6918      	ldr	r0, [r3, #16]
 800743e:	f7ff fcc5 	bl	8006dcc <__hi0bits>
 8007442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007446:	e7e5      	b.n	8007414 <__d2b+0x74>
 8007448:	08009de7 	.word	0x08009de7
 800744c:	08009df8 	.word	0x08009df8

08007450 <__ratio>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	b085      	sub	sp, #20
 8007456:	e9cd 1000 	strd	r1, r0, [sp]
 800745a:	a902      	add	r1, sp, #8
 800745c:	f7ff ff56 	bl	800730c <__b2d>
 8007460:	9800      	ldr	r0, [sp, #0]
 8007462:	a903      	add	r1, sp, #12
 8007464:	ec55 4b10 	vmov	r4, r5, d0
 8007468:	f7ff ff50 	bl	800730c <__b2d>
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	6919      	ldr	r1, [r3, #16]
 8007470:	9b00      	ldr	r3, [sp, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	1ac9      	subs	r1, r1, r3
 8007476:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	ec5b ab10 	vmov	sl, fp, d0
 8007480:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007484:	2b00      	cmp	r3, #0
 8007486:	bfce      	itee	gt
 8007488:	462a      	movgt	r2, r5
 800748a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800748e:	465a      	movle	r2, fp
 8007490:	462f      	mov	r7, r5
 8007492:	46d9      	mov	r9, fp
 8007494:	bfcc      	ite	gt
 8007496:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800749a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800749e:	464b      	mov	r3, r9
 80074a0:	4652      	mov	r2, sl
 80074a2:	4620      	mov	r0, r4
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f9 f9d9 	bl	800085c <__aeabi_ddiv>
 80074aa:	ec41 0b10 	vmov	d0, r0, r1
 80074ae:	b005      	add	sp, #20
 80074b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074b4 <__copybits>:
 80074b4:	3901      	subs	r1, #1
 80074b6:	b570      	push	{r4, r5, r6, lr}
 80074b8:	1149      	asrs	r1, r1, #5
 80074ba:	6914      	ldr	r4, [r2, #16]
 80074bc:	3101      	adds	r1, #1
 80074be:	f102 0314 	add.w	r3, r2, #20
 80074c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074ca:	1f05      	subs	r5, r0, #4
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	d30c      	bcc.n	80074ea <__copybits+0x36>
 80074d0:	1aa3      	subs	r3, r4, r2
 80074d2:	3b11      	subs	r3, #17
 80074d4:	f023 0303 	bic.w	r3, r3, #3
 80074d8:	3211      	adds	r2, #17
 80074da:	42a2      	cmp	r2, r4
 80074dc:	bf88      	it	hi
 80074de:	2300      	movhi	r3, #0
 80074e0:	4418      	add	r0, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	4288      	cmp	r0, r1
 80074e6:	d305      	bcc.n	80074f4 <__copybits+0x40>
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80074ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80074f2:	e7eb      	b.n	80074cc <__copybits+0x18>
 80074f4:	f840 3b04 	str.w	r3, [r0], #4
 80074f8:	e7f4      	b.n	80074e4 <__copybits+0x30>

080074fa <__any_on>:
 80074fa:	f100 0214 	add.w	r2, r0, #20
 80074fe:	6900      	ldr	r0, [r0, #16]
 8007500:	114b      	asrs	r3, r1, #5
 8007502:	4298      	cmp	r0, r3
 8007504:	b510      	push	{r4, lr}
 8007506:	db11      	blt.n	800752c <__any_on+0x32>
 8007508:	dd0a      	ble.n	8007520 <__any_on+0x26>
 800750a:	f011 011f 	ands.w	r1, r1, #31
 800750e:	d007      	beq.n	8007520 <__any_on+0x26>
 8007510:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007514:	fa24 f001 	lsr.w	r0, r4, r1
 8007518:	fa00 f101 	lsl.w	r1, r0, r1
 800751c:	428c      	cmp	r4, r1
 800751e:	d10b      	bne.n	8007538 <__any_on+0x3e>
 8007520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007524:	4293      	cmp	r3, r2
 8007526:	d803      	bhi.n	8007530 <__any_on+0x36>
 8007528:	2000      	movs	r0, #0
 800752a:	bd10      	pop	{r4, pc}
 800752c:	4603      	mov	r3, r0
 800752e:	e7f7      	b.n	8007520 <__any_on+0x26>
 8007530:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007534:	2900      	cmp	r1, #0
 8007536:	d0f5      	beq.n	8007524 <__any_on+0x2a>
 8007538:	2001      	movs	r0, #1
 800753a:	e7f6      	b.n	800752a <__any_on+0x30>

0800753c <sulp>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	ec45 4b10 	vmov	d0, r4, r5
 8007546:	4616      	mov	r6, r2
 8007548:	f7ff feba 	bl	80072c0 <__ulp>
 800754c:	ec51 0b10 	vmov	r0, r1, d0
 8007550:	b17e      	cbz	r6, 8007572 <sulp+0x36>
 8007552:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007556:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd09      	ble.n	8007572 <sulp+0x36>
 800755e:	051b      	lsls	r3, r3, #20
 8007560:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007564:	2400      	movs	r4, #0
 8007566:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	ec41 0b10 	vmov	d0, r0, r1
 8007576:	bd70      	pop	{r4, r5, r6, pc}

08007578 <_strtod_l>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b09f      	sub	sp, #124	@ 0x7c
 800757e:	460c      	mov	r4, r1
 8007580:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007582:	2200      	movs	r2, #0
 8007584:	921a      	str	r2, [sp, #104]	@ 0x68
 8007586:	9005      	str	r0, [sp, #20]
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	f04f 0b00 	mov.w	fp, #0
 8007590:	460a      	mov	r2, r1
 8007592:	9219      	str	r2, [sp, #100]	@ 0x64
 8007594:	7811      	ldrb	r1, [r2, #0]
 8007596:	292b      	cmp	r1, #43	@ 0x2b
 8007598:	d04a      	beq.n	8007630 <_strtod_l+0xb8>
 800759a:	d838      	bhi.n	800760e <_strtod_l+0x96>
 800759c:	290d      	cmp	r1, #13
 800759e:	d832      	bhi.n	8007606 <_strtod_l+0x8e>
 80075a0:	2908      	cmp	r1, #8
 80075a2:	d832      	bhi.n	800760a <_strtod_l+0x92>
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d03b      	beq.n	8007620 <_strtod_l+0xa8>
 80075a8:	2200      	movs	r2, #0
 80075aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80075ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80075ae:	782a      	ldrb	r2, [r5, #0]
 80075b0:	2a30      	cmp	r2, #48	@ 0x30
 80075b2:	f040 80b2 	bne.w	800771a <_strtod_l+0x1a2>
 80075b6:	786a      	ldrb	r2, [r5, #1]
 80075b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075bc:	2a58      	cmp	r2, #88	@ 0x58
 80075be:	d16e      	bne.n	800769e <_strtod_l+0x126>
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4a8f      	ldr	r2, [pc, #572]	@ (8007808 <_strtod_l+0x290>)
 80075cc:	9805      	ldr	r0, [sp, #20]
 80075ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075d0:	a919      	add	r1, sp, #100	@ 0x64
 80075d2:	f001 ff63 	bl	800949c <__gethex>
 80075d6:	f010 060f 	ands.w	r6, r0, #15
 80075da:	4604      	mov	r4, r0
 80075dc:	d005      	beq.n	80075ea <_strtod_l+0x72>
 80075de:	2e06      	cmp	r6, #6
 80075e0:	d128      	bne.n	8007634 <_strtod_l+0xbc>
 80075e2:	3501      	adds	r5, #1
 80075e4:	2300      	movs	r3, #0
 80075e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80075e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80075ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 858e 	bne.w	800810e <_strtod_l+0xb96>
 80075f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f4:	b1cb      	cbz	r3, 800762a <_strtod_l+0xb2>
 80075f6:	4652      	mov	r2, sl
 80075f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80075fc:	ec43 2b10 	vmov	d0, r2, r3
 8007600:	b01f      	add	sp, #124	@ 0x7c
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	2920      	cmp	r1, #32
 8007608:	d1ce      	bne.n	80075a8 <_strtod_l+0x30>
 800760a:	3201      	adds	r2, #1
 800760c:	e7c1      	b.n	8007592 <_strtod_l+0x1a>
 800760e:	292d      	cmp	r1, #45	@ 0x2d
 8007610:	d1ca      	bne.n	80075a8 <_strtod_l+0x30>
 8007612:	2101      	movs	r1, #1
 8007614:	910e      	str	r1, [sp, #56]	@ 0x38
 8007616:	1c51      	adds	r1, r2, #1
 8007618:	9119      	str	r1, [sp, #100]	@ 0x64
 800761a:	7852      	ldrb	r2, [r2, #1]
 800761c:	2a00      	cmp	r2, #0
 800761e:	d1c5      	bne.n	80075ac <_strtod_l+0x34>
 8007620:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007622:	9419      	str	r4, [sp, #100]	@ 0x64
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8570 	bne.w	800810a <_strtod_l+0xb92>
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	e7e5      	b.n	80075fc <_strtod_l+0x84>
 8007630:	2100      	movs	r1, #0
 8007632:	e7ef      	b.n	8007614 <_strtod_l+0x9c>
 8007634:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007636:	b13a      	cbz	r2, 8007648 <_strtod_l+0xd0>
 8007638:	2135      	movs	r1, #53	@ 0x35
 800763a:	a81c      	add	r0, sp, #112	@ 0x70
 800763c:	f7ff ff3a 	bl	80074b4 <__copybits>
 8007640:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007642:	9805      	ldr	r0, [sp, #20]
 8007644:	f7ff fb10 	bl	8006c68 <_Bfree>
 8007648:	3e01      	subs	r6, #1
 800764a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800764c:	2e04      	cmp	r6, #4
 800764e:	d806      	bhi.n	800765e <_strtod_l+0xe6>
 8007650:	e8df f006 	tbb	[pc, r6]
 8007654:	201d0314 	.word	0x201d0314
 8007658:	14          	.byte	0x14
 8007659:	00          	.byte	0x00
 800765a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800765e:	05e1      	lsls	r1, r4, #23
 8007660:	bf48      	it	mi
 8007662:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800766a:	0d1b      	lsrs	r3, r3, #20
 800766c:	051b      	lsls	r3, r3, #20
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1bb      	bne.n	80075ea <_strtod_l+0x72>
 8007672:	f7fe fb2d 	bl	8005cd0 <__errno>
 8007676:	2322      	movs	r3, #34	@ 0x22
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	e7b6      	b.n	80075ea <_strtod_l+0x72>
 800767c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007684:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007688:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800768c:	e7e7      	b.n	800765e <_strtod_l+0xe6>
 800768e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007810 <_strtod_l+0x298>
 8007692:	e7e4      	b.n	800765e <_strtod_l+0xe6>
 8007694:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007698:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800769c:	e7df      	b.n	800765e <_strtod_l+0xe6>
 800769e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b30      	cmp	r3, #48	@ 0x30
 80076a8:	d0f9      	beq.n	800769e <_strtod_l+0x126>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d09d      	beq.n	80075ea <_strtod_l+0x72>
 80076ae:	2301      	movs	r3, #1
 80076b0:	2700      	movs	r7, #0
 80076b2:	9308      	str	r3, [sp, #32]
 80076b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80076b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80076ba:	46b9      	mov	r9, r7
 80076bc:	220a      	movs	r2, #10
 80076be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076c0:	7805      	ldrb	r5, [r0, #0]
 80076c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076c6:	b2d9      	uxtb	r1, r3
 80076c8:	2909      	cmp	r1, #9
 80076ca:	d928      	bls.n	800771e <_strtod_l+0x1a6>
 80076cc:	494f      	ldr	r1, [pc, #316]	@ (800780c <_strtod_l+0x294>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	f001 fdee 	bl	80092b0 <strncmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d032      	beq.n	800773e <_strtod_l+0x1c6>
 80076d8:	2000      	movs	r0, #0
 80076da:	462a      	mov	r2, r5
 80076dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80076de:	464d      	mov	r5, r9
 80076e0:	4603      	mov	r3, r0
 80076e2:	2a65      	cmp	r2, #101	@ 0x65
 80076e4:	d001      	beq.n	80076ea <_strtod_l+0x172>
 80076e6:	2a45      	cmp	r2, #69	@ 0x45
 80076e8:	d114      	bne.n	8007714 <_strtod_l+0x19c>
 80076ea:	b91d      	cbnz	r5, 80076f4 <_strtod_l+0x17c>
 80076ec:	9a08      	ldr	r2, [sp, #32]
 80076ee:	4302      	orrs	r2, r0
 80076f0:	d096      	beq.n	8007620 <_strtod_l+0xa8>
 80076f2:	2500      	movs	r5, #0
 80076f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80076f6:	1c62      	adds	r2, r4, #1
 80076f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80076fa:	7862      	ldrb	r2, [r4, #1]
 80076fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80076fe:	d07a      	beq.n	80077f6 <_strtod_l+0x27e>
 8007700:	2a2d      	cmp	r2, #45	@ 0x2d
 8007702:	d07e      	beq.n	8007802 <_strtod_l+0x28a>
 8007704:	f04f 0c00 	mov.w	ip, #0
 8007708:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800770c:	2909      	cmp	r1, #9
 800770e:	f240 8085 	bls.w	800781c <_strtod_l+0x2a4>
 8007712:	9419      	str	r4, [sp, #100]	@ 0x64
 8007714:	f04f 0800 	mov.w	r8, #0
 8007718:	e0a5      	b.n	8007866 <_strtod_l+0x2ee>
 800771a:	2300      	movs	r3, #0
 800771c:	e7c8      	b.n	80076b0 <_strtod_l+0x138>
 800771e:	f1b9 0f08 	cmp.w	r9, #8
 8007722:	bfd8      	it	le
 8007724:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007726:	f100 0001 	add.w	r0, r0, #1
 800772a:	bfda      	itte	le
 800772c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007730:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007732:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007736:	f109 0901 	add.w	r9, r9, #1
 800773a:	9019      	str	r0, [sp, #100]	@ 0x64
 800773c:	e7bf      	b.n	80076be <_strtod_l+0x146>
 800773e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	9219      	str	r2, [sp, #100]	@ 0x64
 8007744:	785a      	ldrb	r2, [r3, #1]
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d03b      	beq.n	80077c4 <_strtod_l+0x24c>
 800774c:	900a      	str	r0, [sp, #40]	@ 0x28
 800774e:	464d      	mov	r5, r9
 8007750:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007754:	2b09      	cmp	r3, #9
 8007756:	d912      	bls.n	800777e <_strtod_l+0x206>
 8007758:	2301      	movs	r3, #1
 800775a:	e7c2      	b.n	80076e2 <_strtod_l+0x16a>
 800775c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	9219      	str	r2, [sp, #100]	@ 0x64
 8007762:	785a      	ldrb	r2, [r3, #1]
 8007764:	3001      	adds	r0, #1
 8007766:	2a30      	cmp	r2, #48	@ 0x30
 8007768:	d0f8      	beq.n	800775c <_strtod_l+0x1e4>
 800776a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800776e:	2b08      	cmp	r3, #8
 8007770:	f200 84d2 	bhi.w	8008118 <_strtod_l+0xba0>
 8007774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007776:	900a      	str	r0, [sp, #40]	@ 0x28
 8007778:	2000      	movs	r0, #0
 800777a:	930c      	str	r3, [sp, #48]	@ 0x30
 800777c:	4605      	mov	r5, r0
 800777e:	3a30      	subs	r2, #48	@ 0x30
 8007780:	f100 0301 	add.w	r3, r0, #1
 8007784:	d018      	beq.n	80077b8 <_strtod_l+0x240>
 8007786:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007788:	4419      	add	r1, r3
 800778a:	910a      	str	r1, [sp, #40]	@ 0x28
 800778c:	462e      	mov	r6, r5
 800778e:	f04f 0e0a 	mov.w	lr, #10
 8007792:	1c71      	adds	r1, r6, #1
 8007794:	eba1 0c05 	sub.w	ip, r1, r5
 8007798:	4563      	cmp	r3, ip
 800779a:	dc15      	bgt.n	80077c8 <_strtod_l+0x250>
 800779c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80077a0:	182b      	adds	r3, r5, r0
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	f105 0501 	add.w	r5, r5, #1
 80077a8:	4405      	add	r5, r0
 80077aa:	dc1a      	bgt.n	80077e2 <_strtod_l+0x26a>
 80077ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ae:	230a      	movs	r3, #10
 80077b0:	fb03 2301 	mla	r3, r3, r1, r2
 80077b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077b6:	2300      	movs	r3, #0
 80077b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077ba:	1c51      	adds	r1, r2, #1
 80077bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80077be:	7852      	ldrb	r2, [r2, #1]
 80077c0:	4618      	mov	r0, r3
 80077c2:	e7c5      	b.n	8007750 <_strtod_l+0x1d8>
 80077c4:	4648      	mov	r0, r9
 80077c6:	e7ce      	b.n	8007766 <_strtod_l+0x1ee>
 80077c8:	2e08      	cmp	r6, #8
 80077ca:	dc05      	bgt.n	80077d8 <_strtod_l+0x260>
 80077cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80077ce:	fb0e f606 	mul.w	r6, lr, r6
 80077d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80077d4:	460e      	mov	r6, r1
 80077d6:	e7dc      	b.n	8007792 <_strtod_l+0x21a>
 80077d8:	2910      	cmp	r1, #16
 80077da:	bfd8      	it	le
 80077dc:	fb0e f707 	mulle.w	r7, lr, r7
 80077e0:	e7f8      	b.n	80077d4 <_strtod_l+0x25c>
 80077e2:	2b0f      	cmp	r3, #15
 80077e4:	bfdc      	itt	le
 80077e6:	230a      	movle	r3, #10
 80077e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80077ec:	e7e3      	b.n	80077b6 <_strtod_l+0x23e>
 80077ee:	2300      	movs	r3, #0
 80077f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f2:	2301      	movs	r3, #1
 80077f4:	e77a      	b.n	80076ec <_strtod_l+0x174>
 80077f6:	f04f 0c00 	mov.w	ip, #0
 80077fa:	1ca2      	adds	r2, r4, #2
 80077fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80077fe:	78a2      	ldrb	r2, [r4, #2]
 8007800:	e782      	b.n	8007708 <_strtod_l+0x190>
 8007802:	f04f 0c01 	mov.w	ip, #1
 8007806:	e7f8      	b.n	80077fa <_strtod_l+0x282>
 8007808:	0800a034 	.word	0x0800a034
 800780c:	08009e51 	.word	0x08009e51
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007816:	1c51      	adds	r1, r2, #1
 8007818:	9119      	str	r1, [sp, #100]	@ 0x64
 800781a:	7852      	ldrb	r2, [r2, #1]
 800781c:	2a30      	cmp	r2, #48	@ 0x30
 800781e:	d0f9      	beq.n	8007814 <_strtod_l+0x29c>
 8007820:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007824:	2908      	cmp	r1, #8
 8007826:	f63f af75 	bhi.w	8007714 <_strtod_l+0x19c>
 800782a:	3a30      	subs	r2, #48	@ 0x30
 800782c:	9209      	str	r2, [sp, #36]	@ 0x24
 800782e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007830:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007832:	f04f 080a 	mov.w	r8, #10
 8007836:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007838:	1c56      	adds	r6, r2, #1
 800783a:	9619      	str	r6, [sp, #100]	@ 0x64
 800783c:	7852      	ldrb	r2, [r2, #1]
 800783e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007842:	f1be 0f09 	cmp.w	lr, #9
 8007846:	d939      	bls.n	80078bc <_strtod_l+0x344>
 8007848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800784a:	1a76      	subs	r6, r6, r1
 800784c:	2e08      	cmp	r6, #8
 800784e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007852:	dc03      	bgt.n	800785c <_strtod_l+0x2e4>
 8007854:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007856:	4588      	cmp	r8, r1
 8007858:	bfa8      	it	ge
 800785a:	4688      	movge	r8, r1
 800785c:	f1bc 0f00 	cmp.w	ip, #0
 8007860:	d001      	beq.n	8007866 <_strtod_l+0x2ee>
 8007862:	f1c8 0800 	rsb	r8, r8, #0
 8007866:	2d00      	cmp	r5, #0
 8007868:	d14e      	bne.n	8007908 <_strtod_l+0x390>
 800786a:	9908      	ldr	r1, [sp, #32]
 800786c:	4308      	orrs	r0, r1
 800786e:	f47f aebc 	bne.w	80075ea <_strtod_l+0x72>
 8007872:	2b00      	cmp	r3, #0
 8007874:	f47f aed4 	bne.w	8007620 <_strtod_l+0xa8>
 8007878:	2a69      	cmp	r2, #105	@ 0x69
 800787a:	d028      	beq.n	80078ce <_strtod_l+0x356>
 800787c:	dc25      	bgt.n	80078ca <_strtod_l+0x352>
 800787e:	2a49      	cmp	r2, #73	@ 0x49
 8007880:	d025      	beq.n	80078ce <_strtod_l+0x356>
 8007882:	2a4e      	cmp	r2, #78	@ 0x4e
 8007884:	f47f aecc 	bne.w	8007620 <_strtod_l+0xa8>
 8007888:	499a      	ldr	r1, [pc, #616]	@ (8007af4 <_strtod_l+0x57c>)
 800788a:	a819      	add	r0, sp, #100	@ 0x64
 800788c:	f002 f828 	bl	80098e0 <__match>
 8007890:	2800      	cmp	r0, #0
 8007892:	f43f aec5 	beq.w	8007620 <_strtod_l+0xa8>
 8007896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b28      	cmp	r3, #40	@ 0x28
 800789c:	d12e      	bne.n	80078fc <_strtod_l+0x384>
 800789e:	4996      	ldr	r1, [pc, #600]	@ (8007af8 <_strtod_l+0x580>)
 80078a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80078a2:	a819      	add	r0, sp, #100	@ 0x64
 80078a4:	f002 f830 	bl	8009908 <__hexnan>
 80078a8:	2805      	cmp	r0, #5
 80078aa:	d127      	bne.n	80078fc <_strtod_l+0x384>
 80078ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80078b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80078b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078ba:	e696      	b.n	80075ea <_strtod_l+0x72>
 80078bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078be:	fb08 2101 	mla	r1, r8, r1, r2
 80078c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80078c8:	e7b5      	b.n	8007836 <_strtod_l+0x2be>
 80078ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80078cc:	e7da      	b.n	8007884 <_strtod_l+0x30c>
 80078ce:	498b      	ldr	r1, [pc, #556]	@ (8007afc <_strtod_l+0x584>)
 80078d0:	a819      	add	r0, sp, #100	@ 0x64
 80078d2:	f002 f805 	bl	80098e0 <__match>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f aea2 	beq.w	8007620 <_strtod_l+0xa8>
 80078dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078de:	4988      	ldr	r1, [pc, #544]	@ (8007b00 <_strtod_l+0x588>)
 80078e0:	3b01      	subs	r3, #1
 80078e2:	a819      	add	r0, sp, #100	@ 0x64
 80078e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80078e6:	f001 fffb 	bl	80098e0 <__match>
 80078ea:	b910      	cbnz	r0, 80078f2 <_strtod_l+0x37a>
 80078ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078ee:	3301      	adds	r3, #1
 80078f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80078f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007b10 <_strtod_l+0x598>
 80078f6:	f04f 0a00 	mov.w	sl, #0
 80078fa:	e676      	b.n	80075ea <_strtod_l+0x72>
 80078fc:	4881      	ldr	r0, [pc, #516]	@ (8007b04 <_strtod_l+0x58c>)
 80078fe:	f001 fd2b 	bl	8009358 <nan>
 8007902:	ec5b ab10 	vmov	sl, fp, d0
 8007906:	e670      	b.n	80075ea <_strtod_l+0x72>
 8007908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800790a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800790c:	eba8 0303 	sub.w	r3, r8, r3
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	bf08      	it	eq
 8007916:	46a9      	moveq	r9, r5
 8007918:	2d10      	cmp	r5, #16
 800791a:	9309      	str	r3, [sp, #36]	@ 0x24
 800791c:	462c      	mov	r4, r5
 800791e:	bfa8      	it	ge
 8007920:	2410      	movge	r4, #16
 8007922:	f7f8 fdf7 	bl	8000514 <__aeabi_ui2d>
 8007926:	2d09      	cmp	r5, #9
 8007928:	4682      	mov	sl, r0
 800792a:	468b      	mov	fp, r1
 800792c:	dc13      	bgt.n	8007956 <_strtod_l+0x3de>
 800792e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	f43f ae5a 	beq.w	80075ea <_strtod_l+0x72>
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	dd78      	ble.n	8007a2c <_strtod_l+0x4b4>
 800793a:	2b16      	cmp	r3, #22
 800793c:	dc5f      	bgt.n	80079fe <_strtod_l+0x486>
 800793e:	4972      	ldr	r1, [pc, #456]	@ (8007b08 <_strtod_l+0x590>)
 8007940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	f7f8 fe5c 	bl	8000608 <__aeabi_dmul>
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	e649      	b.n	80075ea <_strtod_l+0x72>
 8007956:	4b6c      	ldr	r3, [pc, #432]	@ (8007b08 <_strtod_l+0x590>)
 8007958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800795c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007960:	f7f8 fe52 	bl	8000608 <__aeabi_dmul>
 8007964:	4682      	mov	sl, r0
 8007966:	4638      	mov	r0, r7
 8007968:	468b      	mov	fp, r1
 800796a:	f7f8 fdd3 	bl	8000514 <__aeabi_ui2d>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 fc91 	bl	800029c <__adddf3>
 800797a:	2d0f      	cmp	r5, #15
 800797c:	4682      	mov	sl, r0
 800797e:	468b      	mov	fp, r1
 8007980:	ddd5      	ble.n	800792e <_strtod_l+0x3b6>
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	1b2c      	subs	r4, r5, r4
 8007986:	441c      	add	r4, r3
 8007988:	2c00      	cmp	r4, #0
 800798a:	f340 8093 	ble.w	8007ab4 <_strtod_l+0x53c>
 800798e:	f014 030f 	ands.w	r3, r4, #15
 8007992:	d00a      	beq.n	80079aa <_strtod_l+0x432>
 8007994:	495c      	ldr	r1, [pc, #368]	@ (8007b08 <_strtod_l+0x590>)
 8007996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800799a:	4652      	mov	r2, sl
 800799c:	465b      	mov	r3, fp
 800799e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a2:	f7f8 fe31 	bl	8000608 <__aeabi_dmul>
 80079a6:	4682      	mov	sl, r0
 80079a8:	468b      	mov	fp, r1
 80079aa:	f034 040f 	bics.w	r4, r4, #15
 80079ae:	d073      	beq.n	8007a98 <_strtod_l+0x520>
 80079b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80079b4:	dd49      	ble.n	8007a4a <_strtod_l+0x4d2>
 80079b6:	2400      	movs	r4, #0
 80079b8:	46a0      	mov	r8, r4
 80079ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079bc:	46a1      	mov	r9, r4
 80079be:	9a05      	ldr	r2, [sp, #20]
 80079c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007b10 <_strtod_l+0x598>
 80079c4:	2322      	movs	r3, #34	@ 0x22
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f43f ae0b 	beq.w	80075ea <_strtod_l+0x72>
 80079d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079d6:	9805      	ldr	r0, [sp, #20]
 80079d8:	f7ff f946 	bl	8006c68 <_Bfree>
 80079dc:	9805      	ldr	r0, [sp, #20]
 80079de:	4649      	mov	r1, r9
 80079e0:	f7ff f942 	bl	8006c68 <_Bfree>
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	4641      	mov	r1, r8
 80079e8:	f7ff f93e 	bl	8006c68 <_Bfree>
 80079ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079ee:	9805      	ldr	r0, [sp, #20]
 80079f0:	f7ff f93a 	bl	8006c68 <_Bfree>
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f7ff f936 	bl	8006c68 <_Bfree>
 80079fc:	e5f5      	b.n	80075ea <_strtod_l+0x72>
 80079fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a04:	4293      	cmp	r3, r2
 8007a06:	dbbc      	blt.n	8007982 <_strtod_l+0x40a>
 8007a08:	4c3f      	ldr	r4, [pc, #252]	@ (8007b08 <_strtod_l+0x590>)
 8007a0a:	f1c5 050f 	rsb	r5, r5, #15
 8007a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a12:	4652      	mov	r2, sl
 8007a14:	465b      	mov	r3, fp
 8007a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1a:	f7f8 fdf5 	bl	8000608 <__aeabi_dmul>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a20:	1b5d      	subs	r5, r3, r5
 8007a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a2a:	e78f      	b.n	800794c <_strtod_l+0x3d4>
 8007a2c:	3316      	adds	r3, #22
 8007a2e:	dba8      	blt.n	8007982 <_strtod_l+0x40a>
 8007a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a32:	eba3 0808 	sub.w	r8, r3, r8
 8007a36:	4b34      	ldr	r3, [pc, #208]	@ (8007b08 <_strtod_l+0x590>)
 8007a38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a40:	4650      	mov	r0, sl
 8007a42:	4659      	mov	r1, fp
 8007a44:	f7f8 ff0a 	bl	800085c <__aeabi_ddiv>
 8007a48:	e782      	b.n	8007950 <_strtod_l+0x3d8>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4f2f      	ldr	r7, [pc, #188]	@ (8007b0c <_strtod_l+0x594>)
 8007a4e:	1124      	asrs	r4, r4, #4
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	461e      	mov	r6, r3
 8007a56:	2c01      	cmp	r4, #1
 8007a58:	dc21      	bgt.n	8007a9e <_strtod_l+0x526>
 8007a5a:	b10b      	cbz	r3, 8007a60 <_strtod_l+0x4e8>
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	492a      	ldr	r1, [pc, #168]	@ (8007b0c <_strtod_l+0x594>)
 8007a62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a72:	f7f8 fdc9 	bl	8000608 <__aeabi_dmul>
 8007a76:	4b26      	ldr	r3, [pc, #152]	@ (8007b10 <_strtod_l+0x598>)
 8007a78:	460a      	mov	r2, r1
 8007a7a:	400b      	ands	r3, r1
 8007a7c:	4925      	ldr	r1, [pc, #148]	@ (8007b14 <_strtod_l+0x59c>)
 8007a7e:	428b      	cmp	r3, r1
 8007a80:	4682      	mov	sl, r0
 8007a82:	d898      	bhi.n	80079b6 <_strtod_l+0x43e>
 8007a84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf86      	itte	hi
 8007a8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007b18 <_strtod_l+0x5a0>
 8007a90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007a94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9308      	str	r3, [sp, #32]
 8007a9c:	e076      	b.n	8007b8c <_strtod_l+0x614>
 8007a9e:	07e2      	lsls	r2, r4, #31
 8007aa0:	d504      	bpl.n	8007aac <_strtod_l+0x534>
 8007aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa6:	f7f8 fdaf 	bl	8000608 <__aeabi_dmul>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	3601      	adds	r6, #1
 8007aae:	1064      	asrs	r4, r4, #1
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	e7d0      	b.n	8007a56 <_strtod_l+0x4de>
 8007ab4:	d0f0      	beq.n	8007a98 <_strtod_l+0x520>
 8007ab6:	4264      	negs	r4, r4
 8007ab8:	f014 020f 	ands.w	r2, r4, #15
 8007abc:	d00a      	beq.n	8007ad4 <_strtod_l+0x55c>
 8007abe:	4b12      	ldr	r3, [pc, #72]	@ (8007b08 <_strtod_l+0x590>)
 8007ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f7f8 fec6 	bl	800085c <__aeabi_ddiv>
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	1124      	asrs	r4, r4, #4
 8007ad6:	d0df      	beq.n	8007a98 <_strtod_l+0x520>
 8007ad8:	2c1f      	cmp	r4, #31
 8007ada:	dd1f      	ble.n	8007b1c <_strtod_l+0x5a4>
 8007adc:	2400      	movs	r4, #0
 8007ade:	46a0      	mov	r8, r4
 8007ae0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ae2:	46a1      	mov	r9, r4
 8007ae4:	9a05      	ldr	r2, [sp, #20]
 8007ae6:	2322      	movs	r3, #34	@ 0x22
 8007ae8:	f04f 0a00 	mov.w	sl, #0
 8007aec:	f04f 0b00 	mov.w	fp, #0
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	e76b      	b.n	80079cc <_strtod_l+0x454>
 8007af4:	08009d41 	.word	0x08009d41
 8007af8:	0800a020 	.word	0x0800a020
 8007afc:	08009d39 	.word	0x08009d39
 8007b00:	08009d6e 	.word	0x08009d6e
 8007b04:	08009ec2 	.word	0x08009ec2
 8007b08:	08009f58 	.word	0x08009f58
 8007b0c:	08009f30 	.word	0x08009f30
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	7ca00000 	.word	0x7ca00000
 8007b18:	7fefffff 	.word	0x7fefffff
 8007b1c:	f014 0310 	ands.w	r3, r4, #16
 8007b20:	bf18      	it	ne
 8007b22:	236a      	movne	r3, #106	@ 0x6a
 8007b24:	4ea9      	ldr	r6, [pc, #676]	@ (8007dcc <_strtod_l+0x854>)
 8007b26:	9308      	str	r3, [sp, #32]
 8007b28:	4650      	mov	r0, sl
 8007b2a:	4659      	mov	r1, fp
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	07e7      	lsls	r7, r4, #31
 8007b30:	d504      	bpl.n	8007b3c <_strtod_l+0x5c4>
 8007b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b36:	f7f8 fd67 	bl	8000608 <__aeabi_dmul>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	1064      	asrs	r4, r4, #1
 8007b3e:	f106 0608 	add.w	r6, r6, #8
 8007b42:	d1f4      	bne.n	8007b2e <_strtod_l+0x5b6>
 8007b44:	b10b      	cbz	r3, 8007b4a <_strtod_l+0x5d2>
 8007b46:	4682      	mov	sl, r0
 8007b48:	468b      	mov	fp, r1
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	b1b3      	cbz	r3, 8007b7c <_strtod_l+0x604>
 8007b4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	4659      	mov	r1, fp
 8007b5a:	dd0f      	ble.n	8007b7c <_strtod_l+0x604>
 8007b5c:	2b1f      	cmp	r3, #31
 8007b5e:	dd56      	ble.n	8007c0e <_strtod_l+0x696>
 8007b60:	2b34      	cmp	r3, #52	@ 0x34
 8007b62:	bfde      	ittt	le
 8007b64:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007b68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b6c:	4093      	lslle	r3, r2
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	bfcc      	ite	gt
 8007b74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b78:	ea03 0b01 	andle.w	fp, r3, r1
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d1a7      	bne.n	8007adc <_strtod_l+0x564>
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b92:	9805      	ldr	r0, [sp, #20]
 8007b94:	462b      	mov	r3, r5
 8007b96:	464a      	mov	r2, r9
 8007b98:	f7ff f8ce 	bl	8006d38 <__s2b>
 8007b9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f43f af09 	beq.w	80079b6 <_strtod_l+0x43e>
 8007ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	eba3 0308 	sub.w	r3, r3, r8
 8007bae:	bfa8      	it	ge
 8007bb0:	2300      	movge	r3, #0
 8007bb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bb4:	2400      	movs	r4, #0
 8007bb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007bba:	9316      	str	r3, [sp, #88]	@ 0x58
 8007bbc:	46a0      	mov	r8, r4
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bc0:	9805      	ldr	r0, [sp, #20]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	f7ff f810 	bl	8006be8 <_Balloc>
 8007bc8:	4681      	mov	r9, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f aef7 	beq.w	80079be <_strtod_l+0x446>
 8007bd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	3202      	adds	r2, #2
 8007bd6:	f103 010c 	add.w	r1, r3, #12
 8007bda:	0092      	lsls	r2, r2, #2
 8007bdc:	300c      	adds	r0, #12
 8007bde:	f001 fbab 	bl	8009338 <memcpy>
 8007be2:	ec4b ab10 	vmov	d0, sl, fp
 8007be6:	9805      	ldr	r0, [sp, #20]
 8007be8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bea:	a91b      	add	r1, sp, #108	@ 0x6c
 8007bec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007bf0:	f7ff fbd6 	bl	80073a0 <__d2b>
 8007bf4:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f43f aee1 	beq.w	80079be <_strtod_l+0x446>
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	2101      	movs	r1, #1
 8007c00:	f7ff f930 	bl	8006e64 <__i2b>
 8007c04:	4680      	mov	r8, r0
 8007c06:	b948      	cbnz	r0, 8007c1c <_strtod_l+0x6a4>
 8007c08:	f04f 0800 	mov.w	r8, #0
 8007c0c:	e6d7      	b.n	80079be <_strtod_l+0x446>
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	ea03 0a0a 	and.w	sl, r3, sl
 8007c1a:	e7af      	b.n	8007b7c <_strtod_l+0x604>
 8007c1c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c1e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c20:	2d00      	cmp	r5, #0
 8007c22:	bfab      	itete	ge
 8007c24:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c26:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c28:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c2c:	bfac      	ite	ge
 8007c2e:	18ef      	addge	r7, r5, r3
 8007c30:	1b5e      	sublt	r6, r3, r5
 8007c32:	9b08      	ldr	r3, [sp, #32]
 8007c34:	1aed      	subs	r5, r5, r3
 8007c36:	4415      	add	r5, r2
 8007c38:	4b65      	ldr	r3, [pc, #404]	@ (8007dd0 <_strtod_l+0x858>)
 8007c3a:	3d01      	subs	r5, #1
 8007c3c:	429d      	cmp	r5, r3
 8007c3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c42:	da50      	bge.n	8007ce6 <_strtod_l+0x76e>
 8007c44:	1b5b      	subs	r3, r3, r5
 8007c46:	2b1f      	cmp	r3, #31
 8007c48:	eba2 0203 	sub.w	r2, r2, r3
 8007c4c:	f04f 0101 	mov.w	r1, #1
 8007c50:	dc3d      	bgt.n	8007cce <_strtod_l+0x756>
 8007c52:	fa01 f303 	lsl.w	r3, r1, r3
 8007c56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c5c:	18bd      	adds	r5, r7, r2
 8007c5e:	9b08      	ldr	r3, [sp, #32]
 8007c60:	42af      	cmp	r7, r5
 8007c62:	4416      	add	r6, r2
 8007c64:	441e      	add	r6, r3
 8007c66:	463b      	mov	r3, r7
 8007c68:	bfa8      	it	ge
 8007c6a:	462b      	movge	r3, r5
 8007c6c:	42b3      	cmp	r3, r6
 8007c6e:	bfa8      	it	ge
 8007c70:	4633      	movge	r3, r6
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfc2      	ittt	gt
 8007c76:	1aed      	subgt	r5, r5, r3
 8007c78:	1af6      	subgt	r6, r6, r3
 8007c7a:	1aff      	subgt	r7, r7, r3
 8007c7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd16      	ble.n	8007cb0 <_strtod_l+0x738>
 8007c82:	4641      	mov	r1, r8
 8007c84:	9805      	ldr	r0, [sp, #20]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7ff f9a4 	bl	8006fd4 <__pow5mult>
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d0ba      	beq.n	8007c08 <_strtod_l+0x690>
 8007c92:	4601      	mov	r1, r0
 8007c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c96:	9805      	ldr	r0, [sp, #20]
 8007c98:	f7ff f8fa 	bl	8006e90 <__multiply>
 8007c9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f43f ae8d 	beq.w	80079be <_strtod_l+0x446>
 8007ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ca6:	9805      	ldr	r0, [sp, #20]
 8007ca8:	f7fe ffde 	bl	8006c68 <_Bfree>
 8007cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	dc1d      	bgt.n	8007cf0 <_strtod_l+0x778>
 8007cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd23      	ble.n	8007d02 <_strtod_l+0x78a>
 8007cba:	4649      	mov	r1, r9
 8007cbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007cbe:	9805      	ldr	r0, [sp, #20]
 8007cc0:	f7ff f988 	bl	8006fd4 <__pow5mult>
 8007cc4:	4681      	mov	r9, r0
 8007cc6:	b9e0      	cbnz	r0, 8007d02 <_strtod_l+0x78a>
 8007cc8:	f04f 0900 	mov.w	r9, #0
 8007ccc:	e677      	b.n	80079be <_strtod_l+0x446>
 8007cce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007cda:	35e2      	adds	r5, #226	@ 0xe2
 8007cdc:	fa01 f305 	lsl.w	r3, r1, r5
 8007ce0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ce2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ce4:	e7ba      	b.n	8007c5c <_strtod_l+0x6e4>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cea:	2301      	movs	r3, #1
 8007cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cee:	e7b5      	b.n	8007c5c <_strtod_l+0x6e4>
 8007cf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cf2:	9805      	ldr	r0, [sp, #20]
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	f7ff f9c7 	bl	8007088 <__lshift>
 8007cfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1d9      	bne.n	8007cb4 <_strtod_l+0x73c>
 8007d00:	e65d      	b.n	80079be <_strtod_l+0x446>
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	dd07      	ble.n	8007d16 <_strtod_l+0x79e>
 8007d06:	4649      	mov	r1, r9
 8007d08:	9805      	ldr	r0, [sp, #20]
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	f7ff f9bc 	bl	8007088 <__lshift>
 8007d10:	4681      	mov	r9, r0
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d0d8      	beq.n	8007cc8 <_strtod_l+0x750>
 8007d16:	2f00      	cmp	r7, #0
 8007d18:	dd08      	ble.n	8007d2c <_strtod_l+0x7b4>
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	9805      	ldr	r0, [sp, #20]
 8007d1e:	463a      	mov	r2, r7
 8007d20:	f7ff f9b2 	bl	8007088 <__lshift>
 8007d24:	4680      	mov	r8, r0
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f ae49 	beq.w	80079be <_strtod_l+0x446>
 8007d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	464a      	mov	r2, r9
 8007d32:	f7ff fa31 	bl	8007198 <__mdiff>
 8007d36:	4604      	mov	r4, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f43f ae40 	beq.w	80079be <_strtod_l+0x446>
 8007d3e:	68c3      	ldr	r3, [r0, #12]
 8007d40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d42:	2300      	movs	r3, #0
 8007d44:	60c3      	str	r3, [r0, #12]
 8007d46:	4641      	mov	r1, r8
 8007d48:	f7ff fa0a 	bl	8007160 <__mcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	da45      	bge.n	8007ddc <_strtod_l+0x864>
 8007d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d52:	ea53 030a 	orrs.w	r3, r3, sl
 8007d56:	d16b      	bne.n	8007e30 <_strtod_l+0x8b8>
 8007d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d167      	bne.n	8007e30 <_strtod_l+0x8b8>
 8007d60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d64:	0d1b      	lsrs	r3, r3, #20
 8007d66:	051b      	lsls	r3, r3, #20
 8007d68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d6c:	d960      	bls.n	8007e30 <_strtod_l+0x8b8>
 8007d6e:	6963      	ldr	r3, [r4, #20]
 8007d70:	b913      	cbnz	r3, 8007d78 <_strtod_l+0x800>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	dd5b      	ble.n	8007e30 <_strtod_l+0x8b8>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	9805      	ldr	r0, [sp, #20]
 8007d7e:	f7ff f983 	bl	8007088 <__lshift>
 8007d82:	4641      	mov	r1, r8
 8007d84:	4604      	mov	r4, r0
 8007d86:	f7ff f9eb 	bl	8007160 <__mcmp>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	dd50      	ble.n	8007e30 <_strtod_l+0x8b8>
 8007d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d92:	9a08      	ldr	r2, [sp, #32]
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	051b      	lsls	r3, r3, #20
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d06a      	beq.n	8007e72 <_strtod_l+0x8fa>
 8007d9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007da0:	d867      	bhi.n	8007e72 <_strtod_l+0x8fa>
 8007da2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007da6:	f67f ae9d 	bls.w	8007ae4 <_strtod_l+0x56c>
 8007daa:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <_strtod_l+0x85c>)
 8007dac:	4650      	mov	r0, sl
 8007dae:	4659      	mov	r1, fp
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7f8 fc29 	bl	8000608 <__aeabi_dmul>
 8007db6:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <_strtod_l+0x860>)
 8007db8:	400b      	ands	r3, r1
 8007dba:	4682      	mov	sl, r0
 8007dbc:	468b      	mov	fp, r1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f47f ae08 	bne.w	80079d4 <_strtod_l+0x45c>
 8007dc4:	9a05      	ldr	r2, [sp, #20]
 8007dc6:	2322      	movs	r3, #34	@ 0x22
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	e603      	b.n	80079d4 <_strtod_l+0x45c>
 8007dcc:	0800a048 	.word	0x0800a048
 8007dd0:	fffffc02 	.word	0xfffffc02
 8007dd4:	39500000 	.word	0x39500000
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007de0:	d165      	bne.n	8007eae <_strtod_l+0x936>
 8007de2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007de8:	b35a      	cbz	r2, 8007e42 <_strtod_l+0x8ca>
 8007dea:	4a9f      	ldr	r2, [pc, #636]	@ (8008068 <_strtod_l+0xaf0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d12b      	bne.n	8007e48 <_strtod_l+0x8d0>
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	4651      	mov	r1, sl
 8007df4:	b303      	cbz	r3, 8007e38 <_strtod_l+0x8c0>
 8007df6:	4b9d      	ldr	r3, [pc, #628]	@ (800806c <_strtod_l+0xaf4>)
 8007df8:	465a      	mov	r2, fp
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e04:	d81b      	bhi.n	8007e3e <_strtod_l+0x8c6>
 8007e06:	0d1b      	lsrs	r3, r3, #20
 8007e08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d119      	bne.n	8007e48 <_strtod_l+0x8d0>
 8007e14:	4b96      	ldr	r3, [pc, #600]	@ (8008070 <_strtod_l+0xaf8>)
 8007e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d102      	bne.n	8007e22 <_strtod_l+0x8aa>
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	f43f adce 	beq.w	80079be <_strtod_l+0x446>
 8007e22:	4b92      	ldr	r3, [pc, #584]	@ (800806c <_strtod_l+0xaf4>)
 8007e24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e26:	401a      	ands	r2, r3
 8007e28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e2c:	f04f 0a00 	mov.w	sl, #0
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1b9      	bne.n	8007daa <_strtod_l+0x832>
 8007e36:	e5cd      	b.n	80079d4 <_strtod_l+0x45c>
 8007e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e3c:	e7e8      	b.n	8007e10 <_strtod_l+0x898>
 8007e3e:	4613      	mov	r3, r2
 8007e40:	e7e6      	b.n	8007e10 <_strtod_l+0x898>
 8007e42:	ea53 030a 	orrs.w	r3, r3, sl
 8007e46:	d0a2      	beq.n	8007d8e <_strtod_l+0x816>
 8007e48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e4a:	b1db      	cbz	r3, 8007e84 <_strtod_l+0x90c>
 8007e4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e4e:	4213      	tst	r3, r2
 8007e50:	d0ee      	beq.n	8007e30 <_strtod_l+0x8b8>
 8007e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e54:	9a08      	ldr	r2, [sp, #32]
 8007e56:	4650      	mov	r0, sl
 8007e58:	4659      	mov	r1, fp
 8007e5a:	b1bb      	cbz	r3, 8007e8c <_strtod_l+0x914>
 8007e5c:	f7ff fb6e 	bl	800753c <sulp>
 8007e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e64:	ec53 2b10 	vmov	r2, r3, d0
 8007e68:	f7f8 fa18 	bl	800029c <__adddf3>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	e7de      	b.n	8007e30 <_strtod_l+0x8b8>
 8007e72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e7e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007e82:	e7d5      	b.n	8007e30 <_strtod_l+0x8b8>
 8007e84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e86:	ea13 0f0a 	tst.w	r3, sl
 8007e8a:	e7e1      	b.n	8007e50 <_strtod_l+0x8d8>
 8007e8c:	f7ff fb56 	bl	800753c <sulp>
 8007e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e94:	ec53 2b10 	vmov	r2, r3, d0
 8007e98:	f7f8 f9fe 	bl	8000298 <__aeabi_dsub>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	f7f8 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0c1      	beq.n	8007e30 <_strtod_l+0x8b8>
 8007eac:	e61a      	b.n	8007ae4 <_strtod_l+0x56c>
 8007eae:	4641      	mov	r1, r8
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f7ff facd 	bl	8007450 <__ratio>
 8007eb6:	ec57 6b10 	vmov	r6, r7, d0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 fe1c 	bl	8000b00 <__aeabi_dcmple>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d06f      	beq.n	8007fac <_strtod_l+0xa34>
 8007ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d17a      	bne.n	8007fc8 <_strtod_l+0xa50>
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	d158      	bne.n	8007f8a <_strtod_l+0xa12>
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d15a      	bne.n	8007f98 <_strtod_l+0xa20>
 8007ee2:	4b64      	ldr	r3, [pc, #400]	@ (8008074 <_strtod_l+0xafc>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 fdff 	bl	8000aec <__aeabi_dcmplt>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d159      	bne.n	8007fa6 <_strtod_l+0xa2e>
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4b60      	ldr	r3, [pc, #384]	@ (8008078 <_strtod_l+0xb00>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7f8 fb85 	bl	8000608 <__aeabi_dmul>
 8007efe:	4606      	mov	r6, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f06:	9606      	str	r6, [sp, #24]
 8007f08:	9307      	str	r3, [sp, #28]
 8007f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f0e:	4d57      	ldr	r5, [pc, #348]	@ (800806c <_strtod_l+0xaf4>)
 8007f10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f16:	401d      	ands	r5, r3
 8007f18:	4b58      	ldr	r3, [pc, #352]	@ (800807c <_strtod_l+0xb04>)
 8007f1a:	429d      	cmp	r5, r3
 8007f1c:	f040 80b2 	bne.w	8008084 <_strtod_l+0xb0c>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f26:	ec4b ab10 	vmov	d0, sl, fp
 8007f2a:	f7ff f9c9 	bl	80072c0 <__ulp>
 8007f2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f32:	ec51 0b10 	vmov	r0, r1, d0
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 f9ad 	bl	800029c <__adddf3>
 8007f42:	460b      	mov	r3, r1
 8007f44:	4949      	ldr	r1, [pc, #292]	@ (800806c <_strtod_l+0xaf4>)
 8007f46:	4a4e      	ldr	r2, [pc, #312]	@ (8008080 <_strtod_l+0xb08>)
 8007f48:	4019      	ands	r1, r3
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	d942      	bls.n	8007fd6 <_strtod_l+0xa5e>
 8007f50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f52:	4b47      	ldr	r3, [pc, #284]	@ (8008070 <_strtod_l+0xaf8>)
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d103      	bne.n	8007f60 <_strtod_l+0x9e8>
 8007f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	f43f ad2f 	beq.w	80079be <_strtod_l+0x446>
 8007f60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008070 <_strtod_l+0xaf8>
 8007f64:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f6a:	9805      	ldr	r0, [sp, #20]
 8007f6c:	f7fe fe7c 	bl	8006c68 <_Bfree>
 8007f70:	9805      	ldr	r0, [sp, #20]
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7fe fe78 	bl	8006c68 <_Bfree>
 8007f78:	9805      	ldr	r0, [sp, #20]
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	f7fe fe74 	bl	8006c68 <_Bfree>
 8007f80:	9805      	ldr	r0, [sp, #20]
 8007f82:	4621      	mov	r1, r4
 8007f84:	f7fe fe70 	bl	8006c68 <_Bfree>
 8007f88:	e619      	b.n	8007bbe <_strtod_l+0x646>
 8007f8a:	f1ba 0f01 	cmp.w	sl, #1
 8007f8e:	d103      	bne.n	8007f98 <_strtod_l+0xa20>
 8007f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f43f ada6 	beq.w	8007ae4 <_strtod_l+0x56c>
 8007f98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008048 <_strtod_l+0xad0>
 8007f9c:	4f35      	ldr	r7, [pc, #212]	@ (8008074 <_strtod_l+0xafc>)
 8007f9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	e7b1      	b.n	8007f0a <_strtod_l+0x992>
 8007fa6:	4f34      	ldr	r7, [pc, #208]	@ (8008078 <_strtod_l+0xb00>)
 8007fa8:	2600      	movs	r6, #0
 8007faa:	e7aa      	b.n	8007f02 <_strtod_l+0x98a>
 8007fac:	4b32      	ldr	r3, [pc, #200]	@ (8008078 <_strtod_l+0xb00>)
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f7f8 fb28 	bl	8000608 <__aeabi_dmul>
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	4606      	mov	r6, r0
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d09f      	beq.n	8007f02 <_strtod_l+0x98a>
 8007fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fc6:	e7a0      	b.n	8007f0a <_strtod_l+0x992>
 8007fc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008050 <_strtod_l+0xad8>
 8007fcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fd0:	ec57 6b17 	vmov	r6, r7, d7
 8007fd4:	e799      	b.n	8007f0a <_strtod_l+0x992>
 8007fd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1c1      	bne.n	8007f68 <_strtod_l+0x9f0>
 8007fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fe8:	0d1b      	lsrs	r3, r3, #20
 8007fea:	051b      	lsls	r3, r3, #20
 8007fec:	429d      	cmp	r5, r3
 8007fee:	d1bb      	bne.n	8007f68 <_strtod_l+0x9f0>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fe50 	bl	8000c98 <__aeabi_d2lz>
 8007ff8:	f7f8 fad8 	bl	80005ac <__aeabi_l2d>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 f948 	bl	8000298 <__aeabi_dsub>
 8008008:	460b      	mov	r3, r1
 800800a:	4602      	mov	r2, r0
 800800c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008010:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008016:	ea46 060a 	orr.w	r6, r6, sl
 800801a:	431e      	orrs	r6, r3
 800801c:	d06f      	beq.n	80080fe <_strtod_l+0xb86>
 800801e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008058 <_strtod_l+0xae0>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 fd62 	bl	8000aec <__aeabi_dcmplt>
 8008028:	2800      	cmp	r0, #0
 800802a:	f47f acd3 	bne.w	80079d4 <_strtod_l+0x45c>
 800802e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008060 <_strtod_l+0xae8>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008038:	f7f8 fd76 	bl	8000b28 <__aeabi_dcmpgt>
 800803c:	2800      	cmp	r0, #0
 800803e:	d093      	beq.n	8007f68 <_strtod_l+0x9f0>
 8008040:	e4c8      	b.n	80079d4 <_strtod_l+0x45c>
 8008042:	bf00      	nop
 8008044:	f3af 8000 	nop.w
 8008048:	00000000 	.word	0x00000000
 800804c:	bff00000 	.word	0xbff00000
 8008050:	00000000 	.word	0x00000000
 8008054:	3ff00000 	.word	0x3ff00000
 8008058:	94a03595 	.word	0x94a03595
 800805c:	3fdfffff 	.word	0x3fdfffff
 8008060:	35afe535 	.word	0x35afe535
 8008064:	3fe00000 	.word	0x3fe00000
 8008068:	000fffff 	.word	0x000fffff
 800806c:	7ff00000 	.word	0x7ff00000
 8008070:	7fefffff 	.word	0x7fefffff
 8008074:	3ff00000 	.word	0x3ff00000
 8008078:	3fe00000 	.word	0x3fe00000
 800807c:	7fe00000 	.word	0x7fe00000
 8008080:	7c9fffff 	.word	0x7c9fffff
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	b323      	cbz	r3, 80080d2 <_strtod_l+0xb5a>
 8008088:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800808c:	d821      	bhi.n	80080d2 <_strtod_l+0xb5a>
 800808e:	a328      	add	r3, pc, #160	@ (adr r3, 8008130 <_strtod_l+0xbb8>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	f7f8 fd32 	bl	8000b00 <__aeabi_dcmple>
 800809c:	b1a0      	cbz	r0, 80080c8 <_strtod_l+0xb50>
 800809e:	4639      	mov	r1, r7
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7f8 fd89 	bl	8000bb8 <__aeabi_d2uiz>
 80080a6:	2801      	cmp	r0, #1
 80080a8:	bf38      	it	cc
 80080aa:	2001      	movcc	r0, #1
 80080ac:	f7f8 fa32 	bl	8000514 <__aeabi_ui2d>
 80080b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	b9fb      	cbnz	r3, 80080f8 <_strtod_l+0xb80>
 80080b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80080be:	9315      	str	r3, [sp, #84]	@ 0x54
 80080c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80080ce:	1b5b      	subs	r3, r3, r5
 80080d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80080d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80080da:	f7ff f8f1 	bl	80072c0 <__ulp>
 80080de:	4650      	mov	r0, sl
 80080e0:	ec53 2b10 	vmov	r2, r3, d0
 80080e4:	4659      	mov	r1, fp
 80080e6:	f7f8 fa8f 	bl	8000608 <__aeabi_dmul>
 80080ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080ee:	f7f8 f8d5 	bl	800029c <__adddf3>
 80080f2:	4682      	mov	sl, r0
 80080f4:	468b      	mov	fp, r1
 80080f6:	e770      	b.n	8007fda <_strtod_l+0xa62>
 80080f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80080fc:	e7e0      	b.n	80080c0 <_strtod_l+0xb48>
 80080fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008138 <_strtod_l+0xbc0>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 fcf2 	bl	8000aec <__aeabi_dcmplt>
 8008108:	e798      	b.n	800803c <_strtod_l+0xac4>
 800810a:	2300      	movs	r3, #0
 800810c:	930e      	str	r3, [sp, #56]	@ 0x38
 800810e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	f7ff ba6d 	b.w	80075f2 <_strtod_l+0x7a>
 8008118:	2a65      	cmp	r2, #101	@ 0x65
 800811a:	f43f ab68 	beq.w	80077ee <_strtod_l+0x276>
 800811e:	2a45      	cmp	r2, #69	@ 0x45
 8008120:	f43f ab65 	beq.w	80077ee <_strtod_l+0x276>
 8008124:	2301      	movs	r3, #1
 8008126:	f7ff bba0 	b.w	800786a <_strtod_l+0x2f2>
 800812a:	bf00      	nop
 800812c:	f3af 8000 	nop.w
 8008130:	ffc00000 	.word	0xffc00000
 8008134:	41dfffff 	.word	0x41dfffff
 8008138:	94a03595 	.word	0x94a03595
 800813c:	3fcfffff 	.word	0x3fcfffff

08008140 <_strtod_r>:
 8008140:	4b01      	ldr	r3, [pc, #4]	@ (8008148 <_strtod_r+0x8>)
 8008142:	f7ff ba19 	b.w	8007578 <_strtod_l>
 8008146:	bf00      	nop
 8008148:	20000068 	.word	0x20000068

0800814c <_strtol_l.isra.0>:
 800814c:	2b24      	cmp	r3, #36	@ 0x24
 800814e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008152:	4686      	mov	lr, r0
 8008154:	4690      	mov	r8, r2
 8008156:	d801      	bhi.n	800815c <_strtol_l.isra.0+0x10>
 8008158:	2b01      	cmp	r3, #1
 800815a:	d106      	bne.n	800816a <_strtol_l.isra.0+0x1e>
 800815c:	f7fd fdb8 	bl	8005cd0 <__errno>
 8008160:	2316      	movs	r3, #22
 8008162:	6003      	str	r3, [r0, #0]
 8008164:	2000      	movs	r0, #0
 8008166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816a:	4834      	ldr	r0, [pc, #208]	@ (800823c <_strtol_l.isra.0+0xf0>)
 800816c:	460d      	mov	r5, r1
 800816e:	462a      	mov	r2, r5
 8008170:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008174:	5d06      	ldrb	r6, [r0, r4]
 8008176:	f016 0608 	ands.w	r6, r6, #8
 800817a:	d1f8      	bne.n	800816e <_strtol_l.isra.0+0x22>
 800817c:	2c2d      	cmp	r4, #45	@ 0x2d
 800817e:	d110      	bne.n	80081a2 <_strtol_l.isra.0+0x56>
 8008180:	782c      	ldrb	r4, [r5, #0]
 8008182:	2601      	movs	r6, #1
 8008184:	1c95      	adds	r5, r2, #2
 8008186:	f033 0210 	bics.w	r2, r3, #16
 800818a:	d115      	bne.n	80081b8 <_strtol_l.isra.0+0x6c>
 800818c:	2c30      	cmp	r4, #48	@ 0x30
 800818e:	d10d      	bne.n	80081ac <_strtol_l.isra.0+0x60>
 8008190:	782a      	ldrb	r2, [r5, #0]
 8008192:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008196:	2a58      	cmp	r2, #88	@ 0x58
 8008198:	d108      	bne.n	80081ac <_strtol_l.isra.0+0x60>
 800819a:	786c      	ldrb	r4, [r5, #1]
 800819c:	3502      	adds	r5, #2
 800819e:	2310      	movs	r3, #16
 80081a0:	e00a      	b.n	80081b8 <_strtol_l.isra.0+0x6c>
 80081a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80081a4:	bf04      	itt	eq
 80081a6:	782c      	ldrbeq	r4, [r5, #0]
 80081a8:	1c95      	addeq	r5, r2, #2
 80081aa:	e7ec      	b.n	8008186 <_strtol_l.isra.0+0x3a>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f6      	bne.n	800819e <_strtol_l.isra.0+0x52>
 80081b0:	2c30      	cmp	r4, #48	@ 0x30
 80081b2:	bf14      	ite	ne
 80081b4:	230a      	movne	r3, #10
 80081b6:	2308      	moveq	r3, #8
 80081b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80081c0:	2200      	movs	r2, #0
 80081c2:	fbbc f9f3 	udiv	r9, ip, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80081cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081d0:	2f09      	cmp	r7, #9
 80081d2:	d80f      	bhi.n	80081f4 <_strtol_l.isra.0+0xa8>
 80081d4:	463c      	mov	r4, r7
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	dd1b      	ble.n	8008212 <_strtol_l.isra.0+0xc6>
 80081da:	1c57      	adds	r7, r2, #1
 80081dc:	d007      	beq.n	80081ee <_strtol_l.isra.0+0xa2>
 80081de:	4581      	cmp	r9, r0
 80081e0:	d314      	bcc.n	800820c <_strtol_l.isra.0+0xc0>
 80081e2:	d101      	bne.n	80081e8 <_strtol_l.isra.0+0x9c>
 80081e4:	45a2      	cmp	sl, r4
 80081e6:	db11      	blt.n	800820c <_strtol_l.isra.0+0xc0>
 80081e8:	fb00 4003 	mla	r0, r0, r3, r4
 80081ec:	2201      	movs	r2, #1
 80081ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081f2:	e7eb      	b.n	80081cc <_strtol_l.isra.0+0x80>
 80081f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081f8:	2f19      	cmp	r7, #25
 80081fa:	d801      	bhi.n	8008200 <_strtol_l.isra.0+0xb4>
 80081fc:	3c37      	subs	r4, #55	@ 0x37
 80081fe:	e7ea      	b.n	80081d6 <_strtol_l.isra.0+0x8a>
 8008200:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008204:	2f19      	cmp	r7, #25
 8008206:	d804      	bhi.n	8008212 <_strtol_l.isra.0+0xc6>
 8008208:	3c57      	subs	r4, #87	@ 0x57
 800820a:	e7e4      	b.n	80081d6 <_strtol_l.isra.0+0x8a>
 800820c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008210:	e7ed      	b.n	80081ee <_strtol_l.isra.0+0xa2>
 8008212:	1c53      	adds	r3, r2, #1
 8008214:	d108      	bne.n	8008228 <_strtol_l.isra.0+0xdc>
 8008216:	2322      	movs	r3, #34	@ 0x22
 8008218:	f8ce 3000 	str.w	r3, [lr]
 800821c:	4660      	mov	r0, ip
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d0a0      	beq.n	8008166 <_strtol_l.isra.0+0x1a>
 8008224:	1e69      	subs	r1, r5, #1
 8008226:	e006      	b.n	8008236 <_strtol_l.isra.0+0xea>
 8008228:	b106      	cbz	r6, 800822c <_strtol_l.isra.0+0xe0>
 800822a:	4240      	negs	r0, r0
 800822c:	f1b8 0f00 	cmp.w	r8, #0
 8008230:	d099      	beq.n	8008166 <_strtol_l.isra.0+0x1a>
 8008232:	2a00      	cmp	r2, #0
 8008234:	d1f6      	bne.n	8008224 <_strtol_l.isra.0+0xd8>
 8008236:	f8c8 1000 	str.w	r1, [r8]
 800823a:	e794      	b.n	8008166 <_strtol_l.isra.0+0x1a>
 800823c:	0800a071 	.word	0x0800a071

08008240 <_strtol_r>:
 8008240:	f7ff bf84 	b.w	800814c <_strtol_l.isra.0>

08008244 <__ssputs_r>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	688e      	ldr	r6, [r1, #8]
 800824a:	461f      	mov	r7, r3
 800824c:	42be      	cmp	r6, r7
 800824e:	680b      	ldr	r3, [r1, #0]
 8008250:	4682      	mov	sl, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4690      	mov	r8, r2
 8008256:	d82d      	bhi.n	80082b4 <__ssputs_r+0x70>
 8008258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800825c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008260:	d026      	beq.n	80082b0 <__ssputs_r+0x6c>
 8008262:	6965      	ldr	r5, [r4, #20]
 8008264:	6909      	ldr	r1, [r1, #16]
 8008266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800826a:	eba3 0901 	sub.w	r9, r3, r1
 800826e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008272:	1c7b      	adds	r3, r7, #1
 8008274:	444b      	add	r3, r9
 8008276:	106d      	asrs	r5, r5, #1
 8008278:	429d      	cmp	r5, r3
 800827a:	bf38      	it	cc
 800827c:	461d      	movcc	r5, r3
 800827e:	0553      	lsls	r3, r2, #21
 8008280:	d527      	bpl.n	80082d2 <__ssputs_r+0x8e>
 8008282:	4629      	mov	r1, r5
 8008284:	f7fe fc24 	bl	8006ad0 <_malloc_r>
 8008288:	4606      	mov	r6, r0
 800828a:	b360      	cbz	r0, 80082e6 <__ssputs_r+0xa2>
 800828c:	6921      	ldr	r1, [r4, #16]
 800828e:	464a      	mov	r2, r9
 8008290:	f001 f852 	bl	8009338 <memcpy>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800829a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	6126      	str	r6, [r4, #16]
 80082a2:	6165      	str	r5, [r4, #20]
 80082a4:	444e      	add	r6, r9
 80082a6:	eba5 0509 	sub.w	r5, r5, r9
 80082aa:	6026      	str	r6, [r4, #0]
 80082ac:	60a5      	str	r5, [r4, #8]
 80082ae:	463e      	mov	r6, r7
 80082b0:	42be      	cmp	r6, r7
 80082b2:	d900      	bls.n	80082b6 <__ssputs_r+0x72>
 80082b4:	463e      	mov	r6, r7
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	4632      	mov	r2, r6
 80082ba:	4641      	mov	r1, r8
 80082bc:	f000 ffde 	bl	800927c <memmove>
 80082c0:	68a3      	ldr	r3, [r4, #8]
 80082c2:	1b9b      	subs	r3, r3, r6
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	4433      	add	r3, r6
 80082ca:	6023      	str	r3, [r4, #0]
 80082cc:	2000      	movs	r0, #0
 80082ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d2:	462a      	mov	r2, r5
 80082d4:	f001 fbc5 	bl	8009a62 <_realloc_r>
 80082d8:	4606      	mov	r6, r0
 80082da:	2800      	cmp	r0, #0
 80082dc:	d1e0      	bne.n	80082a0 <__ssputs_r+0x5c>
 80082de:	6921      	ldr	r1, [r4, #16]
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7fe fb81 	bl	80069e8 <_free_r>
 80082e6:	230c      	movs	r3, #12
 80082e8:	f8ca 3000 	str.w	r3, [sl]
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082f8:	e7e9      	b.n	80082ce <__ssputs_r+0x8a>
	...

080082fc <_svfiprintf_r>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	4698      	mov	r8, r3
 8008302:	898b      	ldrh	r3, [r1, #12]
 8008304:	061b      	lsls	r3, r3, #24
 8008306:	b09d      	sub	sp, #116	@ 0x74
 8008308:	4607      	mov	r7, r0
 800830a:	460d      	mov	r5, r1
 800830c:	4614      	mov	r4, r2
 800830e:	d510      	bpl.n	8008332 <_svfiprintf_r+0x36>
 8008310:	690b      	ldr	r3, [r1, #16]
 8008312:	b973      	cbnz	r3, 8008332 <_svfiprintf_r+0x36>
 8008314:	2140      	movs	r1, #64	@ 0x40
 8008316:	f7fe fbdb 	bl	8006ad0 <_malloc_r>
 800831a:	6028      	str	r0, [r5, #0]
 800831c:	6128      	str	r0, [r5, #16]
 800831e:	b930      	cbnz	r0, 800832e <_svfiprintf_r+0x32>
 8008320:	230c      	movs	r3, #12
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008328:	b01d      	add	sp, #116	@ 0x74
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	2340      	movs	r3, #64	@ 0x40
 8008330:	616b      	str	r3, [r5, #20]
 8008332:	2300      	movs	r3, #0
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	2320      	movs	r3, #32
 8008338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800833c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008340:	2330      	movs	r3, #48	@ 0x30
 8008342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084e0 <_svfiprintf_r+0x1e4>
 8008346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800834a:	f04f 0901 	mov.w	r9, #1
 800834e:	4623      	mov	r3, r4
 8008350:	469a      	mov	sl, r3
 8008352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008356:	b10a      	cbz	r2, 800835c <_svfiprintf_r+0x60>
 8008358:	2a25      	cmp	r2, #37	@ 0x25
 800835a:	d1f9      	bne.n	8008350 <_svfiprintf_r+0x54>
 800835c:	ebba 0b04 	subs.w	fp, sl, r4
 8008360:	d00b      	beq.n	800837a <_svfiprintf_r+0x7e>
 8008362:	465b      	mov	r3, fp
 8008364:	4622      	mov	r2, r4
 8008366:	4629      	mov	r1, r5
 8008368:	4638      	mov	r0, r7
 800836a:	f7ff ff6b 	bl	8008244 <__ssputs_r>
 800836e:	3001      	adds	r0, #1
 8008370:	f000 80a7 	beq.w	80084c2 <_svfiprintf_r+0x1c6>
 8008374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008376:	445a      	add	r2, fp
 8008378:	9209      	str	r2, [sp, #36]	@ 0x24
 800837a:	f89a 3000 	ldrb.w	r3, [sl]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 809f 	beq.w	80084c2 <_svfiprintf_r+0x1c6>
 8008384:	2300      	movs	r3, #0
 8008386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800838a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800838e:	f10a 0a01 	add.w	sl, sl, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	9307      	str	r3, [sp, #28]
 8008396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800839a:	931a      	str	r3, [sp, #104]	@ 0x68
 800839c:	4654      	mov	r4, sl
 800839e:	2205      	movs	r2, #5
 80083a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a4:	484e      	ldr	r0, [pc, #312]	@ (80084e0 <_svfiprintf_r+0x1e4>)
 80083a6:	f7f7 ff1b 	bl	80001e0 <memchr>
 80083aa:	9a04      	ldr	r2, [sp, #16]
 80083ac:	b9d8      	cbnz	r0, 80083e6 <_svfiprintf_r+0xea>
 80083ae:	06d0      	lsls	r0, r2, #27
 80083b0:	bf44      	itt	mi
 80083b2:	2320      	movmi	r3, #32
 80083b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083b8:	0711      	lsls	r1, r2, #28
 80083ba:	bf44      	itt	mi
 80083bc:	232b      	movmi	r3, #43	@ 0x2b
 80083be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c2:	f89a 3000 	ldrb.w	r3, [sl]
 80083c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c8:	d015      	beq.n	80083f6 <_svfiprintf_r+0xfa>
 80083ca:	9a07      	ldr	r2, [sp, #28]
 80083cc:	4654      	mov	r4, sl
 80083ce:	2000      	movs	r0, #0
 80083d0:	f04f 0c0a 	mov.w	ip, #10
 80083d4:	4621      	mov	r1, r4
 80083d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083da:	3b30      	subs	r3, #48	@ 0x30
 80083dc:	2b09      	cmp	r3, #9
 80083de:	d94b      	bls.n	8008478 <_svfiprintf_r+0x17c>
 80083e0:	b1b0      	cbz	r0, 8008410 <_svfiprintf_r+0x114>
 80083e2:	9207      	str	r2, [sp, #28]
 80083e4:	e014      	b.n	8008410 <_svfiprintf_r+0x114>
 80083e6:	eba0 0308 	sub.w	r3, r0, r8
 80083ea:	fa09 f303 	lsl.w	r3, r9, r3
 80083ee:	4313      	orrs	r3, r2
 80083f0:	9304      	str	r3, [sp, #16]
 80083f2:	46a2      	mov	sl, r4
 80083f4:	e7d2      	b.n	800839c <_svfiprintf_r+0xa0>
 80083f6:	9b03      	ldr	r3, [sp, #12]
 80083f8:	1d19      	adds	r1, r3, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfbb      	ittet	lt
 8008402:	425b      	neglt	r3, r3
 8008404:	f042 0202 	orrlt.w	r2, r2, #2
 8008408:	9307      	strge	r3, [sp, #28]
 800840a:	9307      	strlt	r3, [sp, #28]
 800840c:	bfb8      	it	lt
 800840e:	9204      	strlt	r2, [sp, #16]
 8008410:	7823      	ldrb	r3, [r4, #0]
 8008412:	2b2e      	cmp	r3, #46	@ 0x2e
 8008414:	d10a      	bne.n	800842c <_svfiprintf_r+0x130>
 8008416:	7863      	ldrb	r3, [r4, #1]
 8008418:	2b2a      	cmp	r3, #42	@ 0x2a
 800841a:	d132      	bne.n	8008482 <_svfiprintf_r+0x186>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	9203      	str	r2, [sp, #12]
 8008424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008428:	3402      	adds	r4, #2
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084f0 <_svfiprintf_r+0x1f4>
 8008430:	7821      	ldrb	r1, [r4, #0]
 8008432:	2203      	movs	r2, #3
 8008434:	4650      	mov	r0, sl
 8008436:	f7f7 fed3 	bl	80001e0 <memchr>
 800843a:	b138      	cbz	r0, 800844c <_svfiprintf_r+0x150>
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	eba0 000a 	sub.w	r0, r0, sl
 8008442:	2240      	movs	r2, #64	@ 0x40
 8008444:	4082      	lsls	r2, r0
 8008446:	4313      	orrs	r3, r2
 8008448:	3401      	adds	r4, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008450:	4824      	ldr	r0, [pc, #144]	@ (80084e4 <_svfiprintf_r+0x1e8>)
 8008452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008456:	2206      	movs	r2, #6
 8008458:	f7f7 fec2 	bl	80001e0 <memchr>
 800845c:	2800      	cmp	r0, #0
 800845e:	d036      	beq.n	80084ce <_svfiprintf_r+0x1d2>
 8008460:	4b21      	ldr	r3, [pc, #132]	@ (80084e8 <_svfiprintf_r+0x1ec>)
 8008462:	bb1b      	cbnz	r3, 80084ac <_svfiprintf_r+0x1b0>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	3307      	adds	r3, #7
 8008468:	f023 0307 	bic.w	r3, r3, #7
 800846c:	3308      	adds	r3, #8
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008472:	4433      	add	r3, r6
 8008474:	9309      	str	r3, [sp, #36]	@ 0x24
 8008476:	e76a      	b.n	800834e <_svfiprintf_r+0x52>
 8008478:	fb0c 3202 	mla	r2, ip, r2, r3
 800847c:	460c      	mov	r4, r1
 800847e:	2001      	movs	r0, #1
 8008480:	e7a8      	b.n	80083d4 <_svfiprintf_r+0xd8>
 8008482:	2300      	movs	r3, #0
 8008484:	3401      	adds	r4, #1
 8008486:	9305      	str	r3, [sp, #20]
 8008488:	4619      	mov	r1, r3
 800848a:	f04f 0c0a 	mov.w	ip, #10
 800848e:	4620      	mov	r0, r4
 8008490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008494:	3a30      	subs	r2, #48	@ 0x30
 8008496:	2a09      	cmp	r2, #9
 8008498:	d903      	bls.n	80084a2 <_svfiprintf_r+0x1a6>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c6      	beq.n	800842c <_svfiprintf_r+0x130>
 800849e:	9105      	str	r1, [sp, #20]
 80084a0:	e7c4      	b.n	800842c <_svfiprintf_r+0x130>
 80084a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a6:	4604      	mov	r4, r0
 80084a8:	2301      	movs	r3, #1
 80084aa:	e7f0      	b.n	800848e <_svfiprintf_r+0x192>
 80084ac:	ab03      	add	r3, sp, #12
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	462a      	mov	r2, r5
 80084b2:	4b0e      	ldr	r3, [pc, #56]	@ (80084ec <_svfiprintf_r+0x1f0>)
 80084b4:	a904      	add	r1, sp, #16
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7fc fb02 	bl	8004ac0 <_printf_float>
 80084bc:	1c42      	adds	r2, r0, #1
 80084be:	4606      	mov	r6, r0
 80084c0:	d1d6      	bne.n	8008470 <_svfiprintf_r+0x174>
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	065b      	lsls	r3, r3, #25
 80084c6:	f53f af2d 	bmi.w	8008324 <_svfiprintf_r+0x28>
 80084ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084cc:	e72c      	b.n	8008328 <_svfiprintf_r+0x2c>
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <_svfiprintf_r+0x1f0>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4638      	mov	r0, r7
 80084da:	f7fc fd89 	bl	8004ff0 <_printf_i>
 80084de:	e7ed      	b.n	80084bc <_svfiprintf_r+0x1c0>
 80084e0:	08009e53 	.word	0x08009e53
 80084e4:	08009e5d 	.word	0x08009e5d
 80084e8:	08004ac1 	.word	0x08004ac1
 80084ec:	08008245 	.word	0x08008245
 80084f0:	08009e59 	.word	0x08009e59

080084f4 <__sfputc_r>:
 80084f4:	6893      	ldr	r3, [r2, #8]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	b410      	push	{r4}
 80084fc:	6093      	str	r3, [r2, #8]
 80084fe:	da08      	bge.n	8008512 <__sfputc_r+0x1e>
 8008500:	6994      	ldr	r4, [r2, #24]
 8008502:	42a3      	cmp	r3, r4
 8008504:	db01      	blt.n	800850a <__sfputc_r+0x16>
 8008506:	290a      	cmp	r1, #10
 8008508:	d103      	bne.n	8008512 <__sfputc_r+0x1e>
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f7fd baf8 	b.w	8005b02 <__swbuf_r>
 8008512:	6813      	ldr	r3, [r2, #0]
 8008514:	1c58      	adds	r0, r3, #1
 8008516:	6010      	str	r0, [r2, #0]
 8008518:	7019      	strb	r1, [r3, #0]
 800851a:	4608      	mov	r0, r1
 800851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008520:	4770      	bx	lr

08008522 <__sfputs_r>:
 8008522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	4614      	mov	r4, r2
 800852a:	18d5      	adds	r5, r2, r3
 800852c:	42ac      	cmp	r4, r5
 800852e:	d101      	bne.n	8008534 <__sfputs_r+0x12>
 8008530:	2000      	movs	r0, #0
 8008532:	e007      	b.n	8008544 <__sfputs_r+0x22>
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	463a      	mov	r2, r7
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ffda 	bl	80084f4 <__sfputc_r>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d1f3      	bne.n	800852c <__sfputs_r+0xa>
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008548 <_vfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460d      	mov	r5, r1
 800854e:	b09d      	sub	sp, #116	@ 0x74
 8008550:	4614      	mov	r4, r2
 8008552:	4698      	mov	r8, r3
 8008554:	4606      	mov	r6, r0
 8008556:	b118      	cbz	r0, 8008560 <_vfiprintf_r+0x18>
 8008558:	6a03      	ldr	r3, [r0, #32]
 800855a:	b90b      	cbnz	r3, 8008560 <_vfiprintf_r+0x18>
 800855c:	f7fd f900 	bl	8005760 <__sinit>
 8008560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d405      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	059a      	lsls	r2, r3, #22
 800856a:	d402      	bmi.n	8008572 <_vfiprintf_r+0x2a>
 800856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856e:	f7fd fbda 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	071b      	lsls	r3, r3, #28
 8008576:	d501      	bpl.n	800857c <_vfiprintf_r+0x34>
 8008578:	692b      	ldr	r3, [r5, #16]
 800857a:	b99b      	cbnz	r3, 80085a4 <_vfiprintf_r+0x5c>
 800857c:	4629      	mov	r1, r5
 800857e:	4630      	mov	r0, r6
 8008580:	f7fd fafe 	bl	8005b80 <__swsetup_r>
 8008584:	b170      	cbz	r0, 80085a4 <_vfiprintf_r+0x5c>
 8008586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008588:	07dc      	lsls	r4, r3, #31
 800858a:	d504      	bpl.n	8008596 <_vfiprintf_r+0x4e>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008590:	b01d      	add	sp, #116	@ 0x74
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	0598      	lsls	r0, r3, #22
 800859a:	d4f7      	bmi.n	800858c <_vfiprintf_r+0x44>
 800859c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800859e:	f7fd fbc3 	bl	8005d28 <__retarget_lock_release_recursive>
 80085a2:	e7f3      	b.n	800858c <_vfiprintf_r+0x44>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a8:	2320      	movs	r3, #32
 80085aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b2:	2330      	movs	r3, #48	@ 0x30
 80085b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008764 <_vfiprintf_r+0x21c>
 80085b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085bc:	f04f 0901 	mov.w	r9, #1
 80085c0:	4623      	mov	r3, r4
 80085c2:	469a      	mov	sl, r3
 80085c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c8:	b10a      	cbz	r2, 80085ce <_vfiprintf_r+0x86>
 80085ca:	2a25      	cmp	r2, #37	@ 0x25
 80085cc:	d1f9      	bne.n	80085c2 <_vfiprintf_r+0x7a>
 80085ce:	ebba 0b04 	subs.w	fp, sl, r4
 80085d2:	d00b      	beq.n	80085ec <_vfiprintf_r+0xa4>
 80085d4:	465b      	mov	r3, fp
 80085d6:	4622      	mov	r2, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffa1 	bl	8008522 <__sfputs_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	f000 80a7 	beq.w	8008734 <_vfiprintf_r+0x1ec>
 80085e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e8:	445a      	add	r2, fp
 80085ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ec:	f89a 3000 	ldrb.w	r3, [sl]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 809f 	beq.w	8008734 <_vfiprintf_r+0x1ec>
 80085f6:	2300      	movs	r3, #0
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008600:	f10a 0a01 	add.w	sl, sl, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	9307      	str	r3, [sp, #28]
 8008608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800860c:	931a      	str	r3, [sp, #104]	@ 0x68
 800860e:	4654      	mov	r4, sl
 8008610:	2205      	movs	r2, #5
 8008612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008616:	4853      	ldr	r0, [pc, #332]	@ (8008764 <_vfiprintf_r+0x21c>)
 8008618:	f7f7 fde2 	bl	80001e0 <memchr>
 800861c:	9a04      	ldr	r2, [sp, #16]
 800861e:	b9d8      	cbnz	r0, 8008658 <_vfiprintf_r+0x110>
 8008620:	06d1      	lsls	r1, r2, #27
 8008622:	bf44      	itt	mi
 8008624:	2320      	movmi	r3, #32
 8008626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800862a:	0713      	lsls	r3, r2, #28
 800862c:	bf44      	itt	mi
 800862e:	232b      	movmi	r3, #43	@ 0x2b
 8008630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b2a      	cmp	r3, #42	@ 0x2a
 800863a:	d015      	beq.n	8008668 <_vfiprintf_r+0x120>
 800863c:	9a07      	ldr	r2, [sp, #28]
 800863e:	4654      	mov	r4, sl
 8008640:	2000      	movs	r0, #0
 8008642:	f04f 0c0a 	mov.w	ip, #10
 8008646:	4621      	mov	r1, r4
 8008648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864c:	3b30      	subs	r3, #48	@ 0x30
 800864e:	2b09      	cmp	r3, #9
 8008650:	d94b      	bls.n	80086ea <_vfiprintf_r+0x1a2>
 8008652:	b1b0      	cbz	r0, 8008682 <_vfiprintf_r+0x13a>
 8008654:	9207      	str	r2, [sp, #28]
 8008656:	e014      	b.n	8008682 <_vfiprintf_r+0x13a>
 8008658:	eba0 0308 	sub.w	r3, r0, r8
 800865c:	fa09 f303 	lsl.w	r3, r9, r3
 8008660:	4313      	orrs	r3, r2
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	46a2      	mov	sl, r4
 8008666:	e7d2      	b.n	800860e <_vfiprintf_r+0xc6>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	1d19      	adds	r1, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9103      	str	r1, [sp, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfbb      	ittet	lt
 8008674:	425b      	neglt	r3, r3
 8008676:	f042 0202 	orrlt.w	r2, r2, #2
 800867a:	9307      	strge	r3, [sp, #28]
 800867c:	9307      	strlt	r3, [sp, #28]
 800867e:	bfb8      	it	lt
 8008680:	9204      	strlt	r2, [sp, #16]
 8008682:	7823      	ldrb	r3, [r4, #0]
 8008684:	2b2e      	cmp	r3, #46	@ 0x2e
 8008686:	d10a      	bne.n	800869e <_vfiprintf_r+0x156>
 8008688:	7863      	ldrb	r3, [r4, #1]
 800868a:	2b2a      	cmp	r3, #42	@ 0x2a
 800868c:	d132      	bne.n	80086f4 <_vfiprintf_r+0x1ac>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	1d1a      	adds	r2, r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	9203      	str	r2, [sp, #12]
 8008696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800869a:	3402      	adds	r4, #2
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008774 <_vfiprintf_r+0x22c>
 80086a2:	7821      	ldrb	r1, [r4, #0]
 80086a4:	2203      	movs	r2, #3
 80086a6:	4650      	mov	r0, sl
 80086a8:	f7f7 fd9a 	bl	80001e0 <memchr>
 80086ac:	b138      	cbz	r0, 80086be <_vfiprintf_r+0x176>
 80086ae:	9b04      	ldr	r3, [sp, #16]
 80086b0:	eba0 000a 	sub.w	r0, r0, sl
 80086b4:	2240      	movs	r2, #64	@ 0x40
 80086b6:	4082      	lsls	r2, r0
 80086b8:	4313      	orrs	r3, r2
 80086ba:	3401      	adds	r4, #1
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c2:	4829      	ldr	r0, [pc, #164]	@ (8008768 <_vfiprintf_r+0x220>)
 80086c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086c8:	2206      	movs	r2, #6
 80086ca:	f7f7 fd89 	bl	80001e0 <memchr>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d03f      	beq.n	8008752 <_vfiprintf_r+0x20a>
 80086d2:	4b26      	ldr	r3, [pc, #152]	@ (800876c <_vfiprintf_r+0x224>)
 80086d4:	bb1b      	cbnz	r3, 800871e <_vfiprintf_r+0x1d6>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	3307      	adds	r3, #7
 80086da:	f023 0307 	bic.w	r3, r3, #7
 80086de:	3308      	adds	r3, #8
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e4:	443b      	add	r3, r7
 80086e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e8:	e76a      	b.n	80085c0 <_vfiprintf_r+0x78>
 80086ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ee:	460c      	mov	r4, r1
 80086f0:	2001      	movs	r0, #1
 80086f2:	e7a8      	b.n	8008646 <_vfiprintf_r+0xfe>
 80086f4:	2300      	movs	r3, #0
 80086f6:	3401      	adds	r4, #1
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	4619      	mov	r1, r3
 80086fc:	f04f 0c0a 	mov.w	ip, #10
 8008700:	4620      	mov	r0, r4
 8008702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008706:	3a30      	subs	r2, #48	@ 0x30
 8008708:	2a09      	cmp	r2, #9
 800870a:	d903      	bls.n	8008714 <_vfiprintf_r+0x1cc>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0c6      	beq.n	800869e <_vfiprintf_r+0x156>
 8008710:	9105      	str	r1, [sp, #20]
 8008712:	e7c4      	b.n	800869e <_vfiprintf_r+0x156>
 8008714:	fb0c 2101 	mla	r1, ip, r1, r2
 8008718:	4604      	mov	r4, r0
 800871a:	2301      	movs	r3, #1
 800871c:	e7f0      	b.n	8008700 <_vfiprintf_r+0x1b8>
 800871e:	ab03      	add	r3, sp, #12
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	462a      	mov	r2, r5
 8008724:	4b12      	ldr	r3, [pc, #72]	@ (8008770 <_vfiprintf_r+0x228>)
 8008726:	a904      	add	r1, sp, #16
 8008728:	4630      	mov	r0, r6
 800872a:	f7fc f9c9 	bl	8004ac0 <_printf_float>
 800872e:	4607      	mov	r7, r0
 8008730:	1c78      	adds	r0, r7, #1
 8008732:	d1d6      	bne.n	80086e2 <_vfiprintf_r+0x19a>
 8008734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	d405      	bmi.n	8008746 <_vfiprintf_r+0x1fe>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	059a      	lsls	r2, r3, #22
 800873e:	d402      	bmi.n	8008746 <_vfiprintf_r+0x1fe>
 8008740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008742:	f7fd faf1 	bl	8005d28 <__retarget_lock_release_recursive>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	065b      	lsls	r3, r3, #25
 800874a:	f53f af1f 	bmi.w	800858c <_vfiprintf_r+0x44>
 800874e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008750:	e71e      	b.n	8008590 <_vfiprintf_r+0x48>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <_vfiprintf_r+0x228>)
 800875a:	a904      	add	r1, sp, #16
 800875c:	4630      	mov	r0, r6
 800875e:	f7fc fc47 	bl	8004ff0 <_printf_i>
 8008762:	e7e4      	b.n	800872e <_vfiprintf_r+0x1e6>
 8008764:	08009e53 	.word	0x08009e53
 8008768:	08009e5d 	.word	0x08009e5d
 800876c:	08004ac1 	.word	0x08004ac1
 8008770:	08008523 	.word	0x08008523
 8008774:	08009e59 	.word	0x08009e59

08008778 <__svfiscanf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	461d      	mov	r5, r3
 800877e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008780:	07df      	lsls	r7, r3, #31
 8008782:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008786:	4606      	mov	r6, r0
 8008788:	460c      	mov	r4, r1
 800878a:	4692      	mov	sl, r2
 800878c:	d405      	bmi.n	800879a <__svfiscanf_r+0x22>
 800878e:	898b      	ldrh	r3, [r1, #12]
 8008790:	0598      	lsls	r0, r3, #22
 8008792:	d402      	bmi.n	800879a <__svfiscanf_r+0x22>
 8008794:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8008796:	f7fd fac6 	bl	8005d26 <__retarget_lock_acquire_recursive>
 800879a:	2300      	movs	r3, #0
 800879c:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80087a0:	4ba8      	ldr	r3, [pc, #672]	@ (8008a44 <__svfiscanf_r+0x2cc>)
 80087a2:	93a0      	str	r3, [sp, #640]	@ 0x280
 80087a4:	f10d 0804 	add.w	r8, sp, #4
 80087a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008a48 <__svfiscanf_r+0x2d0>)
 80087aa:	4fa8      	ldr	r7, [pc, #672]	@ (8008a4c <__svfiscanf_r+0x2d4>)
 80087ac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80087b0:	93a1      	str	r3, [sp, #644]	@ 0x284
 80087b2:	9500      	str	r5, [sp, #0]
 80087b4:	f89a 9000 	ldrb.w	r9, [sl]
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	f000 816d 	beq.w	8008a9a <__svfiscanf_r+0x322>
 80087c0:	f817 3009 	ldrb.w	r3, [r7, r9]
 80087c4:	f013 0308 	ands.w	r3, r3, #8
 80087c8:	f10a 0501 	add.w	r5, sl, #1
 80087cc:	d019      	beq.n	8008802 <__svfiscanf_r+0x8a>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dd0f      	ble.n	80087f4 <__svfiscanf_r+0x7c>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	5cba      	ldrb	r2, [r7, r2]
 80087da:	0711      	lsls	r1, r2, #28
 80087dc:	d401      	bmi.n	80087e2 <__svfiscanf_r+0x6a>
 80087de:	46aa      	mov	sl, r5
 80087e0:	e7e8      	b.n	80087b4 <__svfiscanf_r+0x3c>
 80087e2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80087e4:	3201      	adds	r2, #1
 80087e6:	9245      	str	r2, [sp, #276]	@ 0x114
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	3301      	adds	r3, #1
 80087ec:	3a01      	subs	r2, #1
 80087ee:	6062      	str	r2, [r4, #4]
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	e7ec      	b.n	80087ce <__svfiscanf_r+0x56>
 80087f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80087f6:	4621      	mov	r1, r4
 80087f8:	4630      	mov	r0, r6
 80087fa:	4798      	blx	r3
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d0e9      	beq.n	80087d4 <__svfiscanf_r+0x5c>
 8008800:	e7ed      	b.n	80087de <__svfiscanf_r+0x66>
 8008802:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008806:	f040 8088 	bne.w	800891a <__svfiscanf_r+0x1a2>
 800880a:	9341      	str	r3, [sp, #260]	@ 0x104
 800880c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800880e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008812:	2b2a      	cmp	r3, #42	@ 0x2a
 8008814:	bf02      	ittt	eq
 8008816:	2310      	moveq	r3, #16
 8008818:	9341      	streq	r3, [sp, #260]	@ 0x104
 800881a:	f10a 0502 	addeq.w	r5, sl, #2
 800881e:	220a      	movs	r2, #10
 8008820:	46aa      	mov	sl, r5
 8008822:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008826:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800882a:	2b09      	cmp	r3, #9
 800882c:	d91f      	bls.n	800886e <__svfiscanf_r+0xf6>
 800882e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008a50 <__svfiscanf_r+0x2d8>
 8008832:	2203      	movs	r2, #3
 8008834:	4658      	mov	r0, fp
 8008836:	f7f7 fcd3 	bl	80001e0 <memchr>
 800883a:	b138      	cbz	r0, 800884c <__svfiscanf_r+0xd4>
 800883c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800883e:	eba0 000b 	sub.w	r0, r0, fp
 8008842:	2301      	movs	r3, #1
 8008844:	4083      	lsls	r3, r0
 8008846:	4313      	orrs	r3, r2
 8008848:	9341      	str	r3, [sp, #260]	@ 0x104
 800884a:	4655      	mov	r5, sl
 800884c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008850:	2b78      	cmp	r3, #120	@ 0x78
 8008852:	d807      	bhi.n	8008864 <__svfiscanf_r+0xec>
 8008854:	2b57      	cmp	r3, #87	@ 0x57
 8008856:	d811      	bhi.n	800887c <__svfiscanf_r+0x104>
 8008858:	2b25      	cmp	r3, #37	@ 0x25
 800885a:	d05e      	beq.n	800891a <__svfiscanf_r+0x1a2>
 800885c:	d858      	bhi.n	8008910 <__svfiscanf_r+0x198>
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80d2 	beq.w	8008a08 <__svfiscanf_r+0x290>
 8008864:	2303      	movs	r3, #3
 8008866:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008868:	230a      	movs	r3, #10
 800886a:	9342      	str	r3, [sp, #264]	@ 0x108
 800886c:	e08f      	b.n	800898e <__svfiscanf_r+0x216>
 800886e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008870:	fb02 1103 	mla	r1, r2, r3, r1
 8008874:	3930      	subs	r1, #48	@ 0x30
 8008876:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008878:	4655      	mov	r5, sl
 800887a:	e7d1      	b.n	8008820 <__svfiscanf_r+0xa8>
 800887c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008880:	2a20      	cmp	r2, #32
 8008882:	d8ef      	bhi.n	8008864 <__svfiscanf_r+0xec>
 8008884:	a101      	add	r1, pc, #4	@ (adr r1, 800888c <__svfiscanf_r+0x114>)
 8008886:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800888a:	bf00      	nop
 800888c:	0800896d 	.word	0x0800896d
 8008890:	08008865 	.word	0x08008865
 8008894:	08008865 	.word	0x08008865
 8008898:	080089c7 	.word	0x080089c7
 800889c:	08008865 	.word	0x08008865
 80088a0:	08008865 	.word	0x08008865
 80088a4:	08008865 	.word	0x08008865
 80088a8:	08008865 	.word	0x08008865
 80088ac:	08008865 	.word	0x08008865
 80088b0:	08008865 	.word	0x08008865
 80088b4:	08008865 	.word	0x08008865
 80088b8:	080089dd 	.word	0x080089dd
 80088bc:	080089c3 	.word	0x080089c3
 80088c0:	08008917 	.word	0x08008917
 80088c4:	08008917 	.word	0x08008917
 80088c8:	08008917 	.word	0x08008917
 80088cc:	08008865 	.word	0x08008865
 80088d0:	0800897f 	.word	0x0800897f
 80088d4:	08008865 	.word	0x08008865
 80088d8:	08008865 	.word	0x08008865
 80088dc:	08008865 	.word	0x08008865
 80088e0:	08008865 	.word	0x08008865
 80088e4:	080089ed 	.word	0x080089ed
 80088e8:	08008987 	.word	0x08008987
 80088ec:	08008965 	.word	0x08008965
 80088f0:	08008865 	.word	0x08008865
 80088f4:	08008865 	.word	0x08008865
 80088f8:	080089e9 	.word	0x080089e9
 80088fc:	08008865 	.word	0x08008865
 8008900:	080089c3 	.word	0x080089c3
 8008904:	08008865 	.word	0x08008865
 8008908:	08008865 	.word	0x08008865
 800890c:	0800896d 	.word	0x0800896d
 8008910:	3b45      	subs	r3, #69	@ 0x45
 8008912:	2b02      	cmp	r3, #2
 8008914:	d8a6      	bhi.n	8008864 <__svfiscanf_r+0xec>
 8008916:	2305      	movs	r3, #5
 8008918:	e038      	b.n	800898c <__svfiscanf_r+0x214>
 800891a:	6863      	ldr	r3, [r4, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd0d      	ble.n	800893c <__svfiscanf_r+0x1c4>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	781a      	ldrb	r2, [r3, #0]
 8008924:	454a      	cmp	r2, r9
 8008926:	f040 80b8 	bne.w	8008a9a <__svfiscanf_r+0x322>
 800892a:	3301      	adds	r3, #1
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008932:	3a01      	subs	r2, #1
 8008934:	3301      	adds	r3, #1
 8008936:	6062      	str	r2, [r4, #4]
 8008938:	9345      	str	r3, [sp, #276]	@ 0x114
 800893a:	e750      	b.n	80087de <__svfiscanf_r+0x66>
 800893c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800893e:	4621      	mov	r1, r4
 8008940:	4630      	mov	r0, r6
 8008942:	4798      	blx	r3
 8008944:	2800      	cmp	r0, #0
 8008946:	d0eb      	beq.n	8008920 <__svfiscanf_r+0x1a8>
 8008948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800894a:	07da      	lsls	r2, r3, #31
 800894c:	f140 809d 	bpl.w	8008a8a <__svfiscanf_r+0x312>
 8008950:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008952:	2800      	cmp	r0, #0
 8008954:	d061      	beq.n	8008a1a <__svfiscanf_r+0x2a2>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	0659      	lsls	r1, r3, #25
 800895a:	d45e      	bmi.n	8008a1a <__svfiscanf_r+0x2a2>
 800895c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008966:	f042 0220 	orr.w	r2, r2, #32
 800896a:	9241      	str	r2, [sp, #260]	@ 0x104
 800896c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800896e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008972:	9241      	str	r2, [sp, #260]	@ 0x104
 8008974:	2210      	movs	r2, #16
 8008976:	2b6e      	cmp	r3, #110	@ 0x6e
 8008978:	9242      	str	r2, [sp, #264]	@ 0x108
 800897a:	d902      	bls.n	8008982 <__svfiscanf_r+0x20a>
 800897c:	e005      	b.n	800898a <__svfiscanf_r+0x212>
 800897e:	2300      	movs	r3, #0
 8008980:	9342      	str	r3, [sp, #264]	@ 0x108
 8008982:	2303      	movs	r3, #3
 8008984:	e002      	b.n	800898c <__svfiscanf_r+0x214>
 8008986:	2308      	movs	r3, #8
 8008988:	9342      	str	r3, [sp, #264]	@ 0x108
 800898a:	2304      	movs	r3, #4
 800898c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dd45      	ble.n	8008a20 <__svfiscanf_r+0x2a8>
 8008994:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008996:	0659      	lsls	r1, r3, #25
 8008998:	d404      	bmi.n	80089a4 <__svfiscanf_r+0x22c>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	5cba      	ldrb	r2, [r7, r2]
 80089a0:	0712      	lsls	r2, r2, #28
 80089a2:	d444      	bmi.n	8008a2e <__svfiscanf_r+0x2b6>
 80089a4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dc5b      	bgt.n	8008a62 <__svfiscanf_r+0x2ea>
 80089aa:	466b      	mov	r3, sp
 80089ac:	4622      	mov	r2, r4
 80089ae:	a941      	add	r1, sp, #260	@ 0x104
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 f893 	bl	8008adc <_scanf_chars>
 80089b6:	2801      	cmp	r0, #1
 80089b8:	d06f      	beq.n	8008a9a <__svfiscanf_r+0x322>
 80089ba:	2802      	cmp	r0, #2
 80089bc:	f47f af0f 	bne.w	80087de <__svfiscanf_r+0x66>
 80089c0:	e7c2      	b.n	8008948 <__svfiscanf_r+0x1d0>
 80089c2:	220a      	movs	r2, #10
 80089c4:	e7d7      	b.n	8008976 <__svfiscanf_r+0x1fe>
 80089c6:	4629      	mov	r1, r5
 80089c8:	4640      	mov	r0, r8
 80089ca:	f000 fb65 	bl	8009098 <__sccl>
 80089ce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d4:	9341      	str	r3, [sp, #260]	@ 0x104
 80089d6:	4605      	mov	r5, r0
 80089d8:	2301      	movs	r3, #1
 80089da:	e7d7      	b.n	800898c <__svfiscanf_r+0x214>
 80089dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80089de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80089e4:	2300      	movs	r3, #0
 80089e6:	e7d1      	b.n	800898c <__svfiscanf_r+0x214>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e7cf      	b.n	800898c <__svfiscanf_r+0x214>
 80089ec:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80089ee:	06c3      	lsls	r3, r0, #27
 80089f0:	f53f aef5 	bmi.w	80087de <__svfiscanf_r+0x66>
 80089f4:	9b00      	ldr	r3, [sp, #0]
 80089f6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80089f8:	1d19      	adds	r1, r3, #4
 80089fa:	9100      	str	r1, [sp, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	07c0      	lsls	r0, r0, #31
 8008a00:	bf4c      	ite	mi
 8008a02:	801a      	strhmi	r2, [r3, #0]
 8008a04:	601a      	strpl	r2, [r3, #0]
 8008a06:	e6ea      	b.n	80087de <__svfiscanf_r+0x66>
 8008a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a0a:	07de      	lsls	r6, r3, #31
 8008a0c:	d405      	bmi.n	8008a1a <__svfiscanf_r+0x2a2>
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	059d      	lsls	r5, r3, #22
 8008a12:	d402      	bmi.n	8008a1a <__svfiscanf_r+0x2a2>
 8008a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a16:	f7fd f987 	bl	8005d28 <__retarget_lock_release_recursive>
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a1e:	e79d      	b.n	800895c <__svfiscanf_r+0x1e4>
 8008a20:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a22:	4621      	mov	r1, r4
 8008a24:	4630      	mov	r0, r6
 8008a26:	4798      	blx	r3
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d0b3      	beq.n	8008994 <__svfiscanf_r+0x21c>
 8008a2c:	e78c      	b.n	8008948 <__svfiscanf_r+0x1d0>
 8008a2e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a30:	3201      	adds	r2, #1
 8008a32:	9245      	str	r2, [sp, #276]	@ 0x114
 8008a34:	6862      	ldr	r2, [r4, #4]
 8008a36:	3a01      	subs	r2, #1
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	6062      	str	r2, [r4, #4]
 8008a3c:	dd0a      	ble.n	8008a54 <__svfiscanf_r+0x2dc>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	e7aa      	b.n	800899a <__svfiscanf_r+0x222>
 8008a44:	0800917f 	.word	0x0800917f
 8008a48:	08008fb1 	.word	0x08008fb1
 8008a4c:	0800a071 	.word	0x0800a071
 8008a50:	08009e59 	.word	0x08009e59
 8008a54:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4798      	blx	r3
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d09c      	beq.n	800899a <__svfiscanf_r+0x222>
 8008a60:	e772      	b.n	8008948 <__svfiscanf_r+0x1d0>
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	dc06      	bgt.n	8008a74 <__svfiscanf_r+0x2fc>
 8008a66:	466b      	mov	r3, sp
 8008a68:	4622      	mov	r2, r4
 8008a6a:	a941      	add	r1, sp, #260	@ 0x104
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f88f 	bl	8008b90 <_scanf_i>
 8008a72:	e7a0      	b.n	80089b6 <__svfiscanf_r+0x23e>
 8008a74:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab0 <__svfiscanf_r+0x338>)
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f43f aeb1 	beq.w	80087de <__svfiscanf_r+0x66>
 8008a7c:	466b      	mov	r3, sp
 8008a7e:	4622      	mov	r2, r4
 8008a80:	a941      	add	r1, sp, #260	@ 0x104
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7fc fbd2 	bl	800522c <_scanf_float>
 8008a88:	e795      	b.n	80089b6 <__svfiscanf_r+0x23e>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	0598      	lsls	r0, r3, #22
 8008a8e:	f53f af5f 	bmi.w	8008950 <__svfiscanf_r+0x1d8>
 8008a92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a94:	f7fd f948 	bl	8005d28 <__retarget_lock_release_recursive>
 8008a98:	e75a      	b.n	8008950 <__svfiscanf_r+0x1d8>
 8008a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a9c:	07da      	lsls	r2, r3, #31
 8008a9e:	d405      	bmi.n	8008aac <__svfiscanf_r+0x334>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	059b      	lsls	r3, r3, #22
 8008aa4:	d402      	bmi.n	8008aac <__svfiscanf_r+0x334>
 8008aa6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aa8:	f7fd f93e 	bl	8005d28 <__retarget_lock_release_recursive>
 8008aac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008aae:	e755      	b.n	800895c <__svfiscanf_r+0x1e4>
 8008ab0:	0800522d 	.word	0x0800522d

08008ab4 <_vfiscanf_r>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	460d      	mov	r5, r1
 8008aba:	4616      	mov	r6, r2
 8008abc:	461f      	mov	r7, r3
 8008abe:	4604      	mov	r4, r0
 8008ac0:	b118      	cbz	r0, 8008aca <_vfiscanf_r+0x16>
 8008ac2:	6a03      	ldr	r3, [r0, #32]
 8008ac4:	b90b      	cbnz	r3, 8008aca <_vfiscanf_r+0x16>
 8008ac6:	f7fc fe4b 	bl	8005760 <__sinit>
 8008aca:	463b      	mov	r3, r7
 8008acc:	4632      	mov	r2, r6
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad6:	f7ff be4f 	b.w	8008778 <__svfiscanf_r>
	...

08008adc <_scanf_chars>:
 8008adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	688a      	ldr	r2, [r1, #8]
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b932      	cbnz	r2, 8008af8 <_scanf_chars+0x1c>
 8008aea:	698a      	ldr	r2, [r1, #24]
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	bf14      	ite	ne
 8008af0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8008af4:	2201      	moveq	r2, #1
 8008af6:	608a      	str	r2, [r1, #8]
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008b8c <_scanf_chars+0xb0>
 8008afe:	06d1      	lsls	r1, r2, #27
 8008b00:	bf5f      	itttt	pl
 8008b02:	681a      	ldrpl	r2, [r3, #0]
 8008b04:	1d11      	addpl	r1, r2, #4
 8008b06:	6019      	strpl	r1, [r3, #0]
 8008b08:	6816      	ldrpl	r6, [r2, #0]
 8008b0a:	2700      	movs	r7, #0
 8008b0c:	69a0      	ldr	r0, [r4, #24]
 8008b0e:	b188      	cbz	r0, 8008b34 <_scanf_chars+0x58>
 8008b10:	2801      	cmp	r0, #1
 8008b12:	d107      	bne.n	8008b24 <_scanf_chars+0x48>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	6963      	ldr	r3, [r4, #20]
 8008b1a:	5c9b      	ldrb	r3, [r3, r2]
 8008b1c:	b953      	cbnz	r3, 8008b34 <_scanf_chars+0x58>
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	d031      	beq.n	8008b86 <_scanf_chars+0xaa>
 8008b22:	e022      	b.n	8008b6a <_scanf_chars+0x8e>
 8008b24:	2802      	cmp	r0, #2
 8008b26:	d120      	bne.n	8008b6a <_scanf_chars+0x8e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	d41a      	bmi.n	8008b6a <_scanf_chars+0x8e>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	06da      	lsls	r2, r3, #27
 8008b38:	bf5e      	ittt	pl
 8008b3a:	682b      	ldrpl	r3, [r5, #0]
 8008b3c:	781b      	ldrbpl	r3, [r3, #0]
 8008b3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b42:	682a      	ldr	r2, [r5, #0]
 8008b44:	686b      	ldr	r3, [r5, #4]
 8008b46:	3201      	adds	r2, #1
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	68a2      	ldr	r2, [r4, #8]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	606b      	str	r3, [r5, #4]
 8008b52:	3701      	adds	r7, #1
 8008b54:	60a2      	str	r2, [r4, #8]
 8008b56:	b142      	cbz	r2, 8008b6a <_scanf_chars+0x8e>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dcd7      	bgt.n	8008b0c <_scanf_chars+0x30>
 8008b5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b60:	4629      	mov	r1, r5
 8008b62:	4640      	mov	r0, r8
 8008b64:	4798      	blx	r3
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d0d0      	beq.n	8008b0c <_scanf_chars+0x30>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f013 0310 	ands.w	r3, r3, #16
 8008b70:	d105      	bne.n	8008b7e <_scanf_chars+0xa2>
 8008b72:	68e2      	ldr	r2, [r4, #12]
 8008b74:	3201      	adds	r2, #1
 8008b76:	60e2      	str	r2, [r4, #12]
 8008b78:	69a2      	ldr	r2, [r4, #24]
 8008b7a:	b102      	cbz	r2, 8008b7e <_scanf_chars+0xa2>
 8008b7c:	7033      	strb	r3, [r6, #0]
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	443b      	add	r3, r7
 8008b82:	6123      	str	r3, [r4, #16]
 8008b84:	2000      	movs	r0, #0
 8008b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8a:	bf00      	nop
 8008b8c:	0800a071 	.word	0x0800a071

08008b90 <_scanf_i>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	4698      	mov	r8, r3
 8008b96:	4b74      	ldr	r3, [pc, #464]	@ (8008d68 <_scanf_i+0x1d8>)
 8008b98:	460c      	mov	r4, r1
 8008b9a:	4682      	mov	sl, r0
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008baa:	4b70      	ldr	r3, [pc, #448]	@ (8008d6c <_scanf_i+0x1dc>)
 8008bac:	69a1      	ldr	r1, [r4, #24]
 8008bae:	4a70      	ldr	r2, [pc, #448]	@ (8008d70 <_scanf_i+0x1e0>)
 8008bb0:	2903      	cmp	r1, #3
 8008bb2:	bf08      	it	eq
 8008bb4:	461a      	moveq	r2, r3
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	9201      	str	r2, [sp, #4]
 8008bba:	1e5a      	subs	r2, r3, #1
 8008bbc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008bc0:	bf88      	it	hi
 8008bc2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008bc6:	4627      	mov	r7, r4
 8008bc8:	bf82      	ittt	hi
 8008bca:	eb03 0905 	addhi.w	r9, r3, r5
 8008bce:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bd2:	60a3      	strhi	r3, [r4, #8]
 8008bd4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008bd8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008bdc:	bf98      	it	ls
 8008bde:	f04f 0900 	movls.w	r9, #0
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	463d      	mov	r5, r7
 8008be6:	f04f 0b00 	mov.w	fp, #0
 8008bea:	6831      	ldr	r1, [r6, #0]
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	7809      	ldrb	r1, [r1, #0]
 8008bf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f7f7 faf3 	bl	80001e0 <memchr>
 8008bfa:	b328      	cbz	r0, 8008c48 <_scanf_i+0xb8>
 8008bfc:	f1bb 0f01 	cmp.w	fp, #1
 8008c00:	d159      	bne.n	8008cb6 <_scanf_i+0x126>
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	b92a      	cbnz	r2, 8008c12 <_scanf_i+0x82>
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	2108      	movs	r1, #8
 8008c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c0e:	6061      	str	r1, [r4, #4]
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	68a2      	ldr	r2, [r4, #8]
 8008c1c:	1e51      	subs	r1, r2, #1
 8008c1e:	60a1      	str	r1, [r4, #8]
 8008c20:	b192      	cbz	r2, 8008c48 <_scanf_i+0xb8>
 8008c22:	6832      	ldr	r2, [r6, #0]
 8008c24:	1c51      	adds	r1, r2, #1
 8008c26:	6031      	str	r1, [r6, #0]
 8008c28:	7812      	ldrb	r2, [r2, #0]
 8008c2a:	f805 2b01 	strb.w	r2, [r5], #1
 8008c2e:	6872      	ldr	r2, [r6, #4]
 8008c30:	3a01      	subs	r2, #1
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	6072      	str	r2, [r6, #4]
 8008c36:	dc07      	bgt.n	8008c48 <_scanf_i+0xb8>
 8008c38:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4650      	mov	r0, sl
 8008c40:	4790      	blx	r2
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f040 8085 	bne.w	8008d52 <_scanf_i+0x1c2>
 8008c48:	f10b 0b01 	add.w	fp, fp, #1
 8008c4c:	f1bb 0f03 	cmp.w	fp, #3
 8008c50:	d1cb      	bne.n	8008bea <_scanf_i+0x5a>
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	b90b      	cbnz	r3, 8008c5a <_scanf_i+0xca>
 8008c56:	230a      	movs	r3, #10
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	6863      	ldr	r3, [r4, #4]
 8008c5c:	4945      	ldr	r1, [pc, #276]	@ (8008d74 <_scanf_i+0x1e4>)
 8008c5e:	6960      	ldr	r0, [r4, #20]
 8008c60:	1ac9      	subs	r1, r1, r3
 8008c62:	f000 fa19 	bl	8009098 <__sccl>
 8008c66:	f04f 0b00 	mov.w	fp, #0
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	6822      	ldr	r2, [r4, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d03d      	beq.n	8008cee <_scanf_i+0x15e>
 8008c72:	6831      	ldr	r1, [r6, #0]
 8008c74:	6960      	ldr	r0, [r4, #20]
 8008c76:	f891 c000 	ldrb.w	ip, [r1]
 8008c7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d035      	beq.n	8008cee <_scanf_i+0x15e>
 8008c82:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008c86:	d124      	bne.n	8008cd2 <_scanf_i+0x142>
 8008c88:	0510      	lsls	r0, r2, #20
 8008c8a:	d522      	bpl.n	8008cd2 <_scanf_i+0x142>
 8008c8c:	f10b 0b01 	add.w	fp, fp, #1
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	d003      	beq.n	8008c9e <_scanf_i+0x10e>
 8008c96:	3301      	adds	r3, #1
 8008c98:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	6873      	ldr	r3, [r6, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	6073      	str	r3, [r6, #4]
 8008ca6:	dd1b      	ble.n	8008ce0 <_scanf_i+0x150>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	6033      	str	r3, [r6, #0]
 8008cae:	68a3      	ldr	r3, [r4, #8]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	60a3      	str	r3, [r4, #8]
 8008cb4:	e7d9      	b.n	8008c6a <_scanf_i+0xda>
 8008cb6:	f1bb 0f02 	cmp.w	fp, #2
 8008cba:	d1ae      	bne.n	8008c1a <_scanf_i+0x8a>
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008cc2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008cc6:	d1c4      	bne.n	8008c52 <_scanf_i+0xc2>
 8008cc8:	2110      	movs	r1, #16
 8008cca:	6061      	str	r1, [r4, #4]
 8008ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cd0:	e7a2      	b.n	8008c18 <_scanf_i+0x88>
 8008cd2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	780b      	ldrb	r3, [r1, #0]
 8008cda:	f805 3b01 	strb.w	r3, [r5], #1
 8008cde:	e7de      	b.n	8008c9e <_scanf_i+0x10e>
 8008ce0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	4798      	blx	r3
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d0df      	beq.n	8008cae <_scanf_i+0x11e>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	05d9      	lsls	r1, r3, #23
 8008cf2:	d50d      	bpl.n	8008d10 <_scanf_i+0x180>
 8008cf4:	42bd      	cmp	r5, r7
 8008cf6:	d909      	bls.n	8008d0c <_scanf_i+0x17c>
 8008cf8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d00:	4632      	mov	r2, r6
 8008d02:	4650      	mov	r0, sl
 8008d04:	4798      	blx	r3
 8008d06:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8008d0a:	464d      	mov	r5, r9
 8008d0c:	42bd      	cmp	r5, r7
 8008d0e:	d028      	beq.n	8008d62 <_scanf_i+0x1d2>
 8008d10:	6822      	ldr	r2, [r4, #0]
 8008d12:	f012 0210 	ands.w	r2, r2, #16
 8008d16:	d113      	bne.n	8008d40 <_scanf_i+0x1b0>
 8008d18:	702a      	strb	r2, [r5, #0]
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	9e01      	ldr	r6, [sp, #4]
 8008d1e:	4639      	mov	r1, r7
 8008d20:	4650      	mov	r0, sl
 8008d22:	47b0      	blx	r6
 8008d24:	f8d8 3000 	ldr.w	r3, [r8]
 8008d28:	6821      	ldr	r1, [r4, #0]
 8008d2a:	1d1a      	adds	r2, r3, #4
 8008d2c:	f8c8 2000 	str.w	r2, [r8]
 8008d30:	f011 0f20 	tst.w	r1, #32
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	d00f      	beq.n	8008d58 <_scanf_i+0x1c8>
 8008d38:	6018      	str	r0, [r3, #0]
 8008d3a:	68e3      	ldr	r3, [r4, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60e3      	str	r3, [r4, #12]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	1bed      	subs	r5, r5, r7
 8008d44:	445d      	add	r5, fp
 8008d46:	442b      	add	r3, r5
 8008d48:	6123      	str	r3, [r4, #16]
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	b007      	add	sp, #28
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	f04f 0b00 	mov.w	fp, #0
 8008d56:	e7ca      	b.n	8008cee <_scanf_i+0x15e>
 8008d58:	07ca      	lsls	r2, r1, #31
 8008d5a:	bf4c      	ite	mi
 8008d5c:	8018      	strhmi	r0, [r3, #0]
 8008d5e:	6018      	strpl	r0, [r3, #0]
 8008d60:	e7eb      	b.n	8008d3a <_scanf_i+0x1aa>
 8008d62:	2001      	movs	r0, #1
 8008d64:	e7f2      	b.n	8008d4c <_scanf_i+0x1bc>
 8008d66:	bf00      	nop
 8008d68:	08009cf0 	.word	0x08009cf0
 8008d6c:	08008241 	.word	0x08008241
 8008d70:	08009b9d 	.word	0x08009b9d
 8008d74:	08009e74 	.word	0x08009e74

08008d78 <__sflush_r>:
 8008d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	0716      	lsls	r6, r2, #28
 8008d82:	4605      	mov	r5, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	d454      	bmi.n	8008e32 <__sflush_r+0xba>
 8008d88:	684b      	ldr	r3, [r1, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dc02      	bgt.n	8008d94 <__sflush_r+0x1c>
 8008d8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd48      	ble.n	8008e26 <__sflush_r+0xae>
 8008d94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d96:	2e00      	cmp	r6, #0
 8008d98:	d045      	beq.n	8008e26 <__sflush_r+0xae>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008da0:	682f      	ldr	r7, [r5, #0]
 8008da2:	6a21      	ldr	r1, [r4, #32]
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	d030      	beq.n	8008e0a <__sflush_r+0x92>
 8008da8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	0759      	lsls	r1, r3, #29
 8008dae:	d505      	bpl.n	8008dbc <__sflush_r+0x44>
 8008db0:	6863      	ldr	r3, [r4, #4]
 8008db2:	1ad2      	subs	r2, r2, r3
 8008db4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008db6:	b10b      	cbz	r3, 8008dbc <__sflush_r+0x44>
 8008db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dba:	1ad2      	subs	r2, r2, r3
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dc0:	6a21      	ldr	r1, [r4, #32]
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b0      	blx	r6
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	d106      	bne.n	8008dda <__sflush_r+0x62>
 8008dcc:	6829      	ldr	r1, [r5, #0]
 8008dce:	291d      	cmp	r1, #29
 8008dd0:	d82b      	bhi.n	8008e2a <__sflush_r+0xb2>
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e7c <__sflush_r+0x104>)
 8008dd4:	40ca      	lsrs	r2, r1
 8008dd6:	07d6      	lsls	r6, r2, #31
 8008dd8:	d527      	bpl.n	8008e2a <__sflush_r+0xb2>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	6062      	str	r2, [r4, #4]
 8008dde:	04d9      	lsls	r1, r3, #19
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	6022      	str	r2, [r4, #0]
 8008de4:	d504      	bpl.n	8008df0 <__sflush_r+0x78>
 8008de6:	1c42      	adds	r2, r0, #1
 8008de8:	d101      	bne.n	8008dee <__sflush_r+0x76>
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	b903      	cbnz	r3, 8008df0 <__sflush_r+0x78>
 8008dee:	6560      	str	r0, [r4, #84]	@ 0x54
 8008df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008df2:	602f      	str	r7, [r5, #0]
 8008df4:	b1b9      	cbz	r1, 8008e26 <__sflush_r+0xae>
 8008df6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	d002      	beq.n	8008e04 <__sflush_r+0x8c>
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f7fd fdf2 	bl	80069e8 <_free_r>
 8008e04:	2300      	movs	r3, #0
 8008e06:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e08:	e00d      	b.n	8008e26 <__sflush_r+0xae>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b0      	blx	r6
 8008e10:	4602      	mov	r2, r0
 8008e12:	1c50      	adds	r0, r2, #1
 8008e14:	d1c9      	bne.n	8008daa <__sflush_r+0x32>
 8008e16:	682b      	ldr	r3, [r5, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0c6      	beq.n	8008daa <__sflush_r+0x32>
 8008e1c:	2b1d      	cmp	r3, #29
 8008e1e:	d001      	beq.n	8008e24 <__sflush_r+0xac>
 8008e20:	2b16      	cmp	r3, #22
 8008e22:	d11e      	bne.n	8008e62 <__sflush_r+0xea>
 8008e24:	602f      	str	r7, [r5, #0]
 8008e26:	2000      	movs	r0, #0
 8008e28:	e022      	b.n	8008e70 <__sflush_r+0xf8>
 8008e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e2e:	b21b      	sxth	r3, r3
 8008e30:	e01b      	b.n	8008e6a <__sflush_r+0xf2>
 8008e32:	690f      	ldr	r7, [r1, #16]
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	d0f6      	beq.n	8008e26 <__sflush_r+0xae>
 8008e38:	0793      	lsls	r3, r2, #30
 8008e3a:	680e      	ldr	r6, [r1, #0]
 8008e3c:	bf08      	it	eq
 8008e3e:	694b      	ldreq	r3, [r1, #20]
 8008e40:	600f      	str	r7, [r1, #0]
 8008e42:	bf18      	it	ne
 8008e44:	2300      	movne	r3, #0
 8008e46:	eba6 0807 	sub.w	r8, r6, r7
 8008e4a:	608b      	str	r3, [r1, #8]
 8008e4c:	f1b8 0f00 	cmp.w	r8, #0
 8008e50:	dde9      	ble.n	8008e26 <__sflush_r+0xae>
 8008e52:	6a21      	ldr	r1, [r4, #32]
 8008e54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e56:	4643      	mov	r3, r8
 8008e58:	463a      	mov	r2, r7
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b0      	blx	r6
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	dc08      	bgt.n	8008e74 <__sflush_r+0xfc>
 8008e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	4407      	add	r7, r0
 8008e76:	eba8 0800 	sub.w	r8, r8, r0
 8008e7a:	e7e7      	b.n	8008e4c <__sflush_r+0xd4>
 8008e7c:	20400001 	.word	0x20400001

08008e80 <_fflush_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	4605      	mov	r5, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	b913      	cbnz	r3, 8008e90 <_fflush_r+0x10>
 8008e8a:	2500      	movs	r5, #0
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	b118      	cbz	r0, 8008e9a <_fflush_r+0x1a>
 8008e92:	6a03      	ldr	r3, [r0, #32]
 8008e94:	b90b      	cbnz	r3, 8008e9a <_fflush_r+0x1a>
 8008e96:	f7fc fc63 	bl	8005760 <__sinit>
 8008e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f3      	beq.n	8008e8a <_fflush_r+0xa>
 8008ea2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ea4:	07d0      	lsls	r0, r2, #31
 8008ea6:	d404      	bmi.n	8008eb2 <_fflush_r+0x32>
 8008ea8:	0599      	lsls	r1, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_fflush_r+0x32>
 8008eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eae:	f7fc ff3a 	bl	8005d26 <__retarget_lock_acquire_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f7ff ff5f 	bl	8008d78 <__sflush_r>
 8008eba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ebc:	07da      	lsls	r2, r3, #31
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	d4e4      	bmi.n	8008e8c <_fflush_r+0xc>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	059b      	lsls	r3, r3, #22
 8008ec6:	d4e1      	bmi.n	8008e8c <_fflush_r+0xc>
 8008ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eca:	f7fc ff2d 	bl	8005d28 <__retarget_lock_release_recursive>
 8008ece:	e7dd      	b.n	8008e8c <_fflush_r+0xc>

08008ed0 <__swhatbuf_r>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	b096      	sub	sp, #88	@ 0x58
 8008edc:	4615      	mov	r5, r2
 8008ede:	461e      	mov	r6, r3
 8008ee0:	da0d      	bge.n	8008efe <__swhatbuf_r+0x2e>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ee8:	f04f 0100 	mov.w	r1, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2340      	movne	r3, #64	@ 0x40
 8008ef0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	6031      	str	r1, [r6, #0]
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	b016      	add	sp, #88	@ 0x58
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	466a      	mov	r2, sp
 8008f00:	f000 f9e8 	bl	80092d4 <_fstat_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	dbec      	blt.n	8008ee2 <__swhatbuf_r+0x12>
 8008f08:	9901      	ldr	r1, [sp, #4]
 8008f0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f12:	4259      	negs	r1, r3
 8008f14:	4159      	adcs	r1, r3
 8008f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f1a:	e7eb      	b.n	8008ef4 <__swhatbuf_r+0x24>

08008f1c <__smakebuf_r>:
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f20:	079d      	lsls	r5, r3, #30
 8008f22:	4606      	mov	r6, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	d507      	bpl.n	8008f38 <__smakebuf_r+0x1c>
 8008f28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	2301      	movs	r3, #1
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	b003      	add	sp, #12
 8008f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f38:	ab01      	add	r3, sp, #4
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	f7ff ffc8 	bl	8008ed0 <__swhatbuf_r>
 8008f40:	9f00      	ldr	r7, [sp, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	4639      	mov	r1, r7
 8008f46:	4630      	mov	r0, r6
 8008f48:	f7fd fdc2 	bl	8006ad0 <_malloc_r>
 8008f4c:	b948      	cbnz	r0, 8008f62 <__smakebuf_r+0x46>
 8008f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f52:	059a      	lsls	r2, r3, #22
 8008f54:	d4ee      	bmi.n	8008f34 <__smakebuf_r+0x18>
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	f043 0302 	orr.w	r3, r3, #2
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	e7e2      	b.n	8008f28 <__smakebuf_r+0xc>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	6020      	str	r0, [r4, #0]
 8008f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f72:	b15b      	cbz	r3, 8008f8c <__smakebuf_r+0x70>
 8008f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f000 f9bd 	bl	80092f8 <_isatty_r>
 8008f7e:	b128      	cbz	r0, 8008f8c <__smakebuf_r+0x70>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	431d      	orrs	r5, r3
 8008f90:	81a5      	strh	r5, [r4, #12]
 8008f92:	e7cf      	b.n	8008f34 <__smakebuf_r+0x18>

08008f94 <lflush>:
 8008f94:	898b      	ldrh	r3, [r1, #12]
 8008f96:	f003 0309 	and.w	r3, r3, #9
 8008f9a:	2b09      	cmp	r3, #9
 8008f9c:	d103      	bne.n	8008fa6 <lflush+0x12>
 8008f9e:	4b03      	ldr	r3, [pc, #12]	@ (8008fac <lflush+0x18>)
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	f7ff bf6d 	b.w	8008e80 <_fflush_r>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000018 	.word	0x20000018

08008fb0 <__srefill_r>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b118      	cbz	r0, 8008fc0 <__srefill_r+0x10>
 8008fb8:	6a03      	ldr	r3, [r0, #32]
 8008fba:	b90b      	cbnz	r3, 8008fc0 <__srefill_r+0x10>
 8008fbc:	f7fc fbd0 	bl	8005760 <__sinit>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6063      	str	r3, [r4, #4]
 8008fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc8:	069e      	lsls	r6, r3, #26
 8008fca:	d408      	bmi.n	8008fde <__srefill_r+0x2e>
 8008fcc:	0758      	lsls	r0, r3, #29
 8008fce:	d445      	bmi.n	800905c <__srefill_r+0xac>
 8008fd0:	06d9      	lsls	r1, r3, #27
 8008fd2:	d407      	bmi.n	8008fe4 <__srefill_r+0x34>
 8008fd4:	2209      	movs	r2, #9
 8008fd6:	602a      	str	r2, [r5, #0]
 8008fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	071a      	lsls	r2, r3, #28
 8008fe6:	d50b      	bpl.n	8009000 <__srefill_r+0x50>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7ff ff48 	bl	8008e80 <_fflush_r>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d1f4      	bne.n	8008fde <__srefill_r+0x2e>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	60a0      	str	r0, [r4, #8]
 8008ff8:	f023 0308 	bic.w	r3, r3, #8
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	61a0      	str	r0, [r4, #24]
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f043 0304 	orr.w	r3, r3, #4
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	b91b      	cbnz	r3, 8009014 <__srefill_r+0x64>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f7ff ff84 	bl	8008f1c <__smakebuf_r>
 8009014:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8009018:	07b3      	lsls	r3, r6, #30
 800901a:	d00f      	beq.n	800903c <__srefill_r+0x8c>
 800901c:	2301      	movs	r3, #1
 800901e:	4a1b      	ldr	r2, [pc, #108]	@ (800908c <__srefill_r+0xdc>)
 8009020:	491b      	ldr	r1, [pc, #108]	@ (8009090 <__srefill_r+0xe0>)
 8009022:	481c      	ldr	r0, [pc, #112]	@ (8009094 <__srefill_r+0xe4>)
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	f7fc fbb3 	bl	8005790 <_fwalk_sglue>
 800902a:	81a6      	strh	r6, [r4, #12]
 800902c:	f006 0609 	and.w	r6, r6, #9
 8009030:	2e09      	cmp	r6, #9
 8009032:	d103      	bne.n	800903c <__srefill_r+0x8c>
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f7ff fe9e 	bl	8008d78 <__sflush_r>
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8009040:	6963      	ldr	r3, [r4, #20]
 8009042:	6a21      	ldr	r1, [r4, #32]
 8009044:	6022      	str	r2, [r4, #0]
 8009046:	4628      	mov	r0, r5
 8009048:	47b0      	blx	r6
 800904a:	2800      	cmp	r0, #0
 800904c:	6060      	str	r0, [r4, #4]
 800904e:	dc17      	bgt.n	8009080 <__srefill_r+0xd0>
 8009050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009054:	d116      	bne.n	8009084 <__srefill_r+0xd4>
 8009056:	f043 0320 	orr.w	r3, r3, #32
 800905a:	e7bf      	b.n	8008fdc <__srefill_r+0x2c>
 800905c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800905e:	2900      	cmp	r1, #0
 8009060:	d0d2      	beq.n	8009008 <__srefill_r+0x58>
 8009062:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009066:	4299      	cmp	r1, r3
 8009068:	d002      	beq.n	8009070 <__srefill_r+0xc0>
 800906a:	4628      	mov	r0, r5
 800906c:	f7fd fcbc 	bl	80069e8 <_free_r>
 8009070:	2300      	movs	r3, #0
 8009072:	6363      	str	r3, [r4, #52]	@ 0x34
 8009074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009076:	6063      	str	r3, [r4, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0c5      	beq.n	8009008 <__srefill_r+0x58>
 800907c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	2000      	movs	r0, #0
 8009082:	e7ae      	b.n	8008fe2 <__srefill_r+0x32>
 8009084:	2200      	movs	r2, #0
 8009086:	6062      	str	r2, [r4, #4]
 8009088:	e7a6      	b.n	8008fd8 <__srefill_r+0x28>
 800908a:	bf00      	nop
 800908c:	2000000c 	.word	0x2000000c
 8009090:	08008f95 	.word	0x08008f95
 8009094:	2000001c 	.word	0x2000001c

08009098 <__sccl>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	780b      	ldrb	r3, [r1, #0]
 800909c:	4604      	mov	r4, r0
 800909e:	2b5e      	cmp	r3, #94	@ 0x5e
 80090a0:	bf0b      	itete	eq
 80090a2:	784b      	ldrbeq	r3, [r1, #1]
 80090a4:	1c4a      	addne	r2, r1, #1
 80090a6:	1c8a      	addeq	r2, r1, #2
 80090a8:	2100      	movne	r1, #0
 80090aa:	bf08      	it	eq
 80090ac:	2101      	moveq	r1, #1
 80090ae:	3801      	subs	r0, #1
 80090b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80090b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80090b8:	42a8      	cmp	r0, r5
 80090ba:	d1fb      	bne.n	80090b4 <__sccl+0x1c>
 80090bc:	b90b      	cbnz	r3, 80090c2 <__sccl+0x2a>
 80090be:	1e50      	subs	r0, r2, #1
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	f081 0101 	eor.w	r1, r1, #1
 80090c6:	54e1      	strb	r1, [r4, r3]
 80090c8:	4610      	mov	r0, r2
 80090ca:	4602      	mov	r2, r0
 80090cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80090d2:	d005      	beq.n	80090e0 <__sccl+0x48>
 80090d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80090d6:	d016      	beq.n	8009106 <__sccl+0x6e>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	d0f1      	beq.n	80090c0 <__sccl+0x28>
 80090dc:	462b      	mov	r3, r5
 80090de:	e7f2      	b.n	80090c6 <__sccl+0x2e>
 80090e0:	7846      	ldrb	r6, [r0, #1]
 80090e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80090e4:	d0fa      	beq.n	80090dc <__sccl+0x44>
 80090e6:	42b3      	cmp	r3, r6
 80090e8:	dcf8      	bgt.n	80090dc <__sccl+0x44>
 80090ea:	3002      	adds	r0, #2
 80090ec:	461a      	mov	r2, r3
 80090ee:	3201      	adds	r2, #1
 80090f0:	4296      	cmp	r6, r2
 80090f2:	54a1      	strb	r1, [r4, r2]
 80090f4:	dcfb      	bgt.n	80090ee <__sccl+0x56>
 80090f6:	1af2      	subs	r2, r6, r3
 80090f8:	3a01      	subs	r2, #1
 80090fa:	1c5d      	adds	r5, r3, #1
 80090fc:	42b3      	cmp	r3, r6
 80090fe:	bfa8      	it	ge
 8009100:	2200      	movge	r2, #0
 8009102:	18ab      	adds	r3, r5, r2
 8009104:	e7e1      	b.n	80090ca <__sccl+0x32>
 8009106:	4610      	mov	r0, r2
 8009108:	e7da      	b.n	80090c0 <__sccl+0x28>

0800910a <__submore>:
 800910a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	460c      	mov	r4, r1
 8009110:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d11d      	bne.n	8009156 <__submore+0x4c>
 800911a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800911e:	f7fd fcd7 	bl	8006ad0 <_malloc_r>
 8009122:	b918      	cbnz	r0, 800912c <__submore+0x22>
 8009124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009130:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009132:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009136:	6360      	str	r0, [r4, #52]	@ 0x34
 8009138:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800913c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009140:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009144:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009148:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800914c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009150:	6020      	str	r0, [r4, #0]
 8009152:	2000      	movs	r0, #0
 8009154:	e7e8      	b.n	8009128 <__submore+0x1e>
 8009156:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009158:	0077      	lsls	r7, r6, #1
 800915a:	463a      	mov	r2, r7
 800915c:	f000 fc81 	bl	8009a62 <_realloc_r>
 8009160:	4605      	mov	r5, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d0de      	beq.n	8009124 <__submore+0x1a>
 8009166:	eb00 0806 	add.w	r8, r0, r6
 800916a:	4601      	mov	r1, r0
 800916c:	4632      	mov	r2, r6
 800916e:	4640      	mov	r0, r8
 8009170:	f000 f8e2 	bl	8009338 <memcpy>
 8009174:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009178:	f8c4 8000 	str.w	r8, [r4]
 800917c:	e7e9      	b.n	8009152 <__submore+0x48>

0800917e <_ungetc_r>:
 800917e:	b570      	push	{r4, r5, r6, lr}
 8009180:	460d      	mov	r5, r1
 8009182:	1c69      	adds	r1, r5, #1
 8009184:	4606      	mov	r6, r0
 8009186:	4614      	mov	r4, r2
 8009188:	d01e      	beq.n	80091c8 <_ungetc_r+0x4a>
 800918a:	b118      	cbz	r0, 8009194 <_ungetc_r+0x16>
 800918c:	6a03      	ldr	r3, [r0, #32]
 800918e:	b90b      	cbnz	r3, 8009194 <_ungetc_r+0x16>
 8009190:	f7fc fae6 	bl	8005760 <__sinit>
 8009194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009196:	07da      	lsls	r2, r3, #31
 8009198:	d405      	bmi.n	80091a6 <_ungetc_r+0x28>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	059b      	lsls	r3, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_ungetc_r+0x28>
 80091a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a2:	f7fc fdc0 	bl	8005d26 <__retarget_lock_acquire_recursive>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	f023 0220 	bic.w	r2, r3, #32
 80091ae:	0758      	lsls	r0, r3, #29
 80091b0:	81a2      	strh	r2, [r4, #12]
 80091b2:	d422      	bmi.n	80091fa <_ungetc_r+0x7c>
 80091b4:	06d9      	lsls	r1, r3, #27
 80091b6:	d40a      	bmi.n	80091ce <_ungetc_r+0x50>
 80091b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091ba:	07d2      	lsls	r2, r2, #31
 80091bc:	d404      	bmi.n	80091c8 <_ungetc_r+0x4a>
 80091be:	0599      	lsls	r1, r3, #22
 80091c0:	d402      	bmi.n	80091c8 <_ungetc_r+0x4a>
 80091c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c4:	f7fc fdb0 	bl	8005d28 <__retarget_lock_release_recursive>
 80091c8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80091cc:	e046      	b.n	800925c <_ungetc_r+0xde>
 80091ce:	071b      	lsls	r3, r3, #28
 80091d0:	d50f      	bpl.n	80091f2 <_ungetc_r+0x74>
 80091d2:	4621      	mov	r1, r4
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fe53 	bl	8008e80 <_fflush_r>
 80091da:	b120      	cbz	r0, 80091e6 <_ungetc_r+0x68>
 80091dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091de:	07d8      	lsls	r0, r3, #31
 80091e0:	d4f2      	bmi.n	80091c8 <_ungetc_r+0x4a>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	e7eb      	b.n	80091be <_ungetc_r+0x40>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	60a0      	str	r0, [r4, #8]
 80091ea:	f023 0308 	bic.w	r3, r3, #8
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	61a0      	str	r0, [r4, #24]
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f043 0304 	orr.w	r3, r3, #4
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091fc:	6862      	ldr	r2, [r4, #4]
 80091fe:	b2ed      	uxtb	r5, r5
 8009200:	b1d3      	cbz	r3, 8009238 <_ungetc_r+0xba>
 8009202:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009204:	4293      	cmp	r3, r2
 8009206:	dc05      	bgt.n	8009214 <_ungetc_r+0x96>
 8009208:	4621      	mov	r1, r4
 800920a:	4630      	mov	r0, r6
 800920c:	f7ff ff7d 	bl	800910a <__submore>
 8009210:	2800      	cmp	r0, #0
 8009212:	d1e3      	bne.n	80091dc <_ungetc_r+0x5e>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	1e5a      	subs	r2, r3, #1
 8009218:	6022      	str	r2, [r4, #0]
 800921a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	3301      	adds	r3, #1
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009226:	07da      	lsls	r2, r3, #31
 8009228:	d418      	bmi.n	800925c <_ungetc_r+0xde>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	059b      	lsls	r3, r3, #22
 800922e:	d415      	bmi.n	800925c <_ungetc_r+0xde>
 8009230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009232:	f7fc fd79 	bl	8005d28 <__retarget_lock_release_recursive>
 8009236:	e011      	b.n	800925c <_ungetc_r+0xde>
 8009238:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800923a:	6920      	ldr	r0, [r4, #16]
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	f001 0101 	and.w	r1, r1, #1
 8009242:	b168      	cbz	r0, 8009260 <_ungetc_r+0xe2>
 8009244:	4298      	cmp	r0, r3
 8009246:	d20b      	bcs.n	8009260 <_ungetc_r+0xe2>
 8009248:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800924c:	42a8      	cmp	r0, r5
 800924e:	d107      	bne.n	8009260 <_ungetc_r+0xe2>
 8009250:	3b01      	subs	r3, #1
 8009252:	3201      	adds	r2, #1
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	6062      	str	r2, [r4, #4]
 8009258:	2900      	cmp	r1, #0
 800925a:	d0e6      	beq.n	800922a <_ungetc_r+0xac>
 800925c:	4628      	mov	r0, r5
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009268:	6363      	str	r3, [r4, #52]	@ 0x34
 800926a:	2303      	movs	r3, #3
 800926c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800926e:	4623      	mov	r3, r4
 8009270:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	2301      	movs	r3, #1
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	e7ed      	b.n	8009258 <_ungetc_r+0xda>

0800927c <memmove>:
 800927c:	4288      	cmp	r0, r1
 800927e:	b510      	push	{r4, lr}
 8009280:	eb01 0402 	add.w	r4, r1, r2
 8009284:	d902      	bls.n	800928c <memmove+0x10>
 8009286:	4284      	cmp	r4, r0
 8009288:	4623      	mov	r3, r4
 800928a:	d807      	bhi.n	800929c <memmove+0x20>
 800928c:	1e43      	subs	r3, r0, #1
 800928e:	42a1      	cmp	r1, r4
 8009290:	d008      	beq.n	80092a4 <memmove+0x28>
 8009292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800929a:	e7f8      	b.n	800928e <memmove+0x12>
 800929c:	4402      	add	r2, r0
 800929e:	4601      	mov	r1, r0
 80092a0:	428a      	cmp	r2, r1
 80092a2:	d100      	bne.n	80092a6 <memmove+0x2a>
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ae:	e7f7      	b.n	80092a0 <memmove+0x24>

080092b0 <strncmp>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	b16a      	cbz	r2, 80092d0 <strncmp+0x20>
 80092b4:	3901      	subs	r1, #1
 80092b6:	1884      	adds	r4, r0, r2
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d103      	bne.n	80092cc <strncmp+0x1c>
 80092c4:	42a0      	cmp	r0, r4
 80092c6:	d001      	beq.n	80092cc <strncmp+0x1c>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d1f5      	bne.n	80092b8 <strncmp+0x8>
 80092cc:	1ad0      	subs	r0, r2, r3
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	4610      	mov	r0, r2
 80092d2:	e7fc      	b.n	80092ce <strncmp+0x1e>

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f8 f94d 	bl	8001580 <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	20000408 	.word	0x20000408

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f8 f94c 	bl	80015a0 <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20000408 	.word	0x20000408

08009318 <_sbrk_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	@ (8009334 <_sbrk_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 f954 	bl	80015d0 <_sbrk>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_sbrk_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_sbrk_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20000408 	.word	0x20000408

08009338 <memcpy>:
 8009338:	440a      	add	r2, r1
 800933a:	4291      	cmp	r1, r2
 800933c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009340:	d100      	bne.n	8009344 <memcpy+0xc>
 8009342:	4770      	bx	lr
 8009344:	b510      	push	{r4, lr}
 8009346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800934a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800934e:	4291      	cmp	r1, r2
 8009350:	d1f9      	bne.n	8009346 <memcpy+0xe>
 8009352:	bd10      	pop	{r4, pc}
 8009354:	0000      	movs	r0, r0
	...

08009358 <nan>:
 8009358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009360 <nan+0x8>
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	00000000 	.word	0x00000000
 8009364:	7ff80000 	.word	0x7ff80000

08009368 <__assert_func>:
 8009368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800936a:	4614      	mov	r4, r2
 800936c:	461a      	mov	r2, r3
 800936e:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <__assert_func+0x2c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4605      	mov	r5, r0
 8009374:	68d8      	ldr	r0, [r3, #12]
 8009376:	b14c      	cbz	r4, 800938c <__assert_func+0x24>
 8009378:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <__assert_func+0x30>)
 800937a:	9100      	str	r1, [sp, #0]
 800937c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009380:	4906      	ldr	r1, [pc, #24]	@ (800939c <__assert_func+0x34>)
 8009382:	462b      	mov	r3, r5
 8009384:	f000 fc1a 	bl	8009bbc <fiprintf>
 8009388:	f000 fc2a 	bl	8009be0 <abort>
 800938c:	4b04      	ldr	r3, [pc, #16]	@ (80093a0 <__assert_func+0x38>)
 800938e:	461c      	mov	r4, r3
 8009390:	e7f3      	b.n	800937a <__assert_func+0x12>
 8009392:	bf00      	nop
 8009394:	20000018 	.word	0x20000018
 8009398:	08009e87 	.word	0x08009e87
 800939c:	08009e94 	.word	0x08009e94
 80093a0:	08009ec2 	.word	0x08009ec2

080093a4 <_calloc_r>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	fba1 5402 	umull	r5, r4, r1, r2
 80093aa:	b934      	cbnz	r4, 80093ba <_calloc_r+0x16>
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7fd fb8f 	bl	8006ad0 <_malloc_r>
 80093b2:	4606      	mov	r6, r0
 80093b4:	b928      	cbnz	r0, 80093c2 <_calloc_r+0x1e>
 80093b6:	4630      	mov	r0, r6
 80093b8:	bd70      	pop	{r4, r5, r6, pc}
 80093ba:	220c      	movs	r2, #12
 80093bc:	6002      	str	r2, [r0, #0]
 80093be:	2600      	movs	r6, #0
 80093c0:	e7f9      	b.n	80093b6 <_calloc_r+0x12>
 80093c2:	462a      	mov	r2, r5
 80093c4:	4621      	mov	r1, r4
 80093c6:	f7fc fc31 	bl	8005c2c <memset>
 80093ca:	e7f4      	b.n	80093b6 <_calloc_r+0x12>

080093cc <rshift>:
 80093cc:	6903      	ldr	r3, [r0, #16]
 80093ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093da:	f100 0414 	add.w	r4, r0, #20
 80093de:	dd45      	ble.n	800946c <rshift+0xa0>
 80093e0:	f011 011f 	ands.w	r1, r1, #31
 80093e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093ec:	d10c      	bne.n	8009408 <rshift+0x3c>
 80093ee:	f100 0710 	add.w	r7, r0, #16
 80093f2:	4629      	mov	r1, r5
 80093f4:	42b1      	cmp	r1, r6
 80093f6:	d334      	bcc.n	8009462 <rshift+0x96>
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	1eea      	subs	r2, r5, #3
 80093fe:	4296      	cmp	r6, r2
 8009400:	bf38      	it	cc
 8009402:	2300      	movcc	r3, #0
 8009404:	4423      	add	r3, r4
 8009406:	e015      	b.n	8009434 <rshift+0x68>
 8009408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800940c:	f1c1 0820 	rsb	r8, r1, #32
 8009410:	40cf      	lsrs	r7, r1
 8009412:	f105 0e04 	add.w	lr, r5, #4
 8009416:	46a1      	mov	r9, r4
 8009418:	4576      	cmp	r6, lr
 800941a:	46f4      	mov	ip, lr
 800941c:	d815      	bhi.n	800944a <rshift+0x7e>
 800941e:	1a9a      	subs	r2, r3, r2
 8009420:	0092      	lsls	r2, r2, #2
 8009422:	3a04      	subs	r2, #4
 8009424:	3501      	adds	r5, #1
 8009426:	42ae      	cmp	r6, r5
 8009428:	bf38      	it	cc
 800942a:	2200      	movcc	r2, #0
 800942c:	18a3      	adds	r3, r4, r2
 800942e:	50a7      	str	r7, [r4, r2]
 8009430:	b107      	cbz	r7, 8009434 <rshift+0x68>
 8009432:	3304      	adds	r3, #4
 8009434:	1b1a      	subs	r2, r3, r4
 8009436:	42a3      	cmp	r3, r4
 8009438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800943c:	bf08      	it	eq
 800943e:	2300      	moveq	r3, #0
 8009440:	6102      	str	r2, [r0, #16]
 8009442:	bf08      	it	eq
 8009444:	6143      	streq	r3, [r0, #20]
 8009446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944a:	f8dc c000 	ldr.w	ip, [ip]
 800944e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009452:	ea4c 0707 	orr.w	r7, ip, r7
 8009456:	f849 7b04 	str.w	r7, [r9], #4
 800945a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800945e:	40cf      	lsrs	r7, r1
 8009460:	e7da      	b.n	8009418 <rshift+0x4c>
 8009462:	f851 cb04 	ldr.w	ip, [r1], #4
 8009466:	f847 cf04 	str.w	ip, [r7, #4]!
 800946a:	e7c3      	b.n	80093f4 <rshift+0x28>
 800946c:	4623      	mov	r3, r4
 800946e:	e7e1      	b.n	8009434 <rshift+0x68>

08009470 <__hexdig_fun>:
 8009470:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009474:	2b09      	cmp	r3, #9
 8009476:	d802      	bhi.n	800947e <__hexdig_fun+0xe>
 8009478:	3820      	subs	r0, #32
 800947a:	b2c0      	uxtb	r0, r0
 800947c:	4770      	bx	lr
 800947e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009482:	2b05      	cmp	r3, #5
 8009484:	d801      	bhi.n	800948a <__hexdig_fun+0x1a>
 8009486:	3847      	subs	r0, #71	@ 0x47
 8009488:	e7f7      	b.n	800947a <__hexdig_fun+0xa>
 800948a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800948e:	2b05      	cmp	r3, #5
 8009490:	d801      	bhi.n	8009496 <__hexdig_fun+0x26>
 8009492:	3827      	subs	r0, #39	@ 0x27
 8009494:	e7f1      	b.n	800947a <__hexdig_fun+0xa>
 8009496:	2000      	movs	r0, #0
 8009498:	4770      	bx	lr
	...

0800949c <__gethex>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	b085      	sub	sp, #20
 80094a2:	468a      	mov	sl, r1
 80094a4:	9302      	str	r3, [sp, #8]
 80094a6:	680b      	ldr	r3, [r1, #0]
 80094a8:	9001      	str	r0, [sp, #4]
 80094aa:	4690      	mov	r8, r2
 80094ac:	1c9c      	adds	r4, r3, #2
 80094ae:	46a1      	mov	r9, r4
 80094b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094b4:	2830      	cmp	r0, #48	@ 0x30
 80094b6:	d0fa      	beq.n	80094ae <__gethex+0x12>
 80094b8:	eba9 0303 	sub.w	r3, r9, r3
 80094bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80094c0:	f7ff ffd6 	bl	8009470 <__hexdig_fun>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d168      	bne.n	800959c <__gethex+0x100>
 80094ca:	49a0      	ldr	r1, [pc, #640]	@ (800974c <__gethex+0x2b0>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	4648      	mov	r0, r9
 80094d0:	f7ff feee 	bl	80092b0 <strncmp>
 80094d4:	4607      	mov	r7, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d167      	bne.n	80095aa <__gethex+0x10e>
 80094da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80094de:	4626      	mov	r6, r4
 80094e0:	f7ff ffc6 	bl	8009470 <__hexdig_fun>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d062      	beq.n	80095ae <__gethex+0x112>
 80094e8:	4623      	mov	r3, r4
 80094ea:	7818      	ldrb	r0, [r3, #0]
 80094ec:	2830      	cmp	r0, #48	@ 0x30
 80094ee:	4699      	mov	r9, r3
 80094f0:	f103 0301 	add.w	r3, r3, #1
 80094f4:	d0f9      	beq.n	80094ea <__gethex+0x4e>
 80094f6:	f7ff ffbb 	bl	8009470 <__hexdig_fun>
 80094fa:	fab0 f580 	clz	r5, r0
 80094fe:	096d      	lsrs	r5, r5, #5
 8009500:	f04f 0b01 	mov.w	fp, #1
 8009504:	464a      	mov	r2, r9
 8009506:	4616      	mov	r6, r2
 8009508:	3201      	adds	r2, #1
 800950a:	7830      	ldrb	r0, [r6, #0]
 800950c:	f7ff ffb0 	bl	8009470 <__hexdig_fun>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1f8      	bne.n	8009506 <__gethex+0x6a>
 8009514:	498d      	ldr	r1, [pc, #564]	@ (800974c <__gethex+0x2b0>)
 8009516:	2201      	movs	r2, #1
 8009518:	4630      	mov	r0, r6
 800951a:	f7ff fec9 	bl	80092b0 <strncmp>
 800951e:	2800      	cmp	r0, #0
 8009520:	d13f      	bne.n	80095a2 <__gethex+0x106>
 8009522:	b944      	cbnz	r4, 8009536 <__gethex+0x9a>
 8009524:	1c74      	adds	r4, r6, #1
 8009526:	4622      	mov	r2, r4
 8009528:	4616      	mov	r6, r2
 800952a:	3201      	adds	r2, #1
 800952c:	7830      	ldrb	r0, [r6, #0]
 800952e:	f7ff ff9f 	bl	8009470 <__hexdig_fun>
 8009532:	2800      	cmp	r0, #0
 8009534:	d1f8      	bne.n	8009528 <__gethex+0x8c>
 8009536:	1ba4      	subs	r4, r4, r6
 8009538:	00a7      	lsls	r7, r4, #2
 800953a:	7833      	ldrb	r3, [r6, #0]
 800953c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009540:	2b50      	cmp	r3, #80	@ 0x50
 8009542:	d13e      	bne.n	80095c2 <__gethex+0x126>
 8009544:	7873      	ldrb	r3, [r6, #1]
 8009546:	2b2b      	cmp	r3, #43	@ 0x2b
 8009548:	d033      	beq.n	80095b2 <__gethex+0x116>
 800954a:	2b2d      	cmp	r3, #45	@ 0x2d
 800954c:	d034      	beq.n	80095b8 <__gethex+0x11c>
 800954e:	1c71      	adds	r1, r6, #1
 8009550:	2400      	movs	r4, #0
 8009552:	7808      	ldrb	r0, [r1, #0]
 8009554:	f7ff ff8c 	bl	8009470 <__hexdig_fun>
 8009558:	1e43      	subs	r3, r0, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b18      	cmp	r3, #24
 800955e:	d830      	bhi.n	80095c2 <__gethex+0x126>
 8009560:	f1a0 0210 	sub.w	r2, r0, #16
 8009564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009568:	f7ff ff82 	bl	8009470 <__hexdig_fun>
 800956c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009570:	fa5f fc8c 	uxtb.w	ip, ip
 8009574:	f1bc 0f18 	cmp.w	ip, #24
 8009578:	f04f 030a 	mov.w	r3, #10
 800957c:	d91e      	bls.n	80095bc <__gethex+0x120>
 800957e:	b104      	cbz	r4, 8009582 <__gethex+0xe6>
 8009580:	4252      	negs	r2, r2
 8009582:	4417      	add	r7, r2
 8009584:	f8ca 1000 	str.w	r1, [sl]
 8009588:	b1ed      	cbz	r5, 80095c6 <__gethex+0x12a>
 800958a:	f1bb 0f00 	cmp.w	fp, #0
 800958e:	bf0c      	ite	eq
 8009590:	2506      	moveq	r5, #6
 8009592:	2500      	movne	r5, #0
 8009594:	4628      	mov	r0, r5
 8009596:	b005      	add	sp, #20
 8009598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959c:	2500      	movs	r5, #0
 800959e:	462c      	mov	r4, r5
 80095a0:	e7b0      	b.n	8009504 <__gethex+0x68>
 80095a2:	2c00      	cmp	r4, #0
 80095a4:	d1c7      	bne.n	8009536 <__gethex+0x9a>
 80095a6:	4627      	mov	r7, r4
 80095a8:	e7c7      	b.n	800953a <__gethex+0x9e>
 80095aa:	464e      	mov	r6, r9
 80095ac:	462f      	mov	r7, r5
 80095ae:	2501      	movs	r5, #1
 80095b0:	e7c3      	b.n	800953a <__gethex+0x9e>
 80095b2:	2400      	movs	r4, #0
 80095b4:	1cb1      	adds	r1, r6, #2
 80095b6:	e7cc      	b.n	8009552 <__gethex+0xb6>
 80095b8:	2401      	movs	r4, #1
 80095ba:	e7fb      	b.n	80095b4 <__gethex+0x118>
 80095bc:	fb03 0002 	mla	r0, r3, r2, r0
 80095c0:	e7ce      	b.n	8009560 <__gethex+0xc4>
 80095c2:	4631      	mov	r1, r6
 80095c4:	e7de      	b.n	8009584 <__gethex+0xe8>
 80095c6:	eba6 0309 	sub.w	r3, r6, r9
 80095ca:	3b01      	subs	r3, #1
 80095cc:	4629      	mov	r1, r5
 80095ce:	2b07      	cmp	r3, #7
 80095d0:	dc0a      	bgt.n	80095e8 <__gethex+0x14c>
 80095d2:	9801      	ldr	r0, [sp, #4]
 80095d4:	f7fd fb08 	bl	8006be8 <_Balloc>
 80095d8:	4604      	mov	r4, r0
 80095da:	b940      	cbnz	r0, 80095ee <__gethex+0x152>
 80095dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009750 <__gethex+0x2b4>)
 80095de:	4602      	mov	r2, r0
 80095e0:	21e4      	movs	r1, #228	@ 0xe4
 80095e2:	485c      	ldr	r0, [pc, #368]	@ (8009754 <__gethex+0x2b8>)
 80095e4:	f7ff fec0 	bl	8009368 <__assert_func>
 80095e8:	3101      	adds	r1, #1
 80095ea:	105b      	asrs	r3, r3, #1
 80095ec:	e7ef      	b.n	80095ce <__gethex+0x132>
 80095ee:	f100 0a14 	add.w	sl, r0, #20
 80095f2:	2300      	movs	r3, #0
 80095f4:	4655      	mov	r5, sl
 80095f6:	469b      	mov	fp, r3
 80095f8:	45b1      	cmp	r9, r6
 80095fa:	d337      	bcc.n	800966c <__gethex+0x1d0>
 80095fc:	f845 bb04 	str.w	fp, [r5], #4
 8009600:	eba5 050a 	sub.w	r5, r5, sl
 8009604:	10ad      	asrs	r5, r5, #2
 8009606:	6125      	str	r5, [r4, #16]
 8009608:	4658      	mov	r0, fp
 800960a:	f7fd fbdf 	bl	8006dcc <__hi0bits>
 800960e:	016d      	lsls	r5, r5, #5
 8009610:	f8d8 6000 	ldr.w	r6, [r8]
 8009614:	1a2d      	subs	r5, r5, r0
 8009616:	42b5      	cmp	r5, r6
 8009618:	dd54      	ble.n	80096c4 <__gethex+0x228>
 800961a:	1bad      	subs	r5, r5, r6
 800961c:	4629      	mov	r1, r5
 800961e:	4620      	mov	r0, r4
 8009620:	f7fd ff6b 	bl	80074fa <__any_on>
 8009624:	4681      	mov	r9, r0
 8009626:	b178      	cbz	r0, 8009648 <__gethex+0x1ac>
 8009628:	1e6b      	subs	r3, r5, #1
 800962a:	1159      	asrs	r1, r3, #5
 800962c:	f003 021f 	and.w	r2, r3, #31
 8009630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009634:	f04f 0901 	mov.w	r9, #1
 8009638:	fa09 f202 	lsl.w	r2, r9, r2
 800963c:	420a      	tst	r2, r1
 800963e:	d003      	beq.n	8009648 <__gethex+0x1ac>
 8009640:	454b      	cmp	r3, r9
 8009642:	dc36      	bgt.n	80096b2 <__gethex+0x216>
 8009644:	f04f 0902 	mov.w	r9, #2
 8009648:	4629      	mov	r1, r5
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff febe 	bl	80093cc <rshift>
 8009650:	442f      	add	r7, r5
 8009652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009656:	42bb      	cmp	r3, r7
 8009658:	da42      	bge.n	80096e0 <__gethex+0x244>
 800965a:	9801      	ldr	r0, [sp, #4]
 800965c:	4621      	mov	r1, r4
 800965e:	f7fd fb03 	bl	8006c68 <_Bfree>
 8009662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009664:	2300      	movs	r3, #0
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	25a3      	movs	r5, #163	@ 0xa3
 800966a:	e793      	b.n	8009594 <__gethex+0xf8>
 800966c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009670:	2a2e      	cmp	r2, #46	@ 0x2e
 8009672:	d012      	beq.n	800969a <__gethex+0x1fe>
 8009674:	2b20      	cmp	r3, #32
 8009676:	d104      	bne.n	8009682 <__gethex+0x1e6>
 8009678:	f845 bb04 	str.w	fp, [r5], #4
 800967c:	f04f 0b00 	mov.w	fp, #0
 8009680:	465b      	mov	r3, fp
 8009682:	7830      	ldrb	r0, [r6, #0]
 8009684:	9303      	str	r3, [sp, #12]
 8009686:	f7ff fef3 	bl	8009470 <__hexdig_fun>
 800968a:	9b03      	ldr	r3, [sp, #12]
 800968c:	f000 000f 	and.w	r0, r0, #15
 8009690:	4098      	lsls	r0, r3
 8009692:	ea4b 0b00 	orr.w	fp, fp, r0
 8009696:	3304      	adds	r3, #4
 8009698:	e7ae      	b.n	80095f8 <__gethex+0x15c>
 800969a:	45b1      	cmp	r9, r6
 800969c:	d8ea      	bhi.n	8009674 <__gethex+0x1d8>
 800969e:	492b      	ldr	r1, [pc, #172]	@ (800974c <__gethex+0x2b0>)
 80096a0:	9303      	str	r3, [sp, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff fe03 	bl	80092b0 <strncmp>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1e1      	bne.n	8009674 <__gethex+0x1d8>
 80096b0:	e7a2      	b.n	80095f8 <__gethex+0x15c>
 80096b2:	1ea9      	subs	r1, r5, #2
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7fd ff20 	bl	80074fa <__any_on>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0c2      	beq.n	8009644 <__gethex+0x1a8>
 80096be:	f04f 0903 	mov.w	r9, #3
 80096c2:	e7c1      	b.n	8009648 <__gethex+0x1ac>
 80096c4:	da09      	bge.n	80096da <__gethex+0x23e>
 80096c6:	1b75      	subs	r5, r6, r5
 80096c8:	4621      	mov	r1, r4
 80096ca:	9801      	ldr	r0, [sp, #4]
 80096cc:	462a      	mov	r2, r5
 80096ce:	f7fd fcdb 	bl	8007088 <__lshift>
 80096d2:	1b7f      	subs	r7, r7, r5
 80096d4:	4604      	mov	r4, r0
 80096d6:	f100 0a14 	add.w	sl, r0, #20
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	e7b8      	b.n	8009652 <__gethex+0x1b6>
 80096e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80096e4:	42bd      	cmp	r5, r7
 80096e6:	dd6f      	ble.n	80097c8 <__gethex+0x32c>
 80096e8:	1bed      	subs	r5, r5, r7
 80096ea:	42ae      	cmp	r6, r5
 80096ec:	dc34      	bgt.n	8009758 <__gethex+0x2bc>
 80096ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d022      	beq.n	800973c <__gethex+0x2a0>
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d024      	beq.n	8009744 <__gethex+0x2a8>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d115      	bne.n	800972a <__gethex+0x28e>
 80096fe:	42ae      	cmp	r6, r5
 8009700:	d113      	bne.n	800972a <__gethex+0x28e>
 8009702:	2e01      	cmp	r6, #1
 8009704:	d10b      	bne.n	800971e <__gethex+0x282>
 8009706:	9a02      	ldr	r2, [sp, #8]
 8009708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	2301      	movs	r3, #1
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	f8ca 3000 	str.w	r3, [sl]
 8009716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009718:	2562      	movs	r5, #98	@ 0x62
 800971a:	601c      	str	r4, [r3, #0]
 800971c:	e73a      	b.n	8009594 <__gethex+0xf8>
 800971e:	1e71      	subs	r1, r6, #1
 8009720:	4620      	mov	r0, r4
 8009722:	f7fd feea 	bl	80074fa <__any_on>
 8009726:	2800      	cmp	r0, #0
 8009728:	d1ed      	bne.n	8009706 <__gethex+0x26a>
 800972a:	9801      	ldr	r0, [sp, #4]
 800972c:	4621      	mov	r1, r4
 800972e:	f7fd fa9b 	bl	8006c68 <_Bfree>
 8009732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009734:	2300      	movs	r3, #0
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	2550      	movs	r5, #80	@ 0x50
 800973a:	e72b      	b.n	8009594 <__gethex+0xf8>
 800973c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1f3      	bne.n	800972a <__gethex+0x28e>
 8009742:	e7e0      	b.n	8009706 <__gethex+0x26a>
 8009744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1dd      	bne.n	8009706 <__gethex+0x26a>
 800974a:	e7ee      	b.n	800972a <__gethex+0x28e>
 800974c:	08009e51 	.word	0x08009e51
 8009750:	08009de7 	.word	0x08009de7
 8009754:	08009ec3 	.word	0x08009ec3
 8009758:	1e6f      	subs	r7, r5, #1
 800975a:	f1b9 0f00 	cmp.w	r9, #0
 800975e:	d130      	bne.n	80097c2 <__gethex+0x326>
 8009760:	b127      	cbz	r7, 800976c <__gethex+0x2d0>
 8009762:	4639      	mov	r1, r7
 8009764:	4620      	mov	r0, r4
 8009766:	f7fd fec8 	bl	80074fa <__any_on>
 800976a:	4681      	mov	r9, r0
 800976c:	117a      	asrs	r2, r7, #5
 800976e:	2301      	movs	r3, #1
 8009770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009774:	f007 071f 	and.w	r7, r7, #31
 8009778:	40bb      	lsls	r3, r7
 800977a:	4213      	tst	r3, r2
 800977c:	4629      	mov	r1, r5
 800977e:	4620      	mov	r0, r4
 8009780:	bf18      	it	ne
 8009782:	f049 0902 	orrne.w	r9, r9, #2
 8009786:	f7ff fe21 	bl	80093cc <rshift>
 800978a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800978e:	1b76      	subs	r6, r6, r5
 8009790:	2502      	movs	r5, #2
 8009792:	f1b9 0f00 	cmp.w	r9, #0
 8009796:	d047      	beq.n	8009828 <__gethex+0x38c>
 8009798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d015      	beq.n	80097cc <__gethex+0x330>
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d017      	beq.n	80097d4 <__gethex+0x338>
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d109      	bne.n	80097bc <__gethex+0x320>
 80097a8:	f019 0f02 	tst.w	r9, #2
 80097ac:	d006      	beq.n	80097bc <__gethex+0x320>
 80097ae:	f8da 3000 	ldr.w	r3, [sl]
 80097b2:	ea49 0903 	orr.w	r9, r9, r3
 80097b6:	f019 0f01 	tst.w	r9, #1
 80097ba:	d10e      	bne.n	80097da <__gethex+0x33e>
 80097bc:	f045 0510 	orr.w	r5, r5, #16
 80097c0:	e032      	b.n	8009828 <__gethex+0x38c>
 80097c2:	f04f 0901 	mov.w	r9, #1
 80097c6:	e7d1      	b.n	800976c <__gethex+0x2d0>
 80097c8:	2501      	movs	r5, #1
 80097ca:	e7e2      	b.n	8009792 <__gethex+0x2f6>
 80097cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ce:	f1c3 0301 	rsb	r3, r3, #1
 80097d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0f0      	beq.n	80097bc <__gethex+0x320>
 80097da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097de:	f104 0314 	add.w	r3, r4, #20
 80097e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097ea:	f04f 0c00 	mov.w	ip, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80097f8:	d01b      	beq.n	8009832 <__gethex+0x396>
 80097fa:	3201      	adds	r2, #1
 80097fc:	6002      	str	r2, [r0, #0]
 80097fe:	2d02      	cmp	r5, #2
 8009800:	f104 0314 	add.w	r3, r4, #20
 8009804:	d13c      	bne.n	8009880 <__gethex+0x3e4>
 8009806:	f8d8 2000 	ldr.w	r2, [r8]
 800980a:	3a01      	subs	r2, #1
 800980c:	42b2      	cmp	r2, r6
 800980e:	d109      	bne.n	8009824 <__gethex+0x388>
 8009810:	1171      	asrs	r1, r6, #5
 8009812:	2201      	movs	r2, #1
 8009814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009818:	f006 061f 	and.w	r6, r6, #31
 800981c:	fa02 f606 	lsl.w	r6, r2, r6
 8009820:	421e      	tst	r6, r3
 8009822:	d13a      	bne.n	800989a <__gethex+0x3fe>
 8009824:	f045 0520 	orr.w	r5, r5, #32
 8009828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800982a:	601c      	str	r4, [r3, #0]
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	601f      	str	r7, [r3, #0]
 8009830:	e6b0      	b.n	8009594 <__gethex+0xf8>
 8009832:	4299      	cmp	r1, r3
 8009834:	f843 cc04 	str.w	ip, [r3, #-4]
 8009838:	d8d9      	bhi.n	80097ee <__gethex+0x352>
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	459b      	cmp	fp, r3
 800983e:	db17      	blt.n	8009870 <__gethex+0x3d4>
 8009840:	6861      	ldr	r1, [r4, #4]
 8009842:	9801      	ldr	r0, [sp, #4]
 8009844:	3101      	adds	r1, #1
 8009846:	f7fd f9cf 	bl	8006be8 <_Balloc>
 800984a:	4681      	mov	r9, r0
 800984c:	b918      	cbnz	r0, 8009856 <__gethex+0x3ba>
 800984e:	4b1a      	ldr	r3, [pc, #104]	@ (80098b8 <__gethex+0x41c>)
 8009850:	4602      	mov	r2, r0
 8009852:	2184      	movs	r1, #132	@ 0x84
 8009854:	e6c5      	b.n	80095e2 <__gethex+0x146>
 8009856:	6922      	ldr	r2, [r4, #16]
 8009858:	3202      	adds	r2, #2
 800985a:	f104 010c 	add.w	r1, r4, #12
 800985e:	0092      	lsls	r2, r2, #2
 8009860:	300c      	adds	r0, #12
 8009862:	f7ff fd69 	bl	8009338 <memcpy>
 8009866:	4621      	mov	r1, r4
 8009868:	9801      	ldr	r0, [sp, #4]
 800986a:	f7fd f9fd 	bl	8006c68 <_Bfree>
 800986e:	464c      	mov	r4, r9
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009878:	6122      	str	r2, [r4, #16]
 800987a:	2201      	movs	r2, #1
 800987c:	615a      	str	r2, [r3, #20]
 800987e:	e7be      	b.n	80097fe <__gethex+0x362>
 8009880:	6922      	ldr	r2, [r4, #16]
 8009882:	455a      	cmp	r2, fp
 8009884:	dd0b      	ble.n	800989e <__gethex+0x402>
 8009886:	2101      	movs	r1, #1
 8009888:	4620      	mov	r0, r4
 800988a:	f7ff fd9f 	bl	80093cc <rshift>
 800988e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009892:	3701      	adds	r7, #1
 8009894:	42bb      	cmp	r3, r7
 8009896:	f6ff aee0 	blt.w	800965a <__gethex+0x1be>
 800989a:	2501      	movs	r5, #1
 800989c:	e7c2      	b.n	8009824 <__gethex+0x388>
 800989e:	f016 061f 	ands.w	r6, r6, #31
 80098a2:	d0fa      	beq.n	800989a <__gethex+0x3fe>
 80098a4:	4453      	add	r3, sl
 80098a6:	f1c6 0620 	rsb	r6, r6, #32
 80098aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098ae:	f7fd fa8d 	bl	8006dcc <__hi0bits>
 80098b2:	42b0      	cmp	r0, r6
 80098b4:	dbe7      	blt.n	8009886 <__gethex+0x3ea>
 80098b6:	e7f0      	b.n	800989a <__gethex+0x3fe>
 80098b8:	08009de7 	.word	0x08009de7

080098bc <L_shift>:
 80098bc:	f1c2 0208 	rsb	r2, r2, #8
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	b570      	push	{r4, r5, r6, lr}
 80098c4:	f1c2 0620 	rsb	r6, r2, #32
 80098c8:	6843      	ldr	r3, [r0, #4]
 80098ca:	6804      	ldr	r4, [r0, #0]
 80098cc:	fa03 f506 	lsl.w	r5, r3, r6
 80098d0:	432c      	orrs	r4, r5
 80098d2:	40d3      	lsrs	r3, r2
 80098d4:	6004      	str	r4, [r0, #0]
 80098d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80098da:	4288      	cmp	r0, r1
 80098dc:	d3f4      	bcc.n	80098c8 <L_shift+0xc>
 80098de:	bd70      	pop	{r4, r5, r6, pc}

080098e0 <__match>:
 80098e0:	b530      	push	{r4, r5, lr}
 80098e2:	6803      	ldr	r3, [r0, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ea:	b914      	cbnz	r4, 80098f2 <__match+0x12>
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	bd30      	pop	{r4, r5, pc}
 80098f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80098fa:	2d19      	cmp	r5, #25
 80098fc:	bf98      	it	ls
 80098fe:	3220      	addls	r2, #32
 8009900:	42a2      	cmp	r2, r4
 8009902:	d0f0      	beq.n	80098e6 <__match+0x6>
 8009904:	2000      	movs	r0, #0
 8009906:	e7f3      	b.n	80098f0 <__match+0x10>

08009908 <__hexnan>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	680b      	ldr	r3, [r1, #0]
 800990e:	6801      	ldr	r1, [r0, #0]
 8009910:	115e      	asrs	r6, r3, #5
 8009912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009916:	f013 031f 	ands.w	r3, r3, #31
 800991a:	b087      	sub	sp, #28
 800991c:	bf18      	it	ne
 800991e:	3604      	addne	r6, #4
 8009920:	2500      	movs	r5, #0
 8009922:	1f37      	subs	r7, r6, #4
 8009924:	4682      	mov	sl, r0
 8009926:	4690      	mov	r8, r2
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	f846 5c04 	str.w	r5, [r6, #-4]
 800992e:	46b9      	mov	r9, r7
 8009930:	463c      	mov	r4, r7
 8009932:	9502      	str	r5, [sp, #8]
 8009934:	46ab      	mov	fp, r5
 8009936:	784a      	ldrb	r2, [r1, #1]
 8009938:	1c4b      	adds	r3, r1, #1
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	b342      	cbz	r2, 8009990 <__hexnan+0x88>
 800993e:	4610      	mov	r0, r2
 8009940:	9105      	str	r1, [sp, #20]
 8009942:	9204      	str	r2, [sp, #16]
 8009944:	f7ff fd94 	bl	8009470 <__hexdig_fun>
 8009948:	2800      	cmp	r0, #0
 800994a:	d151      	bne.n	80099f0 <__hexnan+0xe8>
 800994c:	9a04      	ldr	r2, [sp, #16]
 800994e:	9905      	ldr	r1, [sp, #20]
 8009950:	2a20      	cmp	r2, #32
 8009952:	d818      	bhi.n	8009986 <__hexnan+0x7e>
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	459b      	cmp	fp, r3
 8009958:	dd13      	ble.n	8009982 <__hexnan+0x7a>
 800995a:	454c      	cmp	r4, r9
 800995c:	d206      	bcs.n	800996c <__hexnan+0x64>
 800995e:	2d07      	cmp	r5, #7
 8009960:	dc04      	bgt.n	800996c <__hexnan+0x64>
 8009962:	462a      	mov	r2, r5
 8009964:	4649      	mov	r1, r9
 8009966:	4620      	mov	r0, r4
 8009968:	f7ff ffa8 	bl	80098bc <L_shift>
 800996c:	4544      	cmp	r4, r8
 800996e:	d952      	bls.n	8009a16 <__hexnan+0x10e>
 8009970:	2300      	movs	r3, #0
 8009972:	f1a4 0904 	sub.w	r9, r4, #4
 8009976:	f844 3c04 	str.w	r3, [r4, #-4]
 800997a:	f8cd b008 	str.w	fp, [sp, #8]
 800997e:	464c      	mov	r4, r9
 8009980:	461d      	mov	r5, r3
 8009982:	9903      	ldr	r1, [sp, #12]
 8009984:	e7d7      	b.n	8009936 <__hexnan+0x2e>
 8009986:	2a29      	cmp	r2, #41	@ 0x29
 8009988:	d157      	bne.n	8009a3a <__hexnan+0x132>
 800998a:	3102      	adds	r1, #2
 800998c:	f8ca 1000 	str.w	r1, [sl]
 8009990:	f1bb 0f00 	cmp.w	fp, #0
 8009994:	d051      	beq.n	8009a3a <__hexnan+0x132>
 8009996:	454c      	cmp	r4, r9
 8009998:	d206      	bcs.n	80099a8 <__hexnan+0xa0>
 800999a:	2d07      	cmp	r5, #7
 800999c:	dc04      	bgt.n	80099a8 <__hexnan+0xa0>
 800999e:	462a      	mov	r2, r5
 80099a0:	4649      	mov	r1, r9
 80099a2:	4620      	mov	r0, r4
 80099a4:	f7ff ff8a 	bl	80098bc <L_shift>
 80099a8:	4544      	cmp	r4, r8
 80099aa:	d936      	bls.n	8009a1a <__hexnan+0x112>
 80099ac:	f1a8 0204 	sub.w	r2, r8, #4
 80099b0:	4623      	mov	r3, r4
 80099b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80099b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80099ba:	429f      	cmp	r7, r3
 80099bc:	d2f9      	bcs.n	80099b2 <__hexnan+0xaa>
 80099be:	1b3b      	subs	r3, r7, r4
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	3304      	adds	r3, #4
 80099c6:	3401      	adds	r4, #1
 80099c8:	3e03      	subs	r6, #3
 80099ca:	42b4      	cmp	r4, r6
 80099cc:	bf88      	it	hi
 80099ce:	2304      	movhi	r3, #4
 80099d0:	4443      	add	r3, r8
 80099d2:	2200      	movs	r2, #0
 80099d4:	f843 2b04 	str.w	r2, [r3], #4
 80099d8:	429f      	cmp	r7, r3
 80099da:	d2fb      	bcs.n	80099d4 <__hexnan+0xcc>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	b91b      	cbnz	r3, 80099e8 <__hexnan+0xe0>
 80099e0:	4547      	cmp	r7, r8
 80099e2:	d128      	bne.n	8009a36 <__hexnan+0x12e>
 80099e4:	2301      	movs	r3, #1
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	2005      	movs	r0, #5
 80099ea:	b007      	add	sp, #28
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	3501      	adds	r5, #1
 80099f2:	2d08      	cmp	r5, #8
 80099f4:	f10b 0b01 	add.w	fp, fp, #1
 80099f8:	dd06      	ble.n	8009a08 <__hexnan+0x100>
 80099fa:	4544      	cmp	r4, r8
 80099fc:	d9c1      	bls.n	8009982 <__hexnan+0x7a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a04:	2501      	movs	r5, #1
 8009a06:	3c04      	subs	r4, #4
 8009a08:	6822      	ldr	r2, [r4, #0]
 8009a0a:	f000 000f 	and.w	r0, r0, #15
 8009a0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a12:	6020      	str	r0, [r4, #0]
 8009a14:	e7b5      	b.n	8009982 <__hexnan+0x7a>
 8009a16:	2508      	movs	r5, #8
 8009a18:	e7b3      	b.n	8009982 <__hexnan+0x7a>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0dd      	beq.n	80099dc <__hexnan+0xd4>
 8009a20:	f1c3 0320 	rsb	r3, r3, #32
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a28:	40da      	lsrs	r2, r3
 8009a2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a34:	e7d2      	b.n	80099dc <__hexnan+0xd4>
 8009a36:	3f04      	subs	r7, #4
 8009a38:	e7d0      	b.n	80099dc <__hexnan+0xd4>
 8009a3a:	2004      	movs	r0, #4
 8009a3c:	e7d5      	b.n	80099ea <__hexnan+0xe2>

08009a3e <__ascii_mbtowc>:
 8009a3e:	b082      	sub	sp, #8
 8009a40:	b901      	cbnz	r1, 8009a44 <__ascii_mbtowc+0x6>
 8009a42:	a901      	add	r1, sp, #4
 8009a44:	b142      	cbz	r2, 8009a58 <__ascii_mbtowc+0x1a>
 8009a46:	b14b      	cbz	r3, 8009a5c <__ascii_mbtowc+0x1e>
 8009a48:	7813      	ldrb	r3, [r2, #0]
 8009a4a:	600b      	str	r3, [r1, #0]
 8009a4c:	7812      	ldrb	r2, [r2, #0]
 8009a4e:	1e10      	subs	r0, r2, #0
 8009a50:	bf18      	it	ne
 8009a52:	2001      	movne	r0, #1
 8009a54:	b002      	add	sp, #8
 8009a56:	4770      	bx	lr
 8009a58:	4610      	mov	r0, r2
 8009a5a:	e7fb      	b.n	8009a54 <__ascii_mbtowc+0x16>
 8009a5c:	f06f 0001 	mvn.w	r0, #1
 8009a60:	e7f8      	b.n	8009a54 <__ascii_mbtowc+0x16>

08009a62 <_realloc_r>:
 8009a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	4607      	mov	r7, r0
 8009a68:	4614      	mov	r4, r2
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	b921      	cbnz	r1, 8009a78 <_realloc_r+0x16>
 8009a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a72:	4611      	mov	r1, r2
 8009a74:	f7fd b82c 	b.w	8006ad0 <_malloc_r>
 8009a78:	b92a      	cbnz	r2, 8009a86 <_realloc_r+0x24>
 8009a7a:	f7fc ffb5 	bl	80069e8 <_free_r>
 8009a7e:	4625      	mov	r5, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a86:	f000 f8b2 	bl	8009bee <_malloc_usable_size_r>
 8009a8a:	4284      	cmp	r4, r0
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	d802      	bhi.n	8009a96 <_realloc_r+0x34>
 8009a90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a94:	d8f4      	bhi.n	8009a80 <_realloc_r+0x1e>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7fd f819 	bl	8006ad0 <_malloc_r>
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	b908      	cbnz	r0, 8009aa6 <_realloc_r+0x44>
 8009aa2:	4645      	mov	r5, r8
 8009aa4:	e7ec      	b.n	8009a80 <_realloc_r+0x1e>
 8009aa6:	42b4      	cmp	r4, r6
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4629      	mov	r1, r5
 8009aac:	bf28      	it	cs
 8009aae:	4632      	movcs	r2, r6
 8009ab0:	f7ff fc42 	bl	8009338 <memcpy>
 8009ab4:	4629      	mov	r1, r5
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f7fc ff96 	bl	80069e8 <_free_r>
 8009abc:	e7f1      	b.n	8009aa2 <_realloc_r+0x40>
	...

08009ac0 <_strtoul_l.isra.0>:
 8009ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	4e34      	ldr	r6, [pc, #208]	@ (8009b98 <_strtoul_l.isra.0+0xd8>)
 8009ac6:	4686      	mov	lr, r0
 8009ac8:	460d      	mov	r5, r1
 8009aca:	4628      	mov	r0, r5
 8009acc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad0:	5d37      	ldrb	r7, [r6, r4]
 8009ad2:	f017 0708 	ands.w	r7, r7, #8
 8009ad6:	d1f8      	bne.n	8009aca <_strtoul_l.isra.0+0xa>
 8009ad8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ada:	d110      	bne.n	8009afe <_strtoul_l.isra.0+0x3e>
 8009adc:	782c      	ldrb	r4, [r5, #0]
 8009ade:	2701      	movs	r7, #1
 8009ae0:	1c85      	adds	r5, r0, #2
 8009ae2:	f033 0010 	bics.w	r0, r3, #16
 8009ae6:	d115      	bne.n	8009b14 <_strtoul_l.isra.0+0x54>
 8009ae8:	2c30      	cmp	r4, #48	@ 0x30
 8009aea:	d10d      	bne.n	8009b08 <_strtoul_l.isra.0+0x48>
 8009aec:	7828      	ldrb	r0, [r5, #0]
 8009aee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009af2:	2858      	cmp	r0, #88	@ 0x58
 8009af4:	d108      	bne.n	8009b08 <_strtoul_l.isra.0+0x48>
 8009af6:	786c      	ldrb	r4, [r5, #1]
 8009af8:	3502      	adds	r5, #2
 8009afa:	2310      	movs	r3, #16
 8009afc:	e00a      	b.n	8009b14 <_strtoul_l.isra.0+0x54>
 8009afe:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b00:	bf04      	itt	eq
 8009b02:	782c      	ldrbeq	r4, [r5, #0]
 8009b04:	1c85      	addeq	r5, r0, #2
 8009b06:	e7ec      	b.n	8009ae2 <_strtoul_l.isra.0+0x22>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f6      	bne.n	8009afa <_strtoul_l.isra.0+0x3a>
 8009b0c:	2c30      	cmp	r4, #48	@ 0x30
 8009b0e:	bf14      	ite	ne
 8009b10:	230a      	movne	r3, #10
 8009b12:	2308      	moveq	r3, #8
 8009b14:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009b18:	2600      	movs	r6, #0
 8009b1a:	fbb8 f8f3 	udiv	r8, r8, r3
 8009b1e:	fb03 f908 	mul.w	r9, r3, r8
 8009b22:	ea6f 0909 	mvn.w	r9, r9
 8009b26:	4630      	mov	r0, r6
 8009b28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009b2c:	f1bc 0f09 	cmp.w	ip, #9
 8009b30:	d810      	bhi.n	8009b54 <_strtoul_l.isra.0+0x94>
 8009b32:	4664      	mov	r4, ip
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	dd1e      	ble.n	8009b76 <_strtoul_l.isra.0+0xb6>
 8009b38:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8009b3c:	d007      	beq.n	8009b4e <_strtoul_l.isra.0+0x8e>
 8009b3e:	4580      	cmp	r8, r0
 8009b40:	d316      	bcc.n	8009b70 <_strtoul_l.isra.0+0xb0>
 8009b42:	d101      	bne.n	8009b48 <_strtoul_l.isra.0+0x88>
 8009b44:	45a1      	cmp	r9, r4
 8009b46:	db13      	blt.n	8009b70 <_strtoul_l.isra.0+0xb0>
 8009b48:	fb00 4003 	mla	r0, r0, r3, r4
 8009b4c:	2601      	movs	r6, #1
 8009b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b52:	e7e9      	b.n	8009b28 <_strtoul_l.isra.0+0x68>
 8009b54:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009b58:	f1bc 0f19 	cmp.w	ip, #25
 8009b5c:	d801      	bhi.n	8009b62 <_strtoul_l.isra.0+0xa2>
 8009b5e:	3c37      	subs	r4, #55	@ 0x37
 8009b60:	e7e8      	b.n	8009b34 <_strtoul_l.isra.0+0x74>
 8009b62:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009b66:	f1bc 0f19 	cmp.w	ip, #25
 8009b6a:	d804      	bhi.n	8009b76 <_strtoul_l.isra.0+0xb6>
 8009b6c:	3c57      	subs	r4, #87	@ 0x57
 8009b6e:	e7e1      	b.n	8009b34 <_strtoul_l.isra.0+0x74>
 8009b70:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009b74:	e7eb      	b.n	8009b4e <_strtoul_l.isra.0+0x8e>
 8009b76:	1c73      	adds	r3, r6, #1
 8009b78:	d106      	bne.n	8009b88 <_strtoul_l.isra.0+0xc8>
 8009b7a:	2322      	movs	r3, #34	@ 0x22
 8009b7c:	f8ce 3000 	str.w	r3, [lr]
 8009b80:	4630      	mov	r0, r6
 8009b82:	b932      	cbnz	r2, 8009b92 <_strtoul_l.isra.0+0xd2>
 8009b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b88:	b107      	cbz	r7, 8009b8c <_strtoul_l.isra.0+0xcc>
 8009b8a:	4240      	negs	r0, r0
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	d0f9      	beq.n	8009b84 <_strtoul_l.isra.0+0xc4>
 8009b90:	b106      	cbz	r6, 8009b94 <_strtoul_l.isra.0+0xd4>
 8009b92:	1e69      	subs	r1, r5, #1
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	e7f5      	b.n	8009b84 <_strtoul_l.isra.0+0xc4>
 8009b98:	0800a071 	.word	0x0800a071

08009b9c <_strtoul_r>:
 8009b9c:	f7ff bf90 	b.w	8009ac0 <_strtoul_l.isra.0>

08009ba0 <__ascii_wctomb>:
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	b141      	cbz	r1, 8009bb8 <__ascii_wctomb+0x18>
 8009ba6:	2aff      	cmp	r2, #255	@ 0xff
 8009ba8:	d904      	bls.n	8009bb4 <__ascii_wctomb+0x14>
 8009baa:	228a      	movs	r2, #138	@ 0x8a
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bb2:	4770      	bx	lr
 8009bb4:	700a      	strb	r2, [r1, #0]
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	4770      	bx	lr
	...

08009bbc <fiprintf>:
 8009bbc:	b40e      	push	{r1, r2, r3}
 8009bbe:	b503      	push	{r0, r1, lr}
 8009bc0:	4601      	mov	r1, r0
 8009bc2:	ab03      	add	r3, sp, #12
 8009bc4:	4805      	ldr	r0, [pc, #20]	@ (8009bdc <fiprintf+0x20>)
 8009bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f7fe fcbb 	bl	8008548 <_vfiprintf_r>
 8009bd2:	b002      	add	sp, #8
 8009bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd8:	b003      	add	sp, #12
 8009bda:	4770      	bx	lr
 8009bdc:	20000018 	.word	0x20000018

08009be0 <abort>:
 8009be0:	b508      	push	{r3, lr}
 8009be2:	2006      	movs	r0, #6
 8009be4:	f000 f834 	bl	8009c50 <raise>
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7f7 fc79 	bl	80014e0 <_exit>

08009bee <_malloc_usable_size_r>:
 8009bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf2:	1f18      	subs	r0, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbc      	itt	lt
 8009bf8:	580b      	ldrlt	r3, [r1, r0]
 8009bfa:	18c0      	addlt	r0, r0, r3
 8009bfc:	4770      	bx	lr

08009bfe <_raise_r>:
 8009bfe:	291f      	cmp	r1, #31
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4605      	mov	r5, r0
 8009c04:	460c      	mov	r4, r1
 8009c06:	d904      	bls.n	8009c12 <_raise_r+0x14>
 8009c08:	2316      	movs	r3, #22
 8009c0a:	6003      	str	r3, [r0, #0]
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c14:	b112      	cbz	r2, 8009c1c <_raise_r+0x1e>
 8009c16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c1a:	b94b      	cbnz	r3, 8009c30 <_raise_r+0x32>
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f000 f831 	bl	8009c84 <_getpid_r>
 8009c22:	4622      	mov	r2, r4
 8009c24:	4601      	mov	r1, r0
 8009c26:	4628      	mov	r0, r5
 8009c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2c:	f000 b818 	b.w	8009c60 <_kill_r>
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d00a      	beq.n	8009c4a <_raise_r+0x4c>
 8009c34:	1c59      	adds	r1, r3, #1
 8009c36:	d103      	bne.n	8009c40 <_raise_r+0x42>
 8009c38:	2316      	movs	r3, #22
 8009c3a:	6003      	str	r3, [r0, #0]
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	e7e7      	b.n	8009c10 <_raise_r+0x12>
 8009c40:	2100      	movs	r1, #0
 8009c42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c46:	4620      	mov	r0, r4
 8009c48:	4798      	blx	r3
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e7e0      	b.n	8009c10 <_raise_r+0x12>
	...

08009c50 <raise>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <raise+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f7ff bfd2 	b.w	8009bfe <_raise_r>
 8009c5a:	bf00      	nop
 8009c5c:	20000018 	.word	0x20000018

08009c60 <_kill_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	@ (8009c80 <_kill_r+0x20>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	f7f7 fc27 	bl	80014c0 <_kill>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d102      	bne.n	8009c7c <_kill_r+0x1c>
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	b103      	cbz	r3, 8009c7c <_kill_r+0x1c>
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000408 	.word	0x20000408

08009c84 <_getpid_r>:
 8009c84:	f7f7 bc14 	b.w	80014b0 <_getpid>

08009c88 <_init>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr

08009c94 <_fini>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr
