
CAN_NORMAL_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009900  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08009aa0  08009aa0  0000aaa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f5c  08009f5c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f5c  08009f5c  0000af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f64  08009f64  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  0000af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f68  08009f68  0000af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009f6c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be1d  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd0  00000000  00000000  00017021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  00018bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a7  00000000  00000000  000194b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f3f  00000000  00000000  00019b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae08  00000000  00000000  0003aa9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e52  00000000  00000000  000458a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a6f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b68  00000000  00000000  0010a73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010e2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a88 	.word	0x08009a88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009a88 	.word	0x08009a88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d0c:	1d39      	adds	r1, r7, #4
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	2201      	movs	r2, #1
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <__io_putchar+0x20>)
 8000d16:	f003 f851 	bl	8003dbc <HAL_UART_Transmit>
  return ch;
 8000d1a:	687b      	ldr	r3, [r7, #4]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000218 	.word	0x20000218

08000d28 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <__io_getchar+0x38>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2208      	movs	r2, #8
 8000d38:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d3a:	1df9      	adds	r1, r7, #7
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d40:	2201      	movs	r2, #1
 8000d42:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <__io_getchar+0x38>)
 8000d44:	f003 f8c3 	bl	8003ece <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <__io_getchar+0x38>)
 8000d52:	f003 f833 	bl	8003dbc <HAL_UART_Transmit>
  return ch;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000218 	.word	0x20000218

08000d64 <floatToUpperBytes>:
 *  uint8_t* byteArr: Array of bytes with size of 8
 *
 * Function:
 * 	converts a 4 byte float value and fill in bytes 0-3 in an 8 bytes array in little endian
*/
void floatToUpperBytes(float val, uint8_t* byteArr) {
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d6e:	6038      	str	r0, [r7, #0]
  union {
    float var;
    uint8_t buf[sizeof(float)];
  } u;
  u.var = val;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
  memcpy(byteArr, u.buf, sizeof(float)); // Write to bytes 0–3
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <setVelocityMode>:
//	axisState[0] = 0x07; // ENCODER_OFFSET_CALIBRATION
//
//	HAL_CAN_AddTxMessage(&hcan, &TxHeader, axisState, &TxMailbox);
}

void setVelocityMode(CAN_TxHeaderTypeDef TxHeader) {
 8000d88:	b084      	sub	sp, #16
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	f107 0c18 	add.w	ip, r7, #24
 8000d94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t velData[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
	uint8_t velGain[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]

	// Setting vel_gains = 0.015, vel_integrator_gain = 0
	// Refer to the tuning guide for more details:
	// https://docs.odriverobotics.com/v/latest/guides/tuning.html
	TxHeader.StdId = (NODE_ID << 5) | 0x1b;
 8000daa:	231b      	movs	r3, #27
 8000dac:	61bb      	str	r3, [r7, #24]
	floatToUpperBytes(0.015f, velGain);
 8000dae:	463b      	mov	r3, r7
 8000db0:	4618      	mov	r0, r3
 8000db2:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8000e18 <setVelocityMode+0x90>
 8000db6:	f7ff ffd5 	bl	8000d64 <floatToUpperBytes>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, velGain, &TxMailbox);
 8000dba:	463a      	mov	r2, r7
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <setVelocityMode+0x94>)
 8000dbe:	f107 0118 	add.w	r1, r7, #24
 8000dc2:	4817      	ldr	r0, [pc, #92]	@ (8000e20 <setVelocityMode+0x98>)
 8000dc4:	f000 fd79 	bl	80018ba <HAL_CAN_AddTxMessage>

	TxHeader.StdId = (NODE_ID << 5) | 0x0b;
 8000dc8:	230b      	movs	r3, #11
 8000dca:	61bb      	str	r3, [r7, #24]
	velData[0] = 0x02; // InputMode.PASSTHROUGH
 8000dcc:	2302      	movs	r3, #2
 8000dce:	723b      	strb	r3, [r7, #8]
	velData[4] = 0x01; // ControlMode.VELOCITY_CONTROL
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	733b      	strb	r3, [r7, #12]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, velData, &TxMailbox);
 8000dd4:	f107 0208 	add.w	r2, r7, #8
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <setVelocityMode+0x94>)
 8000dda:	f107 0118 	add.w	r1, r7, #24
 8000dde:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <setVelocityMode+0x98>)
 8000de0:	f000 fd6b 	bl	80018ba <HAL_CAN_AddTxMessage>

	memset(velData, 0, sizeof(velData)); // Clear all previous data
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	2208      	movs	r2, #8
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fd88 	bl	8005902 <memset>

	TxHeader.StdId = (NODE_ID << 5) | 0x07;
 8000df2:	2307      	movs	r3, #7
 8000df4:	61bb      	str	r3, [r7, #24]
	velData[0] = 0x08; // AXIS_STATE_CLOSED_LOOP_CONTROL
 8000df6:	2308      	movs	r3, #8
 8000df8:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, velData, &TxMailbox);
 8000dfa:	f107 0208 	add.w	r2, r7, #8
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <setVelocityMode+0x94>)
 8000e00:	f107 0118 	add.w	r1, r7, #24
 8000e04:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <setVelocityMode+0x98>)
 8000e06:	f000 fd58 	bl	80018ba <HAL_CAN_AddTxMessage>
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e14:	b004      	add	sp, #16
 8000e16:	4770      	bx	lr
 8000e18:	3c75c28f 	.word	0x3c75c28f
 8000e1c:	200002c0 	.word	0x200002c0
 8000e20:	200001f0 	.word	0x200001f0

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f000 fba1 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f871 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e32:	f000 f933 	bl	800109c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e36:	f000 f901 	bl	800103c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000e3a:	f000 f8c9 	bl	8000fd0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000e3e:	482e      	ldr	r0, [pc, #184]	@ (8000ef8 <main+0xd4>)
 8000e40:	f000 fcf7 	bl	8001832 <HAL_CAN_Start>
  setvbuf(stdin, NULL, _IONBF, 0); // for scanf setup, avoiding errors in syscalls.c
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <main+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6858      	ldr	r0, [r3, #4]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 fc3e 	bl	80056d0 <setvbuf>

  int cmd_id = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  int dlc = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  float value = 0.0;
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  // motorCalibration(TxHeader); // calibrate the motor for one time

  while (1)
  {
	if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	f107 0208 	add.w	r2, r7, #8
 8000e68:	f107 010c 	add.w	r1, r7, #12
 8000e6c:	4824      	ldr	r0, [pc, #144]	@ (8000f00 <main+0xdc>)
 8000e6e:	f004 fc1d 	bl	80056ac <iscanf>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d1f4      	bne.n	8000e62 <main+0x3e>
	{
		printf("packet sent: CMD:0x%x, DLC:%d, VALUE:%f \r\n", cmd_id, dlc, value);
 8000e78:	68fc      	ldr	r4, [r7, #12]
 8000e7a:	68bd      	ldr	r5, [r7, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb6a 	bl	8000558 <__aeabi_f2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	e9cd 2300 	strd	r2, r3, [sp]
 8000e8c:	462a      	mov	r2, r5
 8000e8e:	4621      	mov	r1, r4
 8000e90:	481c      	ldr	r0, [pc, #112]	@ (8000f04 <main+0xe0>)
 8000e92:	f004 fbf9 	bl	8005688 <iprintf>
		memset(TxData, 0, sizeof(TxData));
 8000e96:	2208      	movs	r2, #8
 8000e98:	2100      	movs	r1, #0
 8000e9a:	481b      	ldr	r0, [pc, #108]	@ (8000f08 <main+0xe4>)
 8000e9c:	f004 fd31 	bl	8005902 <memset>

		switch (cmd_id) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b0d      	cmp	r3, #13
 8000ea4:	d10b      	bne.n	8000ebe <main+0x9a>
		    case 0x0d:
		        // code block
		    	setVelocityMode(TxHeader);
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <main+0xe8>)
 8000ea8:	466c      	mov	r4, sp
 8000eaa:	f103 0210 	add.w	r2, r3, #16
 8000eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb8:	f7ff ff66 	bl	8000d88 <setVelocityMode>
		        break;
 8000ebc:	bf00      	nop
		    default:
		}

		TxHeader.StdId = (NODE_ID << 5) | cmd_id;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <main+0xe8>)
 8000ec4:	601a      	str	r2, [r3, #0]
		TxHeader.IDE = CAN_ID_STD;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <main+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <main+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
		TxHeader.DLC = dlc;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <main+0xe8>)
 8000ed8:	611a      	str	r2, [r3, #16]

		// example usage: "0x0D 8 2.0" VELOCITY_MODE with DLC = 8 and spinning at INPUT_VEL 2 rev/s
		floatToUpperBytes(value, TxData); // setting bytes 0-3
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <main+0xe4>)
 8000ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee4:	f7ff ff3e 	bl	8000d64 <floatToUpperBytes>
		//		floatToLowerBytes(lowerVal, TxData); // setting bytes 4-7
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <main+0xec>)
 8000eea:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <main+0xe4>)
 8000eec:	4907      	ldr	r1, [pc, #28]	@ (8000f0c <main+0xe8>)
 8000eee:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <main+0xd4>)
 8000ef0:	f000 fce3 	bl	80018ba <HAL_CAN_AddTxMessage>
	if (scanf("%x %d %f", &cmd_id, &dlc, &value) == 3)
 8000ef4:	e7b5      	b.n	8000e62 <main+0x3e>
 8000ef6:	bf00      	nop
 8000ef8:	200001f0 	.word	0x200001f0
 8000efc:	20000018 	.word	0x20000018
 8000f00:	08009aa0 	.word	0x08009aa0
 8000f04:	08009aac 	.word	0x08009aac
 8000f08:	200002b8 	.word	0x200002b8
 8000f0c:	200002a0 	.word	0x200002a0
 8000f10:	200002c0 	.word	0x200002c0

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0a6      	sub	sp, #152	@ 0x98
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f1e:	2228      	movs	r2, #40	@ 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fced 	bl	8005902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2258      	movs	r2, #88	@ 0x58
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fcdf 	bl	8005902 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f60:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fa82 	bl	800247c <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f8fb 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2302      	movs	r3, #2
 8000f88:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f98:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fa90 	bl	80034c4 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000faa:	f000 f8e5 	bl	8001178 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fc95 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 f8d8 	bl	8001178 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3798      	adds	r7, #152	@ 0x98
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_CAN_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_CAN_Init+0x64>)
 8000fee:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000ff2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_CAN_Init+0x64>)
 8000ff6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ffa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <MX_CAN_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_CAN_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_CAN_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_CAN_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_CAN_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_CAN_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_CAN_Init+0x64>)
 8001022:	f000 fb0b 	bl	800163c <HAL_CAN_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 f8a4 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001f0 	.word	0x200001f0
 8001038:	40006400 	.word	0x40006400

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001042:	4a15      	ldr	r2, [pc, #84]	@ (8001098 <MX_USART2_UART_Init+0x5c>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_USART2_UART_Init+0x58>)
 8001080:	f002 fe4e 	bl	8003d20 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108a:	f000 f875 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000218 	.word	0x20000218
 8001098:	40004400 	.word	0x40004400

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a28      	ldr	r2, [pc, #160]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <MX_GPIO_Init+0xd4>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <MX_GPIO_Init+0xd4>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_GPIO_Init+0xd4>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f001 f973 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001124:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480f      	ldr	r0, [pc, #60]	@ (8001174 <MX_GPIO_Init+0xd8>)
 8001136:	f000 ffdb 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800113a:	2320      	movs	r3, #32
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f000 ffcc 	bl	80020f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2028      	movs	r0, #40	@ 0x28
 800115e:	f000 ff90 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001162:	2028      	movs	r0, #40	@ 0x28
 8001164:	f000 ffa9 	bl	80020ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	48000800 	.word	0x48000800

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <Error_Handler+0x8>

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_MspInit+0x44>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <HAL_MspInit+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <HAL_MspInit+0x44>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_MspInit+0x44>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_MspInit+0x44>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_MspInit+0x44>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ba:	2007      	movs	r0, #7
 80011bc:	f000 ff56 	bl	800206c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <HAL_CAN_MspInit+0x90>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d131      	bne.n	8001252 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 80011f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a15      	ldr	r2, [pc, #84]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_CAN_MspInit+0x94>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800121e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001230:	2309      	movs	r3, #9
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f000 ff57 	bl	80020f0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2014      	movs	r0, #20
 8001248:	f000 ff1b 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800124c:	2014      	movs	r0, #20
 800124e:	f000 ff34 	bl	80020ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40006400 	.word	0x40006400
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_UART_MspInit+0x7c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d128      	bne.n	80012d8 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a16      	ldr	r2, [pc, #88]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	6153      	str	r3, [r2, #20]
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_UART_MspInit+0x80>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012b6:	230c      	movs	r3, #12
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d4:	f000 ff0c 	bl	80020f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	@ 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <NMI_Handler+0x4>

080012f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <MemManage_Handler+0x4>

08001300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <UsageFault_Handler+0x4>

08001310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133e:	f000 f95d 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800134e:	f000 fb84 	bl	8001a5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001f0 	.word	0x200001f0

0800135c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001360:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001364:	f001 f866 	bl	8002434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_kill>:

int _kill(int pid, int sig)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001386:	f004 fb0f 	bl	80059a8 <__errno>
 800138a:	4603      	mov	r3, r0
 800138c:	2216      	movs	r2, #22
 800138e:	601a      	str	r2, [r3, #0]
  return -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_exit>:

void _exit (int status)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ffe7 	bl	800137c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ae:	bf00      	nop
 80013b0:	e7fd      	b.n	80013ae <_exit+0x12>

080013b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e00a      	b.n	80013da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c4:	f7ff fcb0 	bl	8000d28 <__io_getchar>
 80013c8:	4601      	mov	r1, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	60ba      	str	r2, [r7, #8]
 80013d0:	b2ca      	uxtb	r2, r1
 80013d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbf0      	blt.n	80013c4 <_read+0x12>
  }

  return len;
 80013e2:	687b      	ldr	r3, [r7, #4]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e009      	b.n	8001412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	60ba      	str	r2, [r7, #8]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc7c 	bl	8000d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbf1      	blt.n	80013fe <_write+0x12>
  }
  return len;
 800141a:	687b      	ldr	r3, [r7, #4]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_close>:

int _close(int file)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800144c:	605a      	str	r2, [r3, #4]
  return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_isatty>:

int _isatty(int file)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f004 fa74 	bl	80059a8 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20010000 	.word	0x20010000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	200002c4 	.word	0x200002c4
 80014f4:	20000418 	.word	0x20000418

080014f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001554 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff ffea 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	@ (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	@ (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f004 fa33 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7ff fc69 	bl	8000e24 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001554:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001560:	08009f6c 	.word	0x08009f6c
  ldr r2, =_sbss
 8001564:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001568:	20000418 	.word	0x20000418

0800156c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_2_IRQHandler>
	...

08001570 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_Init+0x28>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_Init+0x28>)
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 fd73 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f808 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fdfa 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fd8b 	bl	80020d6 <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d8:	f000 fd53 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008
 8001620:	200002c8 	.word	0x200002c8

08001624 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;  
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200002c8 	.word	0x200002c8

0800163c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0ed      	b.n	800182a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fdb6 	bl	80011cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001670:	f7ff ffd8 	bl	8001624 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff ffd4 	bl	8001624 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0c5      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0e5      	beq.n	8001678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0202 	bic.w	r2, r2, #2
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016bc:	f7ff ffb2 	bl	8001624 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c2:	e012      	b.n	80016ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c4:	f7ff ffae 	bl	8001624 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d90b      	bls.n	80016ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e09f      	b.n	800182a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e5      	bne.n	80016c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e5b      	ldrb	r3, [r3, #25]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7e9b      	ldrb	r3, [r3, #26]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0220 	bic.w	r2, r2, #32
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7edb      	ldrb	r3, [r3, #27]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0210 	bic.w	r2, r2, #16
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0210 	orr.w	r2, r2, #16
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f1b      	ldrb	r3, [r3, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d108      	bne.n	80017ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e007      	b.n	80017ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7f5b      	ldrb	r3, [r3, #29]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d108      	bne.n	80017e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0204 	orr.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e007      	b.n	80017f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	ea42 0103 	orr.w	r1, r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d12e      	bne.n	80018a4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800185e:	f7ff fee1 	bl	8001624 <HAL_GetTick>
 8001862:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001864:	e012      	b.n	800188c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001866:	f7ff fedd 	bl	8001624 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b0a      	cmp	r3, #10
 8001872:	d90b      	bls.n	800188c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2205      	movs	r2, #5
 8001884:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e012      	b.n	80018b2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e5      	bne.n	8001866 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e006      	b.n	80018b2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b089      	sub	sp, #36	@ 0x24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d003      	beq.n	80018e6 <HAL_CAN_AddTxMessage+0x2c>
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	f040 80ad 	bne.w	8001a40 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8095 	beq.w	8001a30 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	0e1b      	lsrs	r3, r3, #24
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001910:	2201      	movs	r2, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	409a      	lsls	r2, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	6809      	ldr	r1, [r1, #0]
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3318      	adds	r3, #24
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	440b      	add	r3, r1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e00f      	b.n	800195e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001948:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001952:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3318      	adds	r3, #24
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3318      	adds	r3, #24
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	440b      	add	r3, r1
 800196e:	3304      	adds	r3, #4
 8001970:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	7d1b      	ldrb	r3, [r3, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d111      	bne.n	800199e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3318      	adds	r3, #24
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	6811      	ldr	r1, [r2, #0]
 800198e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3318      	adds	r3, #24
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	440b      	add	r3, r1
 800199a:	3304      	adds	r3, #4
 800199c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3307      	adds	r3, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	061a      	lsls	r2, r3, #24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3306      	adds	r3, #6
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3305      	adds	r3, #5
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	4313      	orrs	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	3204      	adds	r2, #4
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	4610      	mov	r0, r2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	6811      	ldr	r1, [r2, #0]
 80019c6:	ea43 0200 	orr.w	r2, r3, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3303      	adds	r3, #3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	061a      	lsls	r2, r3, #24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4313      	orrs	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4610      	mov	r0, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6811      	ldr	r1, [r2, #0]
 80019fc:	ea43 0200 	orr.w	r2, r3, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3318      	adds	r3, #24
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	440b      	add	r3, r1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e00e      	b.n	8001a4e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e006      	b.n	8001a4e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
  }
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b08a      	sub	sp, #40	@ 0x28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d07c      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d023      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f983 	bl	8001dc8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ac2:	e016      	b.n	8001af2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	e00c      	b.n	8001af2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	e002      	b.n	8001af2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f989 	bl	8001e04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d024      	beq.n	8001b46 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f963 	bl	8001ddc <HAL_CAN_TxMailbox1CompleteCallback>
 8001b16:	e016      	b.n	8001b46 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	e00c      	b.n	8001b46 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3e:	e002      	b.n	8001b46 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f969 	bl	8001e18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d024      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f943 	bl	8001df0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b6a:	e016      	b.n	8001b9a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7e:	e00c      	b.n	8001b9a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	e002      	b.n	8001b9a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f949 	bl	8001e2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f93a 	bl	8001e54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f921 	bl	8001e40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00c      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f91c 	bl	8001e7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f903 	bl	8001e68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f906 	bl	8001e90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8ff 	bl	8001ea4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d07b      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d072      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d043      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03e      	beq.n	8001da0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d28:	2b60      	cmp	r3, #96	@ 0x60
 8001d2a:	d02b      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x32a>
 8001d2c:	2b60      	cmp	r3, #96	@ 0x60
 8001d2e:	d82e      	bhi.n	8001d8e <HAL_CAN_IRQHandler+0x334>
 8001d30:	2b50      	cmp	r3, #80	@ 0x50
 8001d32:	d022      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x320>
 8001d34:	2b50      	cmp	r3, #80	@ 0x50
 8001d36:	d82a      	bhi.n	8001d8e <HAL_CAN_IRQHandler+0x334>
 8001d38:	2b40      	cmp	r3, #64	@ 0x40
 8001d3a:	d019      	beq.n	8001d70 <HAL_CAN_IRQHandler+0x316>
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	d826      	bhi.n	8001d8e <HAL_CAN_IRQHandler+0x334>
 8001d40:	2b30      	cmp	r3, #48	@ 0x30
 8001d42:	d010      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x30c>
 8001d44:	2b30      	cmp	r3, #48	@ 0x30
 8001d46:	d822      	bhi.n	8001d8e <HAL_CAN_IRQHandler+0x334>
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d002      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x2f8>
 8001d4c:	2b20      	cmp	r3, #32
 8001d4e:	d005      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d50:	e01d      	b.n	8001d8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d5a:	e019      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d64:	e014      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d6e:	e00f      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d78:	e00a      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d82:	e005      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d8c:	e000      	b.n	8001d90 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2204      	movs	r2, #4
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f87c 	bl	8001eb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e160      	b.n	80023c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8152 	beq.w	80023bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x40>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0201 	and.w	r2, r3, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d017      	beq.n	80021ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d123      	bne.n	8002222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	6939      	ldr	r1, [r7, #16]
 800221e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80ac 	beq.w	80023bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002264:	4b5e      	ldr	r3, [pc, #376]	@ (80023e0 <HAL_GPIO_Init+0x2f0>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a5d      	ldr	r2, [pc, #372]	@ (80023e0 <HAL_GPIO_Init+0x2f0>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b5b      	ldr	r3, [pc, #364]	@ (80023e0 <HAL_GPIO_Init+0x2f0>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800227c:	4a59      	ldr	r2, [pc, #356]	@ (80023e4 <HAL_GPIO_Init+0x2f4>)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022a6:	d025      	beq.n	80022f4 <HAL_GPIO_Init+0x204>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4f      	ldr	r2, [pc, #316]	@ (80023e8 <HAL_GPIO_Init+0x2f8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d01f      	beq.n	80022f0 <HAL_GPIO_Init+0x200>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <HAL_GPIO_Init+0x2fc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d019      	beq.n	80022ec <HAL_GPIO_Init+0x1fc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a4d      	ldr	r2, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x300>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x1f8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a4c      	ldr	r2, [pc, #304]	@ (80023f4 <HAL_GPIO_Init+0x304>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1f4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a4b      	ldr	r2, [pc, #300]	@ (80023f8 <HAL_GPIO_Init+0x308>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1f0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a4a      	ldr	r2, [pc, #296]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1ec>
 80022d8:	2306      	movs	r3, #6
 80022da:	e00c      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022dc:	2307      	movs	r3, #7
 80022de:	e00a      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e0:	2305      	movs	r3, #5
 80022e2:	e008      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022e8:	2303      	movs	r3, #3
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x206>
 80022f4:	2300      	movs	r3, #0
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002306:	4937      	ldr	r1, [pc, #220]	@ (80023e4 <HAL_GPIO_Init+0x2f4>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002338:	4a31      	ldr	r2, [pc, #196]	@ (8002400 <HAL_GPIO_Init+0x310>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002362:	4a27      	ldr	r2, [pc, #156]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_GPIO_Init+0x310>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800238c:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <HAL_GPIO_Init+0x310>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002392:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <HAL_GPIO_Init+0x310>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f ae97 	bne.w	8002100 <HAL_GPIO_Init+0x10>
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	48000400 	.word	0x48000400
 80023ec:	48000800 	.word	0x48000800
 80023f0:	48000c00 	.word	0x48000c00
 80023f4:	48001000 	.word	0x48001000
 80023f8:	48001400 	.word	0x48001400
 80023fc:	48001800 	.word	0x48001800
 8002400:	40010400 	.word	0x40010400

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002420:	e002      	b.n	8002428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f806 	bl	8002464 <HAL_GPIO_EXTI_Callback>
  }
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002482:	af00      	add	r7, sp, #0
 8002484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002488:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800248e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002492:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f001 b80a 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8161 	beq.w	800277a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024b8:	4bae      	ldr	r3, [pc, #696]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4bab      	ldr	r3, [pc, #684]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d157      	bne.n	8002580 <HAL_RCC_OscConfig+0x104>
 80024d0:	4ba8      	ldr	r3, [pc, #672]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024dc:	d150      	bne.n	8002580 <HAL_RCC_OscConfig+0x104>
 80024de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024fe:	d802      	bhi.n	8002506 <HAL_RCC_OscConfig+0x8a>
 8002500:	4b9c      	ldr	r3, [pc, #624]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0xb6>
 8002506:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800250a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800251a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800251e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002522:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800252e:	4b91      	ldr	r3, [pc, #580]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002536:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800253a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800253e:	fa92 f2a2 	rbit	r2, r2
 8002542:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002546:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f002 021f 	and.w	r2, r2, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8108 	beq.w	8002778 <HAL_RCC_OscConfig+0x2fc>
 8002568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f040 80ff 	bne.w	8002778 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f000 bf9b 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d106      	bne.n	80025a0 <HAL_RCC_OscConfig+0x124>
 8002592:	4b78      	ldr	r3, [pc, #480]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a77      	ldr	r2, [pc, #476]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e036      	b.n	800260e <HAL_RCC_OscConfig+0x192>
 80025a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x14e>
 80025b0:	4b70      	ldr	r3, [pc, #448]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a6f      	ldr	r2, [pc, #444]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6c      	ldr	r2, [pc, #432]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e021      	b.n	800260e <HAL_RCC_OscConfig+0x192>
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x17a>
 80025dc:	4b65      	ldr	r3, [pc, #404]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a64      	ldr	r2, [pc, #400]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a61      	ldr	r2, [pc, #388]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x192>
 80025f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b5c      	ldr	r3, [pc, #368]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5b      	ldr	r2, [pc, #364]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002608:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002612:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d054      	beq.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff f801 	bl	8001624 <HAL_GetTick>
 8002622:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fffc 	bl	8001624 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	@ 0x64
 8002636:	d902      	bls.n	800263e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	f000 bf3c 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 800263e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002642:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002652:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b3f      	cmp	r3, #63	@ 0x3f
 800265e:	d802      	bhi.n	8002666 <HAL_RCC_OscConfig+0x1ea>
 8002660:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x216>
 8002666:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800266a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800267a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002682:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800268e:	4b39      	ldr	r3, [pc, #228]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002696:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800269a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800269e:	fa92 f2a2 	rbit	r2, r2
 80026a2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80026a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80026aa:	fab2 f282 	clz	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0b0      	beq.n	8002628 <HAL_RCC_OscConfig+0x1ac>
 80026c6:	e058      	b.n	800277a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe ffac 	bl	8001624 <HAL_GetTick>
 80026cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d2:	f7fe ffa7 	bl	8001624 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d902      	bls.n	80026e8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	f000 bee7 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 80026e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ec:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80026f4:	fa93 f3a3 	rbit	r3, r3
 80026f8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80026fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b3f      	cmp	r3, #63	@ 0x3f
 8002708:	d802      	bhi.n	8002710 <HAL_RCC_OscConfig+0x294>
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x2c0>
 8002710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002714:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002728:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800272c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002738:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <HAL_RCC_OscConfig+0x2f8>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002740:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002744:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002748:	fa92 f2a2 	rbit	r2, r2
 800274c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002750:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f042 0220 	orr.w	r2, r2, #32
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f002 021f 	and.w	r2, r2, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1b0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x256>
 8002770:	e003      	b.n	800277a <HAL_RCC_OscConfig+0x2fe>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 816d 	beq.w	8002a6a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002790:	4bcd      	ldr	r3, [pc, #820]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800279c:	4bca      	ldr	r3, [pc, #808]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d16e      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
 80027a8:	4bc7      	ldr	r3, [pc, #796]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80027b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b4:	d167      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80027c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80027d4:	d802      	bhi.n	80027dc <HAL_RCC_OscConfig+0x360>
 80027d6:	4bbc      	ldr	r3, [pc, #752]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e013      	b.n	8002804 <HAL_RCC_OscConfig+0x388>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80027f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002800:	4bb1      	ldr	r3, [pc, #708]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2202      	movs	r2, #2
 8002806:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800280a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800280e:	fa92 f2a2 	rbit	r2, r2
 8002812:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002816:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCC_OscConfig+0x3d0>
 8002836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d002      	beq.n	800284c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f000 be35 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b9e      	ldr	r3, [pc, #632]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002858:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	21f8      	movs	r1, #248	@ 0xf8
 8002862:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800286a:	fa91 f1a1 	rbit	r1, r1
 800286e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002872:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002876:	fab1 f181 	clz	r1, r1
 800287a:	b2c9      	uxtb	r1, r1
 800287c:	408b      	lsls	r3, r1
 800287e:	4992      	ldr	r1, [pc, #584]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002884:	e0f1      	b.n	8002a6a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8083 	beq.w	800299e <HAL_RCC_OscConfig+0x522>
 8002898:	2301      	movs	r3, #1
 800289a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80028aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe feae 	bl	8001624 <HAL_GetTick>
 80028c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ce:	f7fe fea9 	bl	8001624 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	f000 bde9 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80028f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b3f      	cmp	r3, #63	@ 0x3f
 8002902:	d802      	bhi.n	800290a <HAL_RCC_OscConfig+0x48e>
 8002904:	4b70      	ldr	r3, [pc, #448]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e013      	b.n	8002932 <HAL_RCC_OscConfig+0x4b6>
 800290a:	2302      	movs	r3, #2
 800290c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002922:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800292e:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2202      	movs	r2, #2
 8002934:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002938:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002944:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f002 021f 	and.w	r2, r2, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0b4      	beq.n	80028ce <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b58      	ldr	r3, [pc, #352]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	21f8      	movs	r1, #248	@ 0xf8
 800297a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002982:	fa91 f1a1 	rbit	r1, r1
 8002986:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800298a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800298e:	fab1 f181 	clz	r1, r1
 8002992:	b2c9      	uxtb	r1, r1
 8002994:	408b      	lsls	r3, r1
 8002996:	494c      	ldr	r1, [pc, #304]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e065      	b.n	8002a6a <HAL_RCC_OscConfig+0x5ee>
 800299e:	2301      	movs	r3, #1
 80029a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80029b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	461a      	mov	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fe2b 	bl	8001624 <HAL_GetTick>
 80029ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe fe26 	bl	8001624 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f000 bd66 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80029fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a08:	d802      	bhi.n	8002a10 <HAL_RCC_OscConfig+0x594>
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e013      	b.n	8002a38 <HAL_RCC_OscConfig+0x5bc>
 8002a10:	2302      	movs	r3, #2
 8002a12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_RCC_OscConfig+0x64c>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002a3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002a4e:	fab2 f282 	clz	r2, r2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f042 0220 	orr.w	r2, r2, #32
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f002 021f 	and.w	r2, r2, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1b4      	bne.n	80029d4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8119 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8082 	beq.w	8002b96 <HAL_RCC_OscConfig+0x71a>
 8002a92:	2301      	movs	r3, #1
 8002a94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002aa4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_RCC_OscConfig+0x650>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fdb2 	bl	8001624 <HAL_GetTick>
 8002ac0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	e00f      	b.n	8002ae6 <HAL_RCC_OscConfig+0x66a>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fda8 	bl	8001624 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d902      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	f000 bce8 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002af0:	fa93 f2a3 	rbit	r2, r3
 8002af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4bb0      	ldr	r3, [pc, #704]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b52:	2102      	movs	r1, #2
 8002b54:	6019      	str	r1, [r3, #0]
 8002b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f1a3 	rbit	r1, r3
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b6c:	6019      	str	r1, [r3, #0]
  return result;
 8002b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b72:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d09d      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x654>
 8002b94:	e08d      	b.n	8002cb2 <HAL_RCC_OscConfig+0x836>
 8002b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fa93 f2a3 	rbit	r2, r3
 8002bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002bb8:	601a      	str	r2, [r3, #0]
  return result;
 8002bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002bc2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e0c <HAL_RCC_OscConfig+0x990>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fd24 	bl	8001624 <HAL_GetTick>
 8002bdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7fe fd1f 	bl	8001624 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	f000 bc5f 	b.w	80034b6 <HAL_RCC_OscConfig+0x103a>
 8002bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c48:	2202      	movs	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	fa93 f2a3 	rbit	r2, r3
 8002c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002c62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c70:	2102      	movs	r1, #2
 8002c72:	6019      	str	r1, [r3, #0]
 8002c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f1a3 	rbit	r1, r3
 8002c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c86:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c8a:	6019      	str	r1, [r3, #0]
  return result;
 8002c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d197      	bne.n	8002be2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 819c 	beq.w	8003000 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cce:	4b4e      	ldr	r3, [pc, #312]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a4a      	ldr	r2, [pc, #296]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b48      	ldr	r3, [pc, #288]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x994>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <HAL_RCC_OscConfig+0x994>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a3d      	ldr	r2, [pc, #244]	@ (8002e10 <HAL_RCC_OscConfig+0x994>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d20:	f7fe fc80 	bl	8001624 <HAL_GetTick>
 8002d24:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe fc7b 	bl	8001624 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e3bb      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <HAL_RCC_OscConfig+0x994>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ef      	beq.n	8002d2a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x8ec>
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	e035      	b.n	8002dd4 <HAL_RCC_OscConfig+0x958>
 8002d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x916>
 8002d78:	4b23      	ldr	r3, [pc, #140]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e020      	b.n	8002dd4 <HAL_RCC_OscConfig+0x958>
 8002d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x940>
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6213      	str	r3, [r2, #32]
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a15      	ldr	r2, [pc, #84]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x958>
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_RCC_OscConfig+0x98c>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8085 	beq.w	8002ef0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fc1d 	bl	8001624 <HAL_GetTick>
 8002dea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dee:	e011      	b.n	8002e14 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fc18 	bl	8001624 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e356      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	10908120 	.word	0x10908120
 8002e10:	40007000 	.word	0x40007000
 8002e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e18:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e24:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e40:	2202      	movs	r2, #2
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e48:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fa93 f2a3 	rbit	r2, r3
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e5a:	601a      	str	r2, [r3, #0]
  return result;
 8002e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_OscConfig+0xa00>
 8002e76:	4b98      	ldr	r3, [pc, #608]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	e013      	b.n	8002ea4 <HAL_RCC_OscConfig+0xa28>
 8002e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e80:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ea8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002eac:	2102      	movs	r1, #2
 8002eae:	6011      	str	r1, [r2, #0]
 8002eb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eb4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	fa92 f1a2 	rbit	r1, r2
 8002ebe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ec2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002ec6:	6011      	str	r1, [r2, #0]
  return result;
 8002ec8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ecc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d080      	beq.n	8002df0 <HAL_RCC_OscConfig+0x974>
 8002eee:	e07d      	b.n	8002fec <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fb98 	bl	8001624 <HAL_GetTick>
 8002ef4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fb93 	bl	8001624 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e2d1      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 8002f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f16:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f22:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f30:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f54:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002f58:	601a      	str	r2, [r3, #0]
  return result;
 8002f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_OscConfig+0xafe>
 8002f74:	4b58      	ldr	r3, [pc, #352]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	e013      	b.n	8002fa2 <HAL_RCC_OscConfig+0xb26>
 8002f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f98:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fa6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002faa:	2102      	movs	r1, #2
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fb2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	fa92 f1a2 	rbit	r1, r2
 8002fbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fc0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002fc4:	6011      	str	r1, [r2, #0]
  return result;
 8002fc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fca:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d186      	bne.n	8002efa <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fec:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4a37      	ldr	r2, [pc, #220]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003004:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8251 	beq.w	80034b4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003012:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	f000 820f 	beq.w	800343e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003024:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b02      	cmp	r3, #2
 800302e:	f040 8165 	bne.w	80032fc <HAL_RCC_OscConfig+0xe80>
 8003032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003036:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800303a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003044:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003060:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800306c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fad4 	bl	8001624 <HAL_GetTick>
 800307c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003080:	e009      	b.n	8003096 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe facf 	bl	8001624 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e20f      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 8003096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800309e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fa93 f2a3 	rbit	r2, r3
 80030b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80030ba:	601a      	str	r2, [r3, #0]
  return result;
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80030c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80030ce:	d805      	bhi.n	80030dc <HAL_RCC_OscConfig+0xc60>
 80030d0:	4b01      	ldr	r3, [pc, #4]	@ (80030d8 <HAL_RCC_OscConfig+0xc5c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e02a      	b.n	800312c <HAL_RCC_OscConfig+0xcb0>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80030e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003106:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800310a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003114:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003122:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	4bca      	ldr	r3, [pc, #808]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003130:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003134:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800313e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fa92 f1a2 	rbit	r1, r2
 8003148:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800314c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003150:	6011      	str	r1, [r2, #0]
  return result;
 8003152:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003156:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fab2 f282 	clz	r2, r2
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f042 0220 	orr.w	r2, r2, #32
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d184      	bne.n	8003082 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003178:	4bb6      	ldr	r3, [pc, #728]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	f023 020f 	bic.w	r2, r3, #15
 8003180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003184:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	49b1      	ldr	r1, [pc, #708]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003192:	4bb0      	ldr	r3, [pc, #704]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800319a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a19      	ldr	r1, [r3, #32]
 80031a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	49a7      	ldr	r1, [pc, #668]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
 80031ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80031c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031cc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80031e8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	2301      	movs	r3, #1
 80031fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fa10 	bl	8001624 <HAL_GetTick>
 8003204:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fa0b 	bl	8001624 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e14b      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 800321e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003222:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003226:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003230:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	fa93 f2a3 	rbit	r2, r3
 800323a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003242:	601a      	str	r2, [r3, #0]
  return result;
 8003244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003248:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800324c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b3f      	cmp	r3, #63	@ 0x3f
 8003256:	d802      	bhi.n	800325e <HAL_RCC_OscConfig+0xde2>
 8003258:	4b7e      	ldr	r3, [pc, #504]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e027      	b.n	80032ae <HAL_RCC_OscConfig+0xe32>
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003266:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003270:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003288:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800328c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80032b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032ba:	6011      	str	r1, [r2, #0]
 80032bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032c0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	fa92 f1a2 	rbit	r1, r2
 80032ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032ce:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80032d2:	6011      	str	r1, [r2, #0]
  return result;
 80032d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80032d8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d087      	beq.n	800320a <HAL_RCC_OscConfig+0xd8e>
 80032fa:	e0db      	b.n	80034b4 <HAL_RCC_OscConfig+0x1038>
 80032fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003300:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003320:	601a      	str	r2, [r3, #0]
  return result;
 8003322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003326:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800332a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003336:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	461a      	mov	r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fe f96f 	bl	8001624 <HAL_GetTick>
 8003346:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334a:	e009      	b.n	8003360 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe f96a 	bl	8001624 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0aa      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003368:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003380:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003384:	601a      	str	r2, [r3, #0]
  return result;
 8003386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800338e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b3f      	cmp	r3, #63	@ 0x3f
 8003398:	d802      	bhi.n	80033a0 <HAL_RCC_OscConfig+0xf24>
 800339a:	4b2e      	ldr	r3, [pc, #184]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e027      	b.n	80033f0 <HAL_RCC_OscConfig+0xf74>
 80033a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80033a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fa93 f2a3 	rbit	r2, r3
 80033bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80033ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_OscConfig+0xfd8>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033f4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80033f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003402:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fa92 f1a2 	rbit	r1, r2
 800340c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003410:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003414:	6011      	str	r1, [r2, #0]
  return result;
 8003416:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800341a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d187      	bne.n	800334c <HAL_RCC_OscConfig+0xed0>
 800343c:	e03a      	b.n	80034b4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003442:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d104      	bne.n	8003458 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e031      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCC_OscConfig+0x1044>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003460:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_RCC_OscConfig+0x1044>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003468:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800346c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003470:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003474:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d117      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003480:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003484:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003494:	429a      	cmp	r2, r3
 8003496:	d10b      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b09e      	sub	sp, #120	@ 0x78
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e154      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b89      	ldr	r3, [pc, #548]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d910      	bls.n	800350c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b86      	ldr	r3, [pc, #536]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4984      	ldr	r1, [pc, #528]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b82      	ldr	r3, [pc, #520]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e13c      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b7b      	ldr	r3, [pc, #492]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4978      	ldr	r1, [pc, #480]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80cd 	beq.w	80036d2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d137      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xec>
 8003540:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003544:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800354e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b3f      	cmp	r3, #63	@ 0x3f
 8003558:	d802      	bhi.n	8003560 <HAL_RCC_ClockConfig+0x9c>
 800355a:	4b6b      	ldr	r3, [pc, #428]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	e00f      	b.n	8003580 <HAL_RCC_ClockConfig+0xbc>
 8003560:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	667b      	str	r3, [r7, #100]	@ 0x64
 800356e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003572:	663b      	str	r3, [r7, #96]	@ 0x60
 8003574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800357c:	4b62      	ldr	r3, [pc, #392]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003584:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003588:	fa92 f2a2 	rbit	r2, r2
 800358c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800358e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f042 0220 	orr.w	r2, r2, #32
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d171      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0ea      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d137      	bne.n	8003628 <HAL_RCC_ClockConfig+0x164>
 80035b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80035d0:	d802      	bhi.n	80035d8 <HAL_RCC_ClockConfig+0x114>
 80035d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_RCC_ClockConfig+0x134>
 80035d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f4:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80035fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d135      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ae      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
 8003628:	2302      	movs	r3, #2
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b3f      	cmp	r3, #63	@ 0x3f
 800363e:	d802      	bhi.n	8003646 <HAL_RCC_ClockConfig+0x182>
 8003640:	4b31      	ldr	r3, [pc, #196]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	e00d      	b.n	8003662 <HAL_RCC_ClockConfig+0x19e>
 8003646:	2302      	movs	r3, #2
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
 8003652:	2302      	movs	r3, #2
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	4b2a      	ldr	r3, [pc, #168]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	2202      	movs	r2, #2
 8003664:	61ba      	str	r2, [r7, #24]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	617a      	str	r2, [r7, #20]
  return result;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	f042 0220 	orr.w	r2, r2, #32
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	f002 021f 	and.w	r2, r2, #31
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e07a      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 0203 	bic.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	491a      	ldr	r1, [pc, #104]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a2:	f7fd ffbf 	bl	8001624 <HAL_GetTick>
 80036a6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036aa:	f7fd ffbb 	bl	8001624 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e062      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 020c 	and.w	r2, r3, #12
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d1eb      	bne.n	80036aa <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d215      	bcs.n	800370c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 0207 	bic.w	r2, r3, #7
 80036e8:	4906      	ldr	r1, [pc, #24]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f0:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <HAL_RCC_ClockConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d006      	beq.n	800370c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e041      	b.n	8003786 <HAL_RCC_ClockConfig+0x2c2>
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_RCC_ClockConfig+0x2cc>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	491a      	ldr	r1, [pc, #104]	@ (8003790 <HAL_RCC_ClockConfig+0x2cc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <HAL_RCC_ClockConfig+0x2cc>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4912      	ldr	r1, [pc, #72]	@ (8003790 <HAL_RCC_ClockConfig+0x2cc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800374a:	f000 f829 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800374e:	4601      	mov	r1, r0
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <HAL_RCC_ClockConfig+0x2cc>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	22f0      	movs	r2, #240	@ 0xf0
 800375a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	60fa      	str	r2, [r7, #12]
  return result;
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	40d3      	lsrs	r3, r2
 800376e:	4a09      	ldr	r2, [pc, #36]	@ (8003794 <HAL_RCC_ClockConfig+0x2d0>)
 8003770:	5cd3      	ldrb	r3, [r2, r3]
 8003772:	fa21 f303 	lsr.w	r3, r1, r3
 8003776:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <HAL_RCC_ClockConfig+0x2d4>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCC_ClockConfig+0x2d8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd ff0c 	bl	800159c <HAL_InitTick>
  
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3778      	adds	r7, #120	@ 0x78
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	08009ae4 	.word	0x08009ae4
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x98>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x30>
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x36>
 80037ce:	e029      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d0:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <HAL_RCC_GetSysClockFreq+0x9c>)
 80037d2:	613b      	str	r3, [r7, #16]
      break;
 80037d4:	e029      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0c9b      	lsrs	r3, r3, #18
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037e0:	5cd3      	ldrb	r3, [r2, r3]
 80037e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037ee:	5cd3      	ldrb	r3, [r2, r3]
 80037f0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037fc:	4a0f      	ldr	r2, [pc, #60]	@ (800383c <HAL_RCC_GetSysClockFreq+0x9c>)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e007      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800380e:	4a0b      	ldr	r2, [pc, #44]	@ (800383c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	fbb2 f2f3 	udiv	r2, r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	613b      	str	r3, [r7, #16]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003826:	613b      	str	r3, [r7, #16]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	693b      	ldr	r3, [r7, #16]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40021000 	.word	0x40021000
 800383c:	007a1200 	.word	0x007a1200
 8003840:	08009afc 	.word	0x08009afc
 8003844:	08009b0c 	.word	0x08009b0c

08003848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <HAL_RCC_GetHCLKFreq+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003866:	f7ff ffef 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 800386a:	4601      	mov	r1, r0
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003874:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003878:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	603a      	str	r2, [r7, #0]
  return result;
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	40d3      	lsrs	r3, r2
 800388c:	4a04      	ldr	r2, [pc, #16]	@ (80038a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	08009af4 	.word	0x08009af4

080038a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038aa:	f7ff ffcd 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 80038ae:	4601      	mov	r1, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80038b8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80038bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	fa92 f2a2 	rbit	r2, r2
 80038c4:	603a      	str	r2, [r7, #0]
  return result;
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	fab2 f282 	clz	r2, r2
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	40d3      	lsrs	r3, r2
 80038d0:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08009af4 	.word	0x08009af4

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b092      	sub	sp, #72	@ 0x48
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80d2 	beq.w	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10e      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003918:	4b4a      	ldr	r3, [pc, #296]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a49      	ldr	r2, [pc, #292]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003922:	61d3      	str	r3, [r2, #28]
 8003924:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a40      	ldr	r2, [pc, #256]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fd fe69 	bl	8001624 <HAL_GetTick>
 8003952:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fd fe65 	bl	8001624 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	@ 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1d4      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b37      	ldr	r3, [pc, #220]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003974:	4b33      	ldr	r3, [pc, #204]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800397e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8082 	beq.w	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003990:	429a      	cmp	r2, r3
 8003992:	d07a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003994:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2301      	movs	r3, #1
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	4b1c      	ldr	r3, [pc, #112]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	461a      	mov	r2, r3
 80039e2:	2300      	movs	r3, #0
 80039e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d049      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fd fe15 	bl	8001624 <HAL_GetTick>
 80039fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fe11 	bl	8001624 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e17e      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003a14:	2302      	movs	r3, #2
 8003a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a20:	2302      	movs	r3, #2
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a3e:	4b01      	ldr	r3, [pc, #4]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	e00d      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	10908100 	.word	0x10908100
 8003a50:	2302      	movs	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	2202      	movs	r2, #2
 8003a62:	613a      	str	r2, [r7, #16]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	fa92 f2a2 	rbit	r2, r2
 8003a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	fab2 f282 	clz	r2, r2
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f002 021f 	and.w	r2, r2, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0b9      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	498c      	ldr	r1, [pc, #560]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa4:	4b88      	ldr	r3, [pc, #544]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a87      	ldr	r2, [pc, #540]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abc:	4b82      	ldr	r3, [pc, #520]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	f023 0203 	bic.w	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	497f      	ldr	r1, [pc, #508]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ada:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4978      	ldr	r1, [pc, #480]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af8:	4b73      	ldr	r3, [pc, #460]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4970      	ldr	r1, [pc, #448]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b16:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f023 0210 	bic.w	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4969      	ldr	r1, [pc, #420]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b34:	4b64      	ldr	r3, [pc, #400]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	4961      	ldr	r1, [pc, #388]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f023 0220 	bic.w	r2, r3, #32
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	495a      	ldr	r1, [pc, #360]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b70:	4b55      	ldr	r3, [pc, #340]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	4952      	ldr	r1, [pc, #328]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	494b      	ldr	r1, [pc, #300]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bac:	4b46      	ldr	r3, [pc, #280]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	4943      	ldr	r1, [pc, #268]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bca:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	493c      	ldr	r1, [pc, #240]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003be8:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	4934      	ldr	r1, [pc, #208]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c06:	4b30      	ldr	r3, [pc, #192]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	492d      	ldr	r1, [pc, #180]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c24:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	4925      	ldr	r1, [pc, #148]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c42:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	491e      	ldr	r1, [pc, #120]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	4916      	ldr	r1, [pc, #88]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	490f      	ldr	r1, [pc, #60]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	4907      	ldr	r1, [pc, #28]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cba:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cce:	4913      	ldr	r1, [pc, #76]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cec:	490b      	ldr	r1, [pc, #44]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003cfe:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3748      	adds	r7, #72	@ 0x48
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e040      	b.n	8003db4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fa8e 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb4e 	bl	8004408 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f977 	bl	8004060 <UART_SetConfig>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e01b      	b.n	8003db4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fbcd 	bl	800454c <UART_CheckIdleState>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d177      	bne.n	8003ec4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Transmit+0x24>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e070      	b.n	8003ec6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	@ 0x21
 8003df0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df2:	f7fd fc17 	bl	8001624 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e10:	d108      	bne.n	8003e24 <HAL_UART_Transmit+0x68>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e003      	b.n	8003e2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e2c:	e02f      	b.n	8003e8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2180      	movs	r1, #128	@ 0x80
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fc2f 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e03b      	b.n	8003ec6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	b292      	uxth	r2, r2
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	3302      	adds	r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e007      	b.n	8003e7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1c9      	bne.n	8003e2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2140      	movs	r1, #64	@ 0x40
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fbf9 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e005      	b.n	8003ec6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08a      	sub	sp, #40	@ 0x28
 8003ed2:	af02      	add	r7, sp, #8
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	f040 80b6 	bne.w	8004056 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_UART_Receive+0x28>
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0ae      	b.n	8004058 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2222      	movs	r2, #34	@ 0x22
 8003f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f10:	f7fd fb88 	bl	8001624 <HAL_GetTick>
 8003f14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	d10e      	bne.n	8003f4e <HAL_UART_Receive+0x80>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_UART_Receive+0x76>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f42:	e02d      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	22ff      	movs	r2, #255	@ 0xff
 8003f48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f4c:	e028      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_UART_Receive+0xa4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Receive+0x9a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	@ 0xff
 8003f62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f66:	e01b      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	227f      	movs	r2, #127	@ 0x7f
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f70:	e016      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f7a:	d10d      	bne.n	8003f98 <HAL_UART_Receive+0xca>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_UART_Receive+0xc0>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	227f      	movs	r2, #127	@ 0x7f
 8003f88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f8c:	e008      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	223f      	movs	r2, #63	@ 0x3f
 8003f92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Receive+0xd2>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fa6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_UART_Receive+0xf6>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e003      	b.n	8003fcc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fcc:	e037      	b.n	800403e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2120      	movs	r1, #32
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fb5f 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e033      	b.n	8004058 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	8a7b      	ldrh	r3, [r7, #18]
 8004000:	4013      	ands	r3, r2
 8004002:	b29a      	uxth	r2, r3
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	3302      	adds	r3, #2
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e00d      	b.n	800402c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004016:	b29b      	uxth	r3, r3
 8004018:	b2da      	uxtb	r2, r3
 800401a:	8a7b      	ldrh	r3, [r7, #18]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4013      	ands	r3, r2
 8004020:	b2da      	uxtb	r2, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3301      	adds	r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1c1      	bne.n	8003fce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b92      	ldr	r3, [pc, #584]	@ (80042d4 <UART_SetConfig+0x274>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	430b      	orrs	r3, r1
 8004096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a80      	ldr	r2, [pc, #512]	@ (80042d8 <UART_SetConfig+0x278>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d120      	bne.n	800411e <UART_SetConfig+0xbe>
 80040dc:	4b7f      	ldr	r3, [pc, #508]	@ (80042dc <UART_SetConfig+0x27c>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d817      	bhi.n	8004118 <UART_SetConfig+0xb8>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <UART_SetConfig+0x90>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	08004113 	.word	0x08004113
 80040fc:	08004107 	.word	0x08004107
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0b5      	b.n	8004272 <UART_SetConfig+0x212>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e0b2      	b.n	8004272 <UART_SetConfig+0x212>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e0af      	b.n	8004272 <UART_SetConfig+0x212>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e0ac      	b.n	8004272 <UART_SetConfig+0x212>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e0a9      	b.n	8004272 <UART_SetConfig+0x212>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6f      	ldr	r2, [pc, #444]	@ (80042e0 <UART_SetConfig+0x280>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d124      	bne.n	8004172 <UART_SetConfig+0x112>
 8004128:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <UART_SetConfig+0x27c>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004130:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004134:	d011      	beq.n	800415a <UART_SetConfig+0xfa>
 8004136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800413a:	d817      	bhi.n	800416c <UART_SetConfig+0x10c>
 800413c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004140:	d011      	beq.n	8004166 <UART_SetConfig+0x106>
 8004142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004146:	d811      	bhi.n	800416c <UART_SetConfig+0x10c>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0xf4>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d006      	beq.n	8004160 <UART_SetConfig+0x100>
 8004152:	e00b      	b.n	800416c <UART_SetConfig+0x10c>
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e08b      	b.n	8004272 <UART_SetConfig+0x212>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e088      	b.n	8004272 <UART_SetConfig+0x212>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e085      	b.n	8004272 <UART_SetConfig+0x212>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e082      	b.n	8004272 <UART_SetConfig+0x212>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e07f      	b.n	8004272 <UART_SetConfig+0x212>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a5b      	ldr	r2, [pc, #364]	@ (80042e4 <UART_SetConfig+0x284>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d124      	bne.n	80041c6 <UART_SetConfig+0x166>
 800417c:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <UART_SetConfig+0x27c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004184:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004188:	d011      	beq.n	80041ae <UART_SetConfig+0x14e>
 800418a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800418e:	d817      	bhi.n	80041c0 <UART_SetConfig+0x160>
 8004190:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004194:	d011      	beq.n	80041ba <UART_SetConfig+0x15a>
 8004196:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800419a:	d811      	bhi.n	80041c0 <UART_SetConfig+0x160>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <UART_SetConfig+0x148>
 80041a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x154>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x160>
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e061      	b.n	8004272 <UART_SetConfig+0x212>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e05e      	b.n	8004272 <UART_SetConfig+0x212>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e05b      	b.n	8004272 <UART_SetConfig+0x212>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e058      	b.n	8004272 <UART_SetConfig+0x212>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e055      	b.n	8004272 <UART_SetConfig+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a47      	ldr	r2, [pc, #284]	@ (80042e8 <UART_SetConfig+0x288>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d124      	bne.n	800421a <UART_SetConfig+0x1ba>
 80041d0:	4b42      	ldr	r3, [pc, #264]	@ (80042dc <UART_SetConfig+0x27c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80041d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041dc:	d011      	beq.n	8004202 <UART_SetConfig+0x1a2>
 80041de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0x1b4>
 80041e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041e8:	d011      	beq.n	800420e <UART_SetConfig+0x1ae>
 80041ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ee:	d811      	bhi.n	8004214 <UART_SetConfig+0x1b4>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <UART_SetConfig+0x19c>
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x1a8>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x1b4>
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e037      	b.n	8004272 <UART_SetConfig+0x212>
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e034      	b.n	8004272 <UART_SetConfig+0x212>
 8004208:	2304      	movs	r3, #4
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e031      	b.n	8004272 <UART_SetConfig+0x212>
 800420e:	2308      	movs	r3, #8
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e02e      	b.n	8004272 <UART_SetConfig+0x212>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e02b      	b.n	8004272 <UART_SetConfig+0x212>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <UART_SetConfig+0x28c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d124      	bne.n	800426e <UART_SetConfig+0x20e>
 8004224:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <UART_SetConfig+0x27c>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800422c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004230:	d011      	beq.n	8004256 <UART_SetConfig+0x1f6>
 8004232:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004236:	d817      	bhi.n	8004268 <UART_SetConfig+0x208>
 8004238:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800423c:	d011      	beq.n	8004262 <UART_SetConfig+0x202>
 800423e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004242:	d811      	bhi.n	8004268 <UART_SetConfig+0x208>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <UART_SetConfig+0x1f0>
 8004248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424c:	d006      	beq.n	800425c <UART_SetConfig+0x1fc>
 800424e:	e00b      	b.n	8004268 <UART_SetConfig+0x208>
 8004250:	2300      	movs	r3, #0
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e00d      	b.n	8004272 <UART_SetConfig+0x212>
 8004256:	2302      	movs	r3, #2
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e00a      	b.n	8004272 <UART_SetConfig+0x212>
 800425c:	2304      	movs	r3, #4
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e007      	b.n	8004272 <UART_SetConfig+0x212>
 8004262:	2308      	movs	r3, #8
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e004      	b.n	8004272 <UART_SetConfig+0x212>
 8004268:	2310      	movs	r3, #16
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e001      	b.n	8004272 <UART_SetConfig+0x212>
 800426e:	2310      	movs	r3, #16
 8004270:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800427a:	d16b      	bne.n	8004354 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800427c:	7ffb      	ldrb	r3, [r7, #31]
 800427e:	2b08      	cmp	r3, #8
 8004280:	d838      	bhi.n	80042f4 <UART_SetConfig+0x294>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0x228>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042f5 	.word	0x080042f5
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	080042f5 	.word	0x080042f5
 80042a4:	080042f5 	.word	0x080042f5
 80042a8:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7ff fad8 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 80042b0:	61b8      	str	r0, [r7, #24]
        break;
 80042b2:	e024      	b.n	80042fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7ff faf6 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 80042b8:	61b8      	str	r0, [r7, #24]
        break;
 80042ba:	e020      	b.n	80042fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	@ (80042f0 <UART_SetConfig+0x290>)
 80042be:	61bb      	str	r3, [r7, #24]
        break;
 80042c0:	e01d      	b.n	80042fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7ff fa6d 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 80042c6:	61b8      	str	r0, [r7, #24]
        break;
 80042c8:	e019      	b.n	80042fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e015      	b.n	80042fe <UART_SetConfig+0x29e>
 80042d2:	bf00      	nop
 80042d4:	efff69f3 	.word	0xefff69f3
 80042d8:	40013800 	.word	0x40013800
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40004400 	.word	0x40004400
 80042e4:	40004800 	.word	0x40004800
 80042e8:	40004c00 	.word	0x40004c00
 80042ec:	40005000 	.word	0x40005000
 80042f0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	77bb      	strb	r3, [r7, #30]
        break;
 80042fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d073      	beq.n	80043ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	005a      	lsls	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	441a      	add	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d916      	bls.n	800434e <UART_SetConfig+0x2ee>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004326:	d212      	bcs.n	800434e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f023 030f 	bic.w	r3, r3, #15
 8004330:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	b29a      	uxth	r2, r3
 800433e:	89fb      	ldrh	r3, [r7, #14]
 8004340:	4313      	orrs	r3, r2
 8004342:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	89fa      	ldrh	r2, [r7, #14]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e04e      	b.n	80043ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	77bb      	strb	r3, [r7, #30]
 8004352:	e04b      	b.n	80043ec <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d827      	bhi.n	80043aa <UART_SetConfig+0x34a>
 800435a:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <UART_SetConfig+0x300>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004385 	.word	0x08004385
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004395 	.word	0x08004395
 800436c:	080043ab 	.word	0x080043ab
 8004370:	0800439b 	.word	0x0800439b
 8004374:	080043ab 	.word	0x080043ab
 8004378:	080043ab 	.word	0x080043ab
 800437c:	080043ab 	.word	0x080043ab
 8004380:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7ff fa6c 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8004388:	61b8      	str	r0, [r7, #24]
        break;
 800438a:	e013      	b.n	80043b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438c:	f7ff fa8a 	bl	80038a4 <HAL_RCC_GetPCLK2Freq>
 8004390:	61b8      	str	r0, [r7, #24]
        break;
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b1b      	ldr	r3, [pc, #108]	@ (8004404 <UART_SetConfig+0x3a4>)
 8004396:	61bb      	str	r3, [r7, #24]
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7ff fa01 	bl	80037a0 <HAL_RCC_GetSysClockFreq>
 800439e:	61b8      	str	r0, [r7, #24]
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a6:	61bb      	str	r3, [r7, #24]
        break;
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	77bb      	strb	r3, [r7, #30]
        break;
 80043b2:	bf00      	nop
    }

    if (pclk != 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d018      	beq.n	80043ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	085a      	lsrs	r2, r3, #1
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	441a      	add	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b0f      	cmp	r3, #15
 80043d2:	d909      	bls.n	80043e8 <UART_SetConfig+0x388>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043da:	d205      	bcs.n	80043e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	e001      	b.n	80043ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	007a1200 	.word	0x007a1200

08004408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004506:	d10a      	bne.n	800451e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b098      	sub	sp, #96	@ 0x60
 8004550:	af02      	add	r7, sp, #8
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800455c:	f7fd f862 	bl	8001624 <HAL_GetTick>
 8004560:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d12e      	bne.n	80045ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004570:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f88c 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d021      	beq.n	80045ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459e:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e062      	b.n	8004694 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d149      	bne.n	8004670 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f856 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03c      	beq.n	8004670 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	623b      	str	r3, [r7, #32]
   return(result);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800460a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004614:	633b      	str	r3, [r7, #48]	@ 0x30
 8004616:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800461a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60fb      	str	r3, [r7, #12]
   return(result);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e011      	b.n	8004694 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3758      	adds	r7, #88	@ 0x58
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ac:	e04f      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046b4:	d04b      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fc ffb5 	bl	8001624 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <UART_WaitOnFlagUntilTimeout+0x30>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e04e      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d037      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b80      	cmp	r3, #128	@ 0x80
 80046e2:	d034      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b40      	cmp	r3, #64	@ 0x40
 80046e8:	d031      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d110      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f838 	bl	8004776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2208      	movs	r2, #8
 800470a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e029      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004728:	d111      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f81e 	bl	8004776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d0a0      	beq.n	80046ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004776:	b480      	push	{r7}
 8004778:	b095      	sub	sp, #84	@ 0x54
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800479c:	643b      	str	r3, [r7, #64]	@ 0x40
 800479e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d118      	bne.n	800481e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f023 0310 	bic.w	r3, r3, #16
 8004800:	647b      	str	r3, [r7, #68]	@ 0x44
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6979      	ldr	r1, [r7, #20]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	613b      	str	r3, [r7, #16]
   return(result);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e6      	bne.n	80047ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004832:	bf00      	nop
 8004834:	3754      	adds	r7, #84	@ 0x54
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <__cvt>:
 800483e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004842:	ec57 6b10 	vmov	r6, r7, d0
 8004846:	2f00      	cmp	r7, #0
 8004848:	460c      	mov	r4, r1
 800484a:	4619      	mov	r1, r3
 800484c:	463b      	mov	r3, r7
 800484e:	bfbb      	ittet	lt
 8004850:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004854:	461f      	movlt	r7, r3
 8004856:	2300      	movge	r3, #0
 8004858:	232d      	movlt	r3, #45	@ 0x2d
 800485a:	700b      	strb	r3, [r1, #0]
 800485c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800485e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004862:	4691      	mov	r9, r2
 8004864:	f023 0820 	bic.w	r8, r3, #32
 8004868:	bfbc      	itt	lt
 800486a:	4632      	movlt	r2, r6
 800486c:	4616      	movlt	r6, r2
 800486e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004872:	d005      	beq.n	8004880 <__cvt+0x42>
 8004874:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004878:	d100      	bne.n	800487c <__cvt+0x3e>
 800487a:	3401      	adds	r4, #1
 800487c:	2102      	movs	r1, #2
 800487e:	e000      	b.n	8004882 <__cvt+0x44>
 8004880:	2103      	movs	r1, #3
 8004882:	ab03      	add	r3, sp, #12
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	ab02      	add	r3, sp, #8
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	ec47 6b10 	vmov	d0, r6, r7
 800488e:	4653      	mov	r3, sl
 8004890:	4622      	mov	r2, r4
 8004892:	f001 f945 	bl	8005b20 <_dtoa_r>
 8004896:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800489a:	4605      	mov	r5, r0
 800489c:	d119      	bne.n	80048d2 <__cvt+0x94>
 800489e:	f019 0f01 	tst.w	r9, #1
 80048a2:	d00e      	beq.n	80048c2 <__cvt+0x84>
 80048a4:	eb00 0904 	add.w	r9, r0, r4
 80048a8:	2200      	movs	r2, #0
 80048aa:	2300      	movs	r3, #0
 80048ac:	4630      	mov	r0, r6
 80048ae:	4639      	mov	r1, r7
 80048b0:	f7fc f912 	bl	8000ad8 <__aeabi_dcmpeq>
 80048b4:	b108      	cbz	r0, 80048ba <__cvt+0x7c>
 80048b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80048ba:	2230      	movs	r2, #48	@ 0x30
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	454b      	cmp	r3, r9
 80048c0:	d31e      	bcc.n	8004900 <__cvt+0xc2>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048c6:	1b5b      	subs	r3, r3, r5
 80048c8:	4628      	mov	r0, r5
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	b004      	add	sp, #16
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048d6:	eb00 0904 	add.w	r9, r0, r4
 80048da:	d1e5      	bne.n	80048a8 <__cvt+0x6a>
 80048dc:	7803      	ldrb	r3, [r0, #0]
 80048de:	2b30      	cmp	r3, #48	@ 0x30
 80048e0:	d10a      	bne.n	80048f8 <__cvt+0xba>
 80048e2:	2200      	movs	r2, #0
 80048e4:	2300      	movs	r3, #0
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fc f8f5 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ee:	b918      	cbnz	r0, 80048f8 <__cvt+0xba>
 80048f0:	f1c4 0401 	rsb	r4, r4, #1
 80048f4:	f8ca 4000 	str.w	r4, [sl]
 80048f8:	f8da 3000 	ldr.w	r3, [sl]
 80048fc:	4499      	add	r9, r3
 80048fe:	e7d3      	b.n	80048a8 <__cvt+0x6a>
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	9103      	str	r1, [sp, #12]
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e7d9      	b.n	80048bc <__cvt+0x7e>

08004908 <__exponent>:
 8004908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490a:	2900      	cmp	r1, #0
 800490c:	bfba      	itte	lt
 800490e:	4249      	neglt	r1, r1
 8004910:	232d      	movlt	r3, #45	@ 0x2d
 8004912:	232b      	movge	r3, #43	@ 0x2b
 8004914:	2909      	cmp	r1, #9
 8004916:	7002      	strb	r2, [r0, #0]
 8004918:	7043      	strb	r3, [r0, #1]
 800491a:	dd29      	ble.n	8004970 <__exponent+0x68>
 800491c:	f10d 0307 	add.w	r3, sp, #7
 8004920:	461d      	mov	r5, r3
 8004922:	270a      	movs	r7, #10
 8004924:	461a      	mov	r2, r3
 8004926:	fbb1 f6f7 	udiv	r6, r1, r7
 800492a:	fb07 1416 	mls	r4, r7, r6, r1
 800492e:	3430      	adds	r4, #48	@ 0x30
 8004930:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004934:	460c      	mov	r4, r1
 8004936:	2c63      	cmp	r4, #99	@ 0x63
 8004938:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800493c:	4631      	mov	r1, r6
 800493e:	dcf1      	bgt.n	8004924 <__exponent+0x1c>
 8004940:	3130      	adds	r1, #48	@ 0x30
 8004942:	1e94      	subs	r4, r2, #2
 8004944:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004948:	1c41      	adds	r1, r0, #1
 800494a:	4623      	mov	r3, r4
 800494c:	42ab      	cmp	r3, r5
 800494e:	d30a      	bcc.n	8004966 <__exponent+0x5e>
 8004950:	f10d 0309 	add.w	r3, sp, #9
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	42ac      	cmp	r4, r5
 8004958:	bf88      	it	hi
 800495a:	2300      	movhi	r3, #0
 800495c:	3302      	adds	r3, #2
 800495e:	4403      	add	r3, r0
 8004960:	1a18      	subs	r0, r3, r0
 8004962:	b003      	add	sp, #12
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004966:	f813 6b01 	ldrb.w	r6, [r3], #1
 800496a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800496e:	e7ed      	b.n	800494c <__exponent+0x44>
 8004970:	2330      	movs	r3, #48	@ 0x30
 8004972:	3130      	adds	r1, #48	@ 0x30
 8004974:	7083      	strb	r3, [r0, #2]
 8004976:	70c1      	strb	r1, [r0, #3]
 8004978:	1d03      	adds	r3, r0, #4
 800497a:	e7f1      	b.n	8004960 <__exponent+0x58>

0800497c <_printf_float>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	b08d      	sub	sp, #52	@ 0x34
 8004982:	460c      	mov	r4, r1
 8004984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004988:	4616      	mov	r6, r2
 800498a:	461f      	mov	r7, r3
 800498c:	4605      	mov	r5, r0
 800498e:	f000 ffc1 	bl	8005914 <_localeconv_r>
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fb fc72 	bl	8000280 <strlen>
 800499c:	2300      	movs	r3, #0
 800499e:	930a      	str	r3, [sp, #40]	@ 0x28
 80049a0:	f8d8 3000 	ldr.w	r3, [r8]
 80049a4:	9005      	str	r0, [sp, #20]
 80049a6:	3307      	adds	r3, #7
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	f103 0208 	add.w	r2, r3, #8
 80049b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049b4:	f8d4 b000 	ldr.w	fp, [r4]
 80049b8:	f8c8 2000 	str.w	r2, [r8]
 80049bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049c4:	9307      	str	r3, [sp, #28]
 80049c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80049ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004c44 <_printf_float+0x2c8>)
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049d8:	f7fc f8b0 	bl	8000b3c <__aeabi_dcmpun>
 80049dc:	bb70      	cbnz	r0, 8004a3c <_printf_float+0xc0>
 80049de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e2:	4b98      	ldr	r3, [pc, #608]	@ (8004c44 <_printf_float+0x2c8>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049e8:	f7fc f88a 	bl	8000b00 <__aeabi_dcmple>
 80049ec:	bb30      	cbnz	r0, 8004a3c <_printf_float+0xc0>
 80049ee:	2200      	movs	r2, #0
 80049f0:	2300      	movs	r3, #0
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f7fc f879 	bl	8000aec <__aeabi_dcmplt>
 80049fa:	b110      	cbz	r0, 8004a02 <_printf_float+0x86>
 80049fc:	232d      	movs	r3, #45	@ 0x2d
 80049fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a02:	4a91      	ldr	r2, [pc, #580]	@ (8004c48 <_printf_float+0x2cc>)
 8004a04:	4b91      	ldr	r3, [pc, #580]	@ (8004c4c <_printf_float+0x2d0>)
 8004a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a0a:	bf8c      	ite	hi
 8004a0c:	4690      	movhi	r8, r2
 8004a0e:	4698      	movls	r8, r3
 8004a10:	2303      	movs	r3, #3
 8004a12:	6123      	str	r3, [r4, #16]
 8004a14:	f02b 0304 	bic.w	r3, fp, #4
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f04f 0900 	mov.w	r9, #0
 8004a1e:	9700      	str	r7, [sp, #0]
 8004a20:	4633      	mov	r3, r6
 8004a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a24:	4621      	mov	r1, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f9d2 	bl	8004dd0 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f040 808d 	bne.w	8004b4c <_printf_float+0x1d0>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a36:	b00d      	add	sp, #52	@ 0x34
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fc f87a 	bl	8000b3c <__aeabi_dcmpun>
 8004a48:	b140      	cbz	r0, 8004a5c <_printf_float+0xe0>
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfbc      	itt	lt
 8004a50:	232d      	movlt	r3, #45	@ 0x2d
 8004a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a56:	4a7e      	ldr	r2, [pc, #504]	@ (8004c50 <_printf_float+0x2d4>)
 8004a58:	4b7e      	ldr	r3, [pc, #504]	@ (8004c54 <_printf_float+0x2d8>)
 8004a5a:	e7d4      	b.n	8004a06 <_printf_float+0x8a>
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a62:	9206      	str	r2, [sp, #24]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	d13b      	bne.n	8004ae0 <_printf_float+0x164>
 8004a68:	2306      	movs	r3, #6
 8004a6a:	6063      	str	r3, [r4, #4]
 8004a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004a70:	2300      	movs	r3, #0
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	9303      	str	r3, [sp, #12]
 8004a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	6861      	ldr	r1, [r4, #4]
 8004a82:	ec49 8b10 	vmov	d0, r8, r9
 8004a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7ff fed7 	bl	800483e <__cvt>
 8004a90:	9b06      	ldr	r3, [sp, #24]
 8004a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a94:	2b47      	cmp	r3, #71	@ 0x47
 8004a96:	4680      	mov	r8, r0
 8004a98:	d129      	bne.n	8004aee <_printf_float+0x172>
 8004a9a:	1cc8      	adds	r0, r1, #3
 8004a9c:	db02      	blt.n	8004aa4 <_printf_float+0x128>
 8004a9e:	6863      	ldr	r3, [r4, #4]
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	dd41      	ble.n	8004b28 <_printf_float+0x1ac>
 8004aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8004aac:	3901      	subs	r1, #1
 8004aae:	4652      	mov	r2, sl
 8004ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ab6:	f7ff ff27 	bl	8004908 <__exponent>
 8004aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004abc:	1813      	adds	r3, r2, r0
 8004abe:	2a01      	cmp	r2, #1
 8004ac0:	4681      	mov	r9, r0
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	dc02      	bgt.n	8004acc <_printf_float+0x150>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	07d2      	lsls	r2, r2, #31
 8004aca:	d501      	bpl.n	8004ad0 <_printf_float+0x154>
 8004acc:	3301      	adds	r3, #1
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0a2      	beq.n	8004a1e <_printf_float+0xa2>
 8004ad8:	232d      	movs	r3, #45	@ 0x2d
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ade:	e79e      	b.n	8004a1e <_printf_float+0xa2>
 8004ae0:	9a06      	ldr	r2, [sp, #24]
 8004ae2:	2a47      	cmp	r2, #71	@ 0x47
 8004ae4:	d1c2      	bne.n	8004a6c <_printf_float+0xf0>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1c0      	bne.n	8004a6c <_printf_float+0xf0>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7bd      	b.n	8004a6a <_printf_float+0xee>
 8004aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004af2:	d9db      	bls.n	8004aac <_printf_float+0x130>
 8004af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004af8:	d118      	bne.n	8004b2c <_printf_float+0x1b0>
 8004afa:	2900      	cmp	r1, #0
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	dd0b      	ble.n	8004b18 <_printf_float+0x19c>
 8004b00:	6121      	str	r1, [r4, #16]
 8004b02:	b913      	cbnz	r3, 8004b0a <_printf_float+0x18e>
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	07d0      	lsls	r0, r2, #31
 8004b08:	d502      	bpl.n	8004b10 <_printf_float+0x194>
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	440b      	add	r3, r1
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b12:	f04f 0900 	mov.w	r9, #0
 8004b16:	e7db      	b.n	8004ad0 <_printf_float+0x154>
 8004b18:	b913      	cbnz	r3, 8004b20 <_printf_float+0x1a4>
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	07d2      	lsls	r2, r2, #31
 8004b1e:	d501      	bpl.n	8004b24 <_printf_float+0x1a8>
 8004b20:	3302      	adds	r3, #2
 8004b22:	e7f4      	b.n	8004b0e <_printf_float+0x192>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e7f2      	b.n	8004b0e <_printf_float+0x192>
 8004b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	db05      	blt.n	8004b3e <_printf_float+0x1c2>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	6121      	str	r1, [r4, #16]
 8004b36:	07d8      	lsls	r0, r3, #31
 8004b38:	d5ea      	bpl.n	8004b10 <_printf_float+0x194>
 8004b3a:	1c4b      	adds	r3, r1, #1
 8004b3c:	e7e7      	b.n	8004b0e <_printf_float+0x192>
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	bfd4      	ite	le
 8004b42:	f1c1 0202 	rsble	r2, r1, #2
 8004b46:	2201      	movgt	r2, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	e7e0      	b.n	8004b0e <_printf_float+0x192>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	055a      	lsls	r2, r3, #21
 8004b50:	d407      	bmi.n	8004b62 <_printf_float+0x1e6>
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	4642      	mov	r2, r8
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d12b      	bne.n	8004bb8 <_printf_float+0x23c>
 8004b60:	e767      	b.n	8004a32 <_printf_float+0xb6>
 8004b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b66:	f240 80dd 	bls.w	8004d24 <_printf_float+0x3a8>
 8004b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2300      	movs	r3, #0
 8004b72:	f7fb ffb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d033      	beq.n	8004be2 <_printf_float+0x266>
 8004b7a:	4a37      	ldr	r2, [pc, #220]	@ (8004c58 <_printf_float+0x2dc>)
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	f43f af54 	beq.w	8004a32 <_printf_float+0xb6>
 8004b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b8e:	4543      	cmp	r3, r8
 8004b90:	db02      	blt.n	8004b98 <_printf_float+0x21c>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	07d8      	lsls	r0, r3, #31
 8004b96:	d50f      	bpl.n	8004bb8 <_printf_float+0x23c>
 8004b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f43f af45 	beq.w	8004a32 <_printf_float+0xb6>
 8004ba8:	f04f 0900 	mov.w	r9, #0
 8004bac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004bb0:	f104 0a1a 	add.w	sl, r4, #26
 8004bb4:	45c8      	cmp	r8, r9
 8004bb6:	dc09      	bgt.n	8004bcc <_printf_float+0x250>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	f100 8103 	bmi.w	8004dc6 <_printf_float+0x44a>
 8004bc0:	68e0      	ldr	r0, [r4, #12]
 8004bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bc4:	4298      	cmp	r0, r3
 8004bc6:	bfb8      	it	lt
 8004bc8:	4618      	movlt	r0, r3
 8004bca:	e734      	b.n	8004a36 <_printf_float+0xba>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4652      	mov	r2, sl
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f af2b 	beq.w	8004a32 <_printf_float+0xb6>
 8004bdc:	f109 0901 	add.w	r9, r9, #1
 8004be0:	e7e8      	b.n	8004bb4 <_printf_float+0x238>
 8004be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dc39      	bgt.n	8004c5c <_printf_float+0x2e0>
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <_printf_float+0x2dc>)
 8004bea:	2301      	movs	r3, #1
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af1d 	beq.w	8004a32 <_printf_float+0xb6>
 8004bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8004c00:	d102      	bne.n	8004c08 <_printf_float+0x28c>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	07d9      	lsls	r1, r3, #31
 8004c06:	d5d7      	bpl.n	8004bb8 <_printf_float+0x23c>
 8004c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af0d 	beq.w	8004a32 <_printf_float+0xb6>
 8004c18:	f04f 0a00 	mov.w	sl, #0
 8004c1c:	f104 0b1a 	add.w	fp, r4, #26
 8004c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c22:	425b      	negs	r3, r3
 8004c24:	4553      	cmp	r3, sl
 8004c26:	dc01      	bgt.n	8004c2c <_printf_float+0x2b0>
 8004c28:	464b      	mov	r3, r9
 8004c2a:	e793      	b.n	8004b54 <_printf_float+0x1d8>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	465a      	mov	r2, fp
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f aefb 	beq.w	8004a32 <_printf_float+0xb6>
 8004c3c:	f10a 0a01 	add.w	sl, sl, #1
 8004c40:	e7ee      	b.n	8004c20 <_printf_float+0x2a4>
 8004c42:	bf00      	nop
 8004c44:	7fefffff 	.word	0x7fefffff
 8004c48:	08009b20 	.word	0x08009b20
 8004c4c:	08009b1c 	.word	0x08009b1c
 8004c50:	08009b28 	.word	0x08009b28
 8004c54:	08009b24 	.word	0x08009b24
 8004c58:	08009c62 	.word	0x08009c62
 8004c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c62:	4553      	cmp	r3, sl
 8004c64:	bfa8      	it	ge
 8004c66:	4653      	movge	r3, sl
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	dc36      	bgt.n	8004cdc <_printf_float+0x360>
 8004c6e:	f04f 0b00 	mov.w	fp, #0
 8004c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c76:	f104 021a 	add.w	r2, r4, #26
 8004c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c7c:	9306      	str	r3, [sp, #24]
 8004c7e:	eba3 0309 	sub.w	r3, r3, r9
 8004c82:	455b      	cmp	r3, fp
 8004c84:	dc31      	bgt.n	8004cea <_printf_float+0x36e>
 8004c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c88:	459a      	cmp	sl, r3
 8004c8a:	dc3a      	bgt.n	8004d02 <_printf_float+0x386>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	07da      	lsls	r2, r3, #31
 8004c90:	d437      	bmi.n	8004d02 <_printf_float+0x386>
 8004c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c94:	ebaa 0903 	sub.w	r9, sl, r3
 8004c98:	9b06      	ldr	r3, [sp, #24]
 8004c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8004c9e:	4599      	cmp	r9, r3
 8004ca0:	bfa8      	it	ge
 8004ca2:	4699      	movge	r9, r3
 8004ca4:	f1b9 0f00 	cmp.w	r9, #0
 8004ca8:	dc33      	bgt.n	8004d12 <_printf_float+0x396>
 8004caa:	f04f 0800 	mov.w	r8, #0
 8004cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb2:	f104 0b1a 	add.w	fp, r4, #26
 8004cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8004cbc:	eba3 0309 	sub.w	r3, r3, r9
 8004cc0:	4543      	cmp	r3, r8
 8004cc2:	f77f af79 	ble.w	8004bb8 <_printf_float+0x23c>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	465a      	mov	r2, fp
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f aeae 	beq.w	8004a32 <_printf_float+0xb6>
 8004cd6:	f108 0801 	add.w	r8, r8, #1
 8004cda:	e7ec      	b.n	8004cb6 <_printf_float+0x33a>
 8004cdc:	4642      	mov	r2, r8
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d1c2      	bne.n	8004c6e <_printf_float+0x2f2>
 8004ce8:	e6a3      	b.n	8004a32 <_printf_float+0xb6>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4631      	mov	r1, r6
 8004cee:	4628      	mov	r0, r5
 8004cf0:	9206      	str	r2, [sp, #24]
 8004cf2:	47b8      	blx	r7
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	f43f ae9c 	beq.w	8004a32 <_printf_float+0xb6>
 8004cfa:	9a06      	ldr	r2, [sp, #24]
 8004cfc:	f10b 0b01 	add.w	fp, fp, #1
 8004d00:	e7bb      	b.n	8004c7a <_printf_float+0x2fe>
 8004d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1c0      	bne.n	8004c92 <_printf_float+0x316>
 8004d10:	e68f      	b.n	8004a32 <_printf_float+0xb6>
 8004d12:	9a06      	ldr	r2, [sp, #24]
 8004d14:	464b      	mov	r3, r9
 8004d16:	4442      	add	r2, r8
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d1c3      	bne.n	8004caa <_printf_float+0x32e>
 8004d22:	e686      	b.n	8004a32 <_printf_float+0xb6>
 8004d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d28:	f1ba 0f01 	cmp.w	sl, #1
 8004d2c:	dc01      	bgt.n	8004d32 <_printf_float+0x3b6>
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d536      	bpl.n	8004da0 <_printf_float+0x424>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4642      	mov	r2, r8
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f ae78 	beq.w	8004a32 <_printf_float+0xb6>
 8004d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f ae70 	beq.w	8004a32 <_printf_float+0xb6>
 8004d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d56:	2200      	movs	r2, #0
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004d5e:	f7fb febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d62:	b9c0      	cbnz	r0, 8004d96 <_printf_float+0x41a>
 8004d64:	4653      	mov	r3, sl
 8004d66:	f108 0201 	add.w	r2, r8, #1
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	d10c      	bne.n	8004d8e <_printf_float+0x412>
 8004d74:	e65d      	b.n	8004a32 <_printf_float+0xb6>
 8004d76:	2301      	movs	r3, #1
 8004d78:	465a      	mov	r2, fp
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae56 	beq.w	8004a32 <_printf_float+0xb6>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	45d0      	cmp	r8, sl
 8004d8c:	dbf3      	blt.n	8004d76 <_printf_float+0x3fa>
 8004d8e:	464b      	mov	r3, r9
 8004d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d94:	e6df      	b.n	8004b56 <_printf_float+0x1da>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	f104 0b1a 	add.w	fp, r4, #26
 8004d9e:	e7f4      	b.n	8004d8a <_printf_float+0x40e>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4642      	mov	r2, r8
 8004da4:	e7e1      	b.n	8004d6a <_printf_float+0x3ee>
 8004da6:	2301      	movs	r3, #1
 8004da8:	464a      	mov	r2, r9
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b8      	blx	r7
 8004db0:	3001      	adds	r0, #1
 8004db2:	f43f ae3e 	beq.w	8004a32 <_printf_float+0xb6>
 8004db6:	f108 0801 	add.w	r8, r8, #1
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004dbe:	1a5b      	subs	r3, r3, r1
 8004dc0:	4543      	cmp	r3, r8
 8004dc2:	dcf0      	bgt.n	8004da6 <_printf_float+0x42a>
 8004dc4:	e6fc      	b.n	8004bc0 <_printf_float+0x244>
 8004dc6:	f04f 0800 	mov.w	r8, #0
 8004dca:	f104 0919 	add.w	r9, r4, #25
 8004dce:	e7f4      	b.n	8004dba <_printf_float+0x43e>

08004dd0 <_printf_common>:
 8004dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	4698      	mov	r8, r3
 8004dd8:	688a      	ldr	r2, [r1, #8]
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bfb8      	it	lt
 8004de4:	4613      	movlt	r3, r2
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dec:	4607      	mov	r7, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	b10a      	cbz	r2, 8004df6 <_printf_common+0x26>
 8004df2:	3301      	adds	r3, #1
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	0699      	lsls	r1, r3, #26
 8004dfa:	bf42      	ittt	mi
 8004dfc:	6833      	ldrmi	r3, [r6, #0]
 8004dfe:	3302      	addmi	r3, #2
 8004e00:	6033      	strmi	r3, [r6, #0]
 8004e02:	6825      	ldr	r5, [r4, #0]
 8004e04:	f015 0506 	ands.w	r5, r5, #6
 8004e08:	d106      	bne.n	8004e18 <_printf_common+0x48>
 8004e0a:	f104 0a19 	add.w	sl, r4, #25
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	6832      	ldr	r2, [r6, #0]
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dc26      	bgt.n	8004e66 <_printf_common+0x96>
 8004e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	3b00      	subs	r3, #0
 8004e20:	bf18      	it	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	0692      	lsls	r2, r2, #26
 8004e26:	d42b      	bmi.n	8004e80 <_printf_common+0xb0>
 8004e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	4638      	mov	r0, r7
 8004e30:	47c8      	blx	r9
 8004e32:	3001      	adds	r0, #1
 8004e34:	d01e      	beq.n	8004e74 <_printf_common+0xa4>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	f003 0306 	and.w	r3, r3, #6
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf02      	ittt	eq
 8004e42:	68e5      	ldreq	r5, [r4, #12]
 8004e44:	6833      	ldreq	r3, [r6, #0]
 8004e46:	1aed      	subeq	r5, r5, r3
 8004e48:	68a3      	ldr	r3, [r4, #8]
 8004e4a:	bf0c      	ite	eq
 8004e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e50:	2500      	movne	r5, #0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bfc4      	itt	gt
 8004e56:	1a9b      	subgt	r3, r3, r2
 8004e58:	18ed      	addgt	r5, r5, r3
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	341a      	adds	r4, #26
 8004e5e:	42b5      	cmp	r5, r6
 8004e60:	d11a      	bne.n	8004e98 <_printf_common+0xc8>
 8004e62:	2000      	movs	r0, #0
 8004e64:	e008      	b.n	8004e78 <_printf_common+0xa8>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4652      	mov	r2, sl
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	47c8      	blx	r9
 8004e70:	3001      	adds	r0, #1
 8004e72:	d103      	bne.n	8004e7c <_printf_common+0xac>
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	e7c6      	b.n	8004e0e <_printf_common+0x3e>
 8004e80:	18e1      	adds	r1, r4, r3
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	2030      	movs	r0, #48	@ 0x30
 8004e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e8a:	4422      	add	r2, r4
 8004e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e94:	3302      	adds	r3, #2
 8004e96:	e7c7      	b.n	8004e28 <_printf_common+0x58>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4622      	mov	r2, r4
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	47c8      	blx	r9
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d0e6      	beq.n	8004e74 <_printf_common+0xa4>
 8004ea6:	3601      	adds	r6, #1
 8004ea8:	e7d9      	b.n	8004e5e <_printf_common+0x8e>
	...

08004eac <_printf_i>:
 8004eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	7e0f      	ldrb	r7, [r1, #24]
 8004eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eb4:	2f78      	cmp	r7, #120	@ 0x78
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	4680      	mov	r8, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	469a      	mov	sl, r3
 8004ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ec2:	d807      	bhi.n	8004ed4 <_printf_i+0x28>
 8004ec4:	2f62      	cmp	r7, #98	@ 0x62
 8004ec6:	d80a      	bhi.n	8004ede <_printf_i+0x32>
 8004ec8:	2f00      	cmp	r7, #0
 8004eca:	f000 80d1 	beq.w	8005070 <_printf_i+0x1c4>
 8004ece:	2f58      	cmp	r7, #88	@ 0x58
 8004ed0:	f000 80b8 	beq.w	8005044 <_printf_i+0x198>
 8004ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004edc:	e03a      	b.n	8004f54 <_printf_i+0xa8>
 8004ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ee2:	2b15      	cmp	r3, #21
 8004ee4:	d8f6      	bhi.n	8004ed4 <_printf_i+0x28>
 8004ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8004eec <_printf_i+0x40>)
 8004ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004ed5 	.word	0x08004ed5
 8004ef8:	08004ed5 	.word	0x08004ed5
 8004efc:	08004ed5 	.word	0x08004ed5
 8004f00:	08004ed5 	.word	0x08004ed5
 8004f04:	08004f59 	.word	0x08004f59
 8004f08:	08004ed5 	.word	0x08004ed5
 8004f0c:	08004ed5 	.word	0x08004ed5
 8004f10:	08004ed5 	.word	0x08004ed5
 8004f14:	08004ed5 	.word	0x08004ed5
 8004f18:	08005057 	.word	0x08005057
 8004f1c:	08004f83 	.word	0x08004f83
 8004f20:	08005011 	.word	0x08005011
 8004f24:	08004ed5 	.word	0x08004ed5
 8004f28:	08004ed5 	.word	0x08004ed5
 8004f2c:	08005079 	.word	0x08005079
 8004f30:	08004ed5 	.word	0x08004ed5
 8004f34:	08004f83 	.word	0x08004f83
 8004f38:	08004ed5 	.word	0x08004ed5
 8004f3c:	08004ed5 	.word	0x08004ed5
 8004f40:	08005019 	.word	0x08005019
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6032      	str	r2, [r6, #0]
 8004f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f54:	2301      	movs	r3, #1
 8004f56:	e09c      	b.n	8005092 <_printf_i+0x1e6>
 8004f58:	6833      	ldr	r3, [r6, #0]
 8004f5a:	6820      	ldr	r0, [r4, #0]
 8004f5c:	1d19      	adds	r1, r3, #4
 8004f5e:	6031      	str	r1, [r6, #0]
 8004f60:	0606      	lsls	r6, r0, #24
 8004f62:	d501      	bpl.n	8004f68 <_printf_i+0xbc>
 8004f64:	681d      	ldr	r5, [r3, #0]
 8004f66:	e003      	b.n	8004f70 <_printf_i+0xc4>
 8004f68:	0645      	lsls	r5, r0, #25
 8004f6a:	d5fb      	bpl.n	8004f64 <_printf_i+0xb8>
 8004f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	da03      	bge.n	8004f7c <_printf_i+0xd0>
 8004f74:	232d      	movs	r3, #45	@ 0x2d
 8004f76:	426d      	negs	r5, r5
 8004f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f7c:	4858      	ldr	r0, [pc, #352]	@ (80050e0 <_printf_i+0x234>)
 8004f7e:	230a      	movs	r3, #10
 8004f80:	e011      	b.n	8004fa6 <_printf_i+0xfa>
 8004f82:	6821      	ldr	r1, [r4, #0]
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	0608      	lsls	r0, r1, #24
 8004f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f8c:	d402      	bmi.n	8004f94 <_printf_i+0xe8>
 8004f8e:	0649      	lsls	r1, r1, #25
 8004f90:	bf48      	it	mi
 8004f92:	b2ad      	uxthmi	r5, r5
 8004f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f96:	4852      	ldr	r0, [pc, #328]	@ (80050e0 <_printf_i+0x234>)
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	bf14      	ite	ne
 8004f9c:	230a      	movne	r3, #10
 8004f9e:	2308      	moveq	r3, #8
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fa6:	6866      	ldr	r6, [r4, #4]
 8004fa8:	60a6      	str	r6, [r4, #8]
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	db05      	blt.n	8004fba <_printf_i+0x10e>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	432e      	orrs	r6, r5
 8004fb2:	f021 0104 	bic.w	r1, r1, #4
 8004fb6:	6021      	str	r1, [r4, #0]
 8004fb8:	d04b      	beq.n	8005052 <_printf_i+0x1a6>
 8004fba:	4616      	mov	r6, r2
 8004fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8004fc4:	5dc7      	ldrb	r7, [r0, r7]
 8004fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fca:	462f      	mov	r7, r5
 8004fcc:	42bb      	cmp	r3, r7
 8004fce:	460d      	mov	r5, r1
 8004fd0:	d9f4      	bls.n	8004fbc <_printf_i+0x110>
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d10b      	bne.n	8004fee <_printf_i+0x142>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	07df      	lsls	r7, r3, #31
 8004fda:	d508      	bpl.n	8004fee <_printf_i+0x142>
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	6861      	ldr	r1, [r4, #4]
 8004fe0:	4299      	cmp	r1, r3
 8004fe2:	bfde      	ittt	le
 8004fe4:	2330      	movle	r3, #48	@ 0x30
 8004fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004fee:	1b92      	subs	r2, r2, r6
 8004ff0:	6122      	str	r2, [r4, #16]
 8004ff2:	f8cd a000 	str.w	sl, [sp]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	aa03      	add	r2, sp, #12
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	f7ff fee7 	bl	8004dd0 <_printf_common>
 8005002:	3001      	adds	r0, #1
 8005004:	d14a      	bne.n	800509c <_printf_i+0x1f0>
 8005006:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800500a:	b004      	add	sp, #16
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f043 0320 	orr.w	r3, r3, #32
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	4832      	ldr	r0, [pc, #200]	@ (80050e4 <_printf_i+0x238>)
 800501a:	2778      	movs	r7, #120	@ 0x78
 800501c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	6831      	ldr	r1, [r6, #0]
 8005024:	061f      	lsls	r7, r3, #24
 8005026:	f851 5b04 	ldr.w	r5, [r1], #4
 800502a:	d402      	bmi.n	8005032 <_printf_i+0x186>
 800502c:	065f      	lsls	r7, r3, #25
 800502e:	bf48      	it	mi
 8005030:	b2ad      	uxthmi	r5, r5
 8005032:	6031      	str	r1, [r6, #0]
 8005034:	07d9      	lsls	r1, r3, #31
 8005036:	bf44      	itt	mi
 8005038:	f043 0320 	orrmi.w	r3, r3, #32
 800503c:	6023      	strmi	r3, [r4, #0]
 800503e:	b11d      	cbz	r5, 8005048 <_printf_i+0x19c>
 8005040:	2310      	movs	r3, #16
 8005042:	e7ad      	b.n	8004fa0 <_printf_i+0xf4>
 8005044:	4826      	ldr	r0, [pc, #152]	@ (80050e0 <_printf_i+0x234>)
 8005046:	e7e9      	b.n	800501c <_printf_i+0x170>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	f023 0320 	bic.w	r3, r3, #32
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	e7f6      	b.n	8005040 <_printf_i+0x194>
 8005052:	4616      	mov	r6, r2
 8005054:	e7bd      	b.n	8004fd2 <_printf_i+0x126>
 8005056:	6833      	ldr	r3, [r6, #0]
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	6961      	ldr	r1, [r4, #20]
 800505c:	1d18      	adds	r0, r3, #4
 800505e:	6030      	str	r0, [r6, #0]
 8005060:	062e      	lsls	r6, r5, #24
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	d501      	bpl.n	800506a <_printf_i+0x1be>
 8005066:	6019      	str	r1, [r3, #0]
 8005068:	e002      	b.n	8005070 <_printf_i+0x1c4>
 800506a:	0668      	lsls	r0, r5, #25
 800506c:	d5fb      	bpl.n	8005066 <_printf_i+0x1ba>
 800506e:	8019      	strh	r1, [r3, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	4616      	mov	r6, r2
 8005076:	e7bc      	b.n	8004ff2 <_printf_i+0x146>
 8005078:	6833      	ldr	r3, [r6, #0]
 800507a:	1d1a      	adds	r2, r3, #4
 800507c:	6032      	str	r2, [r6, #0]
 800507e:	681e      	ldr	r6, [r3, #0]
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	2100      	movs	r1, #0
 8005084:	4630      	mov	r0, r6
 8005086:	f7fb f8ab 	bl	80001e0 <memchr>
 800508a:	b108      	cbz	r0, 8005090 <_printf_i+0x1e4>
 800508c:	1b80      	subs	r0, r0, r6
 800508e:	6060      	str	r0, [r4, #4]
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	2300      	movs	r3, #0
 8005096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800509a:	e7aa      	b.n	8004ff2 <_printf_i+0x146>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	4632      	mov	r2, r6
 80050a0:	4649      	mov	r1, r9
 80050a2:	4640      	mov	r0, r8
 80050a4:	47d0      	blx	sl
 80050a6:	3001      	adds	r0, #1
 80050a8:	d0ad      	beq.n	8005006 <_printf_i+0x15a>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	079b      	lsls	r3, r3, #30
 80050ae:	d413      	bmi.n	80050d8 <_printf_i+0x22c>
 80050b0:	68e0      	ldr	r0, [r4, #12]
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	4298      	cmp	r0, r3
 80050b6:	bfb8      	it	lt
 80050b8:	4618      	movlt	r0, r3
 80050ba:	e7a6      	b.n	800500a <_printf_i+0x15e>
 80050bc:	2301      	movs	r3, #1
 80050be:	4632      	mov	r2, r6
 80050c0:	4649      	mov	r1, r9
 80050c2:	4640      	mov	r0, r8
 80050c4:	47d0      	blx	sl
 80050c6:	3001      	adds	r0, #1
 80050c8:	d09d      	beq.n	8005006 <_printf_i+0x15a>
 80050ca:	3501      	adds	r5, #1
 80050cc:	68e3      	ldr	r3, [r4, #12]
 80050ce:	9903      	ldr	r1, [sp, #12]
 80050d0:	1a5b      	subs	r3, r3, r1
 80050d2:	42ab      	cmp	r3, r5
 80050d4:	dcf2      	bgt.n	80050bc <_printf_i+0x210>
 80050d6:	e7eb      	b.n	80050b0 <_printf_i+0x204>
 80050d8:	2500      	movs	r5, #0
 80050da:	f104 0619 	add.w	r6, r4, #25
 80050de:	e7f5      	b.n	80050cc <_printf_i+0x220>
 80050e0:	08009b2c 	.word	0x08009b2c
 80050e4:	08009b3d 	.word	0x08009b3d

080050e8 <_scanf_float>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	b087      	sub	sp, #28
 80050ee:	4691      	mov	r9, r2
 80050f0:	9303      	str	r3, [sp, #12]
 80050f2:	688b      	ldr	r3, [r1, #8]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80050fa:	bf81      	itttt	hi
 80050fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005100:	eb03 0b05 	addhi.w	fp, r3, r5
 8005104:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005108:	608b      	strhi	r3, [r1, #8]
 800510a:	680b      	ldr	r3, [r1, #0]
 800510c:	460a      	mov	r2, r1
 800510e:	f04f 0500 	mov.w	r5, #0
 8005112:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005116:	f842 3b1c 	str.w	r3, [r2], #28
 800511a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800511e:	4680      	mov	r8, r0
 8005120:	460c      	mov	r4, r1
 8005122:	bf98      	it	ls
 8005124:	f04f 0b00 	movls.w	fp, #0
 8005128:	9201      	str	r2, [sp, #4]
 800512a:	4616      	mov	r6, r2
 800512c:	46aa      	mov	sl, r5
 800512e:	462f      	mov	r7, r5
 8005130:	9502      	str	r5, [sp, #8]
 8005132:	68a2      	ldr	r2, [r4, #8]
 8005134:	b15a      	cbz	r2, 800514e <_scanf_float+0x66>
 8005136:	f8d9 3000 	ldr.w	r3, [r9]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b4e      	cmp	r3, #78	@ 0x4e
 800513e:	d863      	bhi.n	8005208 <_scanf_float+0x120>
 8005140:	2b40      	cmp	r3, #64	@ 0x40
 8005142:	d83b      	bhi.n	80051bc <_scanf_float+0xd4>
 8005144:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005148:	b2c8      	uxtb	r0, r1
 800514a:	280e      	cmp	r0, #14
 800514c:	d939      	bls.n	80051c2 <_scanf_float+0xda>
 800514e:	b11f      	cbz	r7, 8005158 <_scanf_float+0x70>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800515c:	f1ba 0f01 	cmp.w	sl, #1
 8005160:	f200 8114 	bhi.w	800538c <_scanf_float+0x2a4>
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	429e      	cmp	r6, r3
 8005168:	f200 8105 	bhi.w	8005376 <_scanf_float+0x28e>
 800516c:	2001      	movs	r0, #1
 800516e:	b007      	add	sp, #28
 8005170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005178:	2a0d      	cmp	r2, #13
 800517a:	d8e8      	bhi.n	800514e <_scanf_float+0x66>
 800517c:	a101      	add	r1, pc, #4	@ (adr r1, 8005184 <_scanf_float+0x9c>)
 800517e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005182:	bf00      	nop
 8005184:	080052cd 	.word	0x080052cd
 8005188:	0800514f 	.word	0x0800514f
 800518c:	0800514f 	.word	0x0800514f
 8005190:	0800514f 	.word	0x0800514f
 8005194:	08005329 	.word	0x08005329
 8005198:	08005303 	.word	0x08005303
 800519c:	0800514f 	.word	0x0800514f
 80051a0:	0800514f 	.word	0x0800514f
 80051a4:	080052db 	.word	0x080052db
 80051a8:	0800514f 	.word	0x0800514f
 80051ac:	0800514f 	.word	0x0800514f
 80051b0:	0800514f 	.word	0x0800514f
 80051b4:	0800514f 	.word	0x0800514f
 80051b8:	08005297 	.word	0x08005297
 80051bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80051c0:	e7da      	b.n	8005178 <_scanf_float+0x90>
 80051c2:	290e      	cmp	r1, #14
 80051c4:	d8c3      	bhi.n	800514e <_scanf_float+0x66>
 80051c6:	a001      	add	r0, pc, #4	@ (adr r0, 80051cc <_scanf_float+0xe4>)
 80051c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051cc:	08005287 	.word	0x08005287
 80051d0:	0800514f 	.word	0x0800514f
 80051d4:	08005287 	.word	0x08005287
 80051d8:	08005317 	.word	0x08005317
 80051dc:	0800514f 	.word	0x0800514f
 80051e0:	08005229 	.word	0x08005229
 80051e4:	0800526d 	.word	0x0800526d
 80051e8:	0800526d 	.word	0x0800526d
 80051ec:	0800526d 	.word	0x0800526d
 80051f0:	0800526d 	.word	0x0800526d
 80051f4:	0800526d 	.word	0x0800526d
 80051f8:	0800526d 	.word	0x0800526d
 80051fc:	0800526d 	.word	0x0800526d
 8005200:	0800526d 	.word	0x0800526d
 8005204:	0800526d 	.word	0x0800526d
 8005208:	2b6e      	cmp	r3, #110	@ 0x6e
 800520a:	d809      	bhi.n	8005220 <_scanf_float+0x138>
 800520c:	2b60      	cmp	r3, #96	@ 0x60
 800520e:	d8b1      	bhi.n	8005174 <_scanf_float+0x8c>
 8005210:	2b54      	cmp	r3, #84	@ 0x54
 8005212:	d07b      	beq.n	800530c <_scanf_float+0x224>
 8005214:	2b59      	cmp	r3, #89	@ 0x59
 8005216:	d19a      	bne.n	800514e <_scanf_float+0x66>
 8005218:	2d07      	cmp	r5, #7
 800521a:	d198      	bne.n	800514e <_scanf_float+0x66>
 800521c:	2508      	movs	r5, #8
 800521e:	e02f      	b.n	8005280 <_scanf_float+0x198>
 8005220:	2b74      	cmp	r3, #116	@ 0x74
 8005222:	d073      	beq.n	800530c <_scanf_float+0x224>
 8005224:	2b79      	cmp	r3, #121	@ 0x79
 8005226:	e7f6      	b.n	8005216 <_scanf_float+0x12e>
 8005228:	6821      	ldr	r1, [r4, #0]
 800522a:	05c8      	lsls	r0, r1, #23
 800522c:	d51e      	bpl.n	800526c <_scanf_float+0x184>
 800522e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005232:	6021      	str	r1, [r4, #0]
 8005234:	3701      	adds	r7, #1
 8005236:	f1bb 0f00 	cmp.w	fp, #0
 800523a:	d003      	beq.n	8005244 <_scanf_float+0x15c>
 800523c:	3201      	adds	r2, #1
 800523e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005242:	60a2      	str	r2, [r4, #8]
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	3b01      	subs	r3, #1
 8005248:	60a3      	str	r3, [r4, #8]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005254:	3b01      	subs	r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	f8c9 3004 	str.w	r3, [r9, #4]
 800525c:	f340 8082 	ble.w	8005364 <_scanf_float+0x27c>
 8005260:	f8d9 3000 	ldr.w	r3, [r9]
 8005264:	3301      	adds	r3, #1
 8005266:	f8c9 3000 	str.w	r3, [r9]
 800526a:	e762      	b.n	8005132 <_scanf_float+0x4a>
 800526c:	eb1a 0105 	adds.w	r1, sl, r5
 8005270:	f47f af6d 	bne.w	800514e <_scanf_float+0x66>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	460d      	mov	r5, r1
 800527e:	468a      	mov	sl, r1
 8005280:	f806 3b01 	strb.w	r3, [r6], #1
 8005284:	e7de      	b.n	8005244 <_scanf_float+0x15c>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	0610      	lsls	r0, r2, #24
 800528a:	f57f af60 	bpl.w	800514e <_scanf_float+0x66>
 800528e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005292:	6022      	str	r2, [r4, #0]
 8005294:	e7f4      	b.n	8005280 <_scanf_float+0x198>
 8005296:	f1ba 0f00 	cmp.w	sl, #0
 800529a:	d10c      	bne.n	80052b6 <_scanf_float+0x1ce>
 800529c:	b977      	cbnz	r7, 80052bc <_scanf_float+0x1d4>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80052a8:	d108      	bne.n	80052bc <_scanf_float+0x1d4>
 80052aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	f04f 0a01 	mov.w	sl, #1
 80052b4:	e7e4      	b.n	8005280 <_scanf_float+0x198>
 80052b6:	f1ba 0f02 	cmp.w	sl, #2
 80052ba:	d050      	beq.n	800535e <_scanf_float+0x276>
 80052bc:	2d01      	cmp	r5, #1
 80052be:	d002      	beq.n	80052c6 <_scanf_float+0x1de>
 80052c0:	2d04      	cmp	r5, #4
 80052c2:	f47f af44 	bne.w	800514e <_scanf_float+0x66>
 80052c6:	3501      	adds	r5, #1
 80052c8:	b2ed      	uxtb	r5, r5
 80052ca:	e7d9      	b.n	8005280 <_scanf_float+0x198>
 80052cc:	f1ba 0f01 	cmp.w	sl, #1
 80052d0:	f47f af3d 	bne.w	800514e <_scanf_float+0x66>
 80052d4:	f04f 0a02 	mov.w	sl, #2
 80052d8:	e7d2      	b.n	8005280 <_scanf_float+0x198>
 80052da:	b975      	cbnz	r5, 80052fa <_scanf_float+0x212>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f47f af37 	bne.w	8005150 <_scanf_float+0x68>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80052ec:	f040 8103 	bne.w	80054f6 <_scanf_float+0x40e>
 80052f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052f4:	6022      	str	r2, [r4, #0]
 80052f6:	2501      	movs	r5, #1
 80052f8:	e7c2      	b.n	8005280 <_scanf_float+0x198>
 80052fa:	2d03      	cmp	r5, #3
 80052fc:	d0e3      	beq.n	80052c6 <_scanf_float+0x1de>
 80052fe:	2d05      	cmp	r5, #5
 8005300:	e7df      	b.n	80052c2 <_scanf_float+0x1da>
 8005302:	2d02      	cmp	r5, #2
 8005304:	f47f af23 	bne.w	800514e <_scanf_float+0x66>
 8005308:	2503      	movs	r5, #3
 800530a:	e7b9      	b.n	8005280 <_scanf_float+0x198>
 800530c:	2d06      	cmp	r5, #6
 800530e:	f47f af1e 	bne.w	800514e <_scanf_float+0x66>
 8005312:	2507      	movs	r5, #7
 8005314:	e7b4      	b.n	8005280 <_scanf_float+0x198>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	0591      	lsls	r1, r2, #22
 800531a:	f57f af18 	bpl.w	800514e <_scanf_float+0x66>
 800531e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	9702      	str	r7, [sp, #8]
 8005326:	e7ab      	b.n	8005280 <_scanf_float+0x198>
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800532e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005332:	d005      	beq.n	8005340 <_scanf_float+0x258>
 8005334:	0550      	lsls	r0, r2, #21
 8005336:	f57f af0a 	bpl.w	800514e <_scanf_float+0x66>
 800533a:	2f00      	cmp	r7, #0
 800533c:	f000 80db 	beq.w	80054f6 <_scanf_float+0x40e>
 8005340:	0591      	lsls	r1, r2, #22
 8005342:	bf58      	it	pl
 8005344:	9902      	ldrpl	r1, [sp, #8]
 8005346:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800534a:	bf58      	it	pl
 800534c:	1a79      	subpl	r1, r7, r1
 800534e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005352:	bf58      	it	pl
 8005354:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	2700      	movs	r7, #0
 800535c:	e790      	b.n	8005280 <_scanf_float+0x198>
 800535e:	f04f 0a03 	mov.w	sl, #3
 8005362:	e78d      	b.n	8005280 <_scanf_float+0x198>
 8005364:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005368:	4649      	mov	r1, r9
 800536a:	4640      	mov	r0, r8
 800536c:	4798      	blx	r3
 800536e:	2800      	cmp	r0, #0
 8005370:	f43f aedf 	beq.w	8005132 <_scanf_float+0x4a>
 8005374:	e6eb      	b.n	800514e <_scanf_float+0x66>
 8005376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800537a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800537e:	464a      	mov	r2, r9
 8005380:	4640      	mov	r0, r8
 8005382:	4798      	blx	r3
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	3b01      	subs	r3, #1
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	e6eb      	b.n	8005164 <_scanf_float+0x7c>
 800538c:	1e6b      	subs	r3, r5, #1
 800538e:	2b06      	cmp	r3, #6
 8005390:	d824      	bhi.n	80053dc <_scanf_float+0x2f4>
 8005392:	2d02      	cmp	r5, #2
 8005394:	d836      	bhi.n	8005404 <_scanf_float+0x31c>
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	429e      	cmp	r6, r3
 800539a:	f67f aee7 	bls.w	800516c <_scanf_float+0x84>
 800539e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053a6:	464a      	mov	r2, r9
 80053a8:	4640      	mov	r0, r8
 80053aa:	4798      	blx	r3
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	e7f0      	b.n	8005396 <_scanf_float+0x2ae>
 80053b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80053bc:	464a      	mov	r2, r9
 80053be:	4640      	mov	r0, r8
 80053c0:	4798      	blx	r3
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80053cc:	fa5f fa8a 	uxtb.w	sl, sl
 80053d0:	f1ba 0f02 	cmp.w	sl, #2
 80053d4:	d1ee      	bne.n	80053b4 <_scanf_float+0x2cc>
 80053d6:	3d03      	subs	r5, #3
 80053d8:	b2ed      	uxtb	r5, r5
 80053da:	1b76      	subs	r6, r6, r5
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	05da      	lsls	r2, r3, #23
 80053e0:	d530      	bpl.n	8005444 <_scanf_float+0x35c>
 80053e2:	055b      	lsls	r3, r3, #21
 80053e4:	d511      	bpl.n	800540a <_scanf_float+0x322>
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	429e      	cmp	r6, r3
 80053ea:	f67f aebf 	bls.w	800516c <_scanf_float+0x84>
 80053ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053f6:	464a      	mov	r2, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	4798      	blx	r3
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	3b01      	subs	r3, #1
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	e7f0      	b.n	80053e6 <_scanf_float+0x2fe>
 8005404:	46aa      	mov	sl, r5
 8005406:	46b3      	mov	fp, r6
 8005408:	e7de      	b.n	80053c8 <_scanf_float+0x2e0>
 800540a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	2965      	cmp	r1, #101	@ 0x65
 8005412:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005416:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800541a:	6123      	str	r3, [r4, #16]
 800541c:	d00c      	beq.n	8005438 <_scanf_float+0x350>
 800541e:	2945      	cmp	r1, #69	@ 0x45
 8005420:	d00a      	beq.n	8005438 <_scanf_float+0x350>
 8005422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005426:	464a      	mov	r2, r9
 8005428:	4640      	mov	r0, r8
 800542a:	4798      	blx	r3
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005432:	3b01      	subs	r3, #1
 8005434:	1eb5      	subs	r5, r6, #2
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800543c:	464a      	mov	r2, r9
 800543e:	4640      	mov	r0, r8
 8005440:	4798      	blx	r3
 8005442:	462e      	mov	r6, r5
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	f012 0210 	ands.w	r2, r2, #16
 800544a:	d001      	beq.n	8005450 <_scanf_float+0x368>
 800544c:	2000      	movs	r0, #0
 800544e:	e68e      	b.n	800516e <_scanf_float+0x86>
 8005450:	7032      	strb	r2, [r6, #0]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545c:	d125      	bne.n	80054aa <_scanf_float+0x3c2>
 800545e:	9b02      	ldr	r3, [sp, #8]
 8005460:	429f      	cmp	r7, r3
 8005462:	d00a      	beq.n	800547a <_scanf_float+0x392>
 8005464:	1bda      	subs	r2, r3, r7
 8005466:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800546a:	429e      	cmp	r6, r3
 800546c:	bf28      	it	cs
 800546e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005472:	4922      	ldr	r1, [pc, #136]	@ (80054fc <_scanf_float+0x414>)
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f9df 	bl	8005838 <siprintf>
 800547a:	9901      	ldr	r1, [sp, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	4640      	mov	r0, r8
 8005480:	f002 fcca 	bl	8007e18 <_strtod_r>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f011 0f02 	tst.w	r1, #2
 800548e:	ec57 6b10 	vmov	r6, r7, d0
 8005492:	f103 0204 	add.w	r2, r3, #4
 8005496:	d015      	beq.n	80054c4 <_scanf_float+0x3dc>
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	600a      	str	r2, [r1, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e9c3 6700 	strd	r6, r7, [r3]
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60e3      	str	r3, [r4, #12]
 80054a8:	e7d0      	b.n	800544c <_scanf_float+0x364>
 80054aa:	9b04      	ldr	r3, [sp, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0e4      	beq.n	800547a <_scanf_float+0x392>
 80054b0:	9905      	ldr	r1, [sp, #20]
 80054b2:	230a      	movs	r3, #10
 80054b4:	3101      	adds	r1, #1
 80054b6:	4640      	mov	r0, r8
 80054b8:	f002 fd2e 	bl	8007f18 <_strtol_r>
 80054bc:	9b04      	ldr	r3, [sp, #16]
 80054be:	9e05      	ldr	r6, [sp, #20]
 80054c0:	1ac2      	subs	r2, r0, r3
 80054c2:	e7d0      	b.n	8005466 <_scanf_float+0x37e>
 80054c4:	f011 0f04 	tst.w	r1, #4
 80054c8:	9903      	ldr	r1, [sp, #12]
 80054ca:	600a      	str	r2, [r1, #0]
 80054cc:	d1e6      	bne.n	800549c <_scanf_float+0x3b4>
 80054ce:	681d      	ldr	r5, [r3, #0]
 80054d0:	4632      	mov	r2, r6
 80054d2:	463b      	mov	r3, r7
 80054d4:	4630      	mov	r0, r6
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fb fb30 	bl	8000b3c <__aeabi_dcmpun>
 80054dc:	b128      	cbz	r0, 80054ea <_scanf_float+0x402>
 80054de:	4808      	ldr	r0, [pc, #32]	@ (8005500 <_scanf_float+0x418>)
 80054e0:	f000 fa90 	bl	8005a04 <nanf>
 80054e4:	ed85 0a00 	vstr	s0, [r5]
 80054e8:	e7db      	b.n	80054a2 <_scanf_float+0x3ba>
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fb fb83 	bl	8000bf8 <__aeabi_d2f>
 80054f2:	6028      	str	r0, [r5, #0]
 80054f4:	e7d5      	b.n	80054a2 <_scanf_float+0x3ba>
 80054f6:	2700      	movs	r7, #0
 80054f8:	e62e      	b.n	8005158 <_scanf_float+0x70>
 80054fa:	bf00      	nop
 80054fc:	08009b4e 	.word	0x08009b4e
 8005500:	08009caa 	.word	0x08009caa

08005504 <std>:
 8005504:	2300      	movs	r3, #0
 8005506:	b510      	push	{r4, lr}
 8005508:	4604      	mov	r4, r0
 800550a:	e9c0 3300 	strd	r3, r3, [r0]
 800550e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005512:	6083      	str	r3, [r0, #8]
 8005514:	8181      	strh	r1, [r0, #12]
 8005516:	6643      	str	r3, [r0, #100]	@ 0x64
 8005518:	81c2      	strh	r2, [r0, #14]
 800551a:	6183      	str	r3, [r0, #24]
 800551c:	4619      	mov	r1, r3
 800551e:	2208      	movs	r2, #8
 8005520:	305c      	adds	r0, #92	@ 0x5c
 8005522:	f000 f9ee 	bl	8005902 <memset>
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <std+0x58>)
 8005528:	6263      	str	r3, [r4, #36]	@ 0x24
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x5c>)
 800552c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <std+0x60>)
 8005530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <std+0x64>)
 8005534:	6323      	str	r3, [r4, #48]	@ 0x30
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x68>)
 8005538:	6224      	str	r4, [r4, #32]
 800553a:	429c      	cmp	r4, r3
 800553c:	d006      	beq.n	800554c <std+0x48>
 800553e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005542:	4294      	cmp	r4, r2
 8005544:	d002      	beq.n	800554c <std+0x48>
 8005546:	33d0      	adds	r3, #208	@ 0xd0
 8005548:	429c      	cmp	r4, r3
 800554a:	d105      	bne.n	8005558 <std+0x54>
 800554c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005554:	f000 ba52 	b.w	80059fc <__retarget_lock_init_recursive>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	bf00      	nop
 800555c:	0800587d 	.word	0x0800587d
 8005560:	0800589f 	.word	0x0800589f
 8005564:	080058d7 	.word	0x080058d7
 8005568:	080058fb 	.word	0x080058fb
 800556c:	200002cc 	.word	0x200002cc

08005570 <stdio_exit_handler>:
 8005570:	4a02      	ldr	r2, [pc, #8]	@ (800557c <stdio_exit_handler+0xc>)
 8005572:	4903      	ldr	r1, [pc, #12]	@ (8005580 <stdio_exit_handler+0x10>)
 8005574:	4803      	ldr	r0, [pc, #12]	@ (8005584 <stdio_exit_handler+0x14>)
 8005576:	f000 b869 	b.w	800564c <_fwalk_sglue>
 800557a:	bf00      	nop
 800557c:	2000000c 	.word	0x2000000c
 8005580:	08008b59 	.word	0x08008b59
 8005584:	2000001c 	.word	0x2000001c

08005588 <cleanup_stdio>:
 8005588:	6841      	ldr	r1, [r0, #4]
 800558a:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <cleanup_stdio+0x34>)
 800558c:	4299      	cmp	r1, r3
 800558e:	b510      	push	{r4, lr}
 8005590:	4604      	mov	r4, r0
 8005592:	d001      	beq.n	8005598 <cleanup_stdio+0x10>
 8005594:	f003 fae0 	bl	8008b58 <_fflush_r>
 8005598:	68a1      	ldr	r1, [r4, #8]
 800559a:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <cleanup_stdio+0x38>)
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <cleanup_stdio+0x1e>
 80055a0:	4620      	mov	r0, r4
 80055a2:	f003 fad9 	bl	8008b58 <_fflush_r>
 80055a6:	68e1      	ldr	r1, [r4, #12]
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <cleanup_stdio+0x3c>)
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d004      	beq.n	80055b8 <cleanup_stdio+0x30>
 80055ae:	4620      	mov	r0, r4
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f003 bad0 	b.w	8008b58 <_fflush_r>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	200002cc 	.word	0x200002cc
 80055c0:	20000334 	.word	0x20000334
 80055c4:	2000039c 	.word	0x2000039c

080055c8 <global_stdio_init.part.0>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <global_stdio_init.part.0+0x30>)
 80055cc:	4c0b      	ldr	r4, [pc, #44]	@ (80055fc <global_stdio_init.part.0+0x34>)
 80055ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005600 <global_stdio_init.part.0+0x38>)
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4620      	mov	r0, r4
 80055d4:	2200      	movs	r2, #0
 80055d6:	2104      	movs	r1, #4
 80055d8:	f7ff ff94 	bl	8005504 <std>
 80055dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055e0:	2201      	movs	r2, #1
 80055e2:	2109      	movs	r1, #9
 80055e4:	f7ff ff8e 	bl	8005504 <std>
 80055e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055ec:	2202      	movs	r2, #2
 80055ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f2:	2112      	movs	r1, #18
 80055f4:	f7ff bf86 	b.w	8005504 <std>
 80055f8:	20000404 	.word	0x20000404
 80055fc:	200002cc 	.word	0x200002cc
 8005600:	08005571 	.word	0x08005571

08005604 <__sfp_lock_acquire>:
 8005604:	4801      	ldr	r0, [pc, #4]	@ (800560c <__sfp_lock_acquire+0x8>)
 8005606:	f000 b9fa 	b.w	80059fe <__retarget_lock_acquire_recursive>
 800560a:	bf00      	nop
 800560c:	2000040d 	.word	0x2000040d

08005610 <__sfp_lock_release>:
 8005610:	4801      	ldr	r0, [pc, #4]	@ (8005618 <__sfp_lock_release+0x8>)
 8005612:	f000 b9f5 	b.w	8005a00 <__retarget_lock_release_recursive>
 8005616:	bf00      	nop
 8005618:	2000040d 	.word	0x2000040d

0800561c <__sinit>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4604      	mov	r4, r0
 8005620:	f7ff fff0 	bl	8005604 <__sfp_lock_acquire>
 8005624:	6a23      	ldr	r3, [r4, #32]
 8005626:	b11b      	cbz	r3, 8005630 <__sinit+0x14>
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f7ff bff0 	b.w	8005610 <__sfp_lock_release>
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <__sinit+0x28>)
 8005632:	6223      	str	r3, [r4, #32]
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__sinit+0x2c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f5      	bne.n	8005628 <__sinit+0xc>
 800563c:	f7ff ffc4 	bl	80055c8 <global_stdio_init.part.0>
 8005640:	e7f2      	b.n	8005628 <__sinit+0xc>
 8005642:	bf00      	nop
 8005644:	08005589 	.word	0x08005589
 8005648:	20000404 	.word	0x20000404

0800564c <_fwalk_sglue>:
 800564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005650:	4607      	mov	r7, r0
 8005652:	4688      	mov	r8, r1
 8005654:	4614      	mov	r4, r2
 8005656:	2600      	movs	r6, #0
 8005658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800565c:	f1b9 0901 	subs.w	r9, r9, #1
 8005660:	d505      	bpl.n	800566e <_fwalk_sglue+0x22>
 8005662:	6824      	ldr	r4, [r4, #0]
 8005664:	2c00      	cmp	r4, #0
 8005666:	d1f7      	bne.n	8005658 <_fwalk_sglue+0xc>
 8005668:	4630      	mov	r0, r6
 800566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d907      	bls.n	8005684 <_fwalk_sglue+0x38>
 8005674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005678:	3301      	adds	r3, #1
 800567a:	d003      	beq.n	8005684 <_fwalk_sglue+0x38>
 800567c:	4629      	mov	r1, r5
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	4306      	orrs	r6, r0
 8005684:	3568      	adds	r5, #104	@ 0x68
 8005686:	e7e9      	b.n	800565c <_fwalk_sglue+0x10>

08005688 <iprintf>:
 8005688:	b40f      	push	{r0, r1, r2, r3}
 800568a:	b507      	push	{r0, r1, r2, lr}
 800568c:	4906      	ldr	r1, [pc, #24]	@ (80056a8 <iprintf+0x20>)
 800568e:	ab04      	add	r3, sp, #16
 8005690:	6808      	ldr	r0, [r1, #0]
 8005692:	f853 2b04 	ldr.w	r2, [r3], #4
 8005696:	6881      	ldr	r1, [r0, #8]
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	f002 fdc1 	bl	8008220 <_vfiprintf_r>
 800569e:	b003      	add	sp, #12
 80056a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a4:	b004      	add	sp, #16
 80056a6:	4770      	bx	lr
 80056a8:	20000018 	.word	0x20000018

080056ac <iscanf>:
 80056ac:	b40f      	push	{r0, r1, r2, r3}
 80056ae:	b507      	push	{r0, r1, r2, lr}
 80056b0:	4906      	ldr	r1, [pc, #24]	@ (80056cc <iscanf+0x20>)
 80056b2:	ab04      	add	r3, sp, #16
 80056b4:	6808      	ldr	r0, [r1, #0]
 80056b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ba:	6841      	ldr	r1, [r0, #4]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	f003 f865 	bl	800878c <_vfiscanf_r>
 80056c2:	b003      	add	sp, #12
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b004      	add	sp, #16
 80056ca:	4770      	bx	lr
 80056cc:	20000018 	.word	0x20000018

080056d0 <setvbuf>:
 80056d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	461d      	mov	r5, r3
 80056d6:	4b57      	ldr	r3, [pc, #348]	@ (8005834 <setvbuf+0x164>)
 80056d8:	681f      	ldr	r7, [r3, #0]
 80056da:	4604      	mov	r4, r0
 80056dc:	460e      	mov	r6, r1
 80056de:	4690      	mov	r8, r2
 80056e0:	b127      	cbz	r7, 80056ec <setvbuf+0x1c>
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	b913      	cbnz	r3, 80056ec <setvbuf+0x1c>
 80056e6:	4638      	mov	r0, r7
 80056e8:	f7ff ff98 	bl	800561c <__sinit>
 80056ec:	f1b8 0f02 	cmp.w	r8, #2
 80056f0:	d006      	beq.n	8005700 <setvbuf+0x30>
 80056f2:	f1b8 0f01 	cmp.w	r8, #1
 80056f6:	f200 809a 	bhi.w	800582e <setvbuf+0x15e>
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	f2c0 8097 	blt.w	800582e <setvbuf+0x15e>
 8005700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d405      	bmi.n	8005712 <setvbuf+0x42>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d402      	bmi.n	8005712 <setvbuf+0x42>
 800570c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570e:	f000 f976 	bl	80059fe <__retarget_lock_acquire_recursive>
 8005712:	4621      	mov	r1, r4
 8005714:	4638      	mov	r0, r7
 8005716:	f003 fa1f 	bl	8008b58 <_fflush_r>
 800571a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800571c:	b141      	cbz	r1, 8005730 <setvbuf+0x60>
 800571e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005722:	4299      	cmp	r1, r3
 8005724:	d002      	beq.n	800572c <setvbuf+0x5c>
 8005726:	4638      	mov	r0, r7
 8005728:	f000 ffca 	bl	80066c0 <_free_r>
 800572c:	2300      	movs	r3, #0
 800572e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005730:	2300      	movs	r3, #0
 8005732:	61a3      	str	r3, [r4, #24]
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	d503      	bpl.n	8005744 <setvbuf+0x74>
 800573c:	6921      	ldr	r1, [r4, #16]
 800573e:	4638      	mov	r0, r7
 8005740:	f000 ffbe 	bl	80066c0 <_free_r>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	f1b8 0f02 	cmp.w	r8, #2
 8005752:	81a3      	strh	r3, [r4, #12]
 8005754:	d061      	beq.n	800581a <setvbuf+0x14a>
 8005756:	ab01      	add	r3, sp, #4
 8005758:	466a      	mov	r2, sp
 800575a:	4621      	mov	r1, r4
 800575c:	4638      	mov	r0, r7
 800575e:	f003 fa23 	bl	8008ba8 <__swhatbuf_r>
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	4318      	orrs	r0, r3
 8005766:	81a0      	strh	r0, [r4, #12]
 8005768:	bb2d      	cbnz	r5, 80057b6 <setvbuf+0xe6>
 800576a:	9d00      	ldr	r5, [sp, #0]
 800576c:	4628      	mov	r0, r5
 800576e:	f000 fff1 	bl	8006754 <malloc>
 8005772:	4606      	mov	r6, r0
 8005774:	2800      	cmp	r0, #0
 8005776:	d152      	bne.n	800581e <setvbuf+0x14e>
 8005778:	f8dd 9000 	ldr.w	r9, [sp]
 800577c:	45a9      	cmp	r9, r5
 800577e:	d140      	bne.n	8005802 <setvbuf+0x132>
 8005780:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005788:	f043 0202 	orr.w	r2, r3, #2
 800578c:	81a2      	strh	r2, [r4, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	60a2      	str	r2, [r4, #8]
 8005792:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	6122      	str	r2, [r4, #16]
 800579a:	2201      	movs	r2, #1
 800579c:	6162      	str	r2, [r4, #20]
 800579e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057a0:	07d6      	lsls	r6, r2, #31
 80057a2:	d404      	bmi.n	80057ae <setvbuf+0xde>
 80057a4:	0598      	lsls	r0, r3, #22
 80057a6:	d402      	bmi.n	80057ae <setvbuf+0xde>
 80057a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057aa:	f000 f929 	bl	8005a00 <__retarget_lock_release_recursive>
 80057ae:	4628      	mov	r0, r5
 80057b0:	b003      	add	sp, #12
 80057b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057b6:	2e00      	cmp	r6, #0
 80057b8:	d0d8      	beq.n	800576c <setvbuf+0x9c>
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	b913      	cbnz	r3, 80057c4 <setvbuf+0xf4>
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ff2c 	bl	800561c <__sinit>
 80057c4:	f1b8 0f01 	cmp.w	r8, #1
 80057c8:	bf08      	it	eq
 80057ca:	89a3      	ldrheq	r3, [r4, #12]
 80057cc:	6026      	str	r6, [r4, #0]
 80057ce:	bf04      	itt	eq
 80057d0:	f043 0301 	orreq.w	r3, r3, #1
 80057d4:	81a3      	strheq	r3, [r4, #12]
 80057d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057da:	f013 0208 	ands.w	r2, r3, #8
 80057de:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80057e2:	d01e      	beq.n	8005822 <setvbuf+0x152>
 80057e4:	07d9      	lsls	r1, r3, #31
 80057e6:	bf41      	itttt	mi
 80057e8:	2200      	movmi	r2, #0
 80057ea:	426d      	negmi	r5, r5
 80057ec:	60a2      	strmi	r2, [r4, #8]
 80057ee:	61a5      	strmi	r5, [r4, #24]
 80057f0:	bf58      	it	pl
 80057f2:	60a5      	strpl	r5, [r4, #8]
 80057f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057f6:	07d2      	lsls	r2, r2, #31
 80057f8:	d401      	bmi.n	80057fe <setvbuf+0x12e>
 80057fa:	059b      	lsls	r3, r3, #22
 80057fc:	d513      	bpl.n	8005826 <setvbuf+0x156>
 80057fe:	2500      	movs	r5, #0
 8005800:	e7d5      	b.n	80057ae <setvbuf+0xde>
 8005802:	4648      	mov	r0, r9
 8005804:	f000 ffa6 	bl	8006754 <malloc>
 8005808:	4606      	mov	r6, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d0b8      	beq.n	8005780 <setvbuf+0xb0>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	464d      	mov	r5, r9
 8005818:	e7cf      	b.n	80057ba <setvbuf+0xea>
 800581a:	2500      	movs	r5, #0
 800581c:	e7b2      	b.n	8005784 <setvbuf+0xb4>
 800581e:	46a9      	mov	r9, r5
 8005820:	e7f5      	b.n	800580e <setvbuf+0x13e>
 8005822:	60a2      	str	r2, [r4, #8]
 8005824:	e7e6      	b.n	80057f4 <setvbuf+0x124>
 8005826:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005828:	f000 f8ea 	bl	8005a00 <__retarget_lock_release_recursive>
 800582c:	e7e7      	b.n	80057fe <setvbuf+0x12e>
 800582e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005832:	e7bc      	b.n	80057ae <setvbuf+0xde>
 8005834:	20000018 	.word	0x20000018

08005838 <siprintf>:
 8005838:	b40e      	push	{r1, r2, r3}
 800583a:	b510      	push	{r4, lr}
 800583c:	b09d      	sub	sp, #116	@ 0x74
 800583e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005840:	9002      	str	r0, [sp, #8]
 8005842:	9006      	str	r0, [sp, #24]
 8005844:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005848:	480a      	ldr	r0, [pc, #40]	@ (8005874 <siprintf+0x3c>)
 800584a:	9107      	str	r1, [sp, #28]
 800584c:	9104      	str	r1, [sp, #16]
 800584e:	490a      	ldr	r1, [pc, #40]	@ (8005878 <siprintf+0x40>)
 8005850:	f853 2b04 	ldr.w	r2, [r3], #4
 8005854:	9105      	str	r1, [sp, #20]
 8005856:	2400      	movs	r4, #0
 8005858:	a902      	add	r1, sp, #8
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005860:	f002 fbb8 	bl	8007fd4 <_svfiprintf_r>
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	701c      	strb	r4, [r3, #0]
 8005868:	b01d      	add	sp, #116	@ 0x74
 800586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586e:	b003      	add	sp, #12
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000018 	.word	0x20000018
 8005878:	ffff0208 	.word	0xffff0208

0800587c <__sread>:
 800587c:	b510      	push	{r4, lr}
 800587e:	460c      	mov	r4, r1
 8005880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005884:	f000 f86c 	bl	8005960 <_read_r>
 8005888:	2800      	cmp	r0, #0
 800588a:	bfab      	itete	ge
 800588c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800588e:	89a3      	ldrhlt	r3, [r4, #12]
 8005890:	181b      	addge	r3, r3, r0
 8005892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005896:	bfac      	ite	ge
 8005898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800589a:	81a3      	strhlt	r3, [r4, #12]
 800589c:	bd10      	pop	{r4, pc}

0800589e <__swrite>:
 800589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a2:	461f      	mov	r7, r3
 80058a4:	898b      	ldrh	r3, [r1, #12]
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	4605      	mov	r5, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	4616      	mov	r6, r2
 80058ae:	d505      	bpl.n	80058bc <__swrite+0x1e>
 80058b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b4:	2302      	movs	r3, #2
 80058b6:	2200      	movs	r2, #0
 80058b8:	f000 f840 	bl	800593c <_lseek_r>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	4628      	mov	r0, r5
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f000 b857 	b.w	8005984 <_write_r>

080058d6 <__sseek>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 f82d 	bl	800593c <_lseek_r>
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	bf15      	itete	ne
 80058e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058f2:	81a3      	strheq	r3, [r4, #12]
 80058f4:	bf18      	it	ne
 80058f6:	81a3      	strhne	r3, [r4, #12]
 80058f8:	bd10      	pop	{r4, pc}

080058fa <__sclose>:
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 b80d 	b.w	800591c <_close_r>

08005902 <memset>:
 8005902:	4402      	add	r2, r0
 8005904:	4603      	mov	r3, r0
 8005906:	4293      	cmp	r3, r2
 8005908:	d100      	bne.n	800590c <memset+0xa>
 800590a:	4770      	bx	lr
 800590c:	f803 1b01 	strb.w	r1, [r3], #1
 8005910:	e7f9      	b.n	8005906 <memset+0x4>
	...

08005914 <_localeconv_r>:
 8005914:	4800      	ldr	r0, [pc, #0]	@ (8005918 <_localeconv_r+0x4>)
 8005916:	4770      	bx	lr
 8005918:	20000158 	.word	0x20000158

0800591c <_close_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d06      	ldr	r5, [pc, #24]	@ (8005938 <_close_r+0x1c>)
 8005920:	2300      	movs	r3, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fd7c 	bl	8001424 <_close>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_close_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_close_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20000408 	.word	0x20000408

0800593c <_lseek_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d07      	ldr	r5, [pc, #28]	@ (800595c <_lseek_r+0x20>)
 8005940:	4604      	mov	r4, r0
 8005942:	4608      	mov	r0, r1
 8005944:	4611      	mov	r1, r2
 8005946:	2200      	movs	r2, #0
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f7fb fd91 	bl	8001472 <_lseek>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_lseek_r+0x1e>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_lseek_r+0x1e>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	20000408 	.word	0x20000408

08005960 <_read_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d07      	ldr	r5, [pc, #28]	@ (8005980 <_read_r+0x20>)
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	2200      	movs	r2, #0
 800596c:	602a      	str	r2, [r5, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f7fb fd1f 	bl	80013b2 <_read>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_read_r+0x1e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_read_r+0x1e>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	20000408 	.word	0x20000408

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	@ (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb fd2a 	bl	80013ec <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20000408 	.word	0x20000408

080059a8 <__errno>:
 80059a8:	4b01      	ldr	r3, [pc, #4]	@ (80059b0 <__errno+0x8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000018 	.word	0x20000018

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	@ (80059ec <__libc_init_array+0x38>)
 80059b8:	4c0d      	ldr	r4, [pc, #52]	@ (80059f0 <__libc_init_array+0x3c>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	2600      	movs	r6, #0
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	@ (80059f4 <__libc_init_array+0x40>)
 80059c6:	4c0c      	ldr	r4, [pc, #48]	@ (80059f8 <__libc_init_array+0x44>)
 80059c8:	f004 f85e 	bl	8009a88 <_init>
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	2600      	movs	r6, #0
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08009f64 	.word	0x08009f64
 80059f0:	08009f64 	.word	0x08009f64
 80059f4:	08009f64 	.word	0x08009f64
 80059f8:	08009f68 	.word	0x08009f68

080059fc <__retarget_lock_init_recursive>:
 80059fc:	4770      	bx	lr

080059fe <__retarget_lock_acquire_recursive>:
 80059fe:	4770      	bx	lr

08005a00 <__retarget_lock_release_recursive>:
 8005a00:	4770      	bx	lr
	...

08005a04 <nanf>:
 8005a04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005a0c <nanf+0x8>
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	7fc00000 	.word	0x7fc00000

08005a10 <quorem>:
 8005a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	6903      	ldr	r3, [r0, #16]
 8005a16:	690c      	ldr	r4, [r1, #16]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	4607      	mov	r7, r0
 8005a1c:	db7e      	blt.n	8005b1c <quorem+0x10c>
 8005a1e:	3c01      	subs	r4, #1
 8005a20:	f101 0814 	add.w	r8, r1, #20
 8005a24:	00a3      	lsls	r3, r4, #2
 8005a26:	f100 0514 	add.w	r5, r0, #20
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a42:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a46:	d32e      	bcc.n	8005aa6 <quorem+0x96>
 8005a48:	f04f 0a00 	mov.w	sl, #0
 8005a4c:	46c4      	mov	ip, r8
 8005a4e:	46ae      	mov	lr, r5
 8005a50:	46d3      	mov	fp, sl
 8005a52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a56:	b298      	uxth	r0, r3
 8005a58:	fb06 a000 	mla	r0, r6, r0, sl
 8005a5c:	0c02      	lsrs	r2, r0, #16
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	fb06 2303 	mla	r3, r6, r3, r2
 8005a64:	f8de 2000 	ldr.w	r2, [lr]
 8005a68:	b280      	uxth	r0, r0
 8005a6a:	b292      	uxth	r2, r2
 8005a6c:	1a12      	subs	r2, r2, r0
 8005a6e:	445a      	add	r2, fp
 8005a70:	f8de 0000 	ldr.w	r0, [lr]
 8005a74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a82:	b292      	uxth	r2, r2
 8005a84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a88:	45e1      	cmp	r9, ip
 8005a8a:	f84e 2b04 	str.w	r2, [lr], #4
 8005a8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a92:	d2de      	bcs.n	8005a52 <quorem+0x42>
 8005a94:	9b00      	ldr	r3, [sp, #0]
 8005a96:	58eb      	ldr	r3, [r5, r3]
 8005a98:	b92b      	cbnz	r3, 8005aa6 <quorem+0x96>
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	429d      	cmp	r5, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	d32f      	bcc.n	8005b04 <quorem+0xf4>
 8005aa4:	613c      	str	r4, [r7, #16]
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f001 f9c6 	bl	8006e38 <__mcmp>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	db25      	blt.n	8005afc <quorem+0xec>
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ab8:	f8d1 c000 	ldr.w	ip, [r1]
 8005abc:	fa1f fe82 	uxth.w	lr, r2
 8005ac0:	fa1f f38c 	uxth.w	r3, ip
 8005ac4:	eba3 030e 	sub.w	r3, r3, lr
 8005ac8:	4403      	add	r3, r0
 8005aca:	0c12      	lsrs	r2, r2, #16
 8005acc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ad0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ada:	45c1      	cmp	r9, r8
 8005adc:	f841 3b04 	str.w	r3, [r1], #4
 8005ae0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ae4:	d2e6      	bcs.n	8005ab4 <quorem+0xa4>
 8005ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aee:	b922      	cbnz	r2, 8005afa <quorem+0xea>
 8005af0:	3b04      	subs	r3, #4
 8005af2:	429d      	cmp	r5, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	d30b      	bcc.n	8005b10 <quorem+0x100>
 8005af8:	613c      	str	r4, [r7, #16]
 8005afa:	3601      	adds	r6, #1
 8005afc:	4630      	mov	r0, r6
 8005afe:	b003      	add	sp, #12
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	3b04      	subs	r3, #4
 8005b08:	2a00      	cmp	r2, #0
 8005b0a:	d1cb      	bne.n	8005aa4 <quorem+0x94>
 8005b0c:	3c01      	subs	r4, #1
 8005b0e:	e7c6      	b.n	8005a9e <quorem+0x8e>
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	3b04      	subs	r3, #4
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	d1ef      	bne.n	8005af8 <quorem+0xe8>
 8005b18:	3c01      	subs	r4, #1
 8005b1a:	e7ea      	b.n	8005af2 <quorem+0xe2>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e7ee      	b.n	8005afe <quorem+0xee>

08005b20 <_dtoa_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	69c7      	ldr	r7, [r0, #28]
 8005b26:	b097      	sub	sp, #92	@ 0x5c
 8005b28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005b2c:	ec55 4b10 	vmov	r4, r5, d0
 8005b30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005b32:	9107      	str	r1, [sp, #28]
 8005b34:	4681      	mov	r9, r0
 8005b36:	920c      	str	r2, [sp, #48]	@ 0x30
 8005b38:	9311      	str	r3, [sp, #68]	@ 0x44
 8005b3a:	b97f      	cbnz	r7, 8005b5c <_dtoa_r+0x3c>
 8005b3c:	2010      	movs	r0, #16
 8005b3e:	f000 fe09 	bl	8006754 <malloc>
 8005b42:	4602      	mov	r2, r0
 8005b44:	f8c9 001c 	str.w	r0, [r9, #28]
 8005b48:	b920      	cbnz	r0, 8005b54 <_dtoa_r+0x34>
 8005b4a:	4ba9      	ldr	r3, [pc, #676]	@ (8005df0 <_dtoa_r+0x2d0>)
 8005b4c:	21ef      	movs	r1, #239	@ 0xef
 8005b4e:	48a9      	ldr	r0, [pc, #676]	@ (8005df4 <_dtoa_r+0x2d4>)
 8005b50:	f003 fb0a 	bl	8009168 <__assert_func>
 8005b54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b58:	6007      	str	r7, [r0, #0]
 8005b5a:	60c7      	str	r7, [r0, #12]
 8005b5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b60:	6819      	ldr	r1, [r3, #0]
 8005b62:	b159      	cbz	r1, 8005b7c <_dtoa_r+0x5c>
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	604a      	str	r2, [r1, #4]
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4093      	lsls	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
 8005b6e:	4648      	mov	r0, r9
 8005b70:	f000 fee6 	bl	8006940 <_Bfree>
 8005b74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	1e2b      	subs	r3, r5, #0
 8005b7e:	bfb9      	ittee	lt
 8005b80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b84:	9305      	strlt	r3, [sp, #20]
 8005b86:	2300      	movge	r3, #0
 8005b88:	6033      	strge	r3, [r6, #0]
 8005b8a:	9f05      	ldr	r7, [sp, #20]
 8005b8c:	4b9a      	ldr	r3, [pc, #616]	@ (8005df8 <_dtoa_r+0x2d8>)
 8005b8e:	bfbc      	itt	lt
 8005b90:	2201      	movlt	r2, #1
 8005b92:	6032      	strlt	r2, [r6, #0]
 8005b94:	43bb      	bics	r3, r7
 8005b96:	d112      	bne.n	8005bbe <_dtoa_r+0x9e>
 8005b98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ba4:	4323      	orrs	r3, r4
 8005ba6:	f000 855a 	beq.w	800665e <_dtoa_r+0xb3e>
 8005baa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005e0c <_dtoa_r+0x2ec>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 855c 	beq.w	800666e <_dtoa_r+0xb4e>
 8005bb6:	f10a 0303 	add.w	r3, sl, #3
 8005bba:	f000 bd56 	b.w	800666a <_dtoa_r+0xb4a>
 8005bbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	ec51 0b17 	vmov	r0, r1, d7
 8005bc8:	2300      	movs	r3, #0
 8005bca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005bce:	f7fa ff83 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bd2:	4680      	mov	r8, r0
 8005bd4:	b158      	cbz	r0, 8005bee <_dtoa_r+0xce>
 8005bd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005bd8:	2301      	movs	r3, #1
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bde:	b113      	cbz	r3, 8005be6 <_dtoa_r+0xc6>
 8005be0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005be2:	4b86      	ldr	r3, [pc, #536]	@ (8005dfc <_dtoa_r+0x2dc>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005e10 <_dtoa_r+0x2f0>
 8005bea:	f000 bd40 	b.w	800666e <_dtoa_r+0xb4e>
 8005bee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005bf2:	aa14      	add	r2, sp, #80	@ 0x50
 8005bf4:	a915      	add	r1, sp, #84	@ 0x54
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	f001 fa3e 	bl	8007078 <__d2b>
 8005bfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c00:	9002      	str	r0, [sp, #8]
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d078      	beq.n	8005cf8 <_dtoa_r+0x1d8>
 8005c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005c20:	4619      	mov	r1, r3
 8005c22:	2200      	movs	r2, #0
 8005c24:	4b76      	ldr	r3, [pc, #472]	@ (8005e00 <_dtoa_r+0x2e0>)
 8005c26:	f7fa fb37 	bl	8000298 <__aeabi_dsub>
 8005c2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005dd8 <_dtoa_r+0x2b8>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fcea 	bl	8000608 <__aeabi_dmul>
 8005c34:	a36a      	add	r3, pc, #424	@ (adr r3, 8005de0 <_dtoa_r+0x2c0>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fb2f 	bl	800029c <__adddf3>
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4630      	mov	r0, r6
 8005c42:	460d      	mov	r5, r1
 8005c44:	f7fa fc76 	bl	8000534 <__aeabi_i2d>
 8005c48:	a367      	add	r3, pc, #412	@ (adr r3, 8005de8 <_dtoa_r+0x2c8>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fcdb 	bl	8000608 <__aeabi_dmul>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa fb1f 	bl	800029c <__adddf3>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	460d      	mov	r5, r1
 8005c62:	f7fa ff81 	bl	8000b68 <__aeabi_d2iz>
 8005c66:	2200      	movs	r2, #0
 8005c68:	4607      	mov	r7, r0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa ff3c 	bl	8000aec <__aeabi_dcmplt>
 8005c74:	b140      	cbz	r0, 8005c88 <_dtoa_r+0x168>
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7fa fc5c 	bl	8000534 <__aeabi_i2d>
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	462b      	mov	r3, r5
 8005c80:	f7fa ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c84:	b900      	cbnz	r0, 8005c88 <_dtoa_r+0x168>
 8005c86:	3f01      	subs	r7, #1
 8005c88:	2f16      	cmp	r7, #22
 8005c8a:	d852      	bhi.n	8005d32 <_dtoa_r+0x212>
 8005c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005e04 <_dtoa_r+0x2e4>)
 8005c8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c9a:	f7fa ff27 	bl	8000aec <__aeabi_dcmplt>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d049      	beq.n	8005d36 <_dtoa_r+0x216>
 8005ca2:	3f01      	subs	r7, #1
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ca8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005caa:	1b9b      	subs	r3, r3, r6
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	bf45      	ittet	mi
 8005cb0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005cb4:	9300      	strmi	r3, [sp, #0]
 8005cb6:	2300      	movpl	r3, #0
 8005cb8:	2300      	movmi	r3, #0
 8005cba:	9206      	str	r2, [sp, #24]
 8005cbc:	bf54      	ite	pl
 8005cbe:	9300      	strpl	r3, [sp, #0]
 8005cc0:	9306      	strmi	r3, [sp, #24]
 8005cc2:	2f00      	cmp	r7, #0
 8005cc4:	db39      	blt.n	8005d3a <_dtoa_r+0x21a>
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005cca:	443b      	add	r3, r7
 8005ccc:	9306      	str	r3, [sp, #24]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9308      	str	r3, [sp, #32]
 8005cd2:	9b07      	ldr	r3, [sp, #28]
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d863      	bhi.n	8005da0 <_dtoa_r+0x280>
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	bfc4      	itt	gt
 8005cdc:	3b04      	subgt	r3, #4
 8005cde:	9307      	strgt	r3, [sp, #28]
 8005ce0:	9b07      	ldr	r3, [sp, #28]
 8005ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ce6:	bfcc      	ite	gt
 8005ce8:	2400      	movgt	r4, #0
 8005cea:	2401      	movle	r4, #1
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d863      	bhi.n	8005db8 <_dtoa_r+0x298>
 8005cf0:	e8df f003 	tbb	[pc, r3]
 8005cf4:	2b375452 	.word	0x2b375452
 8005cf8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005cfc:	441e      	add	r6, r3
 8005cfe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	bfc1      	itttt	gt
 8005d06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d0a:	409f      	lslgt	r7, r3
 8005d0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d10:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d14:	bfd6      	itet	le
 8005d16:	f1c3 0320 	rsble	r3, r3, #32
 8005d1a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d1e:	fa04 f003 	lslle.w	r0, r4, r3
 8005d22:	f7fa fbf7 	bl	8000514 <__aeabi_ui2d>
 8005d26:	2201      	movs	r2, #1
 8005d28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d2c:	3e01      	subs	r6, #1
 8005d2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d30:	e776      	b.n	8005c20 <_dtoa_r+0x100>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7b7      	b.n	8005ca6 <_dtoa_r+0x186>
 8005d36:	9010      	str	r0, [sp, #64]	@ 0x40
 8005d38:	e7b6      	b.n	8005ca8 <_dtoa_r+0x188>
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	1bdb      	subs	r3, r3, r7
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	427b      	negs	r3, r7
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	2300      	movs	r3, #0
 8005d46:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d48:	e7c3      	b.n	8005cd2 <_dtoa_r+0x1b2>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d50:	eb07 0b03 	add.w	fp, r7, r3
 8005d54:	f10b 0301 	add.w	r3, fp, #1
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	9303      	str	r3, [sp, #12]
 8005d5c:	bfb8      	it	lt
 8005d5e:	2301      	movlt	r3, #1
 8005d60:	e006      	b.n	8005d70 <_dtoa_r+0x250>
 8005d62:	2301      	movs	r3, #1
 8005d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd28      	ble.n	8005dbe <_dtoa_r+0x29e>
 8005d6c:	469b      	mov	fp, r3
 8005d6e:	9303      	str	r3, [sp, #12]
 8005d70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005d74:	2100      	movs	r1, #0
 8005d76:	2204      	movs	r2, #4
 8005d78:	f102 0514 	add.w	r5, r2, #20
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	d926      	bls.n	8005dce <_dtoa_r+0x2ae>
 8005d80:	6041      	str	r1, [r0, #4]
 8005d82:	4648      	mov	r0, r9
 8005d84:	f000 fd9c 	bl	80068c0 <_Balloc>
 8005d88:	4682      	mov	sl, r0
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d142      	bne.n	8005e14 <_dtoa_r+0x2f4>
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <_dtoa_r+0x2e8>)
 8005d90:	4602      	mov	r2, r0
 8005d92:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d96:	e6da      	b.n	8005b4e <_dtoa_r+0x2e>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e7e3      	b.n	8005d64 <_dtoa_r+0x244>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e7d5      	b.n	8005d4c <_dtoa_r+0x22c>
 8005da0:	2401      	movs	r4, #1
 8005da2:	2300      	movs	r3, #0
 8005da4:	9307      	str	r3, [sp, #28]
 8005da6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005da8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8cd b00c 	str.w	fp, [sp, #12]
 8005db2:	2312      	movs	r3, #18
 8005db4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005db6:	e7db      	b.n	8005d70 <_dtoa_r+0x250>
 8005db8:	2301      	movs	r3, #1
 8005dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbc:	e7f4      	b.n	8005da8 <_dtoa_r+0x288>
 8005dbe:	f04f 0b01 	mov.w	fp, #1
 8005dc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005dcc:	e7d0      	b.n	8005d70 <_dtoa_r+0x250>
 8005dce:	3101      	adds	r1, #1
 8005dd0:	0052      	lsls	r2, r2, #1
 8005dd2:	e7d1      	b.n	8005d78 <_dtoa_r+0x258>
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	636f4361 	.word	0x636f4361
 8005ddc:	3fd287a7 	.word	0x3fd287a7
 8005de0:	8b60c8b3 	.word	0x8b60c8b3
 8005de4:	3fc68a28 	.word	0x3fc68a28
 8005de8:	509f79fb 	.word	0x509f79fb
 8005dec:	3fd34413 	.word	0x3fd34413
 8005df0:	08009b60 	.word	0x08009b60
 8005df4:	08009b77 	.word	0x08009b77
 8005df8:	7ff00000 	.word	0x7ff00000
 8005dfc:	08009c63 	.word	0x08009c63
 8005e00:	3ff80000 	.word	0x3ff80000
 8005e04:	08009d40 	.word	0x08009d40
 8005e08:	08009bcf 	.word	0x08009bcf
 8005e0c:	08009b5c 	.word	0x08009b5c
 8005e10:	08009c62 	.word	0x08009c62
 8005e14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e18:	6018      	str	r0, [r3, #0]
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	2b0e      	cmp	r3, #14
 8005e1e:	f200 80a1 	bhi.w	8005f64 <_dtoa_r+0x444>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	f000 809e 	beq.w	8005f64 <_dtoa_r+0x444>
 8005e28:	2f00      	cmp	r7, #0
 8005e2a:	dd33      	ble.n	8005e94 <_dtoa_r+0x374>
 8005e2c:	4b9c      	ldr	r3, [pc, #624]	@ (80060a0 <_dtoa_r+0x580>)
 8005e2e:	f007 020f 	and.w	r2, r7, #15
 8005e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e36:	ed93 7b00 	vldr	d7, [r3]
 8005e3a:	05f8      	lsls	r0, r7, #23
 8005e3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e44:	d516      	bpl.n	8005e74 <_dtoa_r+0x354>
 8005e46:	4b97      	ldr	r3, [pc, #604]	@ (80060a4 <_dtoa_r+0x584>)
 8005e48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e50:	f7fa fd04 	bl	800085c <__aeabi_ddiv>
 8005e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e58:	f004 040f 	and.w	r4, r4, #15
 8005e5c:	2603      	movs	r6, #3
 8005e5e:	4d91      	ldr	r5, [pc, #580]	@ (80060a4 <_dtoa_r+0x584>)
 8005e60:	b954      	cbnz	r4, 8005e78 <_dtoa_r+0x358>
 8005e62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e6a:	f7fa fcf7 	bl	800085c <__aeabi_ddiv>
 8005e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e72:	e028      	b.n	8005ec6 <_dtoa_r+0x3a6>
 8005e74:	2602      	movs	r6, #2
 8005e76:	e7f2      	b.n	8005e5e <_dtoa_r+0x33e>
 8005e78:	07e1      	lsls	r1, r4, #31
 8005e7a:	d508      	bpl.n	8005e8e <_dtoa_r+0x36e>
 8005e7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e84:	f7fa fbc0 	bl	8000608 <__aeabi_dmul>
 8005e88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	1064      	asrs	r4, r4, #1
 8005e90:	3508      	adds	r5, #8
 8005e92:	e7e5      	b.n	8005e60 <_dtoa_r+0x340>
 8005e94:	f000 80af 	beq.w	8005ff6 <_dtoa_r+0x4d6>
 8005e98:	427c      	negs	r4, r7
 8005e9a:	4b81      	ldr	r3, [pc, #516]	@ (80060a0 <_dtoa_r+0x580>)
 8005e9c:	4d81      	ldr	r5, [pc, #516]	@ (80060a4 <_dtoa_r+0x584>)
 8005e9e:	f004 020f 	and.w	r2, r4, #15
 8005ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eae:	f7fa fbab 	bl	8000608 <__aeabi_dmul>
 8005eb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eb6:	1124      	asrs	r4, r4, #4
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2602      	movs	r6, #2
 8005ebc:	2c00      	cmp	r4, #0
 8005ebe:	f040 808f 	bne.w	8005fe0 <_dtoa_r+0x4c0>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1d3      	bne.n	8005e6e <_dtoa_r+0x34e>
 8005ec6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ec8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8094 	beq.w	8005ffa <_dtoa_r+0x4da>
 8005ed2:	4b75      	ldr	r3, [pc, #468]	@ (80060a8 <_dtoa_r+0x588>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7fa fe07 	bl	8000aec <__aeabi_dcmplt>
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f000 808b 	beq.w	8005ffa <_dtoa_r+0x4da>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8087 	beq.w	8005ffa <_dtoa_r+0x4da>
 8005eec:	f1bb 0f00 	cmp.w	fp, #0
 8005ef0:	dd34      	ble.n	8005f5c <_dtoa_r+0x43c>
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80060ac <_dtoa_r+0x58c>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7fa fb85 	bl	8000608 <__aeabi_dmul>
 8005efe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f02:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005f06:	3601      	adds	r6, #1
 8005f08:	465c      	mov	r4, fp
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7fa fb12 	bl	8000534 <__aeabi_i2d>
 8005f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f14:	f7fa fb78 	bl	8000608 <__aeabi_dmul>
 8005f18:	4b65      	ldr	r3, [pc, #404]	@ (80060b0 <_dtoa_r+0x590>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f7fa f9be 	bl	800029c <__adddf3>
 8005f20:	4605      	mov	r5, r0
 8005f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f26:	2c00      	cmp	r4, #0
 8005f28:	d16a      	bne.n	8006000 <_dtoa_r+0x4e0>
 8005f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2e:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <_dtoa_r+0x594>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	f7fa f9b1 	bl	8000298 <__aeabi_dsub>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4633      	mov	r3, r6
 8005f42:	f7fa fdf1 	bl	8000b28 <__aeabi_dcmpgt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f040 8298 	bne.w	800647c <_dtoa_r+0x95c>
 8005f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f56:	f7fa fdc9 	bl	8000aec <__aeabi_dcmplt>
 8005f5a:	bb38      	cbnz	r0, 8005fac <_dtoa_r+0x48c>
 8005f5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005f60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f2c0 8157 	blt.w	800621a <_dtoa_r+0x6fa>
 8005f6c:	2f0e      	cmp	r7, #14
 8005f6e:	f300 8154 	bgt.w	800621a <_dtoa_r+0x6fa>
 8005f72:	4b4b      	ldr	r3, [pc, #300]	@ (80060a0 <_dtoa_r+0x580>)
 8005f74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f78:	ed93 7b00 	vldr	d7, [r3]
 8005f7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	ed8d 7b00 	vstr	d7, [sp]
 8005f84:	f280 80e5 	bge.w	8006152 <_dtoa_r+0x632>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f300 80e1 	bgt.w	8006152 <_dtoa_r+0x632>
 8005f90:	d10c      	bne.n	8005fac <_dtoa_r+0x48c>
 8005f92:	4b48      	ldr	r3, [pc, #288]	@ (80060b4 <_dtoa_r+0x594>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	ec51 0b17 	vmov	r0, r1, d7
 8005f9a:	f7fa fb35 	bl	8000608 <__aeabi_dmul>
 8005f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa2:	f7fa fdb7 	bl	8000b14 <__aeabi_dcmpge>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f000 8266 	beq.w	8006478 <_dtoa_r+0x958>
 8005fac:	2400      	movs	r4, #0
 8005fae:	4625      	mov	r5, r4
 8005fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fb2:	4656      	mov	r6, sl
 8005fb4:	ea6f 0803 	mvn.w	r8, r3
 8005fb8:	2700      	movs	r7, #0
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fcbf 	bl	8006940 <_Bfree>
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	f000 80bd 	beq.w	8006142 <_dtoa_r+0x622>
 8005fc8:	b12f      	cbz	r7, 8005fd6 <_dtoa_r+0x4b6>
 8005fca:	42af      	cmp	r7, r5
 8005fcc:	d003      	beq.n	8005fd6 <_dtoa_r+0x4b6>
 8005fce:	4639      	mov	r1, r7
 8005fd0:	4648      	mov	r0, r9
 8005fd2:	f000 fcb5 	bl	8006940 <_Bfree>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 fcb1 	bl	8006940 <_Bfree>
 8005fde:	e0b0      	b.n	8006142 <_dtoa_r+0x622>
 8005fe0:	07e2      	lsls	r2, r4, #31
 8005fe2:	d505      	bpl.n	8005ff0 <_dtoa_r+0x4d0>
 8005fe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fe8:	f7fa fb0e 	bl	8000608 <__aeabi_dmul>
 8005fec:	3601      	adds	r6, #1
 8005fee:	2301      	movs	r3, #1
 8005ff0:	1064      	asrs	r4, r4, #1
 8005ff2:	3508      	adds	r5, #8
 8005ff4:	e762      	b.n	8005ebc <_dtoa_r+0x39c>
 8005ff6:	2602      	movs	r6, #2
 8005ff8:	e765      	b.n	8005ec6 <_dtoa_r+0x3a6>
 8005ffa:	9c03      	ldr	r4, [sp, #12]
 8005ffc:	46b8      	mov	r8, r7
 8005ffe:	e784      	b.n	8005f0a <_dtoa_r+0x3ea>
 8006000:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <_dtoa_r+0x580>)
 8006002:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006004:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006008:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800600c:	4454      	add	r4, sl
 800600e:	2900      	cmp	r1, #0
 8006010:	d054      	beq.n	80060bc <_dtoa_r+0x59c>
 8006012:	4929      	ldr	r1, [pc, #164]	@ (80060b8 <_dtoa_r+0x598>)
 8006014:	2000      	movs	r0, #0
 8006016:	f7fa fc21 	bl	800085c <__aeabi_ddiv>
 800601a:	4633      	mov	r3, r6
 800601c:	462a      	mov	r2, r5
 800601e:	f7fa f93b 	bl	8000298 <__aeabi_dsub>
 8006022:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006026:	4656      	mov	r6, sl
 8006028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800602c:	f7fa fd9c 	bl	8000b68 <__aeabi_d2iz>
 8006030:	4605      	mov	r5, r0
 8006032:	f7fa fa7f 	bl	8000534 <__aeabi_i2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603e:	f7fa f92b 	bl	8000298 <__aeabi_dsub>
 8006042:	3530      	adds	r5, #48	@ 0x30
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800604c:	f806 5b01 	strb.w	r5, [r6], #1
 8006050:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006054:	f7fa fd4a 	bl	8000aec <__aeabi_dcmplt>
 8006058:	2800      	cmp	r0, #0
 800605a:	d172      	bne.n	8006142 <_dtoa_r+0x622>
 800605c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006060:	4911      	ldr	r1, [pc, #68]	@ (80060a8 <_dtoa_r+0x588>)
 8006062:	2000      	movs	r0, #0
 8006064:	f7fa f918 	bl	8000298 <__aeabi_dsub>
 8006068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800606c:	f7fa fd3e 	bl	8000aec <__aeabi_dcmplt>
 8006070:	2800      	cmp	r0, #0
 8006072:	f040 80b4 	bne.w	80061de <_dtoa_r+0x6be>
 8006076:	42a6      	cmp	r6, r4
 8006078:	f43f af70 	beq.w	8005f5c <_dtoa_r+0x43c>
 800607c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006080:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <_dtoa_r+0x58c>)
 8006082:	2200      	movs	r2, #0
 8006084:	f7fa fac0 	bl	8000608 <__aeabi_dmul>
 8006088:	4b08      	ldr	r3, [pc, #32]	@ (80060ac <_dtoa_r+0x58c>)
 800608a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800608e:	2200      	movs	r2, #0
 8006090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006094:	f7fa fab8 	bl	8000608 <__aeabi_dmul>
 8006098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800609c:	e7c4      	b.n	8006028 <_dtoa_r+0x508>
 800609e:	bf00      	nop
 80060a0:	08009d40 	.word	0x08009d40
 80060a4:	08009d18 	.word	0x08009d18
 80060a8:	3ff00000 	.word	0x3ff00000
 80060ac:	40240000 	.word	0x40240000
 80060b0:	401c0000 	.word	0x401c0000
 80060b4:	40140000 	.word	0x40140000
 80060b8:	3fe00000 	.word	0x3fe00000
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	f7fa faa2 	bl	8000608 <__aeabi_dmul>
 80060c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80060c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80060ca:	4656      	mov	r6, sl
 80060cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d0:	f7fa fd4a 	bl	8000b68 <__aeabi_d2iz>
 80060d4:	4605      	mov	r5, r0
 80060d6:	f7fa fa2d 	bl	8000534 <__aeabi_i2d>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060e2:	f7fa f8d9 	bl	8000298 <__aeabi_dsub>
 80060e6:	3530      	adds	r5, #48	@ 0x30
 80060e8:	f806 5b01 	strb.w	r5, [r6], #1
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	d124      	bne.n	8006146 <_dtoa_r+0x626>
 80060fc:	4baf      	ldr	r3, [pc, #700]	@ (80063bc <_dtoa_r+0x89c>)
 80060fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006102:	f7fa f8cb 	bl	800029c <__adddf3>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800610e:	f7fa fd0b 	bl	8000b28 <__aeabi_dcmpgt>
 8006112:	2800      	cmp	r0, #0
 8006114:	d163      	bne.n	80061de <_dtoa_r+0x6be>
 8006116:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800611a:	49a8      	ldr	r1, [pc, #672]	@ (80063bc <_dtoa_r+0x89c>)
 800611c:	2000      	movs	r0, #0
 800611e:	f7fa f8bb 	bl	8000298 <__aeabi_dsub>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800612a:	f7fa fcdf 	bl	8000aec <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	f43f af14 	beq.w	8005f5c <_dtoa_r+0x43c>
 8006134:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006136:	1e73      	subs	r3, r6, #1
 8006138:	9313      	str	r3, [sp, #76]	@ 0x4c
 800613a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800613e:	2b30      	cmp	r3, #48	@ 0x30
 8006140:	d0f8      	beq.n	8006134 <_dtoa_r+0x614>
 8006142:	4647      	mov	r7, r8
 8006144:	e03b      	b.n	80061be <_dtoa_r+0x69e>
 8006146:	4b9e      	ldr	r3, [pc, #632]	@ (80063c0 <_dtoa_r+0x8a0>)
 8006148:	f7fa fa5e 	bl	8000608 <__aeabi_dmul>
 800614c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006150:	e7bc      	b.n	80060cc <_dtoa_r+0x5ac>
 8006152:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006156:	4656      	mov	r6, sl
 8006158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa fb7c 	bl	800085c <__aeabi_ddiv>
 8006164:	f7fa fd00 	bl	8000b68 <__aeabi_d2iz>
 8006168:	4680      	mov	r8, r0
 800616a:	f7fa f9e3 	bl	8000534 <__aeabi_i2d>
 800616e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006172:	f7fa fa49 	bl	8000608 <__aeabi_dmul>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006182:	f7fa f889 	bl	8000298 <__aeabi_dsub>
 8006186:	f806 4b01 	strb.w	r4, [r6], #1
 800618a:	9d03      	ldr	r5, [sp, #12]
 800618c:	eba6 040a 	sub.w	r4, r6, sl
 8006190:	42a5      	cmp	r5, r4
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	d133      	bne.n	8006200 <_dtoa_r+0x6e0>
 8006198:	f7fa f880 	bl	800029c <__adddf3>
 800619c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	f7fa fcc0 	bl	8000b28 <__aeabi_dcmpgt>
 80061a8:	b9c0      	cbnz	r0, 80061dc <_dtoa_r+0x6bc>
 80061aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061ae:	4620      	mov	r0, r4
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 80061b6:	b110      	cbz	r0, 80061be <_dtoa_r+0x69e>
 80061b8:	f018 0f01 	tst.w	r8, #1
 80061bc:	d10e      	bne.n	80061dc <_dtoa_r+0x6bc>
 80061be:	9902      	ldr	r1, [sp, #8]
 80061c0:	4648      	mov	r0, r9
 80061c2:	f000 fbbd 	bl	8006940 <_Bfree>
 80061c6:	2300      	movs	r3, #0
 80061c8:	7033      	strb	r3, [r6, #0]
 80061ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061cc:	3701      	adds	r7, #1
 80061ce:	601f      	str	r7, [r3, #0]
 80061d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 824b 	beq.w	800666e <_dtoa_r+0xb4e>
 80061d8:	601e      	str	r6, [r3, #0]
 80061da:	e248      	b.n	800666e <_dtoa_r+0xb4e>
 80061dc:	46b8      	mov	r8, r7
 80061de:	4633      	mov	r3, r6
 80061e0:	461e      	mov	r6, r3
 80061e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e6:	2a39      	cmp	r2, #57	@ 0x39
 80061e8:	d106      	bne.n	80061f8 <_dtoa_r+0x6d8>
 80061ea:	459a      	cmp	sl, r3
 80061ec:	d1f8      	bne.n	80061e0 <_dtoa_r+0x6c0>
 80061ee:	2230      	movs	r2, #48	@ 0x30
 80061f0:	f108 0801 	add.w	r8, r8, #1
 80061f4:	f88a 2000 	strb.w	r2, [sl]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	3201      	adds	r2, #1
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e7a0      	b.n	8006142 <_dtoa_r+0x622>
 8006200:	4b6f      	ldr	r3, [pc, #444]	@ (80063c0 <_dtoa_r+0x8a0>)
 8006202:	2200      	movs	r2, #0
 8006204:	f7fa fa00 	bl	8000608 <__aeabi_dmul>
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	f7fa fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8006214:	2800      	cmp	r0, #0
 8006216:	d09f      	beq.n	8006158 <_dtoa_r+0x638>
 8006218:	e7d1      	b.n	80061be <_dtoa_r+0x69e>
 800621a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800621c:	2a00      	cmp	r2, #0
 800621e:	f000 80ea 	beq.w	80063f6 <_dtoa_r+0x8d6>
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	2a01      	cmp	r2, #1
 8006226:	f300 80cd 	bgt.w	80063c4 <_dtoa_r+0x8a4>
 800622a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800622c:	2a00      	cmp	r2, #0
 800622e:	f000 80c1 	beq.w	80063b4 <_dtoa_r+0x894>
 8006232:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006236:	9c08      	ldr	r4, [sp, #32]
 8006238:	9e00      	ldr	r6, [sp, #0]
 800623a:	9a00      	ldr	r2, [sp, #0]
 800623c:	441a      	add	r2, r3
 800623e:	9200      	str	r2, [sp, #0]
 8006240:	9a06      	ldr	r2, [sp, #24]
 8006242:	2101      	movs	r1, #1
 8006244:	441a      	add	r2, r3
 8006246:	4648      	mov	r0, r9
 8006248:	9206      	str	r2, [sp, #24]
 800624a:	f000 fc77 	bl	8006b3c <__i2b>
 800624e:	4605      	mov	r5, r0
 8006250:	b166      	cbz	r6, 800626c <_dtoa_r+0x74c>
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd09      	ble.n	800626c <_dtoa_r+0x74c>
 8006258:	42b3      	cmp	r3, r6
 800625a:	9a00      	ldr	r2, [sp, #0]
 800625c:	bfa8      	it	ge
 800625e:	4633      	movge	r3, r6
 8006260:	1ad2      	subs	r2, r2, r3
 8006262:	9200      	str	r2, [sp, #0]
 8006264:	9a06      	ldr	r2, [sp, #24]
 8006266:	1af6      	subs	r6, r6, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	9306      	str	r3, [sp, #24]
 800626c:	9b08      	ldr	r3, [sp, #32]
 800626e:	b30b      	cbz	r3, 80062b4 <_dtoa_r+0x794>
 8006270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80c6 	beq.w	8006404 <_dtoa_r+0x8e4>
 8006278:	2c00      	cmp	r4, #0
 800627a:	f000 80c0 	beq.w	80063fe <_dtoa_r+0x8de>
 800627e:	4629      	mov	r1, r5
 8006280:	4622      	mov	r2, r4
 8006282:	4648      	mov	r0, r9
 8006284:	f000 fd12 	bl	8006cac <__pow5mult>
 8006288:	9a02      	ldr	r2, [sp, #8]
 800628a:	4601      	mov	r1, r0
 800628c:	4605      	mov	r5, r0
 800628e:	4648      	mov	r0, r9
 8006290:	f000 fc6a 	bl	8006b68 <__multiply>
 8006294:	9902      	ldr	r1, [sp, #8]
 8006296:	4680      	mov	r8, r0
 8006298:	4648      	mov	r0, r9
 800629a:	f000 fb51 	bl	8006940 <_Bfree>
 800629e:	9b08      	ldr	r3, [sp, #32]
 80062a0:	1b1b      	subs	r3, r3, r4
 80062a2:	9308      	str	r3, [sp, #32]
 80062a4:	f000 80b1 	beq.w	800640a <_dtoa_r+0x8ea>
 80062a8:	9a08      	ldr	r2, [sp, #32]
 80062aa:	4641      	mov	r1, r8
 80062ac:	4648      	mov	r0, r9
 80062ae:	f000 fcfd 	bl	8006cac <__pow5mult>
 80062b2:	9002      	str	r0, [sp, #8]
 80062b4:	2101      	movs	r1, #1
 80062b6:	4648      	mov	r0, r9
 80062b8:	f000 fc40 	bl	8006b3c <__i2b>
 80062bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062be:	4604      	mov	r4, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 81d8 	beq.w	8006676 <_dtoa_r+0xb56>
 80062c6:	461a      	mov	r2, r3
 80062c8:	4601      	mov	r1, r0
 80062ca:	4648      	mov	r0, r9
 80062cc:	f000 fcee 	bl	8006cac <__pow5mult>
 80062d0:	9b07      	ldr	r3, [sp, #28]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	4604      	mov	r4, r0
 80062d6:	f300 809f 	bgt.w	8006418 <_dtoa_r+0x8f8>
 80062da:	9b04      	ldr	r3, [sp, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 8097 	bne.w	8006410 <_dtoa_r+0x8f0>
 80062e2:	9b05      	ldr	r3, [sp, #20]
 80062e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 8093 	bne.w	8006414 <_dtoa_r+0x8f4>
 80062ee:	9b05      	ldr	r3, [sp, #20]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	051b      	lsls	r3, r3, #20
 80062f8:	b133      	cbz	r3, 8006308 <_dtoa_r+0x7e8>
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	9b06      	ldr	r3, [sp, #24]
 8006302:	3301      	adds	r3, #1
 8006304:	9306      	str	r3, [sp, #24]
 8006306:	2301      	movs	r3, #1
 8006308:	9308      	str	r3, [sp, #32]
 800630a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 81b8 	beq.w	8006682 <_dtoa_r+0xb62>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006318:	6918      	ldr	r0, [r3, #16]
 800631a:	f000 fbc3 	bl	8006aa4 <__hi0bits>
 800631e:	f1c0 0020 	rsb	r0, r0, #32
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	4418      	add	r0, r3
 8006326:	f010 001f 	ands.w	r0, r0, #31
 800632a:	f000 8082 	beq.w	8006432 <_dtoa_r+0x912>
 800632e:	f1c0 0320 	rsb	r3, r0, #32
 8006332:	2b04      	cmp	r3, #4
 8006334:	dd73      	ble.n	800641e <_dtoa_r+0x8fe>
 8006336:	9b00      	ldr	r3, [sp, #0]
 8006338:	f1c0 001c 	rsb	r0, r0, #28
 800633c:	4403      	add	r3, r0
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	9b06      	ldr	r3, [sp, #24]
 8006342:	4403      	add	r3, r0
 8006344:	4406      	add	r6, r0
 8006346:	9306      	str	r3, [sp, #24]
 8006348:	9b00      	ldr	r3, [sp, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd05      	ble.n	800635a <_dtoa_r+0x83a>
 800634e:	9902      	ldr	r1, [sp, #8]
 8006350:	461a      	mov	r2, r3
 8006352:	4648      	mov	r0, r9
 8006354:	f000 fd04 	bl	8006d60 <__lshift>
 8006358:	9002      	str	r0, [sp, #8]
 800635a:	9b06      	ldr	r3, [sp, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dd05      	ble.n	800636c <_dtoa_r+0x84c>
 8006360:	4621      	mov	r1, r4
 8006362:	461a      	mov	r2, r3
 8006364:	4648      	mov	r0, r9
 8006366:	f000 fcfb 	bl	8006d60 <__lshift>
 800636a:	4604      	mov	r4, r0
 800636c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d061      	beq.n	8006436 <_dtoa_r+0x916>
 8006372:	9802      	ldr	r0, [sp, #8]
 8006374:	4621      	mov	r1, r4
 8006376:	f000 fd5f 	bl	8006e38 <__mcmp>
 800637a:	2800      	cmp	r0, #0
 800637c:	da5b      	bge.n	8006436 <_dtoa_r+0x916>
 800637e:	2300      	movs	r3, #0
 8006380:	9902      	ldr	r1, [sp, #8]
 8006382:	220a      	movs	r2, #10
 8006384:	4648      	mov	r0, r9
 8006386:	f000 fafd 	bl	8006984 <__multadd>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	9002      	str	r0, [sp, #8]
 800638e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8177 	beq.w	8006686 <_dtoa_r+0xb66>
 8006398:	4629      	mov	r1, r5
 800639a:	2300      	movs	r3, #0
 800639c:	220a      	movs	r2, #10
 800639e:	4648      	mov	r0, r9
 80063a0:	f000 faf0 	bl	8006984 <__multadd>
 80063a4:	f1bb 0f00 	cmp.w	fp, #0
 80063a8:	4605      	mov	r5, r0
 80063aa:	dc6f      	bgt.n	800648c <_dtoa_r+0x96c>
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	dc49      	bgt.n	8006446 <_dtoa_r+0x926>
 80063b2:	e06b      	b.n	800648c <_dtoa_r+0x96c>
 80063b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063ba:	e73c      	b.n	8006236 <_dtoa_r+0x716>
 80063bc:	3fe00000 	.word	0x3fe00000
 80063c0:	40240000 	.word	0x40240000
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	1e5c      	subs	r4, r3, #1
 80063c8:	9b08      	ldr	r3, [sp, #32]
 80063ca:	42a3      	cmp	r3, r4
 80063cc:	db09      	blt.n	80063e2 <_dtoa_r+0x8c2>
 80063ce:	1b1c      	subs	r4, r3, r4
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f6bf af30 	bge.w	8006238 <_dtoa_r+0x718>
 80063d8:	9b00      	ldr	r3, [sp, #0]
 80063da:	9a03      	ldr	r2, [sp, #12]
 80063dc:	1a9e      	subs	r6, r3, r2
 80063de:	2300      	movs	r3, #0
 80063e0:	e72b      	b.n	800623a <_dtoa_r+0x71a>
 80063e2:	9b08      	ldr	r3, [sp, #32]
 80063e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063e6:	9408      	str	r4, [sp, #32]
 80063e8:	1ae3      	subs	r3, r4, r3
 80063ea:	441a      	add	r2, r3
 80063ec:	9e00      	ldr	r6, [sp, #0]
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80063f2:	2400      	movs	r4, #0
 80063f4:	e721      	b.n	800623a <_dtoa_r+0x71a>
 80063f6:	9c08      	ldr	r4, [sp, #32]
 80063f8:	9e00      	ldr	r6, [sp, #0]
 80063fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80063fc:	e728      	b.n	8006250 <_dtoa_r+0x730>
 80063fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006402:	e751      	b.n	80062a8 <_dtoa_r+0x788>
 8006404:	9a08      	ldr	r2, [sp, #32]
 8006406:	9902      	ldr	r1, [sp, #8]
 8006408:	e750      	b.n	80062ac <_dtoa_r+0x78c>
 800640a:	f8cd 8008 	str.w	r8, [sp, #8]
 800640e:	e751      	b.n	80062b4 <_dtoa_r+0x794>
 8006410:	2300      	movs	r3, #0
 8006412:	e779      	b.n	8006308 <_dtoa_r+0x7e8>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	e777      	b.n	8006308 <_dtoa_r+0x7e8>
 8006418:	2300      	movs	r3, #0
 800641a:	9308      	str	r3, [sp, #32]
 800641c:	e779      	b.n	8006312 <_dtoa_r+0x7f2>
 800641e:	d093      	beq.n	8006348 <_dtoa_r+0x828>
 8006420:	9a00      	ldr	r2, [sp, #0]
 8006422:	331c      	adds	r3, #28
 8006424:	441a      	add	r2, r3
 8006426:	9200      	str	r2, [sp, #0]
 8006428:	9a06      	ldr	r2, [sp, #24]
 800642a:	441a      	add	r2, r3
 800642c:	441e      	add	r6, r3
 800642e:	9206      	str	r2, [sp, #24]
 8006430:	e78a      	b.n	8006348 <_dtoa_r+0x828>
 8006432:	4603      	mov	r3, r0
 8006434:	e7f4      	b.n	8006420 <_dtoa_r+0x900>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	46b8      	mov	r8, r7
 800643c:	dc20      	bgt.n	8006480 <_dtoa_r+0x960>
 800643e:	469b      	mov	fp, r3
 8006440:	9b07      	ldr	r3, [sp, #28]
 8006442:	2b02      	cmp	r3, #2
 8006444:	dd1e      	ble.n	8006484 <_dtoa_r+0x964>
 8006446:	f1bb 0f00 	cmp.w	fp, #0
 800644a:	f47f adb1 	bne.w	8005fb0 <_dtoa_r+0x490>
 800644e:	4621      	mov	r1, r4
 8006450:	465b      	mov	r3, fp
 8006452:	2205      	movs	r2, #5
 8006454:	4648      	mov	r0, r9
 8006456:	f000 fa95 	bl	8006984 <__multadd>
 800645a:	4601      	mov	r1, r0
 800645c:	4604      	mov	r4, r0
 800645e:	9802      	ldr	r0, [sp, #8]
 8006460:	f000 fcea 	bl	8006e38 <__mcmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	f77f ada3 	ble.w	8005fb0 <_dtoa_r+0x490>
 800646a:	4656      	mov	r6, sl
 800646c:	2331      	movs	r3, #49	@ 0x31
 800646e:	f806 3b01 	strb.w	r3, [r6], #1
 8006472:	f108 0801 	add.w	r8, r8, #1
 8006476:	e59f      	b.n	8005fb8 <_dtoa_r+0x498>
 8006478:	9c03      	ldr	r4, [sp, #12]
 800647a:	46b8      	mov	r8, r7
 800647c:	4625      	mov	r5, r4
 800647e:	e7f4      	b.n	800646a <_dtoa_r+0x94a>
 8006480:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8101 	beq.w	800668e <_dtoa_r+0xb6e>
 800648c:	2e00      	cmp	r6, #0
 800648e:	dd05      	ble.n	800649c <_dtoa_r+0x97c>
 8006490:	4629      	mov	r1, r5
 8006492:	4632      	mov	r2, r6
 8006494:	4648      	mov	r0, r9
 8006496:	f000 fc63 	bl	8006d60 <__lshift>
 800649a:	4605      	mov	r5, r0
 800649c:	9b08      	ldr	r3, [sp, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d05c      	beq.n	800655c <_dtoa_r+0xa3c>
 80064a2:	6869      	ldr	r1, [r5, #4]
 80064a4:	4648      	mov	r0, r9
 80064a6:	f000 fa0b 	bl	80068c0 <_Balloc>
 80064aa:	4606      	mov	r6, r0
 80064ac:	b928      	cbnz	r0, 80064ba <_dtoa_r+0x99a>
 80064ae:	4b82      	ldr	r3, [pc, #520]	@ (80066b8 <_dtoa_r+0xb98>)
 80064b0:	4602      	mov	r2, r0
 80064b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80064b6:	f7ff bb4a 	b.w	8005b4e <_dtoa_r+0x2e>
 80064ba:	692a      	ldr	r2, [r5, #16]
 80064bc:	3202      	adds	r2, #2
 80064be:	0092      	lsls	r2, r2, #2
 80064c0:	f105 010c 	add.w	r1, r5, #12
 80064c4:	300c      	adds	r0, #12
 80064c6:	f002 fe37 	bl	8009138 <memcpy>
 80064ca:	2201      	movs	r2, #1
 80064cc:	4631      	mov	r1, r6
 80064ce:	4648      	mov	r0, r9
 80064d0:	f000 fc46 	bl	8006d60 <__lshift>
 80064d4:	f10a 0301 	add.w	r3, sl, #1
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	eb0a 030b 	add.w	r3, sl, fp
 80064de:	9308      	str	r3, [sp, #32]
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	462f      	mov	r7, r5
 80064e8:	9306      	str	r3, [sp, #24]
 80064ea:	4605      	mov	r5, r0
 80064ec:	9b00      	ldr	r3, [sp, #0]
 80064ee:	9802      	ldr	r0, [sp, #8]
 80064f0:	4621      	mov	r1, r4
 80064f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80064f6:	f7ff fa8b 	bl	8005a10 <quorem>
 80064fa:	4603      	mov	r3, r0
 80064fc:	3330      	adds	r3, #48	@ 0x30
 80064fe:	9003      	str	r0, [sp, #12]
 8006500:	4639      	mov	r1, r7
 8006502:	9802      	ldr	r0, [sp, #8]
 8006504:	9309      	str	r3, [sp, #36]	@ 0x24
 8006506:	f000 fc97 	bl	8006e38 <__mcmp>
 800650a:	462a      	mov	r2, r5
 800650c:	9004      	str	r0, [sp, #16]
 800650e:	4621      	mov	r1, r4
 8006510:	4648      	mov	r0, r9
 8006512:	f000 fcad 	bl	8006e70 <__mdiff>
 8006516:	68c2      	ldr	r2, [r0, #12]
 8006518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651a:	4606      	mov	r6, r0
 800651c:	bb02      	cbnz	r2, 8006560 <_dtoa_r+0xa40>
 800651e:	4601      	mov	r1, r0
 8006520:	9802      	ldr	r0, [sp, #8]
 8006522:	f000 fc89 	bl	8006e38 <__mcmp>
 8006526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006528:	4602      	mov	r2, r0
 800652a:	4631      	mov	r1, r6
 800652c:	4648      	mov	r0, r9
 800652e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006530:	9309      	str	r3, [sp, #36]	@ 0x24
 8006532:	f000 fa05 	bl	8006940 <_Bfree>
 8006536:	9b07      	ldr	r3, [sp, #28]
 8006538:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800653a:	9e00      	ldr	r6, [sp, #0]
 800653c:	ea42 0103 	orr.w	r1, r2, r3
 8006540:	9b06      	ldr	r3, [sp, #24]
 8006542:	4319      	orrs	r1, r3
 8006544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006546:	d10d      	bne.n	8006564 <_dtoa_r+0xa44>
 8006548:	2b39      	cmp	r3, #57	@ 0x39
 800654a:	d027      	beq.n	800659c <_dtoa_r+0xa7c>
 800654c:	9a04      	ldr	r2, [sp, #16]
 800654e:	2a00      	cmp	r2, #0
 8006550:	dd01      	ble.n	8006556 <_dtoa_r+0xa36>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	3331      	adds	r3, #49	@ 0x31
 8006556:	f88b 3000 	strb.w	r3, [fp]
 800655a:	e52e      	b.n	8005fba <_dtoa_r+0x49a>
 800655c:	4628      	mov	r0, r5
 800655e:	e7b9      	b.n	80064d4 <_dtoa_r+0x9b4>
 8006560:	2201      	movs	r2, #1
 8006562:	e7e2      	b.n	800652a <_dtoa_r+0xa0a>
 8006564:	9904      	ldr	r1, [sp, #16]
 8006566:	2900      	cmp	r1, #0
 8006568:	db04      	blt.n	8006574 <_dtoa_r+0xa54>
 800656a:	9807      	ldr	r0, [sp, #28]
 800656c:	4301      	orrs	r1, r0
 800656e:	9806      	ldr	r0, [sp, #24]
 8006570:	4301      	orrs	r1, r0
 8006572:	d120      	bne.n	80065b6 <_dtoa_r+0xa96>
 8006574:	2a00      	cmp	r2, #0
 8006576:	ddee      	ble.n	8006556 <_dtoa_r+0xa36>
 8006578:	9902      	ldr	r1, [sp, #8]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	4648      	mov	r0, r9
 8006580:	f000 fbee 	bl	8006d60 <__lshift>
 8006584:	4621      	mov	r1, r4
 8006586:	9002      	str	r0, [sp, #8]
 8006588:	f000 fc56 	bl	8006e38 <__mcmp>
 800658c:	2800      	cmp	r0, #0
 800658e:	9b00      	ldr	r3, [sp, #0]
 8006590:	dc02      	bgt.n	8006598 <_dtoa_r+0xa78>
 8006592:	d1e0      	bne.n	8006556 <_dtoa_r+0xa36>
 8006594:	07da      	lsls	r2, r3, #31
 8006596:	d5de      	bpl.n	8006556 <_dtoa_r+0xa36>
 8006598:	2b39      	cmp	r3, #57	@ 0x39
 800659a:	d1da      	bne.n	8006552 <_dtoa_r+0xa32>
 800659c:	2339      	movs	r3, #57	@ 0x39
 800659e:	f88b 3000 	strb.w	r3, [fp]
 80065a2:	4633      	mov	r3, r6
 80065a4:	461e      	mov	r6, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80065ac:	2a39      	cmp	r2, #57	@ 0x39
 80065ae:	d04e      	beq.n	800664e <_dtoa_r+0xb2e>
 80065b0:	3201      	adds	r2, #1
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e501      	b.n	8005fba <_dtoa_r+0x49a>
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	dd03      	ble.n	80065c2 <_dtoa_r+0xaa2>
 80065ba:	2b39      	cmp	r3, #57	@ 0x39
 80065bc:	d0ee      	beq.n	800659c <_dtoa_r+0xa7c>
 80065be:	3301      	adds	r3, #1
 80065c0:	e7c9      	b.n	8006556 <_dtoa_r+0xa36>
 80065c2:	9a00      	ldr	r2, [sp, #0]
 80065c4:	9908      	ldr	r1, [sp, #32]
 80065c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80065ca:	428a      	cmp	r2, r1
 80065cc:	d028      	beq.n	8006620 <_dtoa_r+0xb00>
 80065ce:	9902      	ldr	r1, [sp, #8]
 80065d0:	2300      	movs	r3, #0
 80065d2:	220a      	movs	r2, #10
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 f9d5 	bl	8006984 <__multadd>
 80065da:	42af      	cmp	r7, r5
 80065dc:	9002      	str	r0, [sp, #8]
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	f04f 020a 	mov.w	r2, #10
 80065e6:	4639      	mov	r1, r7
 80065e8:	4648      	mov	r0, r9
 80065ea:	d107      	bne.n	80065fc <_dtoa_r+0xadc>
 80065ec:	f000 f9ca 	bl	8006984 <__multadd>
 80065f0:	4607      	mov	r7, r0
 80065f2:	4605      	mov	r5, r0
 80065f4:	9b00      	ldr	r3, [sp, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	e777      	b.n	80064ec <_dtoa_r+0x9cc>
 80065fc:	f000 f9c2 	bl	8006984 <__multadd>
 8006600:	4629      	mov	r1, r5
 8006602:	4607      	mov	r7, r0
 8006604:	2300      	movs	r3, #0
 8006606:	220a      	movs	r2, #10
 8006608:	4648      	mov	r0, r9
 800660a:	f000 f9bb 	bl	8006984 <__multadd>
 800660e:	4605      	mov	r5, r0
 8006610:	e7f0      	b.n	80065f4 <_dtoa_r+0xad4>
 8006612:	f1bb 0f00 	cmp.w	fp, #0
 8006616:	bfcc      	ite	gt
 8006618:	465e      	movgt	r6, fp
 800661a:	2601      	movle	r6, #1
 800661c:	4456      	add	r6, sl
 800661e:	2700      	movs	r7, #0
 8006620:	9902      	ldr	r1, [sp, #8]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2201      	movs	r2, #1
 8006626:	4648      	mov	r0, r9
 8006628:	f000 fb9a 	bl	8006d60 <__lshift>
 800662c:	4621      	mov	r1, r4
 800662e:	9002      	str	r0, [sp, #8]
 8006630:	f000 fc02 	bl	8006e38 <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	dcb4      	bgt.n	80065a2 <_dtoa_r+0xa82>
 8006638:	d102      	bne.n	8006640 <_dtoa_r+0xb20>
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	07db      	lsls	r3, r3, #31
 800663e:	d4b0      	bmi.n	80065a2 <_dtoa_r+0xa82>
 8006640:	4633      	mov	r3, r6
 8006642:	461e      	mov	r6, r3
 8006644:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006648:	2a30      	cmp	r2, #48	@ 0x30
 800664a:	d0fa      	beq.n	8006642 <_dtoa_r+0xb22>
 800664c:	e4b5      	b.n	8005fba <_dtoa_r+0x49a>
 800664e:	459a      	cmp	sl, r3
 8006650:	d1a8      	bne.n	80065a4 <_dtoa_r+0xa84>
 8006652:	2331      	movs	r3, #49	@ 0x31
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	f88a 3000 	strb.w	r3, [sl]
 800665c:	e4ad      	b.n	8005fba <_dtoa_r+0x49a>
 800665e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006660:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80066bc <_dtoa_r+0xb9c>
 8006664:	b11b      	cbz	r3, 800666e <_dtoa_r+0xb4e>
 8006666:	f10a 0308 	add.w	r3, sl, #8
 800666a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4650      	mov	r0, sl
 8006670:	b017      	add	sp, #92	@ 0x5c
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	2b01      	cmp	r3, #1
 800667a:	f77f ae2e 	ble.w	80062da <_dtoa_r+0x7ba>
 800667e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006680:	9308      	str	r3, [sp, #32]
 8006682:	2001      	movs	r0, #1
 8006684:	e64d      	b.n	8006322 <_dtoa_r+0x802>
 8006686:	f1bb 0f00 	cmp.w	fp, #0
 800668a:	f77f aed9 	ble.w	8006440 <_dtoa_r+0x920>
 800668e:	4656      	mov	r6, sl
 8006690:	9802      	ldr	r0, [sp, #8]
 8006692:	4621      	mov	r1, r4
 8006694:	f7ff f9bc 	bl	8005a10 <quorem>
 8006698:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800669c:	f806 3b01 	strb.w	r3, [r6], #1
 80066a0:	eba6 020a 	sub.w	r2, r6, sl
 80066a4:	4593      	cmp	fp, r2
 80066a6:	ddb4      	ble.n	8006612 <_dtoa_r+0xaf2>
 80066a8:	9902      	ldr	r1, [sp, #8]
 80066aa:	2300      	movs	r3, #0
 80066ac:	220a      	movs	r2, #10
 80066ae:	4648      	mov	r0, r9
 80066b0:	f000 f968 	bl	8006984 <__multadd>
 80066b4:	9002      	str	r0, [sp, #8]
 80066b6:	e7eb      	b.n	8006690 <_dtoa_r+0xb70>
 80066b8:	08009bcf 	.word	0x08009bcf
 80066bc:	08009b53 	.word	0x08009b53

080066c0 <_free_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d041      	beq.n	800674c <_free_r+0x8c>
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f0c      	subs	r4, r1, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfb8      	it	lt
 80066d2:	18e4      	addlt	r4, r4, r3
 80066d4:	f000 f8e8 	bl	80068a8 <__malloc_lock>
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <_free_r+0x90>)
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	b933      	cbnz	r3, 80066ec <_free_r+0x2c>
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	4628      	mov	r0, r5
 80066e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e8:	f000 b8e4 	b.w	80068b4 <__malloc_unlock>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d908      	bls.n	8006702 <_free_r+0x42>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	1821      	adds	r1, r4, r0
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf01      	itttt	eq
 80066f8:	6819      	ldreq	r1, [r3, #0]
 80066fa:	685b      	ldreq	r3, [r3, #4]
 80066fc:	1809      	addeq	r1, r1, r0
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	e7ed      	b.n	80066de <_free_r+0x1e>
 8006702:	461a      	mov	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b10b      	cbz	r3, 800670c <_free_r+0x4c>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d9fa      	bls.n	8006702 <_free_r+0x42>
 800670c:	6811      	ldr	r1, [r2, #0]
 800670e:	1850      	adds	r0, r2, r1
 8006710:	42a0      	cmp	r0, r4
 8006712:	d10b      	bne.n	800672c <_free_r+0x6c>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	4401      	add	r1, r0
 8006718:	1850      	adds	r0, r2, r1
 800671a:	4283      	cmp	r3, r0
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	d1e0      	bne.n	80066e2 <_free_r+0x22>
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	6053      	str	r3, [r2, #4]
 8006726:	4408      	add	r0, r1
 8006728:	6010      	str	r0, [r2, #0]
 800672a:	e7da      	b.n	80066e2 <_free_r+0x22>
 800672c:	d902      	bls.n	8006734 <_free_r+0x74>
 800672e:	230c      	movs	r3, #12
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	e7d6      	b.n	80066e2 <_free_r+0x22>
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	1821      	adds	r1, r4, r0
 8006738:	428b      	cmp	r3, r1
 800673a:	bf04      	itt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	bf04      	itt	eq
 8006744:	1809      	addeq	r1, r1, r0
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	6054      	str	r4, [r2, #4]
 800674a:	e7ca      	b.n	80066e2 <_free_r+0x22>
 800674c:	bd38      	pop	{r3, r4, r5, pc}
 800674e:	bf00      	nop
 8006750:	20000414 	.word	0x20000414

08006754 <malloc>:
 8006754:	4b02      	ldr	r3, [pc, #8]	@ (8006760 <malloc+0xc>)
 8006756:	4601      	mov	r1, r0
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f000 b825 	b.w	80067a8 <_malloc_r>
 800675e:	bf00      	nop
 8006760:	20000018 	.word	0x20000018

08006764 <sbrk_aligned>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4e0f      	ldr	r6, [pc, #60]	@ (80067a4 <sbrk_aligned+0x40>)
 8006768:	460c      	mov	r4, r1
 800676a:	6831      	ldr	r1, [r6, #0]
 800676c:	4605      	mov	r5, r0
 800676e:	b911      	cbnz	r1, 8006776 <sbrk_aligned+0x12>
 8006770:	f002 fcd2 	bl	8009118 <_sbrk_r>
 8006774:	6030      	str	r0, [r6, #0]
 8006776:	4621      	mov	r1, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f002 fccd 	bl	8009118 <_sbrk_r>
 800677e:	1c43      	adds	r3, r0, #1
 8006780:	d103      	bne.n	800678a <sbrk_aligned+0x26>
 8006782:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006786:	4620      	mov	r0, r4
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	1cc4      	adds	r4, r0, #3
 800678c:	f024 0403 	bic.w	r4, r4, #3
 8006790:	42a0      	cmp	r0, r4
 8006792:	d0f8      	beq.n	8006786 <sbrk_aligned+0x22>
 8006794:	1a21      	subs	r1, r4, r0
 8006796:	4628      	mov	r0, r5
 8006798:	f002 fcbe 	bl	8009118 <_sbrk_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d1f2      	bne.n	8006786 <sbrk_aligned+0x22>
 80067a0:	e7ef      	b.n	8006782 <sbrk_aligned+0x1e>
 80067a2:	bf00      	nop
 80067a4:	20000410 	.word	0x20000410

080067a8 <_malloc_r>:
 80067a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	1ccd      	adds	r5, r1, #3
 80067ae:	f025 0503 	bic.w	r5, r5, #3
 80067b2:	3508      	adds	r5, #8
 80067b4:	2d0c      	cmp	r5, #12
 80067b6:	bf38      	it	cc
 80067b8:	250c      	movcc	r5, #12
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	4606      	mov	r6, r0
 80067be:	db01      	blt.n	80067c4 <_malloc_r+0x1c>
 80067c0:	42a9      	cmp	r1, r5
 80067c2:	d904      	bls.n	80067ce <_malloc_r+0x26>
 80067c4:	230c      	movs	r3, #12
 80067c6:	6033      	str	r3, [r6, #0]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068a4 <_malloc_r+0xfc>
 80067d2:	f000 f869 	bl	80068a8 <__malloc_lock>
 80067d6:	f8d8 3000 	ldr.w	r3, [r8]
 80067da:	461c      	mov	r4, r3
 80067dc:	bb44      	cbnz	r4, 8006830 <_malloc_r+0x88>
 80067de:	4629      	mov	r1, r5
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff ffbf 	bl	8006764 <sbrk_aligned>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	4604      	mov	r4, r0
 80067ea:	d158      	bne.n	800689e <_malloc_r+0xf6>
 80067ec:	f8d8 4000 	ldr.w	r4, [r8]
 80067f0:	4627      	mov	r7, r4
 80067f2:	2f00      	cmp	r7, #0
 80067f4:	d143      	bne.n	800687e <_malloc_r+0xd6>
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d04b      	beq.n	8006892 <_malloc_r+0xea>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	4639      	mov	r1, r7
 80067fe:	4630      	mov	r0, r6
 8006800:	eb04 0903 	add.w	r9, r4, r3
 8006804:	f002 fc88 	bl	8009118 <_sbrk_r>
 8006808:	4581      	cmp	r9, r0
 800680a:	d142      	bne.n	8006892 <_malloc_r+0xea>
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	1a6d      	subs	r5, r5, r1
 8006810:	4629      	mov	r1, r5
 8006812:	4630      	mov	r0, r6
 8006814:	f7ff ffa6 	bl	8006764 <sbrk_aligned>
 8006818:	3001      	adds	r0, #1
 800681a:	d03a      	beq.n	8006892 <_malloc_r+0xea>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	442b      	add	r3, r5
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	f8d8 3000 	ldr.w	r3, [r8]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	bb62      	cbnz	r2, 8006884 <_malloc_r+0xdc>
 800682a:	f8c8 7000 	str.w	r7, [r8]
 800682e:	e00f      	b.n	8006850 <_malloc_r+0xa8>
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	1b52      	subs	r2, r2, r5
 8006834:	d420      	bmi.n	8006878 <_malloc_r+0xd0>
 8006836:	2a0b      	cmp	r2, #11
 8006838:	d917      	bls.n	800686a <_malloc_r+0xc2>
 800683a:	1961      	adds	r1, r4, r5
 800683c:	42a3      	cmp	r3, r4
 800683e:	6025      	str	r5, [r4, #0]
 8006840:	bf18      	it	ne
 8006842:	6059      	strne	r1, [r3, #4]
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	bf08      	it	eq
 8006848:	f8c8 1000 	streq.w	r1, [r8]
 800684c:	5162      	str	r2, [r4, r5]
 800684e:	604b      	str	r3, [r1, #4]
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f82f 	bl	80068b4 <__malloc_unlock>
 8006856:	f104 000b 	add.w	r0, r4, #11
 800685a:	1d23      	adds	r3, r4, #4
 800685c:	f020 0007 	bic.w	r0, r0, #7
 8006860:	1ac2      	subs	r2, r0, r3
 8006862:	bf1c      	itt	ne
 8006864:	1a1b      	subne	r3, r3, r0
 8006866:	50a3      	strne	r3, [r4, r2]
 8006868:	e7af      	b.n	80067ca <_malloc_r+0x22>
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	42a3      	cmp	r3, r4
 800686e:	bf0c      	ite	eq
 8006870:	f8c8 2000 	streq.w	r2, [r8]
 8006874:	605a      	strne	r2, [r3, #4]
 8006876:	e7eb      	b.n	8006850 <_malloc_r+0xa8>
 8006878:	4623      	mov	r3, r4
 800687a:	6864      	ldr	r4, [r4, #4]
 800687c:	e7ae      	b.n	80067dc <_malloc_r+0x34>
 800687e:	463c      	mov	r4, r7
 8006880:	687f      	ldr	r7, [r7, #4]
 8006882:	e7b6      	b.n	80067f2 <_malloc_r+0x4a>
 8006884:	461a      	mov	r2, r3
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	42a3      	cmp	r3, r4
 800688a:	d1fb      	bne.n	8006884 <_malloc_r+0xdc>
 800688c:	2300      	movs	r3, #0
 800688e:	6053      	str	r3, [r2, #4]
 8006890:	e7de      	b.n	8006850 <_malloc_r+0xa8>
 8006892:	230c      	movs	r3, #12
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	4630      	mov	r0, r6
 8006898:	f000 f80c 	bl	80068b4 <__malloc_unlock>
 800689c:	e794      	b.n	80067c8 <_malloc_r+0x20>
 800689e:	6005      	str	r5, [r0, #0]
 80068a0:	e7d6      	b.n	8006850 <_malloc_r+0xa8>
 80068a2:	bf00      	nop
 80068a4:	20000414 	.word	0x20000414

080068a8 <__malloc_lock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__malloc_lock+0x8>)
 80068aa:	f7ff b8a8 	b.w	80059fe <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	2000040c 	.word	0x2000040c

080068b4 <__malloc_unlock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	@ (80068bc <__malloc_unlock+0x8>)
 80068b6:	f7ff b8a3 	b.w	8005a00 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	2000040c 	.word	0x2000040c

080068c0 <_Balloc>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	69c6      	ldr	r6, [r0, #28]
 80068c4:	4604      	mov	r4, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	b976      	cbnz	r6, 80068e8 <_Balloc+0x28>
 80068ca:	2010      	movs	r0, #16
 80068cc:	f7ff ff42 	bl	8006754 <malloc>
 80068d0:	4602      	mov	r2, r0
 80068d2:	61e0      	str	r0, [r4, #28]
 80068d4:	b920      	cbnz	r0, 80068e0 <_Balloc+0x20>
 80068d6:	4b18      	ldr	r3, [pc, #96]	@ (8006938 <_Balloc+0x78>)
 80068d8:	4818      	ldr	r0, [pc, #96]	@ (800693c <_Balloc+0x7c>)
 80068da:	216b      	movs	r1, #107	@ 0x6b
 80068dc:	f002 fc44 	bl	8009168 <__assert_func>
 80068e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068e4:	6006      	str	r6, [r0, #0]
 80068e6:	60c6      	str	r6, [r0, #12]
 80068e8:	69e6      	ldr	r6, [r4, #28]
 80068ea:	68f3      	ldr	r3, [r6, #12]
 80068ec:	b183      	cbz	r3, 8006910 <_Balloc+0x50>
 80068ee:	69e3      	ldr	r3, [r4, #28]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068f6:	b9b8      	cbnz	r0, 8006928 <_Balloc+0x68>
 80068f8:	2101      	movs	r1, #1
 80068fa:	fa01 f605 	lsl.w	r6, r1, r5
 80068fe:	1d72      	adds	r2, r6, #5
 8006900:	0092      	lsls	r2, r2, #2
 8006902:	4620      	mov	r0, r4
 8006904:	f002 fc4e 	bl	80091a4 <_calloc_r>
 8006908:	b160      	cbz	r0, 8006924 <_Balloc+0x64>
 800690a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800690e:	e00e      	b.n	800692e <_Balloc+0x6e>
 8006910:	2221      	movs	r2, #33	@ 0x21
 8006912:	2104      	movs	r1, #4
 8006914:	4620      	mov	r0, r4
 8006916:	f002 fc45 	bl	80091a4 <_calloc_r>
 800691a:	69e3      	ldr	r3, [r4, #28]
 800691c:	60f0      	str	r0, [r6, #12]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e4      	bne.n	80068ee <_Balloc+0x2e>
 8006924:	2000      	movs	r0, #0
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	6802      	ldr	r2, [r0, #0]
 800692a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800692e:	2300      	movs	r3, #0
 8006930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006934:	e7f7      	b.n	8006926 <_Balloc+0x66>
 8006936:	bf00      	nop
 8006938:	08009b60 	.word	0x08009b60
 800693c:	08009be0 	.word	0x08009be0

08006940 <_Bfree>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	69c6      	ldr	r6, [r0, #28]
 8006944:	4605      	mov	r5, r0
 8006946:	460c      	mov	r4, r1
 8006948:	b976      	cbnz	r6, 8006968 <_Bfree+0x28>
 800694a:	2010      	movs	r0, #16
 800694c:	f7ff ff02 	bl	8006754 <malloc>
 8006950:	4602      	mov	r2, r0
 8006952:	61e8      	str	r0, [r5, #28]
 8006954:	b920      	cbnz	r0, 8006960 <_Bfree+0x20>
 8006956:	4b09      	ldr	r3, [pc, #36]	@ (800697c <_Bfree+0x3c>)
 8006958:	4809      	ldr	r0, [pc, #36]	@ (8006980 <_Bfree+0x40>)
 800695a:	218f      	movs	r1, #143	@ 0x8f
 800695c:	f002 fc04 	bl	8009168 <__assert_func>
 8006960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006964:	6006      	str	r6, [r0, #0]
 8006966:	60c6      	str	r6, [r0, #12]
 8006968:	b13c      	cbz	r4, 800697a <_Bfree+0x3a>
 800696a:	69eb      	ldr	r3, [r5, #28]
 800696c:	6862      	ldr	r2, [r4, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006974:	6021      	str	r1, [r4, #0]
 8006976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	08009b60 	.word	0x08009b60
 8006980:	08009be0 	.word	0x08009be0

08006984 <__multadd>:
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	690d      	ldr	r5, [r1, #16]
 800698a:	4607      	mov	r7, r0
 800698c:	460c      	mov	r4, r1
 800698e:	461e      	mov	r6, r3
 8006990:	f101 0c14 	add.w	ip, r1, #20
 8006994:	2000      	movs	r0, #0
 8006996:	f8dc 3000 	ldr.w	r3, [ip]
 800699a:	b299      	uxth	r1, r3
 800699c:	fb02 6101 	mla	r1, r2, r1, r6
 80069a0:	0c1e      	lsrs	r6, r3, #16
 80069a2:	0c0b      	lsrs	r3, r1, #16
 80069a4:	fb02 3306 	mla	r3, r2, r6, r3
 80069a8:	b289      	uxth	r1, r1
 80069aa:	3001      	adds	r0, #1
 80069ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069b0:	4285      	cmp	r5, r0
 80069b2:	f84c 1b04 	str.w	r1, [ip], #4
 80069b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069ba:	dcec      	bgt.n	8006996 <__multadd+0x12>
 80069bc:	b30e      	cbz	r6, 8006a02 <__multadd+0x7e>
 80069be:	68a3      	ldr	r3, [r4, #8]
 80069c0:	42ab      	cmp	r3, r5
 80069c2:	dc19      	bgt.n	80069f8 <__multadd+0x74>
 80069c4:	6861      	ldr	r1, [r4, #4]
 80069c6:	4638      	mov	r0, r7
 80069c8:	3101      	adds	r1, #1
 80069ca:	f7ff ff79 	bl	80068c0 <_Balloc>
 80069ce:	4680      	mov	r8, r0
 80069d0:	b928      	cbnz	r0, 80069de <__multadd+0x5a>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <__multadd+0x84>)
 80069d6:	480d      	ldr	r0, [pc, #52]	@ (8006a0c <__multadd+0x88>)
 80069d8:	21ba      	movs	r1, #186	@ 0xba
 80069da:	f002 fbc5 	bl	8009168 <__assert_func>
 80069de:	6922      	ldr	r2, [r4, #16]
 80069e0:	3202      	adds	r2, #2
 80069e2:	f104 010c 	add.w	r1, r4, #12
 80069e6:	0092      	lsls	r2, r2, #2
 80069e8:	300c      	adds	r0, #12
 80069ea:	f002 fba5 	bl	8009138 <memcpy>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4638      	mov	r0, r7
 80069f2:	f7ff ffa5 	bl	8006940 <_Bfree>
 80069f6:	4644      	mov	r4, r8
 80069f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069fc:	3501      	adds	r5, #1
 80069fe:	615e      	str	r6, [r3, #20]
 8006a00:	6125      	str	r5, [r4, #16]
 8006a02:	4620      	mov	r0, r4
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a08:	08009bcf 	.word	0x08009bcf
 8006a0c:	08009be0 	.word	0x08009be0

08006a10 <__s2b>:
 8006a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a14:	460c      	mov	r4, r1
 8006a16:	4615      	mov	r5, r2
 8006a18:	461f      	mov	r7, r3
 8006a1a:	2209      	movs	r2, #9
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	4606      	mov	r6, r0
 8006a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a24:	2100      	movs	r1, #0
 8006a26:	2201      	movs	r2, #1
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	db09      	blt.n	8006a40 <__s2b+0x30>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff ff47 	bl	80068c0 <_Balloc>
 8006a32:	b940      	cbnz	r0, 8006a46 <__s2b+0x36>
 8006a34:	4602      	mov	r2, r0
 8006a36:	4b19      	ldr	r3, [pc, #100]	@ (8006a9c <__s2b+0x8c>)
 8006a38:	4819      	ldr	r0, [pc, #100]	@ (8006aa0 <__s2b+0x90>)
 8006a3a:	21d3      	movs	r1, #211	@ 0xd3
 8006a3c:	f002 fb94 	bl	8009168 <__assert_func>
 8006a40:	0052      	lsls	r2, r2, #1
 8006a42:	3101      	adds	r1, #1
 8006a44:	e7f0      	b.n	8006a28 <__s2b+0x18>
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	6143      	str	r3, [r0, #20]
 8006a4a:	2d09      	cmp	r5, #9
 8006a4c:	f04f 0301 	mov.w	r3, #1
 8006a50:	6103      	str	r3, [r0, #16]
 8006a52:	dd16      	ble.n	8006a82 <__s2b+0x72>
 8006a54:	f104 0909 	add.w	r9, r4, #9
 8006a58:	46c8      	mov	r8, r9
 8006a5a:	442c      	add	r4, r5
 8006a5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a60:	4601      	mov	r1, r0
 8006a62:	3b30      	subs	r3, #48	@ 0x30
 8006a64:	220a      	movs	r2, #10
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ff8c 	bl	8006984 <__multadd>
 8006a6c:	45a0      	cmp	r8, r4
 8006a6e:	d1f5      	bne.n	8006a5c <__s2b+0x4c>
 8006a70:	f1a5 0408 	sub.w	r4, r5, #8
 8006a74:	444c      	add	r4, r9
 8006a76:	1b2d      	subs	r5, r5, r4
 8006a78:	1963      	adds	r3, r4, r5
 8006a7a:	42bb      	cmp	r3, r7
 8006a7c:	db04      	blt.n	8006a88 <__s2b+0x78>
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	340a      	adds	r4, #10
 8006a84:	2509      	movs	r5, #9
 8006a86:	e7f6      	b.n	8006a76 <__s2b+0x66>
 8006a88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	3b30      	subs	r3, #48	@ 0x30
 8006a90:	220a      	movs	r2, #10
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ff76 	bl	8006984 <__multadd>
 8006a98:	e7ee      	b.n	8006a78 <__s2b+0x68>
 8006a9a:	bf00      	nop
 8006a9c:	08009bcf 	.word	0x08009bcf
 8006aa0:	08009be0 	.word	0x08009be0

08006aa4 <__hi0bits>:
 8006aa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	bf36      	itet	cc
 8006aac:	0403      	lslcc	r3, r0, #16
 8006aae:	2000      	movcs	r0, #0
 8006ab0:	2010      	movcc	r0, #16
 8006ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab6:	bf3c      	itt	cc
 8006ab8:	021b      	lslcc	r3, r3, #8
 8006aba:	3008      	addcc	r0, #8
 8006abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ac0:	bf3c      	itt	cc
 8006ac2:	011b      	lslcc	r3, r3, #4
 8006ac4:	3004      	addcc	r0, #4
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aca:	bf3c      	itt	cc
 8006acc:	009b      	lslcc	r3, r3, #2
 8006ace:	3002      	addcc	r0, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	db05      	blt.n	8006ae0 <__hi0bits+0x3c>
 8006ad4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ad8:	f100 0001 	add.w	r0, r0, #1
 8006adc:	bf08      	it	eq
 8006ade:	2020      	moveq	r0, #32
 8006ae0:	4770      	bx	lr

08006ae2 <__lo0bits>:
 8006ae2:	6803      	ldr	r3, [r0, #0]
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	f013 0007 	ands.w	r0, r3, #7
 8006aea:	d00b      	beq.n	8006b04 <__lo0bits+0x22>
 8006aec:	07d9      	lsls	r1, r3, #31
 8006aee:	d421      	bmi.n	8006b34 <__lo0bits+0x52>
 8006af0:	0798      	lsls	r0, r3, #30
 8006af2:	bf49      	itett	mi
 8006af4:	085b      	lsrmi	r3, r3, #1
 8006af6:	089b      	lsrpl	r3, r3, #2
 8006af8:	2001      	movmi	r0, #1
 8006afa:	6013      	strmi	r3, [r2, #0]
 8006afc:	bf5c      	itt	pl
 8006afe:	6013      	strpl	r3, [r2, #0]
 8006b00:	2002      	movpl	r0, #2
 8006b02:	4770      	bx	lr
 8006b04:	b299      	uxth	r1, r3
 8006b06:	b909      	cbnz	r1, 8006b0c <__lo0bits+0x2a>
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	2010      	movs	r0, #16
 8006b0c:	b2d9      	uxtb	r1, r3
 8006b0e:	b909      	cbnz	r1, 8006b14 <__lo0bits+0x32>
 8006b10:	3008      	adds	r0, #8
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	0719      	lsls	r1, r3, #28
 8006b16:	bf04      	itt	eq
 8006b18:	091b      	lsreq	r3, r3, #4
 8006b1a:	3004      	addeq	r0, #4
 8006b1c:	0799      	lsls	r1, r3, #30
 8006b1e:	bf04      	itt	eq
 8006b20:	089b      	lsreq	r3, r3, #2
 8006b22:	3002      	addeq	r0, #2
 8006b24:	07d9      	lsls	r1, r3, #31
 8006b26:	d403      	bmi.n	8006b30 <__lo0bits+0x4e>
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	f100 0001 	add.w	r0, r0, #1
 8006b2e:	d003      	beq.n	8006b38 <__lo0bits+0x56>
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4770      	bx	lr
 8006b34:	2000      	movs	r0, #0
 8006b36:	4770      	bx	lr
 8006b38:	2020      	movs	r0, #32
 8006b3a:	4770      	bx	lr

08006b3c <__i2b>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	460c      	mov	r4, r1
 8006b40:	2101      	movs	r1, #1
 8006b42:	f7ff febd 	bl	80068c0 <_Balloc>
 8006b46:	4602      	mov	r2, r0
 8006b48:	b928      	cbnz	r0, 8006b56 <__i2b+0x1a>
 8006b4a:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <__i2b+0x24>)
 8006b4c:	4805      	ldr	r0, [pc, #20]	@ (8006b64 <__i2b+0x28>)
 8006b4e:	f240 1145 	movw	r1, #325	@ 0x145
 8006b52:	f002 fb09 	bl	8009168 <__assert_func>
 8006b56:	2301      	movs	r3, #1
 8006b58:	6144      	str	r4, [r0, #20]
 8006b5a:	6103      	str	r3, [r0, #16]
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	bf00      	nop
 8006b60:	08009bcf 	.word	0x08009bcf
 8006b64:	08009be0 	.word	0x08009be0

08006b68 <__multiply>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	4617      	mov	r7, r2
 8006b6e:	690a      	ldr	r2, [r1, #16]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	bfa8      	it	ge
 8006b76:	463b      	movge	r3, r7
 8006b78:	4689      	mov	r9, r1
 8006b7a:	bfa4      	itt	ge
 8006b7c:	460f      	movge	r7, r1
 8006b7e:	4699      	movge	r9, r3
 8006b80:	693d      	ldr	r5, [r7, #16]
 8006b82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	eb05 060a 	add.w	r6, r5, sl
 8006b8e:	42b3      	cmp	r3, r6
 8006b90:	b085      	sub	sp, #20
 8006b92:	bfb8      	it	lt
 8006b94:	3101      	addlt	r1, #1
 8006b96:	f7ff fe93 	bl	80068c0 <_Balloc>
 8006b9a:	b930      	cbnz	r0, 8006baa <__multiply+0x42>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <__multiply+0x13c>)
 8006ba0:	4841      	ldr	r0, [pc, #260]	@ (8006ca8 <__multiply+0x140>)
 8006ba2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ba6:	f002 fadf 	bl	8009168 <__assert_func>
 8006baa:	f100 0414 	add.w	r4, r0, #20
 8006bae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4573      	cmp	r3, lr
 8006bb8:	d320      	bcc.n	8006bfc <__multiply+0x94>
 8006bba:	f107 0814 	add.w	r8, r7, #20
 8006bbe:	f109 0114 	add.w	r1, r9, #20
 8006bc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006bc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	1beb      	subs	r3, r5, r7
 8006bce:	3b15      	subs	r3, #21
 8006bd0:	f023 0303 	bic.w	r3, r3, #3
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	3715      	adds	r7, #21
 8006bd8:	42bd      	cmp	r5, r7
 8006bda:	bf38      	it	cc
 8006bdc:	2304      	movcc	r3, #4
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	9b02      	ldr	r3, [sp, #8]
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	428b      	cmp	r3, r1
 8006be6:	d80c      	bhi.n	8006c02 <__multiply+0x9a>
 8006be8:	2e00      	cmp	r6, #0
 8006bea:	dd03      	ble.n	8006bf4 <__multiply+0x8c>
 8006bec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d055      	beq.n	8006ca0 <__multiply+0x138>
 8006bf4:	6106      	str	r6, [r0, #16]
 8006bf6:	b005      	add	sp, #20
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	f843 2b04 	str.w	r2, [r3], #4
 8006c00:	e7d9      	b.n	8006bb6 <__multiply+0x4e>
 8006c02:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c06:	f1ba 0f00 	cmp.w	sl, #0
 8006c0a:	d01f      	beq.n	8006c4c <__multiply+0xe4>
 8006c0c:	46c4      	mov	ip, r8
 8006c0e:	46a1      	mov	r9, r4
 8006c10:	2700      	movs	r7, #0
 8006c12:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c16:	f8d9 3000 	ldr.w	r3, [r9]
 8006c1a:	fa1f fb82 	uxth.w	fp, r2
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c24:	443b      	add	r3, r7
 8006c26:	f8d9 7000 	ldr.w	r7, [r9]
 8006c2a:	0c12      	lsrs	r2, r2, #16
 8006c2c:	0c3f      	lsrs	r7, r7, #16
 8006c2e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006c32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c3c:	4565      	cmp	r5, ip
 8006c3e:	f849 3b04 	str.w	r3, [r9], #4
 8006c42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006c46:	d8e4      	bhi.n	8006c12 <__multiply+0xaa>
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	50e7      	str	r7, [r4, r3]
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c52:	3104      	adds	r1, #4
 8006c54:	f1b9 0f00 	cmp.w	r9, #0
 8006c58:	d020      	beq.n	8006c9c <__multiply+0x134>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4647      	mov	r7, r8
 8006c5e:	46a4      	mov	ip, r4
 8006c60:	f04f 0a00 	mov.w	sl, #0
 8006c64:	f8b7 b000 	ldrh.w	fp, [r7]
 8006c68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006c6c:	fb09 220b 	mla	r2, r9, fp, r2
 8006c70:	4452      	add	r2, sl
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c78:	f84c 3b04 	str.w	r3, [ip], #4
 8006c7c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006c80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c84:	f8bc 3000 	ldrh.w	r3, [ip]
 8006c88:	fb09 330a 	mla	r3, r9, sl, r3
 8006c8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006c90:	42bd      	cmp	r5, r7
 8006c92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c96:	d8e5      	bhi.n	8006c64 <__multiply+0xfc>
 8006c98:	9a01      	ldr	r2, [sp, #4]
 8006c9a:	50a3      	str	r3, [r4, r2]
 8006c9c:	3404      	adds	r4, #4
 8006c9e:	e79f      	b.n	8006be0 <__multiply+0x78>
 8006ca0:	3e01      	subs	r6, #1
 8006ca2:	e7a1      	b.n	8006be8 <__multiply+0x80>
 8006ca4:	08009bcf 	.word	0x08009bcf
 8006ca8:	08009be0 	.word	0x08009be0

08006cac <__pow5mult>:
 8006cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	f012 0203 	ands.w	r2, r2, #3
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	460e      	mov	r6, r1
 8006cba:	d007      	beq.n	8006ccc <__pow5mult+0x20>
 8006cbc:	4c25      	ldr	r4, [pc, #148]	@ (8006d54 <__pow5mult+0xa8>)
 8006cbe:	3a01      	subs	r2, #1
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cc6:	f7ff fe5d 	bl	8006984 <__multadd>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	10ad      	asrs	r5, r5, #2
 8006cce:	d03d      	beq.n	8006d4c <__pow5mult+0xa0>
 8006cd0:	69fc      	ldr	r4, [r7, #28]
 8006cd2:	b97c      	cbnz	r4, 8006cf4 <__pow5mult+0x48>
 8006cd4:	2010      	movs	r0, #16
 8006cd6:	f7ff fd3d 	bl	8006754 <malloc>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	61f8      	str	r0, [r7, #28]
 8006cde:	b928      	cbnz	r0, 8006cec <__pow5mult+0x40>
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <__pow5mult+0xac>)
 8006ce2:	481e      	ldr	r0, [pc, #120]	@ (8006d5c <__pow5mult+0xb0>)
 8006ce4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ce8:	f002 fa3e 	bl	8009168 <__assert_func>
 8006cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf0:	6004      	str	r4, [r0, #0]
 8006cf2:	60c4      	str	r4, [r0, #12]
 8006cf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cfc:	b94c      	cbnz	r4, 8006d12 <__pow5mult+0x66>
 8006cfe:	f240 2171 	movw	r1, #625	@ 0x271
 8006d02:	4638      	mov	r0, r7
 8006d04:	f7ff ff1a 	bl	8006b3c <__i2b>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d0e:	4604      	mov	r4, r0
 8006d10:	6003      	str	r3, [r0, #0]
 8006d12:	f04f 0900 	mov.w	r9, #0
 8006d16:	07eb      	lsls	r3, r5, #31
 8006d18:	d50a      	bpl.n	8006d30 <__pow5mult+0x84>
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f7ff ff22 	bl	8006b68 <__multiply>
 8006d24:	4631      	mov	r1, r6
 8006d26:	4680      	mov	r8, r0
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff fe09 	bl	8006940 <_Bfree>
 8006d2e:	4646      	mov	r6, r8
 8006d30:	106d      	asrs	r5, r5, #1
 8006d32:	d00b      	beq.n	8006d4c <__pow5mult+0xa0>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	b938      	cbnz	r0, 8006d48 <__pow5mult+0x9c>
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff ff13 	bl	8006b68 <__multiply>
 8006d42:	6020      	str	r0, [r4, #0]
 8006d44:	f8c0 9000 	str.w	r9, [r0]
 8006d48:	4604      	mov	r4, r0
 8006d4a:	e7e4      	b.n	8006d16 <__pow5mult+0x6a>
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d52:	bf00      	nop
 8006d54:	08009d0c 	.word	0x08009d0c
 8006d58:	08009b60 	.word	0x08009b60
 8006d5c:	08009be0 	.word	0x08009be0

08006d60 <__lshift>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	460c      	mov	r4, r1
 8006d66:	6849      	ldr	r1, [r1, #4]
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	4607      	mov	r7, r0
 8006d72:	4691      	mov	r9, r2
 8006d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d78:	f108 0601 	add.w	r6, r8, #1
 8006d7c:	42b3      	cmp	r3, r6
 8006d7e:	db0b      	blt.n	8006d98 <__lshift+0x38>
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff fd9d 	bl	80068c0 <_Balloc>
 8006d86:	4605      	mov	r5, r0
 8006d88:	b948      	cbnz	r0, 8006d9e <__lshift+0x3e>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <__lshift+0xd0>)
 8006d8e:	4829      	ldr	r0, [pc, #164]	@ (8006e34 <__lshift+0xd4>)
 8006d90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d94:	f002 f9e8 	bl	8009168 <__assert_func>
 8006d98:	3101      	adds	r1, #1
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	e7ee      	b.n	8006d7c <__lshift+0x1c>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f100 0114 	add.w	r1, r0, #20
 8006da4:	f100 0210 	add.w	r2, r0, #16
 8006da8:	4618      	mov	r0, r3
 8006daa:	4553      	cmp	r3, sl
 8006dac:	db33      	blt.n	8006e16 <__lshift+0xb6>
 8006dae:	6920      	ldr	r0, [r4, #16]
 8006db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006db4:	f104 0314 	add.w	r3, r4, #20
 8006db8:	f019 091f 	ands.w	r9, r9, #31
 8006dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dc4:	d02b      	beq.n	8006e1e <__lshift+0xbe>
 8006dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8006dca:	468a      	mov	sl, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	fa00 f009 	lsl.w	r0, r0, r9
 8006dd4:	4310      	orrs	r0, r2
 8006dd6:	f84a 0b04 	str.w	r0, [sl], #4
 8006dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dde:	459c      	cmp	ip, r3
 8006de0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006de4:	d8f3      	bhi.n	8006dce <__lshift+0x6e>
 8006de6:	ebac 0304 	sub.w	r3, ip, r4
 8006dea:	3b15      	subs	r3, #21
 8006dec:	f023 0303 	bic.w	r3, r3, #3
 8006df0:	3304      	adds	r3, #4
 8006df2:	f104 0015 	add.w	r0, r4, #21
 8006df6:	4560      	cmp	r0, ip
 8006df8:	bf88      	it	hi
 8006dfa:	2304      	movhi	r3, #4
 8006dfc:	50ca      	str	r2, [r1, r3]
 8006dfe:	b10a      	cbz	r2, 8006e04 <__lshift+0xa4>
 8006e00:	f108 0602 	add.w	r6, r8, #2
 8006e04:	3e01      	subs	r6, #1
 8006e06:	4638      	mov	r0, r7
 8006e08:	612e      	str	r6, [r5, #16]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7ff fd98 	bl	8006940 <_Bfree>
 8006e10:	4628      	mov	r0, r5
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	e7c5      	b.n	8006daa <__lshift+0x4a>
 8006e1e:	3904      	subs	r1, #4
 8006e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e24:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e28:	459c      	cmp	ip, r3
 8006e2a:	d8f9      	bhi.n	8006e20 <__lshift+0xc0>
 8006e2c:	e7ea      	b.n	8006e04 <__lshift+0xa4>
 8006e2e:	bf00      	nop
 8006e30:	08009bcf 	.word	0x08009bcf
 8006e34:	08009be0 	.word	0x08009be0

08006e38 <__mcmp>:
 8006e38:	690a      	ldr	r2, [r1, #16]
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6900      	ldr	r0, [r0, #16]
 8006e3e:	1a80      	subs	r0, r0, r2
 8006e40:	b530      	push	{r4, r5, lr}
 8006e42:	d10e      	bne.n	8006e62 <__mcmp+0x2a>
 8006e44:	3314      	adds	r3, #20
 8006e46:	3114      	adds	r1, #20
 8006e48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e58:	4295      	cmp	r5, r2
 8006e5a:	d003      	beq.n	8006e64 <__mcmp+0x2c>
 8006e5c:	d205      	bcs.n	8006e6a <__mcmp+0x32>
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e62:	bd30      	pop	{r4, r5, pc}
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	d3f3      	bcc.n	8006e50 <__mcmp+0x18>
 8006e68:	e7fb      	b.n	8006e62 <__mcmp+0x2a>
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7f9      	b.n	8006e62 <__mcmp+0x2a>
	...

08006e70 <__mdiff>:
 8006e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	4689      	mov	r9, r1
 8006e76:	4606      	mov	r6, r0
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4648      	mov	r0, r9
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	f7ff ffdb 	bl	8006e38 <__mcmp>
 8006e82:	1e05      	subs	r5, r0, #0
 8006e84:	d112      	bne.n	8006eac <__mdiff+0x3c>
 8006e86:	4629      	mov	r1, r5
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff fd19 	bl	80068c0 <_Balloc>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	b928      	cbnz	r0, 8006e9e <__mdiff+0x2e>
 8006e92:	4b3f      	ldr	r3, [pc, #252]	@ (8006f90 <__mdiff+0x120>)
 8006e94:	f240 2137 	movw	r1, #567	@ 0x237
 8006e98:	483e      	ldr	r0, [pc, #248]	@ (8006f94 <__mdiff+0x124>)
 8006e9a:	f002 f965 	bl	8009168 <__assert_func>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	b003      	add	sp, #12
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	bfbc      	itt	lt
 8006eae:	464b      	movlt	r3, r9
 8006eb0:	46a1      	movlt	r9, r4
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006eb8:	bfba      	itte	lt
 8006eba:	461c      	movlt	r4, r3
 8006ebc:	2501      	movlt	r5, #1
 8006ebe:	2500      	movge	r5, #0
 8006ec0:	f7ff fcfe 	bl	80068c0 <_Balloc>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	b918      	cbnz	r0, 8006ed0 <__mdiff+0x60>
 8006ec8:	4b31      	ldr	r3, [pc, #196]	@ (8006f90 <__mdiff+0x120>)
 8006eca:	f240 2145 	movw	r1, #581	@ 0x245
 8006ece:	e7e3      	b.n	8006e98 <__mdiff+0x28>
 8006ed0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ed4:	6926      	ldr	r6, [r4, #16]
 8006ed6:	60c5      	str	r5, [r0, #12]
 8006ed8:	f109 0310 	add.w	r3, r9, #16
 8006edc:	f109 0514 	add.w	r5, r9, #20
 8006ee0:	f104 0e14 	add.w	lr, r4, #20
 8006ee4:	f100 0b14 	add.w	fp, r0, #20
 8006ee8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006eec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	46d9      	mov	r9, fp
 8006ef4:	f04f 0c00 	mov.w	ip, #0
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006efe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	fa1f f38a 	uxth.w	r3, sl
 8006f08:	4619      	mov	r1, r3
 8006f0a:	b283      	uxth	r3, r0
 8006f0c:	1acb      	subs	r3, r1, r3
 8006f0e:	0c00      	lsrs	r0, r0, #16
 8006f10:	4463      	add	r3, ip
 8006f12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f20:	4576      	cmp	r6, lr
 8006f22:	f849 3b04 	str.w	r3, [r9], #4
 8006f26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f2a:	d8e5      	bhi.n	8006ef8 <__mdiff+0x88>
 8006f2c:	1b33      	subs	r3, r6, r4
 8006f2e:	3b15      	subs	r3, #21
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	3415      	adds	r4, #21
 8006f36:	3304      	adds	r3, #4
 8006f38:	42a6      	cmp	r6, r4
 8006f3a:	bf38      	it	cc
 8006f3c:	2304      	movcc	r3, #4
 8006f3e:	441d      	add	r5, r3
 8006f40:	445b      	add	r3, fp
 8006f42:	461e      	mov	r6, r3
 8006f44:	462c      	mov	r4, r5
 8006f46:	4544      	cmp	r4, r8
 8006f48:	d30e      	bcc.n	8006f68 <__mdiff+0xf8>
 8006f4a:	f108 0103 	add.w	r1, r8, #3
 8006f4e:	1b49      	subs	r1, r1, r5
 8006f50:	f021 0103 	bic.w	r1, r1, #3
 8006f54:	3d03      	subs	r5, #3
 8006f56:	45a8      	cmp	r8, r5
 8006f58:	bf38      	it	cc
 8006f5a:	2100      	movcc	r1, #0
 8006f5c:	440b      	add	r3, r1
 8006f5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f62:	b191      	cbz	r1, 8006f8a <__mdiff+0x11a>
 8006f64:	6117      	str	r7, [r2, #16]
 8006f66:	e79d      	b.n	8006ea4 <__mdiff+0x34>
 8006f68:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f6c:	46e6      	mov	lr, ip
 8006f6e:	0c08      	lsrs	r0, r1, #16
 8006f70:	fa1c fc81 	uxtah	ip, ip, r1
 8006f74:	4471      	add	r1, lr
 8006f76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f7a:	b289      	uxth	r1, r1
 8006f7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f80:	f846 1b04 	str.w	r1, [r6], #4
 8006f84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f88:	e7dd      	b.n	8006f46 <__mdiff+0xd6>
 8006f8a:	3f01      	subs	r7, #1
 8006f8c:	e7e7      	b.n	8006f5e <__mdiff+0xee>
 8006f8e:	bf00      	nop
 8006f90:	08009bcf 	.word	0x08009bcf
 8006f94:	08009be0 	.word	0x08009be0

08006f98 <__ulp>:
 8006f98:	b082      	sub	sp, #8
 8006f9a:	ed8d 0b00 	vstr	d0, [sp]
 8006f9e:	9a01      	ldr	r2, [sp, #4]
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <__ulp+0x48>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc08      	bgt.n	8006fbe <__ulp+0x26>
 8006fac:	425b      	negs	r3, r3
 8006fae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006fb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006fb6:	da04      	bge.n	8006fc2 <__ulp+0x2a>
 8006fb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006fbc:	4113      	asrs	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	e008      	b.n	8006fd4 <__ulp+0x3c>
 8006fc2:	f1a2 0314 	sub.w	r3, r2, #20
 8006fc6:	2b1e      	cmp	r3, #30
 8006fc8:	bfda      	itte	le
 8006fca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006fce:	40da      	lsrle	r2, r3
 8006fd0:	2201      	movgt	r2, #1
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	ec41 0b10 	vmov	d0, r0, r1
 8006fdc:	b002      	add	sp, #8
 8006fde:	4770      	bx	lr
 8006fe0:	7ff00000 	.word	0x7ff00000

08006fe4 <__b2d>:
 8006fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	6906      	ldr	r6, [r0, #16]
 8006fea:	f100 0814 	add.w	r8, r0, #20
 8006fee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006ff2:	1f37      	subs	r7, r6, #4
 8006ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7ff fd53 	bl	8006aa4 <__hi0bits>
 8006ffe:	f1c0 0320 	rsb	r3, r0, #32
 8007002:	280a      	cmp	r0, #10
 8007004:	600b      	str	r3, [r1, #0]
 8007006:	491b      	ldr	r1, [pc, #108]	@ (8007074 <__b2d+0x90>)
 8007008:	dc15      	bgt.n	8007036 <__b2d+0x52>
 800700a:	f1c0 0c0b 	rsb	ip, r0, #11
 800700e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007012:	45b8      	cmp	r8, r7
 8007014:	ea43 0501 	orr.w	r5, r3, r1
 8007018:	bf34      	ite	cc
 800701a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800701e:	2300      	movcs	r3, #0
 8007020:	3015      	adds	r0, #21
 8007022:	fa02 f000 	lsl.w	r0, r2, r0
 8007026:	fa23 f30c 	lsr.w	r3, r3, ip
 800702a:	4303      	orrs	r3, r0
 800702c:	461c      	mov	r4, r3
 800702e:	ec45 4b10 	vmov	d0, r4, r5
 8007032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007036:	45b8      	cmp	r8, r7
 8007038:	bf3a      	itte	cc
 800703a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800703e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007042:	2300      	movcs	r3, #0
 8007044:	380b      	subs	r0, #11
 8007046:	d012      	beq.n	800706e <__b2d+0x8a>
 8007048:	f1c0 0120 	rsb	r1, r0, #32
 800704c:	fa23 f401 	lsr.w	r4, r3, r1
 8007050:	4082      	lsls	r2, r0
 8007052:	4322      	orrs	r2, r4
 8007054:	4547      	cmp	r7, r8
 8007056:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800705a:	bf8c      	ite	hi
 800705c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007060:	2200      	movls	r2, #0
 8007062:	4083      	lsls	r3, r0
 8007064:	40ca      	lsrs	r2, r1
 8007066:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800706a:	4313      	orrs	r3, r2
 800706c:	e7de      	b.n	800702c <__b2d+0x48>
 800706e:	ea42 0501 	orr.w	r5, r2, r1
 8007072:	e7db      	b.n	800702c <__b2d+0x48>
 8007074:	3ff00000 	.word	0x3ff00000

08007078 <__d2b>:
 8007078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800707c:	460f      	mov	r7, r1
 800707e:	2101      	movs	r1, #1
 8007080:	ec59 8b10 	vmov	r8, r9, d0
 8007084:	4616      	mov	r6, r2
 8007086:	f7ff fc1b 	bl	80068c0 <_Balloc>
 800708a:	4604      	mov	r4, r0
 800708c:	b930      	cbnz	r0, 800709c <__d2b+0x24>
 800708e:	4602      	mov	r2, r0
 8007090:	4b23      	ldr	r3, [pc, #140]	@ (8007120 <__d2b+0xa8>)
 8007092:	4824      	ldr	r0, [pc, #144]	@ (8007124 <__d2b+0xac>)
 8007094:	f240 310f 	movw	r1, #783	@ 0x30f
 8007098:	f002 f866 	bl	8009168 <__assert_func>
 800709c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070a4:	b10d      	cbz	r5, 80070aa <__d2b+0x32>
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	f1b8 0300 	subs.w	r3, r8, #0
 80070b0:	d023      	beq.n	80070fa <__d2b+0x82>
 80070b2:	4668      	mov	r0, sp
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	f7ff fd14 	bl	8006ae2 <__lo0bits>
 80070ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070be:	b1d0      	cbz	r0, 80070f6 <__d2b+0x7e>
 80070c0:	f1c0 0320 	rsb	r3, r0, #32
 80070c4:	fa02 f303 	lsl.w	r3, r2, r3
 80070c8:	430b      	orrs	r3, r1
 80070ca:	40c2      	lsrs	r2, r0
 80070cc:	6163      	str	r3, [r4, #20]
 80070ce:	9201      	str	r2, [sp, #4]
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	61a3      	str	r3, [r4, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bf0c      	ite	eq
 80070d8:	2201      	moveq	r2, #1
 80070da:	2202      	movne	r2, #2
 80070dc:	6122      	str	r2, [r4, #16]
 80070de:	b1a5      	cbz	r5, 800710a <__d2b+0x92>
 80070e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070e4:	4405      	add	r5, r0
 80070e6:	603d      	str	r5, [r7, #0]
 80070e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070ec:	6030      	str	r0, [r6, #0]
 80070ee:	4620      	mov	r0, r4
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070f6:	6161      	str	r1, [r4, #20]
 80070f8:	e7ea      	b.n	80070d0 <__d2b+0x58>
 80070fa:	a801      	add	r0, sp, #4
 80070fc:	f7ff fcf1 	bl	8006ae2 <__lo0bits>
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	3020      	adds	r0, #32
 8007106:	2201      	movs	r2, #1
 8007108:	e7e8      	b.n	80070dc <__d2b+0x64>
 800710a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800710e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007112:	6038      	str	r0, [r7, #0]
 8007114:	6918      	ldr	r0, [r3, #16]
 8007116:	f7ff fcc5 	bl	8006aa4 <__hi0bits>
 800711a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800711e:	e7e5      	b.n	80070ec <__d2b+0x74>
 8007120:	08009bcf 	.word	0x08009bcf
 8007124:	08009be0 	.word	0x08009be0

08007128 <__ratio>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	b085      	sub	sp, #20
 800712e:	e9cd 1000 	strd	r1, r0, [sp]
 8007132:	a902      	add	r1, sp, #8
 8007134:	f7ff ff56 	bl	8006fe4 <__b2d>
 8007138:	9800      	ldr	r0, [sp, #0]
 800713a:	a903      	add	r1, sp, #12
 800713c:	ec55 4b10 	vmov	r4, r5, d0
 8007140:	f7ff ff50 	bl	8006fe4 <__b2d>
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	6919      	ldr	r1, [r3, #16]
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	1ac9      	subs	r1, r1, r3
 800714e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	ec5b ab10 	vmov	sl, fp, d0
 8007158:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfce      	itee	gt
 8007160:	462a      	movgt	r2, r5
 8007162:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007166:	465a      	movle	r2, fp
 8007168:	462f      	mov	r7, r5
 800716a:	46d9      	mov	r9, fp
 800716c:	bfcc      	ite	gt
 800716e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007172:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007176:	464b      	mov	r3, r9
 8007178:	4652      	mov	r2, sl
 800717a:	4620      	mov	r0, r4
 800717c:	4639      	mov	r1, r7
 800717e:	f7f9 fb6d 	bl	800085c <__aeabi_ddiv>
 8007182:	ec41 0b10 	vmov	d0, r0, r1
 8007186:	b005      	add	sp, #20
 8007188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800718c <__copybits>:
 800718c:	3901      	subs	r1, #1
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	1149      	asrs	r1, r1, #5
 8007192:	6914      	ldr	r4, [r2, #16]
 8007194:	3101      	adds	r1, #1
 8007196:	f102 0314 	add.w	r3, r2, #20
 800719a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800719e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80071a2:	1f05      	subs	r5, r0, #4
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d30c      	bcc.n	80071c2 <__copybits+0x36>
 80071a8:	1aa3      	subs	r3, r4, r2
 80071aa:	3b11      	subs	r3, #17
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	3211      	adds	r2, #17
 80071b2:	42a2      	cmp	r2, r4
 80071b4:	bf88      	it	hi
 80071b6:	2300      	movhi	r3, #0
 80071b8:	4418      	add	r0, r3
 80071ba:	2300      	movs	r3, #0
 80071bc:	4288      	cmp	r0, r1
 80071be:	d305      	bcc.n	80071cc <__copybits+0x40>
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80071c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80071ca:	e7eb      	b.n	80071a4 <__copybits+0x18>
 80071cc:	f840 3b04 	str.w	r3, [r0], #4
 80071d0:	e7f4      	b.n	80071bc <__copybits+0x30>

080071d2 <__any_on>:
 80071d2:	f100 0214 	add.w	r2, r0, #20
 80071d6:	6900      	ldr	r0, [r0, #16]
 80071d8:	114b      	asrs	r3, r1, #5
 80071da:	4298      	cmp	r0, r3
 80071dc:	b510      	push	{r4, lr}
 80071de:	db11      	blt.n	8007204 <__any_on+0x32>
 80071e0:	dd0a      	ble.n	80071f8 <__any_on+0x26>
 80071e2:	f011 011f 	ands.w	r1, r1, #31
 80071e6:	d007      	beq.n	80071f8 <__any_on+0x26>
 80071e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071ec:	fa24 f001 	lsr.w	r0, r4, r1
 80071f0:	fa00 f101 	lsl.w	r1, r0, r1
 80071f4:	428c      	cmp	r4, r1
 80071f6:	d10b      	bne.n	8007210 <__any_on+0x3e>
 80071f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d803      	bhi.n	8007208 <__any_on+0x36>
 8007200:	2000      	movs	r0, #0
 8007202:	bd10      	pop	{r4, pc}
 8007204:	4603      	mov	r3, r0
 8007206:	e7f7      	b.n	80071f8 <__any_on+0x26>
 8007208:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800720c:	2900      	cmp	r1, #0
 800720e:	d0f5      	beq.n	80071fc <__any_on+0x2a>
 8007210:	2001      	movs	r0, #1
 8007212:	e7f6      	b.n	8007202 <__any_on+0x30>

08007214 <sulp>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	ec45 4b10 	vmov	d0, r4, r5
 800721e:	4616      	mov	r6, r2
 8007220:	f7ff feba 	bl	8006f98 <__ulp>
 8007224:	ec51 0b10 	vmov	r0, r1, d0
 8007228:	b17e      	cbz	r6, 800724a <sulp+0x36>
 800722a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800722e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd09      	ble.n	800724a <sulp+0x36>
 8007236:	051b      	lsls	r3, r3, #20
 8007238:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800723c:	2400      	movs	r4, #0
 800723e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9df 	bl	8000608 <__aeabi_dmul>
 800724a:	ec41 0b10 	vmov	d0, r0, r1
 800724e:	bd70      	pop	{r4, r5, r6, pc}

08007250 <_strtod_l>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	b09f      	sub	sp, #124	@ 0x7c
 8007256:	460c      	mov	r4, r1
 8007258:	9217      	str	r2, [sp, #92]	@ 0x5c
 800725a:	2200      	movs	r2, #0
 800725c:	921a      	str	r2, [sp, #104]	@ 0x68
 800725e:	9005      	str	r0, [sp, #20]
 8007260:	f04f 0a00 	mov.w	sl, #0
 8007264:	f04f 0b00 	mov.w	fp, #0
 8007268:	460a      	mov	r2, r1
 800726a:	9219      	str	r2, [sp, #100]	@ 0x64
 800726c:	7811      	ldrb	r1, [r2, #0]
 800726e:	292b      	cmp	r1, #43	@ 0x2b
 8007270:	d04a      	beq.n	8007308 <_strtod_l+0xb8>
 8007272:	d838      	bhi.n	80072e6 <_strtod_l+0x96>
 8007274:	290d      	cmp	r1, #13
 8007276:	d832      	bhi.n	80072de <_strtod_l+0x8e>
 8007278:	2908      	cmp	r1, #8
 800727a:	d832      	bhi.n	80072e2 <_strtod_l+0x92>
 800727c:	2900      	cmp	r1, #0
 800727e:	d03b      	beq.n	80072f8 <_strtod_l+0xa8>
 8007280:	2200      	movs	r2, #0
 8007282:	920e      	str	r2, [sp, #56]	@ 0x38
 8007284:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007286:	782a      	ldrb	r2, [r5, #0]
 8007288:	2a30      	cmp	r2, #48	@ 0x30
 800728a:	f040 80b2 	bne.w	80073f2 <_strtod_l+0x1a2>
 800728e:	786a      	ldrb	r2, [r5, #1]
 8007290:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007294:	2a58      	cmp	r2, #88	@ 0x58
 8007296:	d16e      	bne.n	8007376 <_strtod_l+0x126>
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	ab1a      	add	r3, sp, #104	@ 0x68
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4a8f      	ldr	r2, [pc, #572]	@ (80074e0 <_strtod_l+0x290>)
 80072a4:	9805      	ldr	r0, [sp, #20]
 80072a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80072a8:	a919      	add	r1, sp, #100	@ 0x64
 80072aa:	f001 fff7 	bl	800929c <__gethex>
 80072ae:	f010 060f 	ands.w	r6, r0, #15
 80072b2:	4604      	mov	r4, r0
 80072b4:	d005      	beq.n	80072c2 <_strtod_l+0x72>
 80072b6:	2e06      	cmp	r6, #6
 80072b8:	d128      	bne.n	800730c <_strtod_l+0xbc>
 80072ba:	3501      	adds	r5, #1
 80072bc:	2300      	movs	r3, #0
 80072be:	9519      	str	r5, [sp, #100]	@ 0x64
 80072c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80072c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 858e 	bne.w	8007de6 <_strtod_l+0xb96>
 80072ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072cc:	b1cb      	cbz	r3, 8007302 <_strtod_l+0xb2>
 80072ce:	4652      	mov	r2, sl
 80072d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80072d4:	ec43 2b10 	vmov	d0, r2, r3
 80072d8:	b01f      	add	sp, #124	@ 0x7c
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	2920      	cmp	r1, #32
 80072e0:	d1ce      	bne.n	8007280 <_strtod_l+0x30>
 80072e2:	3201      	adds	r2, #1
 80072e4:	e7c1      	b.n	800726a <_strtod_l+0x1a>
 80072e6:	292d      	cmp	r1, #45	@ 0x2d
 80072e8:	d1ca      	bne.n	8007280 <_strtod_l+0x30>
 80072ea:	2101      	movs	r1, #1
 80072ec:	910e      	str	r1, [sp, #56]	@ 0x38
 80072ee:	1c51      	adds	r1, r2, #1
 80072f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80072f2:	7852      	ldrb	r2, [r2, #1]
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	d1c5      	bne.n	8007284 <_strtod_l+0x34>
 80072f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8570 	bne.w	8007de2 <_strtod_l+0xb92>
 8007302:	4652      	mov	r2, sl
 8007304:	465b      	mov	r3, fp
 8007306:	e7e5      	b.n	80072d4 <_strtod_l+0x84>
 8007308:	2100      	movs	r1, #0
 800730a:	e7ef      	b.n	80072ec <_strtod_l+0x9c>
 800730c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800730e:	b13a      	cbz	r2, 8007320 <_strtod_l+0xd0>
 8007310:	2135      	movs	r1, #53	@ 0x35
 8007312:	a81c      	add	r0, sp, #112	@ 0x70
 8007314:	f7ff ff3a 	bl	800718c <__copybits>
 8007318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	f7ff fb10 	bl	8006940 <_Bfree>
 8007320:	3e01      	subs	r6, #1
 8007322:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007324:	2e04      	cmp	r6, #4
 8007326:	d806      	bhi.n	8007336 <_strtod_l+0xe6>
 8007328:	e8df f006 	tbb	[pc, r6]
 800732c:	201d0314 	.word	0x201d0314
 8007330:	14          	.byte	0x14
 8007331:	00          	.byte	0x00
 8007332:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007336:	05e1      	lsls	r1, r4, #23
 8007338:	bf48      	it	mi
 800733a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800733e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007342:	0d1b      	lsrs	r3, r3, #20
 8007344:	051b      	lsls	r3, r3, #20
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1bb      	bne.n	80072c2 <_strtod_l+0x72>
 800734a:	f7fe fb2d 	bl	80059a8 <__errno>
 800734e:	2322      	movs	r3, #34	@ 0x22
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	e7b6      	b.n	80072c2 <_strtod_l+0x72>
 8007354:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007358:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800735c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007360:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007364:	e7e7      	b.n	8007336 <_strtod_l+0xe6>
 8007366:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80074e8 <_strtod_l+0x298>
 800736a:	e7e4      	b.n	8007336 <_strtod_l+0xe6>
 800736c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007370:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007374:	e7df      	b.n	8007336 <_strtod_l+0xe6>
 8007376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	9219      	str	r2, [sp, #100]	@ 0x64
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b30      	cmp	r3, #48	@ 0x30
 8007380:	d0f9      	beq.n	8007376 <_strtod_l+0x126>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d09d      	beq.n	80072c2 <_strtod_l+0x72>
 8007386:	2301      	movs	r3, #1
 8007388:	2700      	movs	r7, #0
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800738e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007390:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007392:	46b9      	mov	r9, r7
 8007394:	220a      	movs	r2, #10
 8007396:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007398:	7805      	ldrb	r5, [r0, #0]
 800739a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800739e:	b2d9      	uxtb	r1, r3
 80073a0:	2909      	cmp	r1, #9
 80073a2:	d928      	bls.n	80073f6 <_strtod_l+0x1a6>
 80073a4:	494f      	ldr	r1, [pc, #316]	@ (80074e4 <_strtod_l+0x294>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	f001 fe82 	bl	80090b0 <strncmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d032      	beq.n	8007416 <_strtod_l+0x1c6>
 80073b0:	2000      	movs	r0, #0
 80073b2:	462a      	mov	r2, r5
 80073b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80073b6:	464d      	mov	r5, r9
 80073b8:	4603      	mov	r3, r0
 80073ba:	2a65      	cmp	r2, #101	@ 0x65
 80073bc:	d001      	beq.n	80073c2 <_strtod_l+0x172>
 80073be:	2a45      	cmp	r2, #69	@ 0x45
 80073c0:	d114      	bne.n	80073ec <_strtod_l+0x19c>
 80073c2:	b91d      	cbnz	r5, 80073cc <_strtod_l+0x17c>
 80073c4:	9a08      	ldr	r2, [sp, #32]
 80073c6:	4302      	orrs	r2, r0
 80073c8:	d096      	beq.n	80072f8 <_strtod_l+0xa8>
 80073ca:	2500      	movs	r5, #0
 80073cc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80073ce:	1c62      	adds	r2, r4, #1
 80073d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80073d2:	7862      	ldrb	r2, [r4, #1]
 80073d4:	2a2b      	cmp	r2, #43	@ 0x2b
 80073d6:	d07a      	beq.n	80074ce <_strtod_l+0x27e>
 80073d8:	2a2d      	cmp	r2, #45	@ 0x2d
 80073da:	d07e      	beq.n	80074da <_strtod_l+0x28a>
 80073dc:	f04f 0c00 	mov.w	ip, #0
 80073e0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80073e4:	2909      	cmp	r1, #9
 80073e6:	f240 8085 	bls.w	80074f4 <_strtod_l+0x2a4>
 80073ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80073ec:	f04f 0800 	mov.w	r8, #0
 80073f0:	e0a5      	b.n	800753e <_strtod_l+0x2ee>
 80073f2:	2300      	movs	r3, #0
 80073f4:	e7c8      	b.n	8007388 <_strtod_l+0x138>
 80073f6:	f1b9 0f08 	cmp.w	r9, #8
 80073fa:	bfd8      	it	le
 80073fc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80073fe:	f100 0001 	add.w	r0, r0, #1
 8007402:	bfda      	itte	le
 8007404:	fb02 3301 	mlale	r3, r2, r1, r3
 8007408:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800740a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800740e:	f109 0901 	add.w	r9, r9, #1
 8007412:	9019      	str	r0, [sp, #100]	@ 0x64
 8007414:	e7bf      	b.n	8007396 <_strtod_l+0x146>
 8007416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	9219      	str	r2, [sp, #100]	@ 0x64
 800741c:	785a      	ldrb	r2, [r3, #1]
 800741e:	f1b9 0f00 	cmp.w	r9, #0
 8007422:	d03b      	beq.n	800749c <_strtod_l+0x24c>
 8007424:	900a      	str	r0, [sp, #40]	@ 0x28
 8007426:	464d      	mov	r5, r9
 8007428:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800742c:	2b09      	cmp	r3, #9
 800742e:	d912      	bls.n	8007456 <_strtod_l+0x206>
 8007430:	2301      	movs	r3, #1
 8007432:	e7c2      	b.n	80073ba <_strtod_l+0x16a>
 8007434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	9219      	str	r2, [sp, #100]	@ 0x64
 800743a:	785a      	ldrb	r2, [r3, #1]
 800743c:	3001      	adds	r0, #1
 800743e:	2a30      	cmp	r2, #48	@ 0x30
 8007440:	d0f8      	beq.n	8007434 <_strtod_l+0x1e4>
 8007442:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007446:	2b08      	cmp	r3, #8
 8007448:	f200 84d2 	bhi.w	8007df0 <_strtod_l+0xba0>
 800744c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800744e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007450:	2000      	movs	r0, #0
 8007452:	930c      	str	r3, [sp, #48]	@ 0x30
 8007454:	4605      	mov	r5, r0
 8007456:	3a30      	subs	r2, #48	@ 0x30
 8007458:	f100 0301 	add.w	r3, r0, #1
 800745c:	d018      	beq.n	8007490 <_strtod_l+0x240>
 800745e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007460:	4419      	add	r1, r3
 8007462:	910a      	str	r1, [sp, #40]	@ 0x28
 8007464:	462e      	mov	r6, r5
 8007466:	f04f 0e0a 	mov.w	lr, #10
 800746a:	1c71      	adds	r1, r6, #1
 800746c:	eba1 0c05 	sub.w	ip, r1, r5
 8007470:	4563      	cmp	r3, ip
 8007472:	dc15      	bgt.n	80074a0 <_strtod_l+0x250>
 8007474:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007478:	182b      	adds	r3, r5, r0
 800747a:	2b08      	cmp	r3, #8
 800747c:	f105 0501 	add.w	r5, r5, #1
 8007480:	4405      	add	r5, r0
 8007482:	dc1a      	bgt.n	80074ba <_strtod_l+0x26a>
 8007484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007486:	230a      	movs	r3, #10
 8007488:	fb03 2301 	mla	r3, r3, r1, r2
 800748c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748e:	2300      	movs	r3, #0
 8007490:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007492:	1c51      	adds	r1, r2, #1
 8007494:	9119      	str	r1, [sp, #100]	@ 0x64
 8007496:	7852      	ldrb	r2, [r2, #1]
 8007498:	4618      	mov	r0, r3
 800749a:	e7c5      	b.n	8007428 <_strtod_l+0x1d8>
 800749c:	4648      	mov	r0, r9
 800749e:	e7ce      	b.n	800743e <_strtod_l+0x1ee>
 80074a0:	2e08      	cmp	r6, #8
 80074a2:	dc05      	bgt.n	80074b0 <_strtod_l+0x260>
 80074a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80074a6:	fb0e f606 	mul.w	r6, lr, r6
 80074aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80074ac:	460e      	mov	r6, r1
 80074ae:	e7dc      	b.n	800746a <_strtod_l+0x21a>
 80074b0:	2910      	cmp	r1, #16
 80074b2:	bfd8      	it	le
 80074b4:	fb0e f707 	mulle.w	r7, lr, r7
 80074b8:	e7f8      	b.n	80074ac <_strtod_l+0x25c>
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	bfdc      	itt	le
 80074be:	230a      	movle	r3, #10
 80074c0:	fb03 2707 	mlale	r7, r3, r7, r2
 80074c4:	e7e3      	b.n	800748e <_strtod_l+0x23e>
 80074c6:	2300      	movs	r3, #0
 80074c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ca:	2301      	movs	r3, #1
 80074cc:	e77a      	b.n	80073c4 <_strtod_l+0x174>
 80074ce:	f04f 0c00 	mov.w	ip, #0
 80074d2:	1ca2      	adds	r2, r4, #2
 80074d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80074d6:	78a2      	ldrb	r2, [r4, #2]
 80074d8:	e782      	b.n	80073e0 <_strtod_l+0x190>
 80074da:	f04f 0c01 	mov.w	ip, #1
 80074de:	e7f8      	b.n	80074d2 <_strtod_l+0x282>
 80074e0:	08009e1c 	.word	0x08009e1c
 80074e4:	08009c39 	.word	0x08009c39
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074ee:	1c51      	adds	r1, r2, #1
 80074f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80074f2:	7852      	ldrb	r2, [r2, #1]
 80074f4:	2a30      	cmp	r2, #48	@ 0x30
 80074f6:	d0f9      	beq.n	80074ec <_strtod_l+0x29c>
 80074f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80074fc:	2908      	cmp	r1, #8
 80074fe:	f63f af75 	bhi.w	80073ec <_strtod_l+0x19c>
 8007502:	3a30      	subs	r2, #48	@ 0x30
 8007504:	9209      	str	r2, [sp, #36]	@ 0x24
 8007506:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007508:	920f      	str	r2, [sp, #60]	@ 0x3c
 800750a:	f04f 080a 	mov.w	r8, #10
 800750e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007510:	1c56      	adds	r6, r2, #1
 8007512:	9619      	str	r6, [sp, #100]	@ 0x64
 8007514:	7852      	ldrb	r2, [r2, #1]
 8007516:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800751a:	f1be 0f09 	cmp.w	lr, #9
 800751e:	d939      	bls.n	8007594 <_strtod_l+0x344>
 8007520:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007522:	1a76      	subs	r6, r6, r1
 8007524:	2e08      	cmp	r6, #8
 8007526:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800752a:	dc03      	bgt.n	8007534 <_strtod_l+0x2e4>
 800752c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800752e:	4588      	cmp	r8, r1
 8007530:	bfa8      	it	ge
 8007532:	4688      	movge	r8, r1
 8007534:	f1bc 0f00 	cmp.w	ip, #0
 8007538:	d001      	beq.n	800753e <_strtod_l+0x2ee>
 800753a:	f1c8 0800 	rsb	r8, r8, #0
 800753e:	2d00      	cmp	r5, #0
 8007540:	d14e      	bne.n	80075e0 <_strtod_l+0x390>
 8007542:	9908      	ldr	r1, [sp, #32]
 8007544:	4308      	orrs	r0, r1
 8007546:	f47f aebc 	bne.w	80072c2 <_strtod_l+0x72>
 800754a:	2b00      	cmp	r3, #0
 800754c:	f47f aed4 	bne.w	80072f8 <_strtod_l+0xa8>
 8007550:	2a69      	cmp	r2, #105	@ 0x69
 8007552:	d028      	beq.n	80075a6 <_strtod_l+0x356>
 8007554:	dc25      	bgt.n	80075a2 <_strtod_l+0x352>
 8007556:	2a49      	cmp	r2, #73	@ 0x49
 8007558:	d025      	beq.n	80075a6 <_strtod_l+0x356>
 800755a:	2a4e      	cmp	r2, #78	@ 0x4e
 800755c:	f47f aecc 	bne.w	80072f8 <_strtod_l+0xa8>
 8007560:	499a      	ldr	r1, [pc, #616]	@ (80077cc <_strtod_l+0x57c>)
 8007562:	a819      	add	r0, sp, #100	@ 0x64
 8007564:	f002 f8bc 	bl	80096e0 <__match>
 8007568:	2800      	cmp	r0, #0
 800756a:	f43f aec5 	beq.w	80072f8 <_strtod_l+0xa8>
 800756e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b28      	cmp	r3, #40	@ 0x28
 8007574:	d12e      	bne.n	80075d4 <_strtod_l+0x384>
 8007576:	4996      	ldr	r1, [pc, #600]	@ (80077d0 <_strtod_l+0x580>)
 8007578:	aa1c      	add	r2, sp, #112	@ 0x70
 800757a:	a819      	add	r0, sp, #100	@ 0x64
 800757c:	f002 f8c4 	bl	8009708 <__hexnan>
 8007580:	2805      	cmp	r0, #5
 8007582:	d127      	bne.n	80075d4 <_strtod_l+0x384>
 8007584:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007586:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800758a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800758e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007592:	e696      	b.n	80072c2 <_strtod_l+0x72>
 8007594:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007596:	fb08 2101 	mla	r1, r8, r1, r2
 800759a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800759e:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a0:	e7b5      	b.n	800750e <_strtod_l+0x2be>
 80075a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80075a4:	e7da      	b.n	800755c <_strtod_l+0x30c>
 80075a6:	498b      	ldr	r1, [pc, #556]	@ (80077d4 <_strtod_l+0x584>)
 80075a8:	a819      	add	r0, sp, #100	@ 0x64
 80075aa:	f002 f899 	bl	80096e0 <__match>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f43f aea2 	beq.w	80072f8 <_strtod_l+0xa8>
 80075b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075b6:	4988      	ldr	r1, [pc, #544]	@ (80077d8 <_strtod_l+0x588>)
 80075b8:	3b01      	subs	r3, #1
 80075ba:	a819      	add	r0, sp, #100	@ 0x64
 80075bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80075be:	f002 f88f 	bl	80096e0 <__match>
 80075c2:	b910      	cbnz	r0, 80075ca <_strtod_l+0x37a>
 80075c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075c6:	3301      	adds	r3, #1
 80075c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80075ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80077e8 <_strtod_l+0x598>
 80075ce:	f04f 0a00 	mov.w	sl, #0
 80075d2:	e676      	b.n	80072c2 <_strtod_l+0x72>
 80075d4:	4881      	ldr	r0, [pc, #516]	@ (80077dc <_strtod_l+0x58c>)
 80075d6:	f001 fdbf 	bl	8009158 <nan>
 80075da:	ec5b ab10 	vmov	sl, fp, d0
 80075de:	e670      	b.n	80072c2 <_strtod_l+0x72>
 80075e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80075e4:	eba8 0303 	sub.w	r3, r8, r3
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	bf08      	it	eq
 80075ee:	46a9      	moveq	r9, r5
 80075f0:	2d10      	cmp	r5, #16
 80075f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f4:	462c      	mov	r4, r5
 80075f6:	bfa8      	it	ge
 80075f8:	2410      	movge	r4, #16
 80075fa:	f7f8 ff8b 	bl	8000514 <__aeabi_ui2d>
 80075fe:	2d09      	cmp	r5, #9
 8007600:	4682      	mov	sl, r0
 8007602:	468b      	mov	fp, r1
 8007604:	dc13      	bgt.n	800762e <_strtod_l+0x3de>
 8007606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	f43f ae5a 	beq.w	80072c2 <_strtod_l+0x72>
 800760e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007610:	dd78      	ble.n	8007704 <_strtod_l+0x4b4>
 8007612:	2b16      	cmp	r3, #22
 8007614:	dc5f      	bgt.n	80076d6 <_strtod_l+0x486>
 8007616:	4972      	ldr	r1, [pc, #456]	@ (80077e0 <_strtod_l+0x590>)
 8007618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800761c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007620:	4652      	mov	r2, sl
 8007622:	465b      	mov	r3, fp
 8007624:	f7f8 fff0 	bl	8000608 <__aeabi_dmul>
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	e649      	b.n	80072c2 <_strtod_l+0x72>
 800762e:	4b6c      	ldr	r3, [pc, #432]	@ (80077e0 <_strtod_l+0x590>)
 8007630:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007634:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007638:	f7f8 ffe6 	bl	8000608 <__aeabi_dmul>
 800763c:	4682      	mov	sl, r0
 800763e:	4638      	mov	r0, r7
 8007640:	468b      	mov	fp, r1
 8007642:	f7f8 ff67 	bl	8000514 <__aeabi_ui2d>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4650      	mov	r0, sl
 800764c:	4659      	mov	r1, fp
 800764e:	f7f8 fe25 	bl	800029c <__adddf3>
 8007652:	2d0f      	cmp	r5, #15
 8007654:	4682      	mov	sl, r0
 8007656:	468b      	mov	fp, r1
 8007658:	ddd5      	ble.n	8007606 <_strtod_l+0x3b6>
 800765a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800765c:	1b2c      	subs	r4, r5, r4
 800765e:	441c      	add	r4, r3
 8007660:	2c00      	cmp	r4, #0
 8007662:	f340 8093 	ble.w	800778c <_strtod_l+0x53c>
 8007666:	f014 030f 	ands.w	r3, r4, #15
 800766a:	d00a      	beq.n	8007682 <_strtod_l+0x432>
 800766c:	495c      	ldr	r1, [pc, #368]	@ (80077e0 <_strtod_l+0x590>)
 800766e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007672:	4652      	mov	r2, sl
 8007674:	465b      	mov	r3, fp
 8007676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800767a:	f7f8 ffc5 	bl	8000608 <__aeabi_dmul>
 800767e:	4682      	mov	sl, r0
 8007680:	468b      	mov	fp, r1
 8007682:	f034 040f 	bics.w	r4, r4, #15
 8007686:	d073      	beq.n	8007770 <_strtod_l+0x520>
 8007688:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800768c:	dd49      	ble.n	8007722 <_strtod_l+0x4d2>
 800768e:	2400      	movs	r4, #0
 8007690:	46a0      	mov	r8, r4
 8007692:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007694:	46a1      	mov	r9, r4
 8007696:	9a05      	ldr	r2, [sp, #20]
 8007698:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80077e8 <_strtod_l+0x598>
 800769c:	2322      	movs	r3, #34	@ 0x22
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	f04f 0a00 	mov.w	sl, #0
 80076a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f43f ae0b 	beq.w	80072c2 <_strtod_l+0x72>
 80076ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076ae:	9805      	ldr	r0, [sp, #20]
 80076b0:	f7ff f946 	bl	8006940 <_Bfree>
 80076b4:	9805      	ldr	r0, [sp, #20]
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7ff f942 	bl	8006940 <_Bfree>
 80076bc:	9805      	ldr	r0, [sp, #20]
 80076be:	4641      	mov	r1, r8
 80076c0:	f7ff f93e 	bl	8006940 <_Bfree>
 80076c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076c6:	9805      	ldr	r0, [sp, #20]
 80076c8:	f7ff f93a 	bl	8006940 <_Bfree>
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	4621      	mov	r1, r4
 80076d0:	f7ff f936 	bl	8006940 <_Bfree>
 80076d4:	e5f5      	b.n	80072c2 <_strtod_l+0x72>
 80076d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80076dc:	4293      	cmp	r3, r2
 80076de:	dbbc      	blt.n	800765a <_strtod_l+0x40a>
 80076e0:	4c3f      	ldr	r4, [pc, #252]	@ (80077e0 <_strtod_l+0x590>)
 80076e2:	f1c5 050f 	rsb	r5, r5, #15
 80076e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076ea:	4652      	mov	r2, sl
 80076ec:	465b      	mov	r3, fp
 80076ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f2:	f7f8 ff89 	bl	8000608 <__aeabi_dmul>
 80076f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f8:	1b5d      	subs	r5, r3, r5
 80076fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80076fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007702:	e78f      	b.n	8007624 <_strtod_l+0x3d4>
 8007704:	3316      	adds	r3, #22
 8007706:	dba8      	blt.n	800765a <_strtod_l+0x40a>
 8007708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800770a:	eba3 0808 	sub.w	r8, r3, r8
 800770e:	4b34      	ldr	r3, [pc, #208]	@ (80077e0 <_strtod_l+0x590>)
 8007710:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007714:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007718:	4650      	mov	r0, sl
 800771a:	4659      	mov	r1, fp
 800771c:	f7f9 f89e 	bl	800085c <__aeabi_ddiv>
 8007720:	e782      	b.n	8007628 <_strtod_l+0x3d8>
 8007722:	2300      	movs	r3, #0
 8007724:	4f2f      	ldr	r7, [pc, #188]	@ (80077e4 <_strtod_l+0x594>)
 8007726:	1124      	asrs	r4, r4, #4
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	461e      	mov	r6, r3
 800772e:	2c01      	cmp	r4, #1
 8007730:	dc21      	bgt.n	8007776 <_strtod_l+0x526>
 8007732:	b10b      	cbz	r3, 8007738 <_strtod_l+0x4e8>
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	492a      	ldr	r1, [pc, #168]	@ (80077e4 <_strtod_l+0x594>)
 800773a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800773e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007742:	4652      	mov	r2, sl
 8007744:	465b      	mov	r3, fp
 8007746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774a:	f7f8 ff5d 	bl	8000608 <__aeabi_dmul>
 800774e:	4b26      	ldr	r3, [pc, #152]	@ (80077e8 <_strtod_l+0x598>)
 8007750:	460a      	mov	r2, r1
 8007752:	400b      	ands	r3, r1
 8007754:	4925      	ldr	r1, [pc, #148]	@ (80077ec <_strtod_l+0x59c>)
 8007756:	428b      	cmp	r3, r1
 8007758:	4682      	mov	sl, r0
 800775a:	d898      	bhi.n	800768e <_strtod_l+0x43e>
 800775c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007760:	428b      	cmp	r3, r1
 8007762:	bf86      	itte	hi
 8007764:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80077f0 <_strtod_l+0x5a0>
 8007768:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800776c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007770:	2300      	movs	r3, #0
 8007772:	9308      	str	r3, [sp, #32]
 8007774:	e076      	b.n	8007864 <_strtod_l+0x614>
 8007776:	07e2      	lsls	r2, r4, #31
 8007778:	d504      	bpl.n	8007784 <_strtod_l+0x534>
 800777a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	2301      	movs	r3, #1
 8007784:	3601      	adds	r6, #1
 8007786:	1064      	asrs	r4, r4, #1
 8007788:	3708      	adds	r7, #8
 800778a:	e7d0      	b.n	800772e <_strtod_l+0x4de>
 800778c:	d0f0      	beq.n	8007770 <_strtod_l+0x520>
 800778e:	4264      	negs	r4, r4
 8007790:	f014 020f 	ands.w	r2, r4, #15
 8007794:	d00a      	beq.n	80077ac <_strtod_l+0x55c>
 8007796:	4b12      	ldr	r3, [pc, #72]	@ (80077e0 <_strtod_l+0x590>)
 8007798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800779c:	4650      	mov	r0, sl
 800779e:	4659      	mov	r1, fp
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f9 f85a 	bl	800085c <__aeabi_ddiv>
 80077a8:	4682      	mov	sl, r0
 80077aa:	468b      	mov	fp, r1
 80077ac:	1124      	asrs	r4, r4, #4
 80077ae:	d0df      	beq.n	8007770 <_strtod_l+0x520>
 80077b0:	2c1f      	cmp	r4, #31
 80077b2:	dd1f      	ble.n	80077f4 <_strtod_l+0x5a4>
 80077b4:	2400      	movs	r4, #0
 80077b6:	46a0      	mov	r8, r4
 80077b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077ba:	46a1      	mov	r9, r4
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	2322      	movs	r3, #34	@ 0x22
 80077c0:	f04f 0a00 	mov.w	sl, #0
 80077c4:	f04f 0b00 	mov.w	fp, #0
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e76b      	b.n	80076a4 <_strtod_l+0x454>
 80077cc:	08009b29 	.word	0x08009b29
 80077d0:	08009e08 	.word	0x08009e08
 80077d4:	08009b21 	.word	0x08009b21
 80077d8:	08009b56 	.word	0x08009b56
 80077dc:	08009caa 	.word	0x08009caa
 80077e0:	08009d40 	.word	0x08009d40
 80077e4:	08009d18 	.word	0x08009d18
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	7ca00000 	.word	0x7ca00000
 80077f0:	7fefffff 	.word	0x7fefffff
 80077f4:	f014 0310 	ands.w	r3, r4, #16
 80077f8:	bf18      	it	ne
 80077fa:	236a      	movne	r3, #106	@ 0x6a
 80077fc:	4ea9      	ldr	r6, [pc, #676]	@ (8007aa4 <_strtod_l+0x854>)
 80077fe:	9308      	str	r3, [sp, #32]
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	2300      	movs	r3, #0
 8007806:	07e7      	lsls	r7, r4, #31
 8007808:	d504      	bpl.n	8007814 <_strtod_l+0x5c4>
 800780a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800780e:	f7f8 fefb 	bl	8000608 <__aeabi_dmul>
 8007812:	2301      	movs	r3, #1
 8007814:	1064      	asrs	r4, r4, #1
 8007816:	f106 0608 	add.w	r6, r6, #8
 800781a:	d1f4      	bne.n	8007806 <_strtod_l+0x5b6>
 800781c:	b10b      	cbz	r3, 8007822 <_strtod_l+0x5d2>
 800781e:	4682      	mov	sl, r0
 8007820:	468b      	mov	fp, r1
 8007822:	9b08      	ldr	r3, [sp, #32]
 8007824:	b1b3      	cbz	r3, 8007854 <_strtod_l+0x604>
 8007826:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800782a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800782e:	2b00      	cmp	r3, #0
 8007830:	4659      	mov	r1, fp
 8007832:	dd0f      	ble.n	8007854 <_strtod_l+0x604>
 8007834:	2b1f      	cmp	r3, #31
 8007836:	dd56      	ble.n	80078e6 <_strtod_l+0x696>
 8007838:	2b34      	cmp	r3, #52	@ 0x34
 800783a:	bfde      	ittt	le
 800783c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007840:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007844:	4093      	lslle	r3, r2
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	bfcc      	ite	gt
 800784c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007850:	ea03 0b01 	andle.w	fp, r3, r1
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	4650      	mov	r0, sl
 800785a:	4659      	mov	r1, fp
 800785c:	f7f9 f93c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007860:	2800      	cmp	r0, #0
 8007862:	d1a7      	bne.n	80077b4 <_strtod_l+0x564>
 8007864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800786a:	9805      	ldr	r0, [sp, #20]
 800786c:	462b      	mov	r3, r5
 800786e:	464a      	mov	r2, r9
 8007870:	f7ff f8ce 	bl	8006a10 <__s2b>
 8007874:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007876:	2800      	cmp	r0, #0
 8007878:	f43f af09 	beq.w	800768e <_strtod_l+0x43e>
 800787c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800787e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007880:	2a00      	cmp	r2, #0
 8007882:	eba3 0308 	sub.w	r3, r3, r8
 8007886:	bfa8      	it	ge
 8007888:	2300      	movge	r3, #0
 800788a:	9312      	str	r3, [sp, #72]	@ 0x48
 800788c:	2400      	movs	r4, #0
 800788e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007892:	9316      	str	r3, [sp, #88]	@ 0x58
 8007894:	46a0      	mov	r8, r4
 8007896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007898:	9805      	ldr	r0, [sp, #20]
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	f7ff f810 	bl	80068c0 <_Balloc>
 80078a0:	4681      	mov	r9, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f aef7 	beq.w	8007696 <_strtod_l+0x446>
 80078a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	3202      	adds	r2, #2
 80078ae:	f103 010c 	add.w	r1, r3, #12
 80078b2:	0092      	lsls	r2, r2, #2
 80078b4:	300c      	adds	r0, #12
 80078b6:	f001 fc3f 	bl	8009138 <memcpy>
 80078ba:	ec4b ab10 	vmov	d0, sl, fp
 80078be:	9805      	ldr	r0, [sp, #20]
 80078c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80078c2:	a91b      	add	r1, sp, #108	@ 0x6c
 80078c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078c8:	f7ff fbd6 	bl	8007078 <__d2b>
 80078cc:	901a      	str	r0, [sp, #104]	@ 0x68
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f43f aee1 	beq.w	8007696 <_strtod_l+0x446>
 80078d4:	9805      	ldr	r0, [sp, #20]
 80078d6:	2101      	movs	r1, #1
 80078d8:	f7ff f930 	bl	8006b3c <__i2b>
 80078dc:	4680      	mov	r8, r0
 80078de:	b948      	cbnz	r0, 80078f4 <_strtod_l+0x6a4>
 80078e0:	f04f 0800 	mov.w	r8, #0
 80078e4:	e6d7      	b.n	8007696 <_strtod_l+0x446>
 80078e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	ea03 0a0a 	and.w	sl, r3, sl
 80078f2:	e7af      	b.n	8007854 <_strtod_l+0x604>
 80078f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80078f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	bfab      	itete	ge
 80078fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80078fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007900:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007902:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007904:	bfac      	ite	ge
 8007906:	18ef      	addge	r7, r5, r3
 8007908:	1b5e      	sublt	r6, r3, r5
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	1aed      	subs	r5, r5, r3
 800790e:	4415      	add	r5, r2
 8007910:	4b65      	ldr	r3, [pc, #404]	@ (8007aa8 <_strtod_l+0x858>)
 8007912:	3d01      	subs	r5, #1
 8007914:	429d      	cmp	r5, r3
 8007916:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800791a:	da50      	bge.n	80079be <_strtod_l+0x76e>
 800791c:	1b5b      	subs	r3, r3, r5
 800791e:	2b1f      	cmp	r3, #31
 8007920:	eba2 0203 	sub.w	r2, r2, r3
 8007924:	f04f 0101 	mov.w	r1, #1
 8007928:	dc3d      	bgt.n	80079a6 <_strtod_l+0x756>
 800792a:	fa01 f303 	lsl.w	r3, r1, r3
 800792e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007930:	2300      	movs	r3, #0
 8007932:	9310      	str	r3, [sp, #64]	@ 0x40
 8007934:	18bd      	adds	r5, r7, r2
 8007936:	9b08      	ldr	r3, [sp, #32]
 8007938:	42af      	cmp	r7, r5
 800793a:	4416      	add	r6, r2
 800793c:	441e      	add	r6, r3
 800793e:	463b      	mov	r3, r7
 8007940:	bfa8      	it	ge
 8007942:	462b      	movge	r3, r5
 8007944:	42b3      	cmp	r3, r6
 8007946:	bfa8      	it	ge
 8007948:	4633      	movge	r3, r6
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfc2      	ittt	gt
 800794e:	1aed      	subgt	r5, r5, r3
 8007950:	1af6      	subgt	r6, r6, r3
 8007952:	1aff      	subgt	r7, r7, r3
 8007954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007956:	2b00      	cmp	r3, #0
 8007958:	dd16      	ble.n	8007988 <_strtod_l+0x738>
 800795a:	4641      	mov	r1, r8
 800795c:	9805      	ldr	r0, [sp, #20]
 800795e:	461a      	mov	r2, r3
 8007960:	f7ff f9a4 	bl	8006cac <__pow5mult>
 8007964:	4680      	mov	r8, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	d0ba      	beq.n	80078e0 <_strtod_l+0x690>
 800796a:	4601      	mov	r1, r0
 800796c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800796e:	9805      	ldr	r0, [sp, #20]
 8007970:	f7ff f8fa 	bl	8006b68 <__multiply>
 8007974:	900a      	str	r0, [sp, #40]	@ 0x28
 8007976:	2800      	cmp	r0, #0
 8007978:	f43f ae8d 	beq.w	8007696 <_strtod_l+0x446>
 800797c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f7fe ffde 	bl	8006940 <_Bfree>
 8007984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007986:	931a      	str	r3, [sp, #104]	@ 0x68
 8007988:	2d00      	cmp	r5, #0
 800798a:	dc1d      	bgt.n	80079c8 <_strtod_l+0x778>
 800798c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798e:	2b00      	cmp	r3, #0
 8007990:	dd23      	ble.n	80079da <_strtod_l+0x78a>
 8007992:	4649      	mov	r1, r9
 8007994:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007996:	9805      	ldr	r0, [sp, #20]
 8007998:	f7ff f988 	bl	8006cac <__pow5mult>
 800799c:	4681      	mov	r9, r0
 800799e:	b9e0      	cbnz	r0, 80079da <_strtod_l+0x78a>
 80079a0:	f04f 0900 	mov.w	r9, #0
 80079a4:	e677      	b.n	8007696 <_strtod_l+0x446>
 80079a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80079aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80079ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80079b2:	35e2      	adds	r5, #226	@ 0xe2
 80079b4:	fa01 f305 	lsl.w	r3, r1, r5
 80079b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80079ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079bc:	e7ba      	b.n	8007934 <_strtod_l+0x6e4>
 80079be:	2300      	movs	r3, #0
 80079c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80079c2:	2301      	movs	r3, #1
 80079c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079c6:	e7b5      	b.n	8007934 <_strtod_l+0x6e4>
 80079c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ca:	9805      	ldr	r0, [sp, #20]
 80079cc:	462a      	mov	r2, r5
 80079ce:	f7ff f9c7 	bl	8006d60 <__lshift>
 80079d2:	901a      	str	r0, [sp, #104]	@ 0x68
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1d9      	bne.n	800798c <_strtod_l+0x73c>
 80079d8:	e65d      	b.n	8007696 <_strtod_l+0x446>
 80079da:	2e00      	cmp	r6, #0
 80079dc:	dd07      	ble.n	80079ee <_strtod_l+0x79e>
 80079de:	4649      	mov	r1, r9
 80079e0:	9805      	ldr	r0, [sp, #20]
 80079e2:	4632      	mov	r2, r6
 80079e4:	f7ff f9bc 	bl	8006d60 <__lshift>
 80079e8:	4681      	mov	r9, r0
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d0d8      	beq.n	80079a0 <_strtod_l+0x750>
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	dd08      	ble.n	8007a04 <_strtod_l+0x7b4>
 80079f2:	4641      	mov	r1, r8
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	463a      	mov	r2, r7
 80079f8:	f7ff f9b2 	bl	8006d60 <__lshift>
 80079fc:	4680      	mov	r8, r0
 80079fe:	2800      	cmp	r0, #0
 8007a00:	f43f ae49 	beq.w	8007696 <_strtod_l+0x446>
 8007a04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a06:	9805      	ldr	r0, [sp, #20]
 8007a08:	464a      	mov	r2, r9
 8007a0a:	f7ff fa31 	bl	8006e70 <__mdiff>
 8007a0e:	4604      	mov	r4, r0
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f43f ae40 	beq.w	8007696 <_strtod_l+0x446>
 8007a16:	68c3      	ldr	r3, [r0, #12]
 8007a18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60c3      	str	r3, [r0, #12]
 8007a1e:	4641      	mov	r1, r8
 8007a20:	f7ff fa0a 	bl	8006e38 <__mcmp>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	da45      	bge.n	8007ab4 <_strtod_l+0x864>
 8007a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a2e:	d16b      	bne.n	8007b08 <_strtod_l+0x8b8>
 8007a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d167      	bne.n	8007b08 <_strtod_l+0x8b8>
 8007a38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a3c:	0d1b      	lsrs	r3, r3, #20
 8007a3e:	051b      	lsls	r3, r3, #20
 8007a40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a44:	d960      	bls.n	8007b08 <_strtod_l+0x8b8>
 8007a46:	6963      	ldr	r3, [r4, #20]
 8007a48:	b913      	cbnz	r3, 8007a50 <_strtod_l+0x800>
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	dd5b      	ble.n	8007b08 <_strtod_l+0x8b8>
 8007a50:	4621      	mov	r1, r4
 8007a52:	2201      	movs	r2, #1
 8007a54:	9805      	ldr	r0, [sp, #20]
 8007a56:	f7ff f983 	bl	8006d60 <__lshift>
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	f7ff f9eb 	bl	8006e38 <__mcmp>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	dd50      	ble.n	8007b08 <_strtod_l+0x8b8>
 8007a66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a6a:	9a08      	ldr	r2, [sp, #32]
 8007a6c:	0d1b      	lsrs	r3, r3, #20
 8007a6e:	051b      	lsls	r3, r3, #20
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d06a      	beq.n	8007b4a <_strtod_l+0x8fa>
 8007a74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a78:	d867      	bhi.n	8007b4a <_strtod_l+0x8fa>
 8007a7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007a7e:	f67f ae9d 	bls.w	80077bc <_strtod_l+0x56c>
 8007a82:	4b0a      	ldr	r3, [pc, #40]	@ (8007aac <_strtod_l+0x85c>)
 8007a84:	4650      	mov	r0, sl
 8007a86:	4659      	mov	r1, fp
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f7f8 fdbd 	bl	8000608 <__aeabi_dmul>
 8007a8e:	4b08      	ldr	r3, [pc, #32]	@ (8007ab0 <_strtod_l+0x860>)
 8007a90:	400b      	ands	r3, r1
 8007a92:	4682      	mov	sl, r0
 8007a94:	468b      	mov	fp, r1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f47f ae08 	bne.w	80076ac <_strtod_l+0x45c>
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	2322      	movs	r3, #34	@ 0x22
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	e603      	b.n	80076ac <_strtod_l+0x45c>
 8007aa4:	08009e30 	.word	0x08009e30
 8007aa8:	fffffc02 	.word	0xfffffc02
 8007aac:	39500000 	.word	0x39500000
 8007ab0:	7ff00000 	.word	0x7ff00000
 8007ab4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ab8:	d165      	bne.n	8007b86 <_strtod_l+0x936>
 8007aba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007abc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac0:	b35a      	cbz	r2, 8007b1a <_strtod_l+0x8ca>
 8007ac2:	4a9f      	ldr	r2, [pc, #636]	@ (8007d40 <_strtod_l+0xaf0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d12b      	bne.n	8007b20 <_strtod_l+0x8d0>
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	4651      	mov	r1, sl
 8007acc:	b303      	cbz	r3, 8007b10 <_strtod_l+0x8c0>
 8007ace:	4b9d      	ldr	r3, [pc, #628]	@ (8007d44 <_strtod_l+0xaf4>)
 8007ad0:	465a      	mov	r2, fp
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007adc:	d81b      	bhi.n	8007b16 <_strtod_l+0x8c6>
 8007ade:	0d1b      	lsrs	r3, r3, #20
 8007ae0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d119      	bne.n	8007b20 <_strtod_l+0x8d0>
 8007aec:	4b96      	ldr	r3, [pc, #600]	@ (8007d48 <_strtod_l+0xaf8>)
 8007aee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d102      	bne.n	8007afa <_strtod_l+0x8aa>
 8007af4:	3101      	adds	r1, #1
 8007af6:	f43f adce 	beq.w	8007696 <_strtod_l+0x446>
 8007afa:	4b92      	ldr	r3, [pc, #584]	@ (8007d44 <_strtod_l+0xaf4>)
 8007afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007afe:	401a      	ands	r2, r3
 8007b00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007b04:	f04f 0a00 	mov.w	sl, #0
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1b9      	bne.n	8007a82 <_strtod_l+0x832>
 8007b0e:	e5cd      	b.n	80076ac <_strtod_l+0x45c>
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b14:	e7e8      	b.n	8007ae8 <_strtod_l+0x898>
 8007b16:	4613      	mov	r3, r2
 8007b18:	e7e6      	b.n	8007ae8 <_strtod_l+0x898>
 8007b1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b1e:	d0a2      	beq.n	8007a66 <_strtod_l+0x816>
 8007b20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b22:	b1db      	cbz	r3, 8007b5c <_strtod_l+0x90c>
 8007b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b26:	4213      	tst	r3, r2
 8007b28:	d0ee      	beq.n	8007b08 <_strtod_l+0x8b8>
 8007b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2c:	9a08      	ldr	r2, [sp, #32]
 8007b2e:	4650      	mov	r0, sl
 8007b30:	4659      	mov	r1, fp
 8007b32:	b1bb      	cbz	r3, 8007b64 <_strtod_l+0x914>
 8007b34:	f7ff fb6e 	bl	8007214 <sulp>
 8007b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b3c:	ec53 2b10 	vmov	r2, r3, d0
 8007b40:	f7f8 fbac 	bl	800029c <__adddf3>
 8007b44:	4682      	mov	sl, r0
 8007b46:	468b      	mov	fp, r1
 8007b48:	e7de      	b.n	8007b08 <_strtod_l+0x8b8>
 8007b4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007b4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b56:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007b5a:	e7d5      	b.n	8007b08 <_strtod_l+0x8b8>
 8007b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b5e:	ea13 0f0a 	tst.w	r3, sl
 8007b62:	e7e1      	b.n	8007b28 <_strtod_l+0x8d8>
 8007b64:	f7ff fb56 	bl	8007214 <sulp>
 8007b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b6c:	ec53 2b10 	vmov	r2, r3, d0
 8007b70:	f7f8 fb92 	bl	8000298 <__aeabi_dsub>
 8007b74:	2200      	movs	r2, #0
 8007b76:	2300      	movs	r3, #0
 8007b78:	4682      	mov	sl, r0
 8007b7a:	468b      	mov	fp, r1
 8007b7c:	f7f8 ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d0c1      	beq.n	8007b08 <_strtod_l+0x8b8>
 8007b84:	e61a      	b.n	80077bc <_strtod_l+0x56c>
 8007b86:	4641      	mov	r1, r8
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f7ff facd 	bl	8007128 <__ratio>
 8007b8e:	ec57 6b10 	vmov	r6, r7, d0
 8007b92:	2200      	movs	r2, #0
 8007b94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b98:	4630      	mov	r0, r6
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	f7f8 ffb0 	bl	8000b00 <__aeabi_dcmple>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d06f      	beq.n	8007c84 <_strtod_l+0xa34>
 8007ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d17a      	bne.n	8007ca0 <_strtod_l+0xa50>
 8007baa:	f1ba 0f00 	cmp.w	sl, #0
 8007bae:	d158      	bne.n	8007c62 <_strtod_l+0xa12>
 8007bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d15a      	bne.n	8007c70 <_strtod_l+0xa20>
 8007bba:	4b64      	ldr	r3, [pc, #400]	@ (8007d4c <_strtod_l+0xafc>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 ff93 	bl	8000aec <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d159      	bne.n	8007c7e <_strtod_l+0xa2e>
 8007bca:	4630      	mov	r0, r6
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4b60      	ldr	r3, [pc, #384]	@ (8007d50 <_strtod_l+0xb00>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f7f8 fd19 	bl	8000608 <__aeabi_dmul>
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007bde:	9606      	str	r6, [sp, #24]
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007be6:	4d57      	ldr	r5, [pc, #348]	@ (8007d44 <_strtod_l+0xaf4>)
 8007be8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bee:	401d      	ands	r5, r3
 8007bf0:	4b58      	ldr	r3, [pc, #352]	@ (8007d54 <_strtod_l+0xb04>)
 8007bf2:	429d      	cmp	r5, r3
 8007bf4:	f040 80b2 	bne.w	8007d5c <_strtod_l+0xb0c>
 8007bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007bfe:	ec4b ab10 	vmov	d0, sl, fp
 8007c02:	f7ff f9c9 	bl	8006f98 <__ulp>
 8007c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c0a:	ec51 0b10 	vmov	r0, r1, d0
 8007c0e:	f7f8 fcfb 	bl	8000608 <__aeabi_dmul>
 8007c12:	4652      	mov	r2, sl
 8007c14:	465b      	mov	r3, fp
 8007c16:	f7f8 fb41 	bl	800029c <__adddf3>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4949      	ldr	r1, [pc, #292]	@ (8007d44 <_strtod_l+0xaf4>)
 8007c1e:	4a4e      	ldr	r2, [pc, #312]	@ (8007d58 <_strtod_l+0xb08>)
 8007c20:	4019      	ands	r1, r3
 8007c22:	4291      	cmp	r1, r2
 8007c24:	4682      	mov	sl, r0
 8007c26:	d942      	bls.n	8007cae <_strtod_l+0xa5e>
 8007c28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c2a:	4b47      	ldr	r3, [pc, #284]	@ (8007d48 <_strtod_l+0xaf8>)
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d103      	bne.n	8007c38 <_strtod_l+0x9e8>
 8007c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c32:	3301      	adds	r3, #1
 8007c34:	f43f ad2f 	beq.w	8007696 <_strtod_l+0x446>
 8007c38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007d48 <_strtod_l+0xaf8>
 8007c3c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007c40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c42:	9805      	ldr	r0, [sp, #20]
 8007c44:	f7fe fe7c 	bl	8006940 <_Bfree>
 8007c48:	9805      	ldr	r0, [sp, #20]
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7fe fe78 	bl	8006940 <_Bfree>
 8007c50:	9805      	ldr	r0, [sp, #20]
 8007c52:	4641      	mov	r1, r8
 8007c54:	f7fe fe74 	bl	8006940 <_Bfree>
 8007c58:	9805      	ldr	r0, [sp, #20]
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	f7fe fe70 	bl	8006940 <_Bfree>
 8007c60:	e619      	b.n	8007896 <_strtod_l+0x646>
 8007c62:	f1ba 0f01 	cmp.w	sl, #1
 8007c66:	d103      	bne.n	8007c70 <_strtod_l+0xa20>
 8007c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f43f ada6 	beq.w	80077bc <_strtod_l+0x56c>
 8007c70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007d20 <_strtod_l+0xad0>
 8007c74:	4f35      	ldr	r7, [pc, #212]	@ (8007d4c <_strtod_l+0xafc>)
 8007c76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c7a:	2600      	movs	r6, #0
 8007c7c:	e7b1      	b.n	8007be2 <_strtod_l+0x992>
 8007c7e:	4f34      	ldr	r7, [pc, #208]	@ (8007d50 <_strtod_l+0xb00>)
 8007c80:	2600      	movs	r6, #0
 8007c82:	e7aa      	b.n	8007bda <_strtod_l+0x98a>
 8007c84:	4b32      	ldr	r3, [pc, #200]	@ (8007d50 <_strtod_l+0xb00>)
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fcbc 	bl	8000608 <__aeabi_dmul>
 8007c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d09f      	beq.n	8007bda <_strtod_l+0x98a>
 8007c9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007c9e:	e7a0      	b.n	8007be2 <_strtod_l+0x992>
 8007ca0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007d28 <_strtod_l+0xad8>
 8007ca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ca8:	ec57 6b17 	vmov	r6, r7, d7
 8007cac:	e799      	b.n	8007be2 <_strtod_l+0x992>
 8007cae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007cb2:	9b08      	ldr	r3, [sp, #32]
 8007cb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1c1      	bne.n	8007c40 <_strtod_l+0x9f0>
 8007cbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cc0:	0d1b      	lsrs	r3, r3, #20
 8007cc2:	051b      	lsls	r3, r3, #20
 8007cc4:	429d      	cmp	r5, r3
 8007cc6:	d1bb      	bne.n	8007c40 <_strtod_l+0x9f0>
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 ffe4 	bl	8000c98 <__aeabi_d2lz>
 8007cd0:	f7f8 fc6c 	bl	80005ac <__aeabi_l2d>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4630      	mov	r0, r6
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 fadc 	bl	8000298 <__aeabi_dsub>
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ce8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cee:	ea46 060a 	orr.w	r6, r6, sl
 8007cf2:	431e      	orrs	r6, r3
 8007cf4:	d06f      	beq.n	8007dd6 <_strtod_l+0xb86>
 8007cf6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d30 <_strtod_l+0xae0>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fef6 	bl	8000aec <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f47f acd3 	bne.w	80076ac <_strtod_l+0x45c>
 8007d06:	a30c      	add	r3, pc, #48	@ (adr r3, 8007d38 <_strtod_l+0xae8>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d10:	f7f8 ff0a 	bl	8000b28 <__aeabi_dcmpgt>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d093      	beq.n	8007c40 <_strtod_l+0x9f0>
 8007d18:	e4c8      	b.n	80076ac <_strtod_l+0x45c>
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w
 8007d20:	00000000 	.word	0x00000000
 8007d24:	bff00000 	.word	0xbff00000
 8007d28:	00000000 	.word	0x00000000
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	94a03595 	.word	0x94a03595
 8007d34:	3fdfffff 	.word	0x3fdfffff
 8007d38:	35afe535 	.word	0x35afe535
 8007d3c:	3fe00000 	.word	0x3fe00000
 8007d40:	000fffff 	.word	0x000fffff
 8007d44:	7ff00000 	.word	0x7ff00000
 8007d48:	7fefffff 	.word	0x7fefffff
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	7fe00000 	.word	0x7fe00000
 8007d58:	7c9fffff 	.word	0x7c9fffff
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	b323      	cbz	r3, 8007daa <_strtod_l+0xb5a>
 8007d60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007d64:	d821      	bhi.n	8007daa <_strtod_l+0xb5a>
 8007d66:	a328      	add	r3, pc, #160	@ (adr r3, 8007e08 <_strtod_l+0xbb8>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	4639      	mov	r1, r7
 8007d70:	f7f8 fec6 	bl	8000b00 <__aeabi_dcmple>
 8007d74:	b1a0      	cbz	r0, 8007da0 <_strtod_l+0xb50>
 8007d76:	4639      	mov	r1, r7
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7f8 ff1d 	bl	8000bb8 <__aeabi_d2uiz>
 8007d7e:	2801      	cmp	r0, #1
 8007d80:	bf38      	it	cc
 8007d82:	2001      	movcc	r0, #1
 8007d84:	f7f8 fbc6 	bl	8000514 <__aeabi_ui2d>
 8007d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460f      	mov	r7, r1
 8007d8e:	b9fb      	cbnz	r3, 8007dd0 <_strtod_l+0xb80>
 8007d90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d94:	9014      	str	r0, [sp, #80]	@ 0x50
 8007d96:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007d9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007da0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007da2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007da6:	1b5b      	subs	r3, r3, r5
 8007da8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007daa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007dae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007db2:	f7ff f8f1 	bl	8006f98 <__ulp>
 8007db6:	4650      	mov	r0, sl
 8007db8:	ec53 2b10 	vmov	r2, r3, d0
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	f7f8 fc23 	bl	8000608 <__aeabi_dmul>
 8007dc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007dc6:	f7f8 fa69 	bl	800029c <__adddf3>
 8007dca:	4682      	mov	sl, r0
 8007dcc:	468b      	mov	fp, r1
 8007dce:	e770      	b.n	8007cb2 <_strtod_l+0xa62>
 8007dd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007dd4:	e7e0      	b.n	8007d98 <_strtod_l+0xb48>
 8007dd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e10 <_strtod_l+0xbc0>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fe86 	bl	8000aec <__aeabi_dcmplt>
 8007de0:	e798      	b.n	8007d14 <_strtod_l+0xac4>
 8007de2:	2300      	movs	r3, #0
 8007de4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007de6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007de8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	f7ff ba6d 	b.w	80072ca <_strtod_l+0x7a>
 8007df0:	2a65      	cmp	r2, #101	@ 0x65
 8007df2:	f43f ab68 	beq.w	80074c6 <_strtod_l+0x276>
 8007df6:	2a45      	cmp	r2, #69	@ 0x45
 8007df8:	f43f ab65 	beq.w	80074c6 <_strtod_l+0x276>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f7ff bba0 	b.w	8007542 <_strtod_l+0x2f2>
 8007e02:	bf00      	nop
 8007e04:	f3af 8000 	nop.w
 8007e08:	ffc00000 	.word	0xffc00000
 8007e0c:	41dfffff 	.word	0x41dfffff
 8007e10:	94a03595 	.word	0x94a03595
 8007e14:	3fcfffff 	.word	0x3fcfffff

08007e18 <_strtod_r>:
 8007e18:	4b01      	ldr	r3, [pc, #4]	@ (8007e20 <_strtod_r+0x8>)
 8007e1a:	f7ff ba19 	b.w	8007250 <_strtod_l>
 8007e1e:	bf00      	nop
 8007e20:	20000068 	.word	0x20000068

08007e24 <_strtol_l.isra.0>:
 8007e24:	2b24      	cmp	r3, #36	@ 0x24
 8007e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2a:	4686      	mov	lr, r0
 8007e2c:	4690      	mov	r8, r2
 8007e2e:	d801      	bhi.n	8007e34 <_strtol_l.isra.0+0x10>
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d106      	bne.n	8007e42 <_strtol_l.isra.0+0x1e>
 8007e34:	f7fd fdb8 	bl	80059a8 <__errno>
 8007e38:	2316      	movs	r3, #22
 8007e3a:	6003      	str	r3, [r0, #0]
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e42:	4834      	ldr	r0, [pc, #208]	@ (8007f14 <_strtol_l.isra.0+0xf0>)
 8007e44:	460d      	mov	r5, r1
 8007e46:	462a      	mov	r2, r5
 8007e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e4c:	5d06      	ldrb	r6, [r0, r4]
 8007e4e:	f016 0608 	ands.w	r6, r6, #8
 8007e52:	d1f8      	bne.n	8007e46 <_strtol_l.isra.0+0x22>
 8007e54:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e56:	d110      	bne.n	8007e7a <_strtol_l.isra.0+0x56>
 8007e58:	782c      	ldrb	r4, [r5, #0]
 8007e5a:	2601      	movs	r6, #1
 8007e5c:	1c95      	adds	r5, r2, #2
 8007e5e:	f033 0210 	bics.w	r2, r3, #16
 8007e62:	d115      	bne.n	8007e90 <_strtol_l.isra.0+0x6c>
 8007e64:	2c30      	cmp	r4, #48	@ 0x30
 8007e66:	d10d      	bne.n	8007e84 <_strtol_l.isra.0+0x60>
 8007e68:	782a      	ldrb	r2, [r5, #0]
 8007e6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e6e:	2a58      	cmp	r2, #88	@ 0x58
 8007e70:	d108      	bne.n	8007e84 <_strtol_l.isra.0+0x60>
 8007e72:	786c      	ldrb	r4, [r5, #1]
 8007e74:	3502      	adds	r5, #2
 8007e76:	2310      	movs	r3, #16
 8007e78:	e00a      	b.n	8007e90 <_strtol_l.isra.0+0x6c>
 8007e7a:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e7c:	bf04      	itt	eq
 8007e7e:	782c      	ldrbeq	r4, [r5, #0]
 8007e80:	1c95      	addeq	r5, r2, #2
 8007e82:	e7ec      	b.n	8007e5e <_strtol_l.isra.0+0x3a>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f6      	bne.n	8007e76 <_strtol_l.isra.0+0x52>
 8007e88:	2c30      	cmp	r4, #48	@ 0x30
 8007e8a:	bf14      	ite	ne
 8007e8c:	230a      	movne	r3, #10
 8007e8e:	2308      	moveq	r3, #8
 8007e90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e94:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007e98:	2200      	movs	r2, #0
 8007e9a:	fbbc f9f3 	udiv	r9, ip, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ea4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ea8:	2f09      	cmp	r7, #9
 8007eaa:	d80f      	bhi.n	8007ecc <_strtol_l.isra.0+0xa8>
 8007eac:	463c      	mov	r4, r7
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	dd1b      	ble.n	8007eea <_strtol_l.isra.0+0xc6>
 8007eb2:	1c57      	adds	r7, r2, #1
 8007eb4:	d007      	beq.n	8007ec6 <_strtol_l.isra.0+0xa2>
 8007eb6:	4581      	cmp	r9, r0
 8007eb8:	d314      	bcc.n	8007ee4 <_strtol_l.isra.0+0xc0>
 8007eba:	d101      	bne.n	8007ec0 <_strtol_l.isra.0+0x9c>
 8007ebc:	45a2      	cmp	sl, r4
 8007ebe:	db11      	blt.n	8007ee4 <_strtol_l.isra.0+0xc0>
 8007ec0:	fb00 4003 	mla	r0, r0, r3, r4
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eca:	e7eb      	b.n	8007ea4 <_strtol_l.isra.0+0x80>
 8007ecc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ed0:	2f19      	cmp	r7, #25
 8007ed2:	d801      	bhi.n	8007ed8 <_strtol_l.isra.0+0xb4>
 8007ed4:	3c37      	subs	r4, #55	@ 0x37
 8007ed6:	e7ea      	b.n	8007eae <_strtol_l.isra.0+0x8a>
 8007ed8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007edc:	2f19      	cmp	r7, #25
 8007ede:	d804      	bhi.n	8007eea <_strtol_l.isra.0+0xc6>
 8007ee0:	3c57      	subs	r4, #87	@ 0x57
 8007ee2:	e7e4      	b.n	8007eae <_strtol_l.isra.0+0x8a>
 8007ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ee8:	e7ed      	b.n	8007ec6 <_strtol_l.isra.0+0xa2>
 8007eea:	1c53      	adds	r3, r2, #1
 8007eec:	d108      	bne.n	8007f00 <_strtol_l.isra.0+0xdc>
 8007eee:	2322      	movs	r3, #34	@ 0x22
 8007ef0:	f8ce 3000 	str.w	r3, [lr]
 8007ef4:	4660      	mov	r0, ip
 8007ef6:	f1b8 0f00 	cmp.w	r8, #0
 8007efa:	d0a0      	beq.n	8007e3e <_strtol_l.isra.0+0x1a>
 8007efc:	1e69      	subs	r1, r5, #1
 8007efe:	e006      	b.n	8007f0e <_strtol_l.isra.0+0xea>
 8007f00:	b106      	cbz	r6, 8007f04 <_strtol_l.isra.0+0xe0>
 8007f02:	4240      	negs	r0, r0
 8007f04:	f1b8 0f00 	cmp.w	r8, #0
 8007f08:	d099      	beq.n	8007e3e <_strtol_l.isra.0+0x1a>
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	d1f6      	bne.n	8007efc <_strtol_l.isra.0+0xd8>
 8007f0e:	f8c8 1000 	str.w	r1, [r8]
 8007f12:	e794      	b.n	8007e3e <_strtol_l.isra.0+0x1a>
 8007f14:	08009e59 	.word	0x08009e59

08007f18 <_strtol_r>:
 8007f18:	f7ff bf84 	b.w	8007e24 <_strtol_l.isra.0>

08007f1c <__ssputs_r>:
 8007f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	688e      	ldr	r6, [r1, #8]
 8007f22:	461f      	mov	r7, r3
 8007f24:	42be      	cmp	r6, r7
 8007f26:	680b      	ldr	r3, [r1, #0]
 8007f28:	4682      	mov	sl, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	d82d      	bhi.n	8007f8c <__ssputs_r+0x70>
 8007f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f38:	d026      	beq.n	8007f88 <__ssputs_r+0x6c>
 8007f3a:	6965      	ldr	r5, [r4, #20]
 8007f3c:	6909      	ldr	r1, [r1, #16]
 8007f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f42:	eba3 0901 	sub.w	r9, r3, r1
 8007f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f4a:	1c7b      	adds	r3, r7, #1
 8007f4c:	444b      	add	r3, r9
 8007f4e:	106d      	asrs	r5, r5, #1
 8007f50:	429d      	cmp	r5, r3
 8007f52:	bf38      	it	cc
 8007f54:	461d      	movcc	r5, r3
 8007f56:	0553      	lsls	r3, r2, #21
 8007f58:	d527      	bpl.n	8007faa <__ssputs_r+0x8e>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7fe fc24 	bl	80067a8 <_malloc_r>
 8007f60:	4606      	mov	r6, r0
 8007f62:	b360      	cbz	r0, 8007fbe <__ssputs_r+0xa2>
 8007f64:	6921      	ldr	r1, [r4, #16]
 8007f66:	464a      	mov	r2, r9
 8007f68:	f001 f8e6 	bl	8009138 <memcpy>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	6126      	str	r6, [r4, #16]
 8007f7a:	6165      	str	r5, [r4, #20]
 8007f7c:	444e      	add	r6, r9
 8007f7e:	eba5 0509 	sub.w	r5, r5, r9
 8007f82:	6026      	str	r6, [r4, #0]
 8007f84:	60a5      	str	r5, [r4, #8]
 8007f86:	463e      	mov	r6, r7
 8007f88:	42be      	cmp	r6, r7
 8007f8a:	d900      	bls.n	8007f8e <__ssputs_r+0x72>
 8007f8c:	463e      	mov	r6, r7
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	4632      	mov	r2, r6
 8007f92:	4641      	mov	r1, r8
 8007f94:	f001 f872 	bl	800907c <memmove>
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	1b9b      	subs	r3, r3, r6
 8007f9c:	60a3      	str	r3, [r4, #8]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	4433      	add	r3, r6
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	462a      	mov	r2, r5
 8007fac:	f001 fc59 	bl	8009862 <_realloc_r>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d1e0      	bne.n	8007f78 <__ssputs_r+0x5c>
 8007fb6:	6921      	ldr	r1, [r4, #16]
 8007fb8:	4650      	mov	r0, sl
 8007fba:	f7fe fb81 	bl	80066c0 <_free_r>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	f8ca 3000 	str.w	r3, [sl]
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fd0:	e7e9      	b.n	8007fa6 <__ssputs_r+0x8a>
	...

08007fd4 <_svfiprintf_r>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	4698      	mov	r8, r3
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	b09d      	sub	sp, #116	@ 0x74
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	d510      	bpl.n	800800a <_svfiprintf_r+0x36>
 8007fe8:	690b      	ldr	r3, [r1, #16]
 8007fea:	b973      	cbnz	r3, 800800a <_svfiprintf_r+0x36>
 8007fec:	2140      	movs	r1, #64	@ 0x40
 8007fee:	f7fe fbdb 	bl	80067a8 <_malloc_r>
 8007ff2:	6028      	str	r0, [r5, #0]
 8007ff4:	6128      	str	r0, [r5, #16]
 8007ff6:	b930      	cbnz	r0, 8008006 <_svfiprintf_r+0x32>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	2340      	movs	r3, #64	@ 0x40
 8008008:	616b      	str	r3, [r5, #20]
 800800a:	2300      	movs	r3, #0
 800800c:	9309      	str	r3, [sp, #36]	@ 0x24
 800800e:	2320      	movs	r3, #32
 8008010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008014:	f8cd 800c 	str.w	r8, [sp, #12]
 8008018:	2330      	movs	r3, #48	@ 0x30
 800801a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081b8 <_svfiprintf_r+0x1e4>
 800801e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008022:	f04f 0901 	mov.w	r9, #1
 8008026:	4623      	mov	r3, r4
 8008028:	469a      	mov	sl, r3
 800802a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802e:	b10a      	cbz	r2, 8008034 <_svfiprintf_r+0x60>
 8008030:	2a25      	cmp	r2, #37	@ 0x25
 8008032:	d1f9      	bne.n	8008028 <_svfiprintf_r+0x54>
 8008034:	ebba 0b04 	subs.w	fp, sl, r4
 8008038:	d00b      	beq.n	8008052 <_svfiprintf_r+0x7e>
 800803a:	465b      	mov	r3, fp
 800803c:	4622      	mov	r2, r4
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ff6b 	bl	8007f1c <__ssputs_r>
 8008046:	3001      	adds	r0, #1
 8008048:	f000 80a7 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800804c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800804e:	445a      	add	r2, fp
 8008050:	9209      	str	r2, [sp, #36]	@ 0x24
 8008052:	f89a 3000 	ldrb.w	r3, [sl]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 809f 	beq.w	800819a <_svfiprintf_r+0x1c6>
 800805c:	2300      	movs	r3, #0
 800805e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008066:	f10a 0a01 	add.w	sl, sl, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008072:	931a      	str	r3, [sp, #104]	@ 0x68
 8008074:	4654      	mov	r4, sl
 8008076:	2205      	movs	r2, #5
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	484e      	ldr	r0, [pc, #312]	@ (80081b8 <_svfiprintf_r+0x1e4>)
 800807e:	f7f8 f8af 	bl	80001e0 <memchr>
 8008082:	9a04      	ldr	r2, [sp, #16]
 8008084:	b9d8      	cbnz	r0, 80080be <_svfiprintf_r+0xea>
 8008086:	06d0      	lsls	r0, r2, #27
 8008088:	bf44      	itt	mi
 800808a:	2320      	movmi	r3, #32
 800808c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008090:	0711      	lsls	r1, r2, #28
 8008092:	bf44      	itt	mi
 8008094:	232b      	movmi	r3, #43	@ 0x2b
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b2a      	cmp	r3, #42	@ 0x2a
 80080a0:	d015      	beq.n	80080ce <_svfiprintf_r+0xfa>
 80080a2:	9a07      	ldr	r2, [sp, #28]
 80080a4:	4654      	mov	r4, sl
 80080a6:	2000      	movs	r0, #0
 80080a8:	f04f 0c0a 	mov.w	ip, #10
 80080ac:	4621      	mov	r1, r4
 80080ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b2:	3b30      	subs	r3, #48	@ 0x30
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	d94b      	bls.n	8008150 <_svfiprintf_r+0x17c>
 80080b8:	b1b0      	cbz	r0, 80080e8 <_svfiprintf_r+0x114>
 80080ba:	9207      	str	r2, [sp, #28]
 80080bc:	e014      	b.n	80080e8 <_svfiprintf_r+0x114>
 80080be:	eba0 0308 	sub.w	r3, r0, r8
 80080c2:	fa09 f303 	lsl.w	r3, r9, r3
 80080c6:	4313      	orrs	r3, r2
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	46a2      	mov	sl, r4
 80080cc:	e7d2      	b.n	8008074 <_svfiprintf_r+0xa0>
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	1d19      	adds	r1, r3, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	9103      	str	r1, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfbb      	ittet	lt
 80080da:	425b      	neglt	r3, r3
 80080dc:	f042 0202 	orrlt.w	r2, r2, #2
 80080e0:	9307      	strge	r3, [sp, #28]
 80080e2:	9307      	strlt	r3, [sp, #28]
 80080e4:	bfb8      	it	lt
 80080e6:	9204      	strlt	r2, [sp, #16]
 80080e8:	7823      	ldrb	r3, [r4, #0]
 80080ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80080ec:	d10a      	bne.n	8008104 <_svfiprintf_r+0x130>
 80080ee:	7863      	ldrb	r3, [r4, #1]
 80080f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f2:	d132      	bne.n	800815a <_svfiprintf_r+0x186>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	1d1a      	adds	r2, r3, #4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	9203      	str	r2, [sp, #12]
 80080fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008100:	3402      	adds	r4, #2
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081c8 <_svfiprintf_r+0x1f4>
 8008108:	7821      	ldrb	r1, [r4, #0]
 800810a:	2203      	movs	r2, #3
 800810c:	4650      	mov	r0, sl
 800810e:	f7f8 f867 	bl	80001e0 <memchr>
 8008112:	b138      	cbz	r0, 8008124 <_svfiprintf_r+0x150>
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	eba0 000a 	sub.w	r0, r0, sl
 800811a:	2240      	movs	r2, #64	@ 0x40
 800811c:	4082      	lsls	r2, r0
 800811e:	4313      	orrs	r3, r2
 8008120:	3401      	adds	r4, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	4824      	ldr	r0, [pc, #144]	@ (80081bc <_svfiprintf_r+0x1e8>)
 800812a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800812e:	2206      	movs	r2, #6
 8008130:	f7f8 f856 	bl	80001e0 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d036      	beq.n	80081a6 <_svfiprintf_r+0x1d2>
 8008138:	4b21      	ldr	r3, [pc, #132]	@ (80081c0 <_svfiprintf_r+0x1ec>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_svfiprintf_r+0x1b0>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800814a:	4433      	add	r3, r6
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	e76a      	b.n	8008026 <_svfiprintf_r+0x52>
 8008150:	fb0c 3202 	mla	r2, ip, r2, r3
 8008154:	460c      	mov	r4, r1
 8008156:	2001      	movs	r0, #1
 8008158:	e7a8      	b.n	80080ac <_svfiprintf_r+0xd8>
 800815a:	2300      	movs	r3, #0
 800815c:	3401      	adds	r4, #1
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4619      	mov	r1, r3
 8008162:	f04f 0c0a 	mov.w	ip, #10
 8008166:	4620      	mov	r0, r4
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	@ 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_svfiprintf_r+0x1a6>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c6      	beq.n	8008104 <_svfiprintf_r+0x130>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c4      	b.n	8008104 <_svfiprintf_r+0x130>
 800817a:	fb0c 2101 	mla	r1, ip, r1, r2
 800817e:	4604      	mov	r4, r0
 8008180:	2301      	movs	r3, #1
 8008182:	e7f0      	b.n	8008166 <_svfiprintf_r+0x192>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4b0e      	ldr	r3, [pc, #56]	@ (80081c4 <_svfiprintf_r+0x1f0>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4638      	mov	r0, r7
 8008190:	f7fc fbf4 	bl	800497c <_printf_float>
 8008194:	1c42      	adds	r2, r0, #1
 8008196:	4606      	mov	r6, r0
 8008198:	d1d6      	bne.n	8008148 <_svfiprintf_r+0x174>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	065b      	lsls	r3, r3, #25
 800819e:	f53f af2d 	bmi.w	8007ffc <_svfiprintf_r+0x28>
 80081a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a4:	e72c      	b.n	8008000 <_svfiprintf_r+0x2c>
 80081a6:	ab03      	add	r3, sp, #12
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	462a      	mov	r2, r5
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <_svfiprintf_r+0x1f0>)
 80081ae:	a904      	add	r1, sp, #16
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7fc fe7b 	bl	8004eac <_printf_i>
 80081b6:	e7ed      	b.n	8008194 <_svfiprintf_r+0x1c0>
 80081b8:	08009c3b 	.word	0x08009c3b
 80081bc:	08009c45 	.word	0x08009c45
 80081c0:	0800497d 	.word	0x0800497d
 80081c4:	08007f1d 	.word	0x08007f1d
 80081c8:	08009c41 	.word	0x08009c41

080081cc <__sfputc_r>:
 80081cc:	6893      	ldr	r3, [r2, #8]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	b410      	push	{r4}
 80081d4:	6093      	str	r3, [r2, #8]
 80081d6:	da08      	bge.n	80081ea <__sfputc_r+0x1e>
 80081d8:	6994      	ldr	r4, [r2, #24]
 80081da:	42a3      	cmp	r3, r4
 80081dc:	db01      	blt.n	80081e2 <__sfputc_r+0x16>
 80081de:	290a      	cmp	r1, #10
 80081e0:	d103      	bne.n	80081ea <__sfputc_r+0x1e>
 80081e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e6:	f000 beb5 	b.w	8008f54 <__swbuf_r>
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	1c58      	adds	r0, r3, #1
 80081ee:	6010      	str	r0, [r2, #0]
 80081f0:	7019      	strb	r1, [r3, #0]
 80081f2:	4608      	mov	r0, r1
 80081f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <__sfputs_r>:
 80081fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fc:	4606      	mov	r6, r0
 80081fe:	460f      	mov	r7, r1
 8008200:	4614      	mov	r4, r2
 8008202:	18d5      	adds	r5, r2, r3
 8008204:	42ac      	cmp	r4, r5
 8008206:	d101      	bne.n	800820c <__sfputs_r+0x12>
 8008208:	2000      	movs	r0, #0
 800820a:	e007      	b.n	800821c <__sfputs_r+0x22>
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	463a      	mov	r2, r7
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ffda 	bl	80081cc <__sfputc_r>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d1f3      	bne.n	8008204 <__sfputs_r+0xa>
 800821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008220 <_vfiprintf_r>:
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	460d      	mov	r5, r1
 8008226:	b09d      	sub	sp, #116	@ 0x74
 8008228:	4614      	mov	r4, r2
 800822a:	4698      	mov	r8, r3
 800822c:	4606      	mov	r6, r0
 800822e:	b118      	cbz	r0, 8008238 <_vfiprintf_r+0x18>
 8008230:	6a03      	ldr	r3, [r0, #32]
 8008232:	b90b      	cbnz	r3, 8008238 <_vfiprintf_r+0x18>
 8008234:	f7fd f9f2 	bl	800561c <__sinit>
 8008238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d405      	bmi.n	800824a <_vfiprintf_r+0x2a>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d402      	bmi.n	800824a <_vfiprintf_r+0x2a>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7fd fbda 	bl	80059fe <__retarget_lock_acquire_recursive>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	d501      	bpl.n	8008254 <_vfiprintf_r+0x34>
 8008250:	692b      	ldr	r3, [r5, #16]
 8008252:	b99b      	cbnz	r3, 800827c <_vfiprintf_r+0x5c>
 8008254:	4629      	mov	r1, r5
 8008256:	4630      	mov	r0, r6
 8008258:	f000 feba 	bl	8008fd0 <__swsetup_r>
 800825c:	b170      	cbz	r0, 800827c <_vfiprintf_r+0x5c>
 800825e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008260:	07dc      	lsls	r4, r3, #31
 8008262:	d504      	bpl.n	800826e <_vfiprintf_r+0x4e>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008268:	b01d      	add	sp, #116	@ 0x74
 800826a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	0598      	lsls	r0, r3, #22
 8008272:	d4f7      	bmi.n	8008264 <_vfiprintf_r+0x44>
 8008274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008276:	f7fd fbc3 	bl	8005a00 <__retarget_lock_release_recursive>
 800827a:	e7f3      	b.n	8008264 <_vfiprintf_r+0x44>
 800827c:	2300      	movs	r3, #0
 800827e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008280:	2320      	movs	r3, #32
 8008282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008286:	f8cd 800c 	str.w	r8, [sp, #12]
 800828a:	2330      	movs	r3, #48	@ 0x30
 800828c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800843c <_vfiprintf_r+0x21c>
 8008290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008294:	f04f 0901 	mov.w	r9, #1
 8008298:	4623      	mov	r3, r4
 800829a:	469a      	mov	sl, r3
 800829c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a0:	b10a      	cbz	r2, 80082a6 <_vfiprintf_r+0x86>
 80082a2:	2a25      	cmp	r2, #37	@ 0x25
 80082a4:	d1f9      	bne.n	800829a <_vfiprintf_r+0x7a>
 80082a6:	ebba 0b04 	subs.w	fp, sl, r4
 80082aa:	d00b      	beq.n	80082c4 <_vfiprintf_r+0xa4>
 80082ac:	465b      	mov	r3, fp
 80082ae:	4622      	mov	r2, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ffa1 	bl	80081fa <__sfputs_r>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f000 80a7 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	445a      	add	r2, fp
 80082c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 809f 	beq.w	800840c <_vfiprintf_r+0x1ec>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e6:	4654      	mov	r4, sl
 80082e8:	2205      	movs	r2, #5
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	4853      	ldr	r0, [pc, #332]	@ (800843c <_vfiprintf_r+0x21c>)
 80082f0:	f7f7 ff76 	bl	80001e0 <memchr>
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	b9d8      	cbnz	r0, 8008330 <_vfiprintf_r+0x110>
 80082f8:	06d1      	lsls	r1, r2, #27
 80082fa:	bf44      	itt	mi
 80082fc:	2320      	movmi	r3, #32
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008302:	0713      	lsls	r3, r2, #28
 8008304:	bf44      	itt	mi
 8008306:	232b      	movmi	r3, #43	@ 0x2b
 8008308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800830c:	f89a 3000 	ldrb.w	r3, [sl]
 8008310:	2b2a      	cmp	r3, #42	@ 0x2a
 8008312:	d015      	beq.n	8008340 <_vfiprintf_r+0x120>
 8008314:	9a07      	ldr	r2, [sp, #28]
 8008316:	4654      	mov	r4, sl
 8008318:	2000      	movs	r0, #0
 800831a:	f04f 0c0a 	mov.w	ip, #10
 800831e:	4621      	mov	r1, r4
 8008320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008324:	3b30      	subs	r3, #48	@ 0x30
 8008326:	2b09      	cmp	r3, #9
 8008328:	d94b      	bls.n	80083c2 <_vfiprintf_r+0x1a2>
 800832a:	b1b0      	cbz	r0, 800835a <_vfiprintf_r+0x13a>
 800832c:	9207      	str	r2, [sp, #28]
 800832e:	e014      	b.n	800835a <_vfiprintf_r+0x13a>
 8008330:	eba0 0308 	sub.w	r3, r0, r8
 8008334:	fa09 f303 	lsl.w	r3, r9, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	46a2      	mov	sl, r4
 800833e:	e7d2      	b.n	80082e6 <_vfiprintf_r+0xc6>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	1d19      	adds	r1, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbb      	ittet	lt
 800834c:	425b      	neglt	r3, r3
 800834e:	f042 0202 	orrlt.w	r2, r2, #2
 8008352:	9307      	strge	r3, [sp, #28]
 8008354:	9307      	strlt	r3, [sp, #28]
 8008356:	bfb8      	it	lt
 8008358:	9204      	strlt	r2, [sp, #16]
 800835a:	7823      	ldrb	r3, [r4, #0]
 800835c:	2b2e      	cmp	r3, #46	@ 0x2e
 800835e:	d10a      	bne.n	8008376 <_vfiprintf_r+0x156>
 8008360:	7863      	ldrb	r3, [r4, #1]
 8008362:	2b2a      	cmp	r3, #42	@ 0x2a
 8008364:	d132      	bne.n	80083cc <_vfiprintf_r+0x1ac>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	1d1a      	adds	r2, r3, #4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	9203      	str	r2, [sp, #12]
 800836e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008372:	3402      	adds	r4, #2
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800844c <_vfiprintf_r+0x22c>
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	2203      	movs	r2, #3
 800837e:	4650      	mov	r0, sl
 8008380:	f7f7 ff2e 	bl	80001e0 <memchr>
 8008384:	b138      	cbz	r0, 8008396 <_vfiprintf_r+0x176>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	eba0 000a 	sub.w	r0, r0, sl
 800838c:	2240      	movs	r2, #64	@ 0x40
 800838e:	4082      	lsls	r2, r0
 8008390:	4313      	orrs	r3, r2
 8008392:	3401      	adds	r4, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839a:	4829      	ldr	r0, [pc, #164]	@ (8008440 <_vfiprintf_r+0x220>)
 800839c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083a0:	2206      	movs	r2, #6
 80083a2:	f7f7 ff1d 	bl	80001e0 <memchr>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d03f      	beq.n	800842a <_vfiprintf_r+0x20a>
 80083aa:	4b26      	ldr	r3, [pc, #152]	@ (8008444 <_vfiprintf_r+0x224>)
 80083ac:	bb1b      	cbnz	r3, 80083f6 <_vfiprintf_r+0x1d6>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	3307      	adds	r3, #7
 80083b2:	f023 0307 	bic.w	r3, r3, #7
 80083b6:	3308      	adds	r3, #8
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083bc:	443b      	add	r3, r7
 80083be:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c0:	e76a      	b.n	8008298 <_vfiprintf_r+0x78>
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	460c      	mov	r4, r1
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7a8      	b.n	800831e <_vfiprintf_r+0xfe>
 80083cc:	2300      	movs	r3, #0
 80083ce:	3401      	adds	r4, #1
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	4619      	mov	r1, r3
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4620      	mov	r0, r4
 80083da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	2a09      	cmp	r2, #9
 80083e2:	d903      	bls.n	80083ec <_vfiprintf_r+0x1cc>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <_vfiprintf_r+0x156>
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	e7c4      	b.n	8008376 <_vfiprintf_r+0x156>
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	4604      	mov	r4, r0
 80083f2:	2301      	movs	r3, #1
 80083f4:	e7f0      	b.n	80083d8 <_vfiprintf_r+0x1b8>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b12      	ldr	r3, [pc, #72]	@ (8008448 <_vfiprintf_r+0x228>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4630      	mov	r0, r6
 8008402:	f7fc fabb 	bl	800497c <_printf_float>
 8008406:	4607      	mov	r7, r0
 8008408:	1c78      	adds	r0, r7, #1
 800840a:	d1d6      	bne.n	80083ba <_vfiprintf_r+0x19a>
 800840c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800840e:	07d9      	lsls	r1, r3, #31
 8008410:	d405      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008412:	89ab      	ldrh	r3, [r5, #12]
 8008414:	059a      	lsls	r2, r3, #22
 8008416:	d402      	bmi.n	800841e <_vfiprintf_r+0x1fe>
 8008418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800841a:	f7fd faf1 	bl	8005a00 <__retarget_lock_release_recursive>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af1f 	bmi.w	8008264 <_vfiprintf_r+0x44>
 8008426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008428:	e71e      	b.n	8008268 <_vfiprintf_r+0x48>
 800842a:	ab03      	add	r3, sp, #12
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	462a      	mov	r2, r5
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <_vfiprintf_r+0x228>)
 8008432:	a904      	add	r1, sp, #16
 8008434:	4630      	mov	r0, r6
 8008436:	f7fc fd39 	bl	8004eac <_printf_i>
 800843a:	e7e4      	b.n	8008406 <_vfiprintf_r+0x1e6>
 800843c:	08009c3b 	.word	0x08009c3b
 8008440:	08009c45 	.word	0x08009c45
 8008444:	0800497d 	.word	0x0800497d
 8008448:	080081fb 	.word	0x080081fb
 800844c:	08009c41 	.word	0x08009c41

08008450 <__svfiscanf_r>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	461d      	mov	r5, r3
 8008456:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8008458:	07df      	lsls	r7, r3, #31
 800845a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800845e:	4606      	mov	r6, r0
 8008460:	460c      	mov	r4, r1
 8008462:	4692      	mov	sl, r2
 8008464:	d405      	bmi.n	8008472 <__svfiscanf_r+0x22>
 8008466:	898b      	ldrh	r3, [r1, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d402      	bmi.n	8008472 <__svfiscanf_r+0x22>
 800846c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800846e:	f7fd fac6 	bl	80059fe <__retarget_lock_acquire_recursive>
 8008472:	2300      	movs	r3, #0
 8008474:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8008478:	4ba8      	ldr	r3, [pc, #672]	@ (800871c <__svfiscanf_r+0x2cc>)
 800847a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800847c:	f10d 0804 	add.w	r8, sp, #4
 8008480:	4ba7      	ldr	r3, [pc, #668]	@ (8008720 <__svfiscanf_r+0x2d0>)
 8008482:	4fa8      	ldr	r7, [pc, #672]	@ (8008724 <__svfiscanf_r+0x2d4>)
 8008484:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008488:	93a1      	str	r3, [sp, #644]	@ 0x284
 800848a:	9500      	str	r5, [sp, #0]
 800848c:	f89a 9000 	ldrb.w	r9, [sl]
 8008490:	f1b9 0f00 	cmp.w	r9, #0
 8008494:	f000 816d 	beq.w	8008772 <__svfiscanf_r+0x322>
 8008498:	f817 3009 	ldrb.w	r3, [r7, r9]
 800849c:	f013 0308 	ands.w	r3, r3, #8
 80084a0:	f10a 0501 	add.w	r5, sl, #1
 80084a4:	d019      	beq.n	80084da <__svfiscanf_r+0x8a>
 80084a6:	6863      	ldr	r3, [r4, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dd0f      	ble.n	80084cc <__svfiscanf_r+0x7c>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	781a      	ldrb	r2, [r3, #0]
 80084b0:	5cba      	ldrb	r2, [r7, r2]
 80084b2:	0711      	lsls	r1, r2, #28
 80084b4:	d401      	bmi.n	80084ba <__svfiscanf_r+0x6a>
 80084b6:	46aa      	mov	sl, r5
 80084b8:	e7e8      	b.n	800848c <__svfiscanf_r+0x3c>
 80084ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80084bc:	3201      	adds	r2, #1
 80084be:	9245      	str	r2, [sp, #276]	@ 0x114
 80084c0:	6862      	ldr	r2, [r4, #4]
 80084c2:	3301      	adds	r3, #1
 80084c4:	3a01      	subs	r2, #1
 80084c6:	6062      	str	r2, [r4, #4]
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	e7ec      	b.n	80084a6 <__svfiscanf_r+0x56>
 80084cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80084ce:	4621      	mov	r1, r4
 80084d0:	4630      	mov	r0, r6
 80084d2:	4798      	blx	r3
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d0e9      	beq.n	80084ac <__svfiscanf_r+0x5c>
 80084d8:	e7ed      	b.n	80084b6 <__svfiscanf_r+0x66>
 80084da:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80084de:	f040 8088 	bne.w	80085f2 <__svfiscanf_r+0x1a2>
 80084e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80084e4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80084e6:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80084ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ec:	bf02      	ittt	eq
 80084ee:	2310      	moveq	r3, #16
 80084f0:	9341      	streq	r3, [sp, #260]	@ 0x104
 80084f2:	f10a 0502 	addeq.w	r5, sl, #2
 80084f6:	220a      	movs	r2, #10
 80084f8:	46aa      	mov	sl, r5
 80084fa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80084fe:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008502:	2b09      	cmp	r3, #9
 8008504:	d91f      	bls.n	8008546 <__svfiscanf_r+0xf6>
 8008506:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008728 <__svfiscanf_r+0x2d8>
 800850a:	2203      	movs	r2, #3
 800850c:	4658      	mov	r0, fp
 800850e:	f7f7 fe67 	bl	80001e0 <memchr>
 8008512:	b138      	cbz	r0, 8008524 <__svfiscanf_r+0xd4>
 8008514:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008516:	eba0 000b 	sub.w	r0, r0, fp
 800851a:	2301      	movs	r3, #1
 800851c:	4083      	lsls	r3, r0
 800851e:	4313      	orrs	r3, r2
 8008520:	9341      	str	r3, [sp, #260]	@ 0x104
 8008522:	4655      	mov	r5, sl
 8008524:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008528:	2b78      	cmp	r3, #120	@ 0x78
 800852a:	d807      	bhi.n	800853c <__svfiscanf_r+0xec>
 800852c:	2b57      	cmp	r3, #87	@ 0x57
 800852e:	d811      	bhi.n	8008554 <__svfiscanf_r+0x104>
 8008530:	2b25      	cmp	r3, #37	@ 0x25
 8008532:	d05e      	beq.n	80085f2 <__svfiscanf_r+0x1a2>
 8008534:	d858      	bhi.n	80085e8 <__svfiscanf_r+0x198>
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80d2 	beq.w	80086e0 <__svfiscanf_r+0x290>
 800853c:	2303      	movs	r3, #3
 800853e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008540:	230a      	movs	r3, #10
 8008542:	9342      	str	r3, [sp, #264]	@ 0x108
 8008544:	e08f      	b.n	8008666 <__svfiscanf_r+0x216>
 8008546:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008548:	fb02 1103 	mla	r1, r2, r3, r1
 800854c:	3930      	subs	r1, #48	@ 0x30
 800854e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008550:	4655      	mov	r5, sl
 8008552:	e7d1      	b.n	80084f8 <__svfiscanf_r+0xa8>
 8008554:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008558:	2a20      	cmp	r2, #32
 800855a:	d8ef      	bhi.n	800853c <__svfiscanf_r+0xec>
 800855c:	a101      	add	r1, pc, #4	@ (adr r1, 8008564 <__svfiscanf_r+0x114>)
 800855e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008645 	.word	0x08008645
 8008568:	0800853d 	.word	0x0800853d
 800856c:	0800853d 	.word	0x0800853d
 8008570:	0800869f 	.word	0x0800869f
 8008574:	0800853d 	.word	0x0800853d
 8008578:	0800853d 	.word	0x0800853d
 800857c:	0800853d 	.word	0x0800853d
 8008580:	0800853d 	.word	0x0800853d
 8008584:	0800853d 	.word	0x0800853d
 8008588:	0800853d 	.word	0x0800853d
 800858c:	0800853d 	.word	0x0800853d
 8008590:	080086b5 	.word	0x080086b5
 8008594:	0800869b 	.word	0x0800869b
 8008598:	080085ef 	.word	0x080085ef
 800859c:	080085ef 	.word	0x080085ef
 80085a0:	080085ef 	.word	0x080085ef
 80085a4:	0800853d 	.word	0x0800853d
 80085a8:	08008657 	.word	0x08008657
 80085ac:	0800853d 	.word	0x0800853d
 80085b0:	0800853d 	.word	0x0800853d
 80085b4:	0800853d 	.word	0x0800853d
 80085b8:	0800853d 	.word	0x0800853d
 80085bc:	080086c5 	.word	0x080086c5
 80085c0:	0800865f 	.word	0x0800865f
 80085c4:	0800863d 	.word	0x0800863d
 80085c8:	0800853d 	.word	0x0800853d
 80085cc:	0800853d 	.word	0x0800853d
 80085d0:	080086c1 	.word	0x080086c1
 80085d4:	0800853d 	.word	0x0800853d
 80085d8:	0800869b 	.word	0x0800869b
 80085dc:	0800853d 	.word	0x0800853d
 80085e0:	0800853d 	.word	0x0800853d
 80085e4:	08008645 	.word	0x08008645
 80085e8:	3b45      	subs	r3, #69	@ 0x45
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d8a6      	bhi.n	800853c <__svfiscanf_r+0xec>
 80085ee:	2305      	movs	r3, #5
 80085f0:	e038      	b.n	8008664 <__svfiscanf_r+0x214>
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dd0d      	ble.n	8008614 <__svfiscanf_r+0x1c4>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	781a      	ldrb	r2, [r3, #0]
 80085fc:	454a      	cmp	r2, r9
 80085fe:	f040 80b8 	bne.w	8008772 <__svfiscanf_r+0x322>
 8008602:	3301      	adds	r3, #1
 8008604:	6862      	ldr	r2, [r4, #4]
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800860a:	3a01      	subs	r2, #1
 800860c:	3301      	adds	r3, #1
 800860e:	6062      	str	r2, [r4, #4]
 8008610:	9345      	str	r3, [sp, #276]	@ 0x114
 8008612:	e750      	b.n	80084b6 <__svfiscanf_r+0x66>
 8008614:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008616:	4621      	mov	r1, r4
 8008618:	4630      	mov	r0, r6
 800861a:	4798      	blx	r3
 800861c:	2800      	cmp	r0, #0
 800861e:	d0eb      	beq.n	80085f8 <__svfiscanf_r+0x1a8>
 8008620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	f140 809d 	bpl.w	8008762 <__svfiscanf_r+0x312>
 8008628:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800862a:	2800      	cmp	r0, #0
 800862c:	d061      	beq.n	80086f2 <__svfiscanf_r+0x2a2>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	0659      	lsls	r1, r3, #25
 8008632:	d45e      	bmi.n	80086f2 <__svfiscanf_r+0x2a2>
 8008634:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800863e:	f042 0220 	orr.w	r2, r2, #32
 8008642:	9241      	str	r2, [sp, #260]	@ 0x104
 8008644:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800864a:	9241      	str	r2, [sp, #260]	@ 0x104
 800864c:	2210      	movs	r2, #16
 800864e:	2b6e      	cmp	r3, #110	@ 0x6e
 8008650:	9242      	str	r2, [sp, #264]	@ 0x108
 8008652:	d902      	bls.n	800865a <__svfiscanf_r+0x20a>
 8008654:	e005      	b.n	8008662 <__svfiscanf_r+0x212>
 8008656:	2300      	movs	r3, #0
 8008658:	9342      	str	r3, [sp, #264]	@ 0x108
 800865a:	2303      	movs	r3, #3
 800865c:	e002      	b.n	8008664 <__svfiscanf_r+0x214>
 800865e:	2308      	movs	r3, #8
 8008660:	9342      	str	r3, [sp, #264]	@ 0x108
 8008662:	2304      	movs	r3, #4
 8008664:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008666:	6863      	ldr	r3, [r4, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd45      	ble.n	80086f8 <__svfiscanf_r+0x2a8>
 800866c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800866e:	0659      	lsls	r1, r3, #25
 8008670:	d404      	bmi.n	800867c <__svfiscanf_r+0x22c>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	5cba      	ldrb	r2, [r7, r2]
 8008678:	0712      	lsls	r2, r2, #28
 800867a:	d444      	bmi.n	8008706 <__svfiscanf_r+0x2b6>
 800867c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800867e:	2b02      	cmp	r3, #2
 8008680:	dc5b      	bgt.n	800873a <__svfiscanf_r+0x2ea>
 8008682:	466b      	mov	r3, sp
 8008684:	4622      	mov	r2, r4
 8008686:	a941      	add	r1, sp, #260	@ 0x104
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f893 	bl	80087b4 <_scanf_chars>
 800868e:	2801      	cmp	r0, #1
 8008690:	d06f      	beq.n	8008772 <__svfiscanf_r+0x322>
 8008692:	2802      	cmp	r0, #2
 8008694:	f47f af0f 	bne.w	80084b6 <__svfiscanf_r+0x66>
 8008698:	e7c2      	b.n	8008620 <__svfiscanf_r+0x1d0>
 800869a:	220a      	movs	r2, #10
 800869c:	e7d7      	b.n	800864e <__svfiscanf_r+0x1fe>
 800869e:	4629      	mov	r1, r5
 80086a0:	4640      	mov	r0, r8
 80086a2:	f000 fb65 	bl	8008d70 <__sccl>
 80086a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ac:	9341      	str	r3, [sp, #260]	@ 0x104
 80086ae:	4605      	mov	r5, r0
 80086b0:	2301      	movs	r3, #1
 80086b2:	e7d7      	b.n	8008664 <__svfiscanf_r+0x214>
 80086b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80086b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80086bc:	2300      	movs	r3, #0
 80086be:	e7d1      	b.n	8008664 <__svfiscanf_r+0x214>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e7cf      	b.n	8008664 <__svfiscanf_r+0x214>
 80086c4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80086c6:	06c3      	lsls	r3, r0, #27
 80086c8:	f53f aef5 	bmi.w	80084b6 <__svfiscanf_r+0x66>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80086d0:	1d19      	adds	r1, r3, #4
 80086d2:	9100      	str	r1, [sp, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	07c0      	lsls	r0, r0, #31
 80086d8:	bf4c      	ite	mi
 80086da:	801a      	strhmi	r2, [r3, #0]
 80086dc:	601a      	strpl	r2, [r3, #0]
 80086de:	e6ea      	b.n	80084b6 <__svfiscanf_r+0x66>
 80086e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086e2:	07de      	lsls	r6, r3, #31
 80086e4:	d405      	bmi.n	80086f2 <__svfiscanf_r+0x2a2>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	059d      	lsls	r5, r3, #22
 80086ea:	d402      	bmi.n	80086f2 <__svfiscanf_r+0x2a2>
 80086ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ee:	f7fd f987 	bl	8005a00 <__retarget_lock_release_recursive>
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086f6:	e79d      	b.n	8008634 <__svfiscanf_r+0x1e4>
 80086f8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80086fa:	4621      	mov	r1, r4
 80086fc:	4630      	mov	r0, r6
 80086fe:	4798      	blx	r3
 8008700:	2800      	cmp	r0, #0
 8008702:	d0b3      	beq.n	800866c <__svfiscanf_r+0x21c>
 8008704:	e78c      	b.n	8008620 <__svfiscanf_r+0x1d0>
 8008706:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008708:	3201      	adds	r2, #1
 800870a:	9245      	str	r2, [sp, #276]	@ 0x114
 800870c:	6862      	ldr	r2, [r4, #4]
 800870e:	3a01      	subs	r2, #1
 8008710:	2a00      	cmp	r2, #0
 8008712:	6062      	str	r2, [r4, #4]
 8008714:	dd0a      	ble.n	800872c <__svfiscanf_r+0x2dc>
 8008716:	3301      	adds	r3, #1
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	e7aa      	b.n	8008672 <__svfiscanf_r+0x222>
 800871c:	08008e57 	.word	0x08008e57
 8008720:	08008c89 	.word	0x08008c89
 8008724:	08009e59 	.word	0x08009e59
 8008728:	08009c41 	.word	0x08009c41
 800872c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	4798      	blx	r3
 8008734:	2800      	cmp	r0, #0
 8008736:	d09c      	beq.n	8008672 <__svfiscanf_r+0x222>
 8008738:	e772      	b.n	8008620 <__svfiscanf_r+0x1d0>
 800873a:	2b04      	cmp	r3, #4
 800873c:	dc06      	bgt.n	800874c <__svfiscanf_r+0x2fc>
 800873e:	466b      	mov	r3, sp
 8008740:	4622      	mov	r2, r4
 8008742:	a941      	add	r1, sp, #260	@ 0x104
 8008744:	4630      	mov	r0, r6
 8008746:	f000 f88f 	bl	8008868 <_scanf_i>
 800874a:	e7a0      	b.n	800868e <__svfiscanf_r+0x23e>
 800874c:	4b0e      	ldr	r3, [pc, #56]	@ (8008788 <__svfiscanf_r+0x338>)
 800874e:	2b00      	cmp	r3, #0
 8008750:	f43f aeb1 	beq.w	80084b6 <__svfiscanf_r+0x66>
 8008754:	466b      	mov	r3, sp
 8008756:	4622      	mov	r2, r4
 8008758:	a941      	add	r1, sp, #260	@ 0x104
 800875a:	4630      	mov	r0, r6
 800875c:	f7fc fcc4 	bl	80050e8 <_scanf_float>
 8008760:	e795      	b.n	800868e <__svfiscanf_r+0x23e>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	0598      	lsls	r0, r3, #22
 8008766:	f53f af5f 	bmi.w	8008628 <__svfiscanf_r+0x1d8>
 800876a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876c:	f7fd f948 	bl	8005a00 <__retarget_lock_release_recursive>
 8008770:	e75a      	b.n	8008628 <__svfiscanf_r+0x1d8>
 8008772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008774:	07da      	lsls	r2, r3, #31
 8008776:	d405      	bmi.n	8008784 <__svfiscanf_r+0x334>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	059b      	lsls	r3, r3, #22
 800877c:	d402      	bmi.n	8008784 <__svfiscanf_r+0x334>
 800877e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008780:	f7fd f93e 	bl	8005a00 <__retarget_lock_release_recursive>
 8008784:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008786:	e755      	b.n	8008634 <__svfiscanf_r+0x1e4>
 8008788:	080050e9 	.word	0x080050e9

0800878c <_vfiscanf_r>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	460d      	mov	r5, r1
 8008792:	4616      	mov	r6, r2
 8008794:	461f      	mov	r7, r3
 8008796:	4604      	mov	r4, r0
 8008798:	b118      	cbz	r0, 80087a2 <_vfiscanf_r+0x16>
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	b90b      	cbnz	r3, 80087a2 <_vfiscanf_r+0x16>
 800879e:	f7fc ff3d 	bl	800561c <__sinit>
 80087a2:	463b      	mov	r3, r7
 80087a4:	4632      	mov	r2, r6
 80087a6:	4629      	mov	r1, r5
 80087a8:	4620      	mov	r0, r4
 80087aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	f7ff be4f 	b.w	8008450 <__svfiscanf_r>
	...

080087b4 <_scanf_chars>:
 80087b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b8:	4615      	mov	r5, r2
 80087ba:	688a      	ldr	r2, [r1, #8]
 80087bc:	4680      	mov	r8, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	b932      	cbnz	r2, 80087d0 <_scanf_chars+0x1c>
 80087c2:	698a      	ldr	r2, [r1, #24]
 80087c4:	2a00      	cmp	r2, #0
 80087c6:	bf14      	ite	ne
 80087c8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80087cc:	2201      	moveq	r2, #1
 80087ce:	608a      	str	r2, [r1, #8]
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008864 <_scanf_chars+0xb0>
 80087d6:	06d1      	lsls	r1, r2, #27
 80087d8:	bf5f      	itttt	pl
 80087da:	681a      	ldrpl	r2, [r3, #0]
 80087dc:	1d11      	addpl	r1, r2, #4
 80087de:	6019      	strpl	r1, [r3, #0]
 80087e0:	6816      	ldrpl	r6, [r2, #0]
 80087e2:	2700      	movs	r7, #0
 80087e4:	69a0      	ldr	r0, [r4, #24]
 80087e6:	b188      	cbz	r0, 800880c <_scanf_chars+0x58>
 80087e8:	2801      	cmp	r0, #1
 80087ea:	d107      	bne.n	80087fc <_scanf_chars+0x48>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	781a      	ldrb	r2, [r3, #0]
 80087f0:	6963      	ldr	r3, [r4, #20]
 80087f2:	5c9b      	ldrb	r3, [r3, r2]
 80087f4:	b953      	cbnz	r3, 800880c <_scanf_chars+0x58>
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	d031      	beq.n	800885e <_scanf_chars+0xaa>
 80087fa:	e022      	b.n	8008842 <_scanf_chars+0x8e>
 80087fc:	2802      	cmp	r0, #2
 80087fe:	d120      	bne.n	8008842 <_scanf_chars+0x8e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008808:	071b      	lsls	r3, r3, #28
 800880a:	d41a      	bmi.n	8008842 <_scanf_chars+0x8e>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	06da      	lsls	r2, r3, #27
 8008810:	bf5e      	ittt	pl
 8008812:	682b      	ldrpl	r3, [r5, #0]
 8008814:	781b      	ldrbpl	r3, [r3, #0]
 8008816:	f806 3b01 	strbpl.w	r3, [r6], #1
 800881a:	682a      	ldr	r2, [r5, #0]
 800881c:	686b      	ldr	r3, [r5, #4]
 800881e:	3201      	adds	r2, #1
 8008820:	602a      	str	r2, [r5, #0]
 8008822:	68a2      	ldr	r2, [r4, #8]
 8008824:	3b01      	subs	r3, #1
 8008826:	3a01      	subs	r2, #1
 8008828:	606b      	str	r3, [r5, #4]
 800882a:	3701      	adds	r7, #1
 800882c:	60a2      	str	r2, [r4, #8]
 800882e:	b142      	cbz	r2, 8008842 <_scanf_chars+0x8e>
 8008830:	2b00      	cmp	r3, #0
 8008832:	dcd7      	bgt.n	80087e4 <_scanf_chars+0x30>
 8008834:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008838:	4629      	mov	r1, r5
 800883a:	4640      	mov	r0, r8
 800883c:	4798      	blx	r3
 800883e:	2800      	cmp	r0, #0
 8008840:	d0d0      	beq.n	80087e4 <_scanf_chars+0x30>
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f013 0310 	ands.w	r3, r3, #16
 8008848:	d105      	bne.n	8008856 <_scanf_chars+0xa2>
 800884a:	68e2      	ldr	r2, [r4, #12]
 800884c:	3201      	adds	r2, #1
 800884e:	60e2      	str	r2, [r4, #12]
 8008850:	69a2      	ldr	r2, [r4, #24]
 8008852:	b102      	cbz	r2, 8008856 <_scanf_chars+0xa2>
 8008854:	7033      	strb	r3, [r6, #0]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	443b      	add	r3, r7
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	2000      	movs	r0, #0
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	bf00      	nop
 8008864:	08009e59 	.word	0x08009e59

08008868 <_scanf_i>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	4698      	mov	r8, r3
 800886e:	4b74      	ldr	r3, [pc, #464]	@ (8008a40 <_scanf_i+0x1d8>)
 8008870:	460c      	mov	r4, r1
 8008872:	4682      	mov	sl, r0
 8008874:	4616      	mov	r6, r2
 8008876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800887a:	b087      	sub	sp, #28
 800887c:	ab03      	add	r3, sp, #12
 800887e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008882:	4b70      	ldr	r3, [pc, #448]	@ (8008a44 <_scanf_i+0x1dc>)
 8008884:	69a1      	ldr	r1, [r4, #24]
 8008886:	4a70      	ldr	r2, [pc, #448]	@ (8008a48 <_scanf_i+0x1e0>)
 8008888:	2903      	cmp	r1, #3
 800888a:	bf08      	it	eq
 800888c:	461a      	moveq	r2, r3
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	9201      	str	r2, [sp, #4]
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008898:	bf88      	it	hi
 800889a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800889e:	4627      	mov	r7, r4
 80088a0:	bf82      	ittt	hi
 80088a2:	eb03 0905 	addhi.w	r9, r3, r5
 80088a6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80088aa:	60a3      	strhi	r3, [r4, #8]
 80088ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80088b0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80088b4:	bf98      	it	ls
 80088b6:	f04f 0900 	movls.w	r9, #0
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	463d      	mov	r5, r7
 80088be:	f04f 0b00 	mov.w	fp, #0
 80088c2:	6831      	ldr	r1, [r6, #0]
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	7809      	ldrb	r1, [r1, #0]
 80088c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f7f7 fc87 	bl	80001e0 <memchr>
 80088d2:	b328      	cbz	r0, 8008920 <_scanf_i+0xb8>
 80088d4:	f1bb 0f01 	cmp.w	fp, #1
 80088d8:	d159      	bne.n	800898e <_scanf_i+0x126>
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	b92a      	cbnz	r2, 80088ea <_scanf_i+0x82>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	2108      	movs	r1, #8
 80088e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088e6:	6061      	str	r1, [r4, #4]
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	68a2      	ldr	r2, [r4, #8]
 80088f4:	1e51      	subs	r1, r2, #1
 80088f6:	60a1      	str	r1, [r4, #8]
 80088f8:	b192      	cbz	r2, 8008920 <_scanf_i+0xb8>
 80088fa:	6832      	ldr	r2, [r6, #0]
 80088fc:	1c51      	adds	r1, r2, #1
 80088fe:	6031      	str	r1, [r6, #0]
 8008900:	7812      	ldrb	r2, [r2, #0]
 8008902:	f805 2b01 	strb.w	r2, [r5], #1
 8008906:	6872      	ldr	r2, [r6, #4]
 8008908:	3a01      	subs	r2, #1
 800890a:	2a00      	cmp	r2, #0
 800890c:	6072      	str	r2, [r6, #4]
 800890e:	dc07      	bgt.n	8008920 <_scanf_i+0xb8>
 8008910:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008914:	4631      	mov	r1, r6
 8008916:	4650      	mov	r0, sl
 8008918:	4790      	blx	r2
 800891a:	2800      	cmp	r0, #0
 800891c:	f040 8085 	bne.w	8008a2a <_scanf_i+0x1c2>
 8008920:	f10b 0b01 	add.w	fp, fp, #1
 8008924:	f1bb 0f03 	cmp.w	fp, #3
 8008928:	d1cb      	bne.n	80088c2 <_scanf_i+0x5a>
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	b90b      	cbnz	r3, 8008932 <_scanf_i+0xca>
 800892e:	230a      	movs	r3, #10
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	4945      	ldr	r1, [pc, #276]	@ (8008a4c <_scanf_i+0x1e4>)
 8008936:	6960      	ldr	r0, [r4, #20]
 8008938:	1ac9      	subs	r1, r1, r3
 800893a:	f000 fa19 	bl	8008d70 <__sccl>
 800893e:	f04f 0b00 	mov.w	fp, #0
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d03d      	beq.n	80089c6 <_scanf_i+0x15e>
 800894a:	6831      	ldr	r1, [r6, #0]
 800894c:	6960      	ldr	r0, [r4, #20]
 800894e:	f891 c000 	ldrb.w	ip, [r1]
 8008952:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008956:	2800      	cmp	r0, #0
 8008958:	d035      	beq.n	80089c6 <_scanf_i+0x15e>
 800895a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800895e:	d124      	bne.n	80089aa <_scanf_i+0x142>
 8008960:	0510      	lsls	r0, r2, #20
 8008962:	d522      	bpl.n	80089aa <_scanf_i+0x142>
 8008964:	f10b 0b01 	add.w	fp, fp, #1
 8008968:	f1b9 0f00 	cmp.w	r9, #0
 800896c:	d003      	beq.n	8008976 <_scanf_i+0x10e>
 800896e:	3301      	adds	r3, #1
 8008970:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	6873      	ldr	r3, [r6, #4]
 8008978:	3b01      	subs	r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	6073      	str	r3, [r6, #4]
 800897e:	dd1b      	ble.n	80089b8 <_scanf_i+0x150>
 8008980:	6833      	ldr	r3, [r6, #0]
 8008982:	3301      	adds	r3, #1
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	e7d9      	b.n	8008942 <_scanf_i+0xda>
 800898e:	f1bb 0f02 	cmp.w	fp, #2
 8008992:	d1ae      	bne.n	80088f2 <_scanf_i+0x8a>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800899a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800899e:	d1c4      	bne.n	800892a <_scanf_i+0xc2>
 80089a0:	2110      	movs	r1, #16
 80089a2:	6061      	str	r1, [r4, #4]
 80089a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089a8:	e7a2      	b.n	80088f0 <_scanf_i+0x88>
 80089aa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80089ae:	6022      	str	r2, [r4, #0]
 80089b0:	780b      	ldrb	r3, [r1, #0]
 80089b2:	f805 3b01 	strb.w	r3, [r5], #1
 80089b6:	e7de      	b.n	8008976 <_scanf_i+0x10e>
 80089b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80089bc:	4631      	mov	r1, r6
 80089be:	4650      	mov	r0, sl
 80089c0:	4798      	blx	r3
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d0df      	beq.n	8008986 <_scanf_i+0x11e>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	05d9      	lsls	r1, r3, #23
 80089ca:	d50d      	bpl.n	80089e8 <_scanf_i+0x180>
 80089cc:	42bd      	cmp	r5, r7
 80089ce:	d909      	bls.n	80089e4 <_scanf_i+0x17c>
 80089d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80089d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089d8:	4632      	mov	r2, r6
 80089da:	4650      	mov	r0, sl
 80089dc:	4798      	blx	r3
 80089de:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80089e2:	464d      	mov	r5, r9
 80089e4:	42bd      	cmp	r5, r7
 80089e6:	d028      	beq.n	8008a3a <_scanf_i+0x1d2>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	f012 0210 	ands.w	r2, r2, #16
 80089ee:	d113      	bne.n	8008a18 <_scanf_i+0x1b0>
 80089f0:	702a      	strb	r2, [r5, #0]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	9e01      	ldr	r6, [sp, #4]
 80089f6:	4639      	mov	r1, r7
 80089f8:	4650      	mov	r0, sl
 80089fa:	47b0      	blx	r6
 80089fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008a00:	6821      	ldr	r1, [r4, #0]
 8008a02:	1d1a      	adds	r2, r3, #4
 8008a04:	f8c8 2000 	str.w	r2, [r8]
 8008a08:	f011 0f20 	tst.w	r1, #32
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d00f      	beq.n	8008a30 <_scanf_i+0x1c8>
 8008a10:	6018      	str	r0, [r3, #0]
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60e3      	str	r3, [r4, #12]
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	1bed      	subs	r5, r5, r7
 8008a1c:	445d      	add	r5, fp
 8008a1e:	442b      	add	r3, r5
 8008a20:	6123      	str	r3, [r4, #16]
 8008a22:	2000      	movs	r0, #0
 8008a24:	b007      	add	sp, #28
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	e7ca      	b.n	80089c6 <_scanf_i+0x15e>
 8008a30:	07ca      	lsls	r2, r1, #31
 8008a32:	bf4c      	ite	mi
 8008a34:	8018      	strhmi	r0, [r3, #0]
 8008a36:	6018      	strpl	r0, [r3, #0]
 8008a38:	e7eb      	b.n	8008a12 <_scanf_i+0x1aa>
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	e7f2      	b.n	8008a24 <_scanf_i+0x1bc>
 8008a3e:	bf00      	nop
 8008a40:	08009ad8 	.word	0x08009ad8
 8008a44:	08007f19 	.word	0x08007f19
 8008a48:	0800999d 	.word	0x0800999d
 8008a4c:	08009c5c 	.word	0x08009c5c

08008a50 <__sflush_r>:
 8008a50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	0716      	lsls	r6, r2, #28
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	460c      	mov	r4, r1
 8008a5e:	d454      	bmi.n	8008b0a <__sflush_r+0xba>
 8008a60:	684b      	ldr	r3, [r1, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dc02      	bgt.n	8008a6c <__sflush_r+0x1c>
 8008a66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd48      	ble.n	8008afe <__sflush_r+0xae>
 8008a6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a6e:	2e00      	cmp	r6, #0
 8008a70:	d045      	beq.n	8008afe <__sflush_r+0xae>
 8008a72:	2300      	movs	r3, #0
 8008a74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a78:	682f      	ldr	r7, [r5, #0]
 8008a7a:	6a21      	ldr	r1, [r4, #32]
 8008a7c:	602b      	str	r3, [r5, #0]
 8008a7e:	d030      	beq.n	8008ae2 <__sflush_r+0x92>
 8008a80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	0759      	lsls	r1, r3, #29
 8008a86:	d505      	bpl.n	8008a94 <__sflush_r+0x44>
 8008a88:	6863      	ldr	r3, [r4, #4]
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a8e:	b10b      	cbz	r3, 8008a94 <__sflush_r+0x44>
 8008a90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	2300      	movs	r3, #0
 8008a96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a98:	6a21      	ldr	r1, [r4, #32]
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b0      	blx	r6
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	d106      	bne.n	8008ab2 <__sflush_r+0x62>
 8008aa4:	6829      	ldr	r1, [r5, #0]
 8008aa6:	291d      	cmp	r1, #29
 8008aa8:	d82b      	bhi.n	8008b02 <__sflush_r+0xb2>
 8008aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8008b54 <__sflush_r+0x104>)
 8008aac:	40ca      	lsrs	r2, r1
 8008aae:	07d6      	lsls	r6, r2, #31
 8008ab0:	d527      	bpl.n	8008b02 <__sflush_r+0xb2>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	6062      	str	r2, [r4, #4]
 8008ab6:	04d9      	lsls	r1, r3, #19
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	d504      	bpl.n	8008ac8 <__sflush_r+0x78>
 8008abe:	1c42      	adds	r2, r0, #1
 8008ac0:	d101      	bne.n	8008ac6 <__sflush_r+0x76>
 8008ac2:	682b      	ldr	r3, [r5, #0]
 8008ac4:	b903      	cbnz	r3, 8008ac8 <__sflush_r+0x78>
 8008ac6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aca:	602f      	str	r7, [r5, #0]
 8008acc:	b1b9      	cbz	r1, 8008afe <__sflush_r+0xae>
 8008ace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	d002      	beq.n	8008adc <__sflush_r+0x8c>
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7fd fdf2 	bl	80066c0 <_free_r>
 8008adc:	2300      	movs	r3, #0
 8008ade:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ae0:	e00d      	b.n	8008afe <__sflush_r+0xae>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b0      	blx	r6
 8008ae8:	4602      	mov	r2, r0
 8008aea:	1c50      	adds	r0, r2, #1
 8008aec:	d1c9      	bne.n	8008a82 <__sflush_r+0x32>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0c6      	beq.n	8008a82 <__sflush_r+0x32>
 8008af4:	2b1d      	cmp	r3, #29
 8008af6:	d001      	beq.n	8008afc <__sflush_r+0xac>
 8008af8:	2b16      	cmp	r3, #22
 8008afa:	d11e      	bne.n	8008b3a <__sflush_r+0xea>
 8008afc:	602f      	str	r7, [r5, #0]
 8008afe:	2000      	movs	r0, #0
 8008b00:	e022      	b.n	8008b48 <__sflush_r+0xf8>
 8008b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	e01b      	b.n	8008b42 <__sflush_r+0xf2>
 8008b0a:	690f      	ldr	r7, [r1, #16]
 8008b0c:	2f00      	cmp	r7, #0
 8008b0e:	d0f6      	beq.n	8008afe <__sflush_r+0xae>
 8008b10:	0793      	lsls	r3, r2, #30
 8008b12:	680e      	ldr	r6, [r1, #0]
 8008b14:	bf08      	it	eq
 8008b16:	694b      	ldreq	r3, [r1, #20]
 8008b18:	600f      	str	r7, [r1, #0]
 8008b1a:	bf18      	it	ne
 8008b1c:	2300      	movne	r3, #0
 8008b1e:	eba6 0807 	sub.w	r8, r6, r7
 8008b22:	608b      	str	r3, [r1, #8]
 8008b24:	f1b8 0f00 	cmp.w	r8, #0
 8008b28:	dde9      	ble.n	8008afe <__sflush_r+0xae>
 8008b2a:	6a21      	ldr	r1, [r4, #32]
 8008b2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b2e:	4643      	mov	r3, r8
 8008b30:	463a      	mov	r2, r7
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b0      	blx	r6
 8008b36:	2800      	cmp	r0, #0
 8008b38:	dc08      	bgt.n	8008b4c <__sflush_r+0xfc>
 8008b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b4c:	4407      	add	r7, r0
 8008b4e:	eba8 0800 	sub.w	r8, r8, r0
 8008b52:	e7e7      	b.n	8008b24 <__sflush_r+0xd4>
 8008b54:	20400001 	.word	0x20400001

08008b58 <_fflush_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	690b      	ldr	r3, [r1, #16]
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b913      	cbnz	r3, 8008b68 <_fflush_r+0x10>
 8008b62:	2500      	movs	r5, #0
 8008b64:	4628      	mov	r0, r5
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	b118      	cbz	r0, 8008b72 <_fflush_r+0x1a>
 8008b6a:	6a03      	ldr	r3, [r0, #32]
 8008b6c:	b90b      	cbnz	r3, 8008b72 <_fflush_r+0x1a>
 8008b6e:	f7fc fd55 	bl	800561c <__sinit>
 8008b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f3      	beq.n	8008b62 <_fflush_r+0xa>
 8008b7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b7c:	07d0      	lsls	r0, r2, #31
 8008b7e:	d404      	bmi.n	8008b8a <_fflush_r+0x32>
 8008b80:	0599      	lsls	r1, r3, #22
 8008b82:	d402      	bmi.n	8008b8a <_fflush_r+0x32>
 8008b84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b86:	f7fc ff3a 	bl	80059fe <__retarget_lock_acquire_recursive>
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f7ff ff5f 	bl	8008a50 <__sflush_r>
 8008b92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b94:	07da      	lsls	r2, r3, #31
 8008b96:	4605      	mov	r5, r0
 8008b98:	d4e4      	bmi.n	8008b64 <_fflush_r+0xc>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	059b      	lsls	r3, r3, #22
 8008b9e:	d4e1      	bmi.n	8008b64 <_fflush_r+0xc>
 8008ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba2:	f7fc ff2d 	bl	8005a00 <__retarget_lock_release_recursive>
 8008ba6:	e7dd      	b.n	8008b64 <_fflush_r+0xc>

08008ba8 <__swhatbuf_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460c      	mov	r4, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	b096      	sub	sp, #88	@ 0x58
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	461e      	mov	r6, r3
 8008bb8:	da0d      	bge.n	8008bd6 <__swhatbuf_r+0x2e>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	bf14      	ite	ne
 8008bc6:	2340      	movne	r3, #64	@ 0x40
 8008bc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bcc:	2000      	movs	r0, #0
 8008bce:	6031      	str	r1, [r6, #0]
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	b016      	add	sp, #88	@ 0x58
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
 8008bd6:	466a      	mov	r2, sp
 8008bd8:	f000 fa7c 	bl	80090d4 <_fstat_r>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dbec      	blt.n	8008bba <__swhatbuf_r+0x12>
 8008be0:	9901      	ldr	r1, [sp, #4]
 8008be2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008be6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bea:	4259      	negs	r1, r3
 8008bec:	4159      	adcs	r1, r3
 8008bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bf2:	e7eb      	b.n	8008bcc <__swhatbuf_r+0x24>

08008bf4 <__smakebuf_r>:
 8008bf4:	898b      	ldrh	r3, [r1, #12]
 8008bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bf8:	079d      	lsls	r5, r3, #30
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	d507      	bpl.n	8008c10 <__smakebuf_r+0x1c>
 8008c00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6163      	str	r3, [r4, #20]
 8008c0c:	b003      	add	sp, #12
 8008c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c10:	ab01      	add	r3, sp, #4
 8008c12:	466a      	mov	r2, sp
 8008c14:	f7ff ffc8 	bl	8008ba8 <__swhatbuf_r>
 8008c18:	9f00      	ldr	r7, [sp, #0]
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7fd fdc2 	bl	80067a8 <_malloc_r>
 8008c24:	b948      	cbnz	r0, 8008c3a <__smakebuf_r+0x46>
 8008c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2a:	059a      	lsls	r2, r3, #22
 8008c2c:	d4ee      	bmi.n	8008c0c <__smakebuf_r+0x18>
 8008c2e:	f023 0303 	bic.w	r3, r3, #3
 8008c32:	f043 0302 	orr.w	r3, r3, #2
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	e7e2      	b.n	8008c00 <__smakebuf_r+0xc>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	6020      	str	r0, [r4, #0]
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c4a:	b15b      	cbz	r3, 8008c64 <__smakebuf_r+0x70>
 8008c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 fa51 	bl	80090f8 <_isatty_r>
 8008c56:	b128      	cbz	r0, 8008c64 <__smakebuf_r+0x70>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	431d      	orrs	r5, r3
 8008c68:	81a5      	strh	r5, [r4, #12]
 8008c6a:	e7cf      	b.n	8008c0c <__smakebuf_r+0x18>

08008c6c <lflush>:
 8008c6c:	898b      	ldrh	r3, [r1, #12]
 8008c6e:	f003 0309 	and.w	r3, r3, #9
 8008c72:	2b09      	cmp	r3, #9
 8008c74:	d103      	bne.n	8008c7e <lflush+0x12>
 8008c76:	4b03      	ldr	r3, [pc, #12]	@ (8008c84 <lflush+0x18>)
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f7ff bf6d 	b.w	8008b58 <_fflush_r>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000018 	.word	0x20000018

08008c88 <__srefill_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	b118      	cbz	r0, 8008c98 <__srefill_r+0x10>
 8008c90:	6a03      	ldr	r3, [r0, #32]
 8008c92:	b90b      	cbnz	r3, 8008c98 <__srefill_r+0x10>
 8008c94:	f7fc fcc2 	bl	800561c <__sinit>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca0:	069e      	lsls	r6, r3, #26
 8008ca2:	d408      	bmi.n	8008cb6 <__srefill_r+0x2e>
 8008ca4:	0758      	lsls	r0, r3, #29
 8008ca6:	d445      	bmi.n	8008d34 <__srefill_r+0xac>
 8008ca8:	06d9      	lsls	r1, r3, #27
 8008caa:	d407      	bmi.n	8008cbc <__srefill_r+0x34>
 8008cac:	2209      	movs	r2, #9
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	071a      	lsls	r2, r3, #28
 8008cbe:	d50b      	bpl.n	8008cd8 <__srefill_r+0x50>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7ff ff48 	bl	8008b58 <_fflush_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d1f4      	bne.n	8008cb6 <__srefill_r+0x2e>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	60a0      	str	r0, [r4, #8]
 8008cd0:	f023 0308 	bic.w	r3, r3, #8
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	61a0      	str	r0, [r4, #24]
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f043 0304 	orr.w	r3, r3, #4
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	b91b      	cbnz	r3, 8008cec <__srefill_r+0x64>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f7ff ff84 	bl	8008bf4 <__smakebuf_r>
 8008cec:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8008cf0:	07b3      	lsls	r3, r6, #30
 8008cf2:	d00f      	beq.n	8008d14 <__srefill_r+0x8c>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d64 <__srefill_r+0xdc>)
 8008cf8:	491b      	ldr	r1, [pc, #108]	@ (8008d68 <__srefill_r+0xe0>)
 8008cfa:	481c      	ldr	r0, [pc, #112]	@ (8008d6c <__srefill_r+0xe4>)
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	f7fc fca5 	bl	800564c <_fwalk_sglue>
 8008d02:	81a6      	strh	r6, [r4, #12]
 8008d04:	f006 0609 	and.w	r6, r6, #9
 8008d08:	2e09      	cmp	r6, #9
 8008d0a:	d103      	bne.n	8008d14 <__srefill_r+0x8c>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f7ff fe9e 	bl	8008a50 <__sflush_r>
 8008d14:	6922      	ldr	r2, [r4, #16]
 8008d16:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008d18:	6963      	ldr	r3, [r4, #20]
 8008d1a:	6a21      	ldr	r1, [r4, #32]
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b0      	blx	r6
 8008d22:	2800      	cmp	r0, #0
 8008d24:	6060      	str	r0, [r4, #4]
 8008d26:	dc17      	bgt.n	8008d58 <__srefill_r+0xd0>
 8008d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2c:	d116      	bne.n	8008d5c <__srefill_r+0xd4>
 8008d2e:	f043 0320 	orr.w	r3, r3, #32
 8008d32:	e7bf      	b.n	8008cb4 <__srefill_r+0x2c>
 8008d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d36:	2900      	cmp	r1, #0
 8008d38:	d0d2      	beq.n	8008ce0 <__srefill_r+0x58>
 8008d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d002      	beq.n	8008d48 <__srefill_r+0xc0>
 8008d42:	4628      	mov	r0, r5
 8008d44:	f7fd fcbc 	bl	80066c0 <_free_r>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c5      	beq.n	8008ce0 <__srefill_r+0x58>
 8008d54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e7ae      	b.n	8008cba <__srefill_r+0x32>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	6062      	str	r2, [r4, #4]
 8008d60:	e7a6      	b.n	8008cb0 <__srefill_r+0x28>
 8008d62:	bf00      	nop
 8008d64:	2000000c 	.word	0x2000000c
 8008d68:	08008c6d 	.word	0x08008c6d
 8008d6c:	2000001c 	.word	0x2000001c

08008d70 <__sccl>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	780b      	ldrb	r3, [r1, #0]
 8008d74:	4604      	mov	r4, r0
 8008d76:	2b5e      	cmp	r3, #94	@ 0x5e
 8008d78:	bf0b      	itete	eq
 8008d7a:	784b      	ldrbeq	r3, [r1, #1]
 8008d7c:	1c4a      	addne	r2, r1, #1
 8008d7e:	1c8a      	addeq	r2, r1, #2
 8008d80:	2100      	movne	r1, #0
 8008d82:	bf08      	it	eq
 8008d84:	2101      	moveq	r1, #1
 8008d86:	3801      	subs	r0, #1
 8008d88:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008d8c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008d90:	42a8      	cmp	r0, r5
 8008d92:	d1fb      	bne.n	8008d8c <__sccl+0x1c>
 8008d94:	b90b      	cbnz	r3, 8008d9a <__sccl+0x2a>
 8008d96:	1e50      	subs	r0, r2, #1
 8008d98:	bd70      	pop	{r4, r5, r6, pc}
 8008d9a:	f081 0101 	eor.w	r1, r1, #1
 8008d9e:	54e1      	strb	r1, [r4, r3]
 8008da0:	4610      	mov	r0, r2
 8008da2:	4602      	mov	r2, r0
 8008da4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008da8:	2d2d      	cmp	r5, #45	@ 0x2d
 8008daa:	d005      	beq.n	8008db8 <__sccl+0x48>
 8008dac:	2d5d      	cmp	r5, #93	@ 0x5d
 8008dae:	d016      	beq.n	8008dde <__sccl+0x6e>
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	d0f1      	beq.n	8008d98 <__sccl+0x28>
 8008db4:	462b      	mov	r3, r5
 8008db6:	e7f2      	b.n	8008d9e <__sccl+0x2e>
 8008db8:	7846      	ldrb	r6, [r0, #1]
 8008dba:	2e5d      	cmp	r6, #93	@ 0x5d
 8008dbc:	d0fa      	beq.n	8008db4 <__sccl+0x44>
 8008dbe:	42b3      	cmp	r3, r6
 8008dc0:	dcf8      	bgt.n	8008db4 <__sccl+0x44>
 8008dc2:	3002      	adds	r0, #2
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	3201      	adds	r2, #1
 8008dc8:	4296      	cmp	r6, r2
 8008dca:	54a1      	strb	r1, [r4, r2]
 8008dcc:	dcfb      	bgt.n	8008dc6 <__sccl+0x56>
 8008dce:	1af2      	subs	r2, r6, r3
 8008dd0:	3a01      	subs	r2, #1
 8008dd2:	1c5d      	adds	r5, r3, #1
 8008dd4:	42b3      	cmp	r3, r6
 8008dd6:	bfa8      	it	ge
 8008dd8:	2200      	movge	r2, #0
 8008dda:	18ab      	adds	r3, r5, r2
 8008ddc:	e7e1      	b.n	8008da2 <__sccl+0x32>
 8008dde:	4610      	mov	r0, r2
 8008de0:	e7da      	b.n	8008d98 <__sccl+0x28>

08008de2 <__submore>:
 8008de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	460c      	mov	r4, r1
 8008de8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dee:	4299      	cmp	r1, r3
 8008df0:	d11d      	bne.n	8008e2e <__submore+0x4c>
 8008df2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008df6:	f7fd fcd7 	bl	80067a8 <_malloc_r>
 8008dfa:	b918      	cbnz	r0, 8008e04 <__submore+0x22>
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e08:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008e0a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008e0e:	6360      	str	r0, [r4, #52]	@ 0x34
 8008e10:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008e14:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008e18:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008e20:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008e24:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008e28:	6020      	str	r0, [r4, #0]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e7e8      	b.n	8008e00 <__submore+0x1e>
 8008e2e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008e30:	0077      	lsls	r7, r6, #1
 8008e32:	463a      	mov	r2, r7
 8008e34:	f000 fd15 	bl	8009862 <_realloc_r>
 8008e38:	4605      	mov	r5, r0
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d0de      	beq.n	8008dfc <__submore+0x1a>
 8008e3e:	eb00 0806 	add.w	r8, r0, r6
 8008e42:	4601      	mov	r1, r0
 8008e44:	4632      	mov	r2, r6
 8008e46:	4640      	mov	r0, r8
 8008e48:	f000 f976 	bl	8009138 <memcpy>
 8008e4c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008e50:	f8c4 8000 	str.w	r8, [r4]
 8008e54:	e7e9      	b.n	8008e2a <__submore+0x48>

08008e56 <_ungetc_r>:
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	1c69      	adds	r1, r5, #1
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	4614      	mov	r4, r2
 8008e60:	d01e      	beq.n	8008ea0 <_ungetc_r+0x4a>
 8008e62:	b118      	cbz	r0, 8008e6c <_ungetc_r+0x16>
 8008e64:	6a03      	ldr	r3, [r0, #32]
 8008e66:	b90b      	cbnz	r3, 8008e6c <_ungetc_r+0x16>
 8008e68:	f7fc fbd8 	bl	800561c <__sinit>
 8008e6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e6e:	07da      	lsls	r2, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_ungetc_r+0x28>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	059b      	lsls	r3, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_ungetc_r+0x28>
 8008e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e7a:	f7fc fdc0 	bl	80059fe <__retarget_lock_acquire_recursive>
 8008e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e82:	f023 0220 	bic.w	r2, r3, #32
 8008e86:	0758      	lsls	r0, r3, #29
 8008e88:	81a2      	strh	r2, [r4, #12]
 8008e8a:	d422      	bmi.n	8008ed2 <_ungetc_r+0x7c>
 8008e8c:	06d9      	lsls	r1, r3, #27
 8008e8e:	d40a      	bmi.n	8008ea6 <_ungetc_r+0x50>
 8008e90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e92:	07d2      	lsls	r2, r2, #31
 8008e94:	d404      	bmi.n	8008ea0 <_ungetc_r+0x4a>
 8008e96:	0599      	lsls	r1, r3, #22
 8008e98:	d402      	bmi.n	8008ea0 <_ungetc_r+0x4a>
 8008e9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e9c:	f7fc fdb0 	bl	8005a00 <__retarget_lock_release_recursive>
 8008ea0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008ea4:	e046      	b.n	8008f34 <_ungetc_r+0xde>
 8008ea6:	071b      	lsls	r3, r3, #28
 8008ea8:	d50f      	bpl.n	8008eca <_ungetc_r+0x74>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fe53 	bl	8008b58 <_fflush_r>
 8008eb2:	b120      	cbz	r0, 8008ebe <_ungetc_r+0x68>
 8008eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eb6:	07d8      	lsls	r0, r3, #31
 8008eb8:	d4f2      	bmi.n	8008ea0 <_ungetc_r+0x4a>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	e7eb      	b.n	8008e96 <_ungetc_r+0x40>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	60a0      	str	r0, [r4, #8]
 8008ec2:	f023 0308 	bic.w	r3, r3, #8
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	61a0      	str	r0, [r4, #24]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f043 0304 	orr.w	r3, r3, #4
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ed4:	6862      	ldr	r2, [r4, #4]
 8008ed6:	b2ed      	uxtb	r5, r5
 8008ed8:	b1d3      	cbz	r3, 8008f10 <_ungetc_r+0xba>
 8008eda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008edc:	4293      	cmp	r3, r2
 8008ede:	dc05      	bgt.n	8008eec <_ungetc_r+0x96>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7ff ff7d 	bl	8008de2 <__submore>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d1e3      	bne.n	8008eb4 <_ungetc_r+0x5e>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	1e5a      	subs	r2, r3, #1
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ef6:	6863      	ldr	r3, [r4, #4]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008efe:	07da      	lsls	r2, r3, #31
 8008f00:	d418      	bmi.n	8008f34 <_ungetc_r+0xde>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	059b      	lsls	r3, r3, #22
 8008f06:	d415      	bmi.n	8008f34 <_ungetc_r+0xde>
 8008f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f0a:	f7fc fd79 	bl	8005a00 <__retarget_lock_release_recursive>
 8008f0e:	e011      	b.n	8008f34 <_ungetc_r+0xde>
 8008f10:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008f12:	6920      	ldr	r0, [r4, #16]
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	f001 0101 	and.w	r1, r1, #1
 8008f1a:	b168      	cbz	r0, 8008f38 <_ungetc_r+0xe2>
 8008f1c:	4298      	cmp	r0, r3
 8008f1e:	d20b      	bcs.n	8008f38 <_ungetc_r+0xe2>
 8008f20:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008f24:	42a8      	cmp	r0, r5
 8008f26:	d107      	bne.n	8008f38 <_ungetc_r+0xe2>
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	6062      	str	r2, [r4, #4]
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d0e6      	beq.n	8008f02 <_ungetc_r+0xac>
 8008f34:	4628      	mov	r0, r5
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f42:	2303      	movs	r3, #3
 8008f44:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008f46:	4623      	mov	r3, r4
 8008f48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	e7ed      	b.n	8008f30 <_ungetc_r+0xda>

08008f54 <__swbuf_r>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	460e      	mov	r6, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	b118      	cbz	r0, 8008f66 <__swbuf_r+0x12>
 8008f5e:	6a03      	ldr	r3, [r0, #32]
 8008f60:	b90b      	cbnz	r3, 8008f66 <__swbuf_r+0x12>
 8008f62:	f7fc fb5b 	bl	800561c <__sinit>
 8008f66:	69a3      	ldr	r3, [r4, #24]
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	071a      	lsls	r2, r3, #28
 8008f6e:	d501      	bpl.n	8008f74 <__swbuf_r+0x20>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	b943      	cbnz	r3, 8008f86 <__swbuf_r+0x32>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 f82a 	bl	8008fd0 <__swsetup_r>
 8008f7c:	b118      	cbz	r0, 8008f86 <__swbuf_r+0x32>
 8008f7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f82:	4638      	mov	r0, r7
 8008f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	1a98      	subs	r0, r3, r2
 8008f8c:	6963      	ldr	r3, [r4, #20]
 8008f8e:	b2f6      	uxtb	r6, r6
 8008f90:	4283      	cmp	r3, r0
 8008f92:	4637      	mov	r7, r6
 8008f94:	dc05      	bgt.n	8008fa2 <__swbuf_r+0x4e>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f7ff fddd 	bl	8008b58 <_fflush_r>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d1ed      	bne.n	8008f7e <__swbuf_r+0x2a>
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	701e      	strb	r6, [r3, #0]
 8008fb0:	6962      	ldr	r2, [r4, #20]
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d004      	beq.n	8008fc2 <__swbuf_r+0x6e>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d5e1      	bpl.n	8008f82 <__swbuf_r+0x2e>
 8008fbe:	2e0a      	cmp	r6, #10
 8008fc0:	d1df      	bne.n	8008f82 <__swbuf_r+0x2e>
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fdc7 	bl	8008b58 <_fflush_r>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0d9      	beq.n	8008f82 <__swbuf_r+0x2e>
 8008fce:	e7d6      	b.n	8008f7e <__swbuf_r+0x2a>

08008fd0 <__swsetup_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4b29      	ldr	r3, [pc, #164]	@ (8009078 <__swsetup_r+0xa8>)
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	6818      	ldr	r0, [r3, #0]
 8008fd8:	460c      	mov	r4, r1
 8008fda:	b118      	cbz	r0, 8008fe4 <__swsetup_r+0x14>
 8008fdc:	6a03      	ldr	r3, [r0, #32]
 8008fde:	b90b      	cbnz	r3, 8008fe4 <__swsetup_r+0x14>
 8008fe0:	f7fc fb1c 	bl	800561c <__sinit>
 8008fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe8:	0719      	lsls	r1, r3, #28
 8008fea:	d422      	bmi.n	8009032 <__swsetup_r+0x62>
 8008fec:	06da      	lsls	r2, r3, #27
 8008fee:	d407      	bmi.n	8009000 <__swsetup_r+0x30>
 8008ff0:	2209      	movs	r2, #9
 8008ff2:	602a      	str	r2, [r5, #0]
 8008ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ffe:	e033      	b.n	8009068 <__swsetup_r+0x98>
 8009000:	0758      	lsls	r0, r3, #29
 8009002:	d512      	bpl.n	800902a <__swsetup_r+0x5a>
 8009004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009006:	b141      	cbz	r1, 800901a <__swsetup_r+0x4a>
 8009008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800900c:	4299      	cmp	r1, r3
 800900e:	d002      	beq.n	8009016 <__swsetup_r+0x46>
 8009010:	4628      	mov	r0, r5
 8009012:	f7fd fb55 	bl	80066c0 <_free_r>
 8009016:	2300      	movs	r3, #0
 8009018:	6363      	str	r3, [r4, #52]	@ 0x34
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	2300      	movs	r3, #0
 8009024:	6063      	str	r3, [r4, #4]
 8009026:	6923      	ldr	r3, [r4, #16]
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f043 0308 	orr.w	r3, r3, #8
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	6923      	ldr	r3, [r4, #16]
 8009034:	b94b      	cbnz	r3, 800904a <__swsetup_r+0x7a>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800903c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009040:	d003      	beq.n	800904a <__swsetup_r+0x7a>
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f7ff fdd5 	bl	8008bf4 <__smakebuf_r>
 800904a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904e:	f013 0201 	ands.w	r2, r3, #1
 8009052:	d00a      	beq.n	800906a <__swsetup_r+0x9a>
 8009054:	2200      	movs	r2, #0
 8009056:	60a2      	str	r2, [r4, #8]
 8009058:	6962      	ldr	r2, [r4, #20]
 800905a:	4252      	negs	r2, r2
 800905c:	61a2      	str	r2, [r4, #24]
 800905e:	6922      	ldr	r2, [r4, #16]
 8009060:	b942      	cbnz	r2, 8009074 <__swsetup_r+0xa4>
 8009062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009066:	d1c5      	bne.n	8008ff4 <__swsetup_r+0x24>
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	0799      	lsls	r1, r3, #30
 800906c:	bf58      	it	pl
 800906e:	6962      	ldrpl	r2, [r4, #20]
 8009070:	60a2      	str	r2, [r4, #8]
 8009072:	e7f4      	b.n	800905e <__swsetup_r+0x8e>
 8009074:	2000      	movs	r0, #0
 8009076:	e7f7      	b.n	8009068 <__swsetup_r+0x98>
 8009078:	20000018 	.word	0x20000018

0800907c <memmove>:
 800907c:	4288      	cmp	r0, r1
 800907e:	b510      	push	{r4, lr}
 8009080:	eb01 0402 	add.w	r4, r1, r2
 8009084:	d902      	bls.n	800908c <memmove+0x10>
 8009086:	4284      	cmp	r4, r0
 8009088:	4623      	mov	r3, r4
 800908a:	d807      	bhi.n	800909c <memmove+0x20>
 800908c:	1e43      	subs	r3, r0, #1
 800908e:	42a1      	cmp	r1, r4
 8009090:	d008      	beq.n	80090a4 <memmove+0x28>
 8009092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800909a:	e7f8      	b.n	800908e <memmove+0x12>
 800909c:	4402      	add	r2, r0
 800909e:	4601      	mov	r1, r0
 80090a0:	428a      	cmp	r2, r1
 80090a2:	d100      	bne.n	80090a6 <memmove+0x2a>
 80090a4:	bd10      	pop	{r4, pc}
 80090a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ae:	e7f7      	b.n	80090a0 <memmove+0x24>

080090b0 <strncmp>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	b16a      	cbz	r2, 80090d0 <strncmp+0x20>
 80090b4:	3901      	subs	r1, #1
 80090b6:	1884      	adds	r4, r0, r2
 80090b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d103      	bne.n	80090cc <strncmp+0x1c>
 80090c4:	42a0      	cmp	r0, r4
 80090c6:	d001      	beq.n	80090cc <strncmp+0x1c>
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	d1f5      	bne.n	80090b8 <strncmp+0x8>
 80090cc:	1ad0      	subs	r0, r2, r3
 80090ce:	bd10      	pop	{r4, pc}
 80090d0:	4610      	mov	r0, r2
 80090d2:	e7fc      	b.n	80090ce <strncmp+0x1e>

080090d4 <_fstat_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	@ (80090f4 <_fstat_r+0x20>)
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	4611      	mov	r1, r2
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	f7f8 f9ab 	bl	800143c <_fstat>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	d102      	bne.n	80090f0 <_fstat_r+0x1c>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	b103      	cbz	r3, 80090f0 <_fstat_r+0x1c>
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	20000408 	.word	0x20000408

080090f8 <_isatty_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	@ (8009114 <_isatty_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f8 f9aa 	bl	800145c <_isatty>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_isatty_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_isatty_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20000408 	.word	0x20000408

08009118 <_sbrk_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d06      	ldr	r5, [pc, #24]	@ (8009134 <_sbrk_r+0x1c>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f8 f9b2 	bl	800148c <_sbrk>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_sbrk_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_sbrk_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000408 	.word	0x20000408

08009138 <memcpy>:
 8009138:	440a      	add	r2, r1
 800913a:	4291      	cmp	r1, r2
 800913c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009140:	d100      	bne.n	8009144 <memcpy+0xc>
 8009142:	4770      	bx	lr
 8009144:	b510      	push	{r4, lr}
 8009146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800914a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800914e:	4291      	cmp	r1, r2
 8009150:	d1f9      	bne.n	8009146 <memcpy+0xe>
 8009152:	bd10      	pop	{r4, pc}
 8009154:	0000      	movs	r0, r0
	...

08009158 <nan>:
 8009158:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009160 <nan+0x8>
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	00000000 	.word	0x00000000
 8009164:	7ff80000 	.word	0x7ff80000

08009168 <__assert_func>:
 8009168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800916a:	4614      	mov	r4, r2
 800916c:	461a      	mov	r2, r3
 800916e:	4b09      	ldr	r3, [pc, #36]	@ (8009194 <__assert_func+0x2c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4605      	mov	r5, r0
 8009174:	68d8      	ldr	r0, [r3, #12]
 8009176:	b14c      	cbz	r4, 800918c <__assert_func+0x24>
 8009178:	4b07      	ldr	r3, [pc, #28]	@ (8009198 <__assert_func+0x30>)
 800917a:	9100      	str	r1, [sp, #0]
 800917c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009180:	4906      	ldr	r1, [pc, #24]	@ (800919c <__assert_func+0x34>)
 8009182:	462b      	mov	r3, r5
 8009184:	f000 fc1a 	bl	80099bc <fiprintf>
 8009188:	f000 fc2a 	bl	80099e0 <abort>
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <__assert_func+0x38>)
 800918e:	461c      	mov	r4, r3
 8009190:	e7f3      	b.n	800917a <__assert_func+0x12>
 8009192:	bf00      	nop
 8009194:	20000018 	.word	0x20000018
 8009198:	08009c6f 	.word	0x08009c6f
 800919c:	08009c7c 	.word	0x08009c7c
 80091a0:	08009caa 	.word	0x08009caa

080091a4 <_calloc_r>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	fba1 5402 	umull	r5, r4, r1, r2
 80091aa:	b934      	cbnz	r4, 80091ba <_calloc_r+0x16>
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7fd fafb 	bl	80067a8 <_malloc_r>
 80091b2:	4606      	mov	r6, r0
 80091b4:	b928      	cbnz	r0, 80091c2 <_calloc_r+0x1e>
 80091b6:	4630      	mov	r0, r6
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	220c      	movs	r2, #12
 80091bc:	6002      	str	r2, [r0, #0]
 80091be:	2600      	movs	r6, #0
 80091c0:	e7f9      	b.n	80091b6 <_calloc_r+0x12>
 80091c2:	462a      	mov	r2, r5
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7fc fb9c 	bl	8005902 <memset>
 80091ca:	e7f4      	b.n	80091b6 <_calloc_r+0x12>

080091cc <rshift>:
 80091cc:	6903      	ldr	r3, [r0, #16]
 80091ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091da:	f100 0414 	add.w	r4, r0, #20
 80091de:	dd45      	ble.n	800926c <rshift+0xa0>
 80091e0:	f011 011f 	ands.w	r1, r1, #31
 80091e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091ec:	d10c      	bne.n	8009208 <rshift+0x3c>
 80091ee:	f100 0710 	add.w	r7, r0, #16
 80091f2:	4629      	mov	r1, r5
 80091f4:	42b1      	cmp	r1, r6
 80091f6:	d334      	bcc.n	8009262 <rshift+0x96>
 80091f8:	1a9b      	subs	r3, r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	1eea      	subs	r2, r5, #3
 80091fe:	4296      	cmp	r6, r2
 8009200:	bf38      	it	cc
 8009202:	2300      	movcc	r3, #0
 8009204:	4423      	add	r3, r4
 8009206:	e015      	b.n	8009234 <rshift+0x68>
 8009208:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800920c:	f1c1 0820 	rsb	r8, r1, #32
 8009210:	40cf      	lsrs	r7, r1
 8009212:	f105 0e04 	add.w	lr, r5, #4
 8009216:	46a1      	mov	r9, r4
 8009218:	4576      	cmp	r6, lr
 800921a:	46f4      	mov	ip, lr
 800921c:	d815      	bhi.n	800924a <rshift+0x7e>
 800921e:	1a9a      	subs	r2, r3, r2
 8009220:	0092      	lsls	r2, r2, #2
 8009222:	3a04      	subs	r2, #4
 8009224:	3501      	adds	r5, #1
 8009226:	42ae      	cmp	r6, r5
 8009228:	bf38      	it	cc
 800922a:	2200      	movcc	r2, #0
 800922c:	18a3      	adds	r3, r4, r2
 800922e:	50a7      	str	r7, [r4, r2]
 8009230:	b107      	cbz	r7, 8009234 <rshift+0x68>
 8009232:	3304      	adds	r3, #4
 8009234:	1b1a      	subs	r2, r3, r4
 8009236:	42a3      	cmp	r3, r4
 8009238:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800923c:	bf08      	it	eq
 800923e:	2300      	moveq	r3, #0
 8009240:	6102      	str	r2, [r0, #16]
 8009242:	bf08      	it	eq
 8009244:	6143      	streq	r3, [r0, #20]
 8009246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800924a:	f8dc c000 	ldr.w	ip, [ip]
 800924e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009252:	ea4c 0707 	orr.w	r7, ip, r7
 8009256:	f849 7b04 	str.w	r7, [r9], #4
 800925a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800925e:	40cf      	lsrs	r7, r1
 8009260:	e7da      	b.n	8009218 <rshift+0x4c>
 8009262:	f851 cb04 	ldr.w	ip, [r1], #4
 8009266:	f847 cf04 	str.w	ip, [r7, #4]!
 800926a:	e7c3      	b.n	80091f4 <rshift+0x28>
 800926c:	4623      	mov	r3, r4
 800926e:	e7e1      	b.n	8009234 <rshift+0x68>

08009270 <__hexdig_fun>:
 8009270:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009274:	2b09      	cmp	r3, #9
 8009276:	d802      	bhi.n	800927e <__hexdig_fun+0xe>
 8009278:	3820      	subs	r0, #32
 800927a:	b2c0      	uxtb	r0, r0
 800927c:	4770      	bx	lr
 800927e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009282:	2b05      	cmp	r3, #5
 8009284:	d801      	bhi.n	800928a <__hexdig_fun+0x1a>
 8009286:	3847      	subs	r0, #71	@ 0x47
 8009288:	e7f7      	b.n	800927a <__hexdig_fun+0xa>
 800928a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800928e:	2b05      	cmp	r3, #5
 8009290:	d801      	bhi.n	8009296 <__hexdig_fun+0x26>
 8009292:	3827      	subs	r0, #39	@ 0x27
 8009294:	e7f1      	b.n	800927a <__hexdig_fun+0xa>
 8009296:	2000      	movs	r0, #0
 8009298:	4770      	bx	lr
	...

0800929c <__gethex>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	b085      	sub	sp, #20
 80092a2:	468a      	mov	sl, r1
 80092a4:	9302      	str	r3, [sp, #8]
 80092a6:	680b      	ldr	r3, [r1, #0]
 80092a8:	9001      	str	r0, [sp, #4]
 80092aa:	4690      	mov	r8, r2
 80092ac:	1c9c      	adds	r4, r3, #2
 80092ae:	46a1      	mov	r9, r4
 80092b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092b4:	2830      	cmp	r0, #48	@ 0x30
 80092b6:	d0fa      	beq.n	80092ae <__gethex+0x12>
 80092b8:	eba9 0303 	sub.w	r3, r9, r3
 80092bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80092c0:	f7ff ffd6 	bl	8009270 <__hexdig_fun>
 80092c4:	4605      	mov	r5, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d168      	bne.n	800939c <__gethex+0x100>
 80092ca:	49a0      	ldr	r1, [pc, #640]	@ (800954c <__gethex+0x2b0>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	4648      	mov	r0, r9
 80092d0:	f7ff feee 	bl	80090b0 <strncmp>
 80092d4:	4607      	mov	r7, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d167      	bne.n	80093aa <__gethex+0x10e>
 80092da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092de:	4626      	mov	r6, r4
 80092e0:	f7ff ffc6 	bl	8009270 <__hexdig_fun>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d062      	beq.n	80093ae <__gethex+0x112>
 80092e8:	4623      	mov	r3, r4
 80092ea:	7818      	ldrb	r0, [r3, #0]
 80092ec:	2830      	cmp	r0, #48	@ 0x30
 80092ee:	4699      	mov	r9, r3
 80092f0:	f103 0301 	add.w	r3, r3, #1
 80092f4:	d0f9      	beq.n	80092ea <__gethex+0x4e>
 80092f6:	f7ff ffbb 	bl	8009270 <__hexdig_fun>
 80092fa:	fab0 f580 	clz	r5, r0
 80092fe:	096d      	lsrs	r5, r5, #5
 8009300:	f04f 0b01 	mov.w	fp, #1
 8009304:	464a      	mov	r2, r9
 8009306:	4616      	mov	r6, r2
 8009308:	3201      	adds	r2, #1
 800930a:	7830      	ldrb	r0, [r6, #0]
 800930c:	f7ff ffb0 	bl	8009270 <__hexdig_fun>
 8009310:	2800      	cmp	r0, #0
 8009312:	d1f8      	bne.n	8009306 <__gethex+0x6a>
 8009314:	498d      	ldr	r1, [pc, #564]	@ (800954c <__gethex+0x2b0>)
 8009316:	2201      	movs	r2, #1
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff fec9 	bl	80090b0 <strncmp>
 800931e:	2800      	cmp	r0, #0
 8009320:	d13f      	bne.n	80093a2 <__gethex+0x106>
 8009322:	b944      	cbnz	r4, 8009336 <__gethex+0x9a>
 8009324:	1c74      	adds	r4, r6, #1
 8009326:	4622      	mov	r2, r4
 8009328:	4616      	mov	r6, r2
 800932a:	3201      	adds	r2, #1
 800932c:	7830      	ldrb	r0, [r6, #0]
 800932e:	f7ff ff9f 	bl	8009270 <__hexdig_fun>
 8009332:	2800      	cmp	r0, #0
 8009334:	d1f8      	bne.n	8009328 <__gethex+0x8c>
 8009336:	1ba4      	subs	r4, r4, r6
 8009338:	00a7      	lsls	r7, r4, #2
 800933a:	7833      	ldrb	r3, [r6, #0]
 800933c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009340:	2b50      	cmp	r3, #80	@ 0x50
 8009342:	d13e      	bne.n	80093c2 <__gethex+0x126>
 8009344:	7873      	ldrb	r3, [r6, #1]
 8009346:	2b2b      	cmp	r3, #43	@ 0x2b
 8009348:	d033      	beq.n	80093b2 <__gethex+0x116>
 800934a:	2b2d      	cmp	r3, #45	@ 0x2d
 800934c:	d034      	beq.n	80093b8 <__gethex+0x11c>
 800934e:	1c71      	adds	r1, r6, #1
 8009350:	2400      	movs	r4, #0
 8009352:	7808      	ldrb	r0, [r1, #0]
 8009354:	f7ff ff8c 	bl	8009270 <__hexdig_fun>
 8009358:	1e43      	subs	r3, r0, #1
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b18      	cmp	r3, #24
 800935e:	d830      	bhi.n	80093c2 <__gethex+0x126>
 8009360:	f1a0 0210 	sub.w	r2, r0, #16
 8009364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009368:	f7ff ff82 	bl	8009270 <__hexdig_fun>
 800936c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009370:	fa5f fc8c 	uxtb.w	ip, ip
 8009374:	f1bc 0f18 	cmp.w	ip, #24
 8009378:	f04f 030a 	mov.w	r3, #10
 800937c:	d91e      	bls.n	80093bc <__gethex+0x120>
 800937e:	b104      	cbz	r4, 8009382 <__gethex+0xe6>
 8009380:	4252      	negs	r2, r2
 8009382:	4417      	add	r7, r2
 8009384:	f8ca 1000 	str.w	r1, [sl]
 8009388:	b1ed      	cbz	r5, 80093c6 <__gethex+0x12a>
 800938a:	f1bb 0f00 	cmp.w	fp, #0
 800938e:	bf0c      	ite	eq
 8009390:	2506      	moveq	r5, #6
 8009392:	2500      	movne	r5, #0
 8009394:	4628      	mov	r0, r5
 8009396:	b005      	add	sp, #20
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939c:	2500      	movs	r5, #0
 800939e:	462c      	mov	r4, r5
 80093a0:	e7b0      	b.n	8009304 <__gethex+0x68>
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	d1c7      	bne.n	8009336 <__gethex+0x9a>
 80093a6:	4627      	mov	r7, r4
 80093a8:	e7c7      	b.n	800933a <__gethex+0x9e>
 80093aa:	464e      	mov	r6, r9
 80093ac:	462f      	mov	r7, r5
 80093ae:	2501      	movs	r5, #1
 80093b0:	e7c3      	b.n	800933a <__gethex+0x9e>
 80093b2:	2400      	movs	r4, #0
 80093b4:	1cb1      	adds	r1, r6, #2
 80093b6:	e7cc      	b.n	8009352 <__gethex+0xb6>
 80093b8:	2401      	movs	r4, #1
 80093ba:	e7fb      	b.n	80093b4 <__gethex+0x118>
 80093bc:	fb03 0002 	mla	r0, r3, r2, r0
 80093c0:	e7ce      	b.n	8009360 <__gethex+0xc4>
 80093c2:	4631      	mov	r1, r6
 80093c4:	e7de      	b.n	8009384 <__gethex+0xe8>
 80093c6:	eba6 0309 	sub.w	r3, r6, r9
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4629      	mov	r1, r5
 80093ce:	2b07      	cmp	r3, #7
 80093d0:	dc0a      	bgt.n	80093e8 <__gethex+0x14c>
 80093d2:	9801      	ldr	r0, [sp, #4]
 80093d4:	f7fd fa74 	bl	80068c0 <_Balloc>
 80093d8:	4604      	mov	r4, r0
 80093da:	b940      	cbnz	r0, 80093ee <__gethex+0x152>
 80093dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009550 <__gethex+0x2b4>)
 80093de:	4602      	mov	r2, r0
 80093e0:	21e4      	movs	r1, #228	@ 0xe4
 80093e2:	485c      	ldr	r0, [pc, #368]	@ (8009554 <__gethex+0x2b8>)
 80093e4:	f7ff fec0 	bl	8009168 <__assert_func>
 80093e8:	3101      	adds	r1, #1
 80093ea:	105b      	asrs	r3, r3, #1
 80093ec:	e7ef      	b.n	80093ce <__gethex+0x132>
 80093ee:	f100 0a14 	add.w	sl, r0, #20
 80093f2:	2300      	movs	r3, #0
 80093f4:	4655      	mov	r5, sl
 80093f6:	469b      	mov	fp, r3
 80093f8:	45b1      	cmp	r9, r6
 80093fa:	d337      	bcc.n	800946c <__gethex+0x1d0>
 80093fc:	f845 bb04 	str.w	fp, [r5], #4
 8009400:	eba5 050a 	sub.w	r5, r5, sl
 8009404:	10ad      	asrs	r5, r5, #2
 8009406:	6125      	str	r5, [r4, #16]
 8009408:	4658      	mov	r0, fp
 800940a:	f7fd fb4b 	bl	8006aa4 <__hi0bits>
 800940e:	016d      	lsls	r5, r5, #5
 8009410:	f8d8 6000 	ldr.w	r6, [r8]
 8009414:	1a2d      	subs	r5, r5, r0
 8009416:	42b5      	cmp	r5, r6
 8009418:	dd54      	ble.n	80094c4 <__gethex+0x228>
 800941a:	1bad      	subs	r5, r5, r6
 800941c:	4629      	mov	r1, r5
 800941e:	4620      	mov	r0, r4
 8009420:	f7fd fed7 	bl	80071d2 <__any_on>
 8009424:	4681      	mov	r9, r0
 8009426:	b178      	cbz	r0, 8009448 <__gethex+0x1ac>
 8009428:	1e6b      	subs	r3, r5, #1
 800942a:	1159      	asrs	r1, r3, #5
 800942c:	f003 021f 	and.w	r2, r3, #31
 8009430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009434:	f04f 0901 	mov.w	r9, #1
 8009438:	fa09 f202 	lsl.w	r2, r9, r2
 800943c:	420a      	tst	r2, r1
 800943e:	d003      	beq.n	8009448 <__gethex+0x1ac>
 8009440:	454b      	cmp	r3, r9
 8009442:	dc36      	bgt.n	80094b2 <__gethex+0x216>
 8009444:	f04f 0902 	mov.w	r9, #2
 8009448:	4629      	mov	r1, r5
 800944a:	4620      	mov	r0, r4
 800944c:	f7ff febe 	bl	80091cc <rshift>
 8009450:	442f      	add	r7, r5
 8009452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009456:	42bb      	cmp	r3, r7
 8009458:	da42      	bge.n	80094e0 <__gethex+0x244>
 800945a:	9801      	ldr	r0, [sp, #4]
 800945c:	4621      	mov	r1, r4
 800945e:	f7fd fa6f 	bl	8006940 <_Bfree>
 8009462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009464:	2300      	movs	r3, #0
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	25a3      	movs	r5, #163	@ 0xa3
 800946a:	e793      	b.n	8009394 <__gethex+0xf8>
 800946c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009470:	2a2e      	cmp	r2, #46	@ 0x2e
 8009472:	d012      	beq.n	800949a <__gethex+0x1fe>
 8009474:	2b20      	cmp	r3, #32
 8009476:	d104      	bne.n	8009482 <__gethex+0x1e6>
 8009478:	f845 bb04 	str.w	fp, [r5], #4
 800947c:	f04f 0b00 	mov.w	fp, #0
 8009480:	465b      	mov	r3, fp
 8009482:	7830      	ldrb	r0, [r6, #0]
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	f7ff fef3 	bl	8009270 <__hexdig_fun>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	f000 000f 	and.w	r0, r0, #15
 8009490:	4098      	lsls	r0, r3
 8009492:	ea4b 0b00 	orr.w	fp, fp, r0
 8009496:	3304      	adds	r3, #4
 8009498:	e7ae      	b.n	80093f8 <__gethex+0x15c>
 800949a:	45b1      	cmp	r9, r6
 800949c:	d8ea      	bhi.n	8009474 <__gethex+0x1d8>
 800949e:	492b      	ldr	r1, [pc, #172]	@ (800954c <__gethex+0x2b0>)
 80094a0:	9303      	str	r3, [sp, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fe03 	bl	80090b0 <strncmp>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d1e1      	bne.n	8009474 <__gethex+0x1d8>
 80094b0:	e7a2      	b.n	80093f8 <__gethex+0x15c>
 80094b2:	1ea9      	subs	r1, r5, #2
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7fd fe8c 	bl	80071d2 <__any_on>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0c2      	beq.n	8009444 <__gethex+0x1a8>
 80094be:	f04f 0903 	mov.w	r9, #3
 80094c2:	e7c1      	b.n	8009448 <__gethex+0x1ac>
 80094c4:	da09      	bge.n	80094da <__gethex+0x23e>
 80094c6:	1b75      	subs	r5, r6, r5
 80094c8:	4621      	mov	r1, r4
 80094ca:	9801      	ldr	r0, [sp, #4]
 80094cc:	462a      	mov	r2, r5
 80094ce:	f7fd fc47 	bl	8006d60 <__lshift>
 80094d2:	1b7f      	subs	r7, r7, r5
 80094d4:	4604      	mov	r4, r0
 80094d6:	f100 0a14 	add.w	sl, r0, #20
 80094da:	f04f 0900 	mov.w	r9, #0
 80094de:	e7b8      	b.n	8009452 <__gethex+0x1b6>
 80094e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094e4:	42bd      	cmp	r5, r7
 80094e6:	dd6f      	ble.n	80095c8 <__gethex+0x32c>
 80094e8:	1bed      	subs	r5, r5, r7
 80094ea:	42ae      	cmp	r6, r5
 80094ec:	dc34      	bgt.n	8009558 <__gethex+0x2bc>
 80094ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d022      	beq.n	800953c <__gethex+0x2a0>
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d024      	beq.n	8009544 <__gethex+0x2a8>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d115      	bne.n	800952a <__gethex+0x28e>
 80094fe:	42ae      	cmp	r6, r5
 8009500:	d113      	bne.n	800952a <__gethex+0x28e>
 8009502:	2e01      	cmp	r6, #1
 8009504:	d10b      	bne.n	800951e <__gethex+0x282>
 8009506:	9a02      	ldr	r2, [sp, #8]
 8009508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	2301      	movs	r3, #1
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	f8ca 3000 	str.w	r3, [sl]
 8009516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009518:	2562      	movs	r5, #98	@ 0x62
 800951a:	601c      	str	r4, [r3, #0]
 800951c:	e73a      	b.n	8009394 <__gethex+0xf8>
 800951e:	1e71      	subs	r1, r6, #1
 8009520:	4620      	mov	r0, r4
 8009522:	f7fd fe56 	bl	80071d2 <__any_on>
 8009526:	2800      	cmp	r0, #0
 8009528:	d1ed      	bne.n	8009506 <__gethex+0x26a>
 800952a:	9801      	ldr	r0, [sp, #4]
 800952c:	4621      	mov	r1, r4
 800952e:	f7fd fa07 	bl	8006940 <_Bfree>
 8009532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009534:	2300      	movs	r3, #0
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	2550      	movs	r5, #80	@ 0x50
 800953a:	e72b      	b.n	8009394 <__gethex+0xf8>
 800953c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f3      	bne.n	800952a <__gethex+0x28e>
 8009542:	e7e0      	b.n	8009506 <__gethex+0x26a>
 8009544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1dd      	bne.n	8009506 <__gethex+0x26a>
 800954a:	e7ee      	b.n	800952a <__gethex+0x28e>
 800954c:	08009c39 	.word	0x08009c39
 8009550:	08009bcf 	.word	0x08009bcf
 8009554:	08009cab 	.word	0x08009cab
 8009558:	1e6f      	subs	r7, r5, #1
 800955a:	f1b9 0f00 	cmp.w	r9, #0
 800955e:	d130      	bne.n	80095c2 <__gethex+0x326>
 8009560:	b127      	cbz	r7, 800956c <__gethex+0x2d0>
 8009562:	4639      	mov	r1, r7
 8009564:	4620      	mov	r0, r4
 8009566:	f7fd fe34 	bl	80071d2 <__any_on>
 800956a:	4681      	mov	r9, r0
 800956c:	117a      	asrs	r2, r7, #5
 800956e:	2301      	movs	r3, #1
 8009570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009574:	f007 071f 	and.w	r7, r7, #31
 8009578:	40bb      	lsls	r3, r7
 800957a:	4213      	tst	r3, r2
 800957c:	4629      	mov	r1, r5
 800957e:	4620      	mov	r0, r4
 8009580:	bf18      	it	ne
 8009582:	f049 0902 	orrne.w	r9, r9, #2
 8009586:	f7ff fe21 	bl	80091cc <rshift>
 800958a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800958e:	1b76      	subs	r6, r6, r5
 8009590:	2502      	movs	r5, #2
 8009592:	f1b9 0f00 	cmp.w	r9, #0
 8009596:	d047      	beq.n	8009628 <__gethex+0x38c>
 8009598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d015      	beq.n	80095cc <__gethex+0x330>
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d017      	beq.n	80095d4 <__gethex+0x338>
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d109      	bne.n	80095bc <__gethex+0x320>
 80095a8:	f019 0f02 	tst.w	r9, #2
 80095ac:	d006      	beq.n	80095bc <__gethex+0x320>
 80095ae:	f8da 3000 	ldr.w	r3, [sl]
 80095b2:	ea49 0903 	orr.w	r9, r9, r3
 80095b6:	f019 0f01 	tst.w	r9, #1
 80095ba:	d10e      	bne.n	80095da <__gethex+0x33e>
 80095bc:	f045 0510 	orr.w	r5, r5, #16
 80095c0:	e032      	b.n	8009628 <__gethex+0x38c>
 80095c2:	f04f 0901 	mov.w	r9, #1
 80095c6:	e7d1      	b.n	800956c <__gethex+0x2d0>
 80095c8:	2501      	movs	r5, #1
 80095ca:	e7e2      	b.n	8009592 <__gethex+0x2f6>
 80095cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ce:	f1c3 0301 	rsb	r3, r3, #1
 80095d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f0      	beq.n	80095bc <__gethex+0x320>
 80095da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095de:	f104 0314 	add.w	r3, r4, #20
 80095e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80095f8:	d01b      	beq.n	8009632 <__gethex+0x396>
 80095fa:	3201      	adds	r2, #1
 80095fc:	6002      	str	r2, [r0, #0]
 80095fe:	2d02      	cmp	r5, #2
 8009600:	f104 0314 	add.w	r3, r4, #20
 8009604:	d13c      	bne.n	8009680 <__gethex+0x3e4>
 8009606:	f8d8 2000 	ldr.w	r2, [r8]
 800960a:	3a01      	subs	r2, #1
 800960c:	42b2      	cmp	r2, r6
 800960e:	d109      	bne.n	8009624 <__gethex+0x388>
 8009610:	1171      	asrs	r1, r6, #5
 8009612:	2201      	movs	r2, #1
 8009614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009618:	f006 061f 	and.w	r6, r6, #31
 800961c:	fa02 f606 	lsl.w	r6, r2, r6
 8009620:	421e      	tst	r6, r3
 8009622:	d13a      	bne.n	800969a <__gethex+0x3fe>
 8009624:	f045 0520 	orr.w	r5, r5, #32
 8009628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800962a:	601c      	str	r4, [r3, #0]
 800962c:	9b02      	ldr	r3, [sp, #8]
 800962e:	601f      	str	r7, [r3, #0]
 8009630:	e6b0      	b.n	8009394 <__gethex+0xf8>
 8009632:	4299      	cmp	r1, r3
 8009634:	f843 cc04 	str.w	ip, [r3, #-4]
 8009638:	d8d9      	bhi.n	80095ee <__gethex+0x352>
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	459b      	cmp	fp, r3
 800963e:	db17      	blt.n	8009670 <__gethex+0x3d4>
 8009640:	6861      	ldr	r1, [r4, #4]
 8009642:	9801      	ldr	r0, [sp, #4]
 8009644:	3101      	adds	r1, #1
 8009646:	f7fd f93b 	bl	80068c0 <_Balloc>
 800964a:	4681      	mov	r9, r0
 800964c:	b918      	cbnz	r0, 8009656 <__gethex+0x3ba>
 800964e:	4b1a      	ldr	r3, [pc, #104]	@ (80096b8 <__gethex+0x41c>)
 8009650:	4602      	mov	r2, r0
 8009652:	2184      	movs	r1, #132	@ 0x84
 8009654:	e6c5      	b.n	80093e2 <__gethex+0x146>
 8009656:	6922      	ldr	r2, [r4, #16]
 8009658:	3202      	adds	r2, #2
 800965a:	f104 010c 	add.w	r1, r4, #12
 800965e:	0092      	lsls	r2, r2, #2
 8009660:	300c      	adds	r0, #12
 8009662:	f7ff fd69 	bl	8009138 <memcpy>
 8009666:	4621      	mov	r1, r4
 8009668:	9801      	ldr	r0, [sp, #4]
 800966a:	f7fd f969 	bl	8006940 <_Bfree>
 800966e:	464c      	mov	r4, r9
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009678:	6122      	str	r2, [r4, #16]
 800967a:	2201      	movs	r2, #1
 800967c:	615a      	str	r2, [r3, #20]
 800967e:	e7be      	b.n	80095fe <__gethex+0x362>
 8009680:	6922      	ldr	r2, [r4, #16]
 8009682:	455a      	cmp	r2, fp
 8009684:	dd0b      	ble.n	800969e <__gethex+0x402>
 8009686:	2101      	movs	r1, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f7ff fd9f 	bl	80091cc <rshift>
 800968e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009692:	3701      	adds	r7, #1
 8009694:	42bb      	cmp	r3, r7
 8009696:	f6ff aee0 	blt.w	800945a <__gethex+0x1be>
 800969a:	2501      	movs	r5, #1
 800969c:	e7c2      	b.n	8009624 <__gethex+0x388>
 800969e:	f016 061f 	ands.w	r6, r6, #31
 80096a2:	d0fa      	beq.n	800969a <__gethex+0x3fe>
 80096a4:	4453      	add	r3, sl
 80096a6:	f1c6 0620 	rsb	r6, r6, #32
 80096aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096ae:	f7fd f9f9 	bl	8006aa4 <__hi0bits>
 80096b2:	42b0      	cmp	r0, r6
 80096b4:	dbe7      	blt.n	8009686 <__gethex+0x3ea>
 80096b6:	e7f0      	b.n	800969a <__gethex+0x3fe>
 80096b8:	08009bcf 	.word	0x08009bcf

080096bc <L_shift>:
 80096bc:	f1c2 0208 	rsb	r2, r2, #8
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	f1c2 0620 	rsb	r6, r2, #32
 80096c8:	6843      	ldr	r3, [r0, #4]
 80096ca:	6804      	ldr	r4, [r0, #0]
 80096cc:	fa03 f506 	lsl.w	r5, r3, r6
 80096d0:	432c      	orrs	r4, r5
 80096d2:	40d3      	lsrs	r3, r2
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096da:	4288      	cmp	r0, r1
 80096dc:	d3f4      	bcc.n	80096c8 <L_shift+0xc>
 80096de:	bd70      	pop	{r4, r5, r6, pc}

080096e0 <__match>:
 80096e0:	b530      	push	{r4, r5, lr}
 80096e2:	6803      	ldr	r3, [r0, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ea:	b914      	cbnz	r4, 80096f2 <__match+0x12>
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	2001      	movs	r0, #1
 80096f0:	bd30      	pop	{r4, r5, pc}
 80096f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096fa:	2d19      	cmp	r5, #25
 80096fc:	bf98      	it	ls
 80096fe:	3220      	addls	r2, #32
 8009700:	42a2      	cmp	r2, r4
 8009702:	d0f0      	beq.n	80096e6 <__match+0x6>
 8009704:	2000      	movs	r0, #0
 8009706:	e7f3      	b.n	80096f0 <__match+0x10>

08009708 <__hexnan>:
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	680b      	ldr	r3, [r1, #0]
 800970e:	6801      	ldr	r1, [r0, #0]
 8009710:	115e      	asrs	r6, r3, #5
 8009712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009716:	f013 031f 	ands.w	r3, r3, #31
 800971a:	b087      	sub	sp, #28
 800971c:	bf18      	it	ne
 800971e:	3604      	addne	r6, #4
 8009720:	2500      	movs	r5, #0
 8009722:	1f37      	subs	r7, r6, #4
 8009724:	4682      	mov	sl, r0
 8009726:	4690      	mov	r8, r2
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	f846 5c04 	str.w	r5, [r6, #-4]
 800972e:	46b9      	mov	r9, r7
 8009730:	463c      	mov	r4, r7
 8009732:	9502      	str	r5, [sp, #8]
 8009734:	46ab      	mov	fp, r5
 8009736:	784a      	ldrb	r2, [r1, #1]
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	b342      	cbz	r2, 8009790 <__hexnan+0x88>
 800973e:	4610      	mov	r0, r2
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	9204      	str	r2, [sp, #16]
 8009744:	f7ff fd94 	bl	8009270 <__hexdig_fun>
 8009748:	2800      	cmp	r0, #0
 800974a:	d151      	bne.n	80097f0 <__hexnan+0xe8>
 800974c:	9a04      	ldr	r2, [sp, #16]
 800974e:	9905      	ldr	r1, [sp, #20]
 8009750:	2a20      	cmp	r2, #32
 8009752:	d818      	bhi.n	8009786 <__hexnan+0x7e>
 8009754:	9b02      	ldr	r3, [sp, #8]
 8009756:	459b      	cmp	fp, r3
 8009758:	dd13      	ble.n	8009782 <__hexnan+0x7a>
 800975a:	454c      	cmp	r4, r9
 800975c:	d206      	bcs.n	800976c <__hexnan+0x64>
 800975e:	2d07      	cmp	r5, #7
 8009760:	dc04      	bgt.n	800976c <__hexnan+0x64>
 8009762:	462a      	mov	r2, r5
 8009764:	4649      	mov	r1, r9
 8009766:	4620      	mov	r0, r4
 8009768:	f7ff ffa8 	bl	80096bc <L_shift>
 800976c:	4544      	cmp	r4, r8
 800976e:	d952      	bls.n	8009816 <__hexnan+0x10e>
 8009770:	2300      	movs	r3, #0
 8009772:	f1a4 0904 	sub.w	r9, r4, #4
 8009776:	f844 3c04 	str.w	r3, [r4, #-4]
 800977a:	f8cd b008 	str.w	fp, [sp, #8]
 800977e:	464c      	mov	r4, r9
 8009780:	461d      	mov	r5, r3
 8009782:	9903      	ldr	r1, [sp, #12]
 8009784:	e7d7      	b.n	8009736 <__hexnan+0x2e>
 8009786:	2a29      	cmp	r2, #41	@ 0x29
 8009788:	d157      	bne.n	800983a <__hexnan+0x132>
 800978a:	3102      	adds	r1, #2
 800978c:	f8ca 1000 	str.w	r1, [sl]
 8009790:	f1bb 0f00 	cmp.w	fp, #0
 8009794:	d051      	beq.n	800983a <__hexnan+0x132>
 8009796:	454c      	cmp	r4, r9
 8009798:	d206      	bcs.n	80097a8 <__hexnan+0xa0>
 800979a:	2d07      	cmp	r5, #7
 800979c:	dc04      	bgt.n	80097a8 <__hexnan+0xa0>
 800979e:	462a      	mov	r2, r5
 80097a0:	4649      	mov	r1, r9
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7ff ff8a 	bl	80096bc <L_shift>
 80097a8:	4544      	cmp	r4, r8
 80097aa:	d936      	bls.n	800981a <__hexnan+0x112>
 80097ac:	f1a8 0204 	sub.w	r2, r8, #4
 80097b0:	4623      	mov	r3, r4
 80097b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80097b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80097ba:	429f      	cmp	r7, r3
 80097bc:	d2f9      	bcs.n	80097b2 <__hexnan+0xaa>
 80097be:	1b3b      	subs	r3, r7, r4
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	3304      	adds	r3, #4
 80097c6:	3401      	adds	r4, #1
 80097c8:	3e03      	subs	r6, #3
 80097ca:	42b4      	cmp	r4, r6
 80097cc:	bf88      	it	hi
 80097ce:	2304      	movhi	r3, #4
 80097d0:	4443      	add	r3, r8
 80097d2:	2200      	movs	r2, #0
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	429f      	cmp	r7, r3
 80097da:	d2fb      	bcs.n	80097d4 <__hexnan+0xcc>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	b91b      	cbnz	r3, 80097e8 <__hexnan+0xe0>
 80097e0:	4547      	cmp	r7, r8
 80097e2:	d128      	bne.n	8009836 <__hexnan+0x12e>
 80097e4:	2301      	movs	r3, #1
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	2005      	movs	r0, #5
 80097ea:	b007      	add	sp, #28
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	3501      	adds	r5, #1
 80097f2:	2d08      	cmp	r5, #8
 80097f4:	f10b 0b01 	add.w	fp, fp, #1
 80097f8:	dd06      	ble.n	8009808 <__hexnan+0x100>
 80097fa:	4544      	cmp	r4, r8
 80097fc:	d9c1      	bls.n	8009782 <__hexnan+0x7a>
 80097fe:	2300      	movs	r3, #0
 8009800:	f844 3c04 	str.w	r3, [r4, #-4]
 8009804:	2501      	movs	r5, #1
 8009806:	3c04      	subs	r4, #4
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	f000 000f 	and.w	r0, r0, #15
 800980e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	e7b5      	b.n	8009782 <__hexnan+0x7a>
 8009816:	2508      	movs	r5, #8
 8009818:	e7b3      	b.n	8009782 <__hexnan+0x7a>
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d0dd      	beq.n	80097dc <__hexnan+0xd4>
 8009820:	f1c3 0320 	rsb	r3, r3, #32
 8009824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009828:	40da      	lsrs	r2, r3
 800982a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800982e:	4013      	ands	r3, r2
 8009830:	f846 3c04 	str.w	r3, [r6, #-4]
 8009834:	e7d2      	b.n	80097dc <__hexnan+0xd4>
 8009836:	3f04      	subs	r7, #4
 8009838:	e7d0      	b.n	80097dc <__hexnan+0xd4>
 800983a:	2004      	movs	r0, #4
 800983c:	e7d5      	b.n	80097ea <__hexnan+0xe2>

0800983e <__ascii_mbtowc>:
 800983e:	b082      	sub	sp, #8
 8009840:	b901      	cbnz	r1, 8009844 <__ascii_mbtowc+0x6>
 8009842:	a901      	add	r1, sp, #4
 8009844:	b142      	cbz	r2, 8009858 <__ascii_mbtowc+0x1a>
 8009846:	b14b      	cbz	r3, 800985c <__ascii_mbtowc+0x1e>
 8009848:	7813      	ldrb	r3, [r2, #0]
 800984a:	600b      	str	r3, [r1, #0]
 800984c:	7812      	ldrb	r2, [r2, #0]
 800984e:	1e10      	subs	r0, r2, #0
 8009850:	bf18      	it	ne
 8009852:	2001      	movne	r0, #1
 8009854:	b002      	add	sp, #8
 8009856:	4770      	bx	lr
 8009858:	4610      	mov	r0, r2
 800985a:	e7fb      	b.n	8009854 <__ascii_mbtowc+0x16>
 800985c:	f06f 0001 	mvn.w	r0, #1
 8009860:	e7f8      	b.n	8009854 <__ascii_mbtowc+0x16>

08009862 <_realloc_r>:
 8009862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009866:	4607      	mov	r7, r0
 8009868:	4614      	mov	r4, r2
 800986a:	460d      	mov	r5, r1
 800986c:	b921      	cbnz	r1, 8009878 <_realloc_r+0x16>
 800986e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	4611      	mov	r1, r2
 8009874:	f7fc bf98 	b.w	80067a8 <_malloc_r>
 8009878:	b92a      	cbnz	r2, 8009886 <_realloc_r+0x24>
 800987a:	f7fc ff21 	bl	80066c0 <_free_r>
 800987e:	4625      	mov	r5, r4
 8009880:	4628      	mov	r0, r5
 8009882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009886:	f000 f8b2 	bl	80099ee <_malloc_usable_size_r>
 800988a:	4284      	cmp	r4, r0
 800988c:	4606      	mov	r6, r0
 800988e:	d802      	bhi.n	8009896 <_realloc_r+0x34>
 8009890:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009894:	d8f4      	bhi.n	8009880 <_realloc_r+0x1e>
 8009896:	4621      	mov	r1, r4
 8009898:	4638      	mov	r0, r7
 800989a:	f7fc ff85 	bl	80067a8 <_malloc_r>
 800989e:	4680      	mov	r8, r0
 80098a0:	b908      	cbnz	r0, 80098a6 <_realloc_r+0x44>
 80098a2:	4645      	mov	r5, r8
 80098a4:	e7ec      	b.n	8009880 <_realloc_r+0x1e>
 80098a6:	42b4      	cmp	r4, r6
 80098a8:	4622      	mov	r2, r4
 80098aa:	4629      	mov	r1, r5
 80098ac:	bf28      	it	cs
 80098ae:	4632      	movcs	r2, r6
 80098b0:	f7ff fc42 	bl	8009138 <memcpy>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7fc ff02 	bl	80066c0 <_free_r>
 80098bc:	e7f1      	b.n	80098a2 <_realloc_r+0x40>
	...

080098c0 <_strtoul_l.isra.0>:
 80098c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4e34      	ldr	r6, [pc, #208]	@ (8009998 <_strtoul_l.isra.0+0xd8>)
 80098c6:	4686      	mov	lr, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	4628      	mov	r0, r5
 80098cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d0:	5d37      	ldrb	r7, [r6, r4]
 80098d2:	f017 0708 	ands.w	r7, r7, #8
 80098d6:	d1f8      	bne.n	80098ca <_strtoul_l.isra.0+0xa>
 80098d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80098da:	d110      	bne.n	80098fe <_strtoul_l.isra.0+0x3e>
 80098dc:	782c      	ldrb	r4, [r5, #0]
 80098de:	2701      	movs	r7, #1
 80098e0:	1c85      	adds	r5, r0, #2
 80098e2:	f033 0010 	bics.w	r0, r3, #16
 80098e6:	d115      	bne.n	8009914 <_strtoul_l.isra.0+0x54>
 80098e8:	2c30      	cmp	r4, #48	@ 0x30
 80098ea:	d10d      	bne.n	8009908 <_strtoul_l.isra.0+0x48>
 80098ec:	7828      	ldrb	r0, [r5, #0]
 80098ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80098f2:	2858      	cmp	r0, #88	@ 0x58
 80098f4:	d108      	bne.n	8009908 <_strtoul_l.isra.0+0x48>
 80098f6:	786c      	ldrb	r4, [r5, #1]
 80098f8:	3502      	adds	r5, #2
 80098fa:	2310      	movs	r3, #16
 80098fc:	e00a      	b.n	8009914 <_strtoul_l.isra.0+0x54>
 80098fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8009900:	bf04      	itt	eq
 8009902:	782c      	ldrbeq	r4, [r5, #0]
 8009904:	1c85      	addeq	r5, r0, #2
 8009906:	e7ec      	b.n	80098e2 <_strtoul_l.isra.0+0x22>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1f6      	bne.n	80098fa <_strtoul_l.isra.0+0x3a>
 800990c:	2c30      	cmp	r4, #48	@ 0x30
 800990e:	bf14      	ite	ne
 8009910:	230a      	movne	r3, #10
 8009912:	2308      	moveq	r3, #8
 8009914:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8009918:	2600      	movs	r6, #0
 800991a:	fbb8 f8f3 	udiv	r8, r8, r3
 800991e:	fb03 f908 	mul.w	r9, r3, r8
 8009922:	ea6f 0909 	mvn.w	r9, r9
 8009926:	4630      	mov	r0, r6
 8009928:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800992c:	f1bc 0f09 	cmp.w	ip, #9
 8009930:	d810      	bhi.n	8009954 <_strtoul_l.isra.0+0x94>
 8009932:	4664      	mov	r4, ip
 8009934:	42a3      	cmp	r3, r4
 8009936:	dd1e      	ble.n	8009976 <_strtoul_l.isra.0+0xb6>
 8009938:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800993c:	d007      	beq.n	800994e <_strtoul_l.isra.0+0x8e>
 800993e:	4580      	cmp	r8, r0
 8009940:	d316      	bcc.n	8009970 <_strtoul_l.isra.0+0xb0>
 8009942:	d101      	bne.n	8009948 <_strtoul_l.isra.0+0x88>
 8009944:	45a1      	cmp	r9, r4
 8009946:	db13      	blt.n	8009970 <_strtoul_l.isra.0+0xb0>
 8009948:	fb00 4003 	mla	r0, r0, r3, r4
 800994c:	2601      	movs	r6, #1
 800994e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009952:	e7e9      	b.n	8009928 <_strtoul_l.isra.0+0x68>
 8009954:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009958:	f1bc 0f19 	cmp.w	ip, #25
 800995c:	d801      	bhi.n	8009962 <_strtoul_l.isra.0+0xa2>
 800995e:	3c37      	subs	r4, #55	@ 0x37
 8009960:	e7e8      	b.n	8009934 <_strtoul_l.isra.0+0x74>
 8009962:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009966:	f1bc 0f19 	cmp.w	ip, #25
 800996a:	d804      	bhi.n	8009976 <_strtoul_l.isra.0+0xb6>
 800996c:	3c57      	subs	r4, #87	@ 0x57
 800996e:	e7e1      	b.n	8009934 <_strtoul_l.isra.0+0x74>
 8009970:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8009974:	e7eb      	b.n	800994e <_strtoul_l.isra.0+0x8e>
 8009976:	1c73      	adds	r3, r6, #1
 8009978:	d106      	bne.n	8009988 <_strtoul_l.isra.0+0xc8>
 800997a:	2322      	movs	r3, #34	@ 0x22
 800997c:	f8ce 3000 	str.w	r3, [lr]
 8009980:	4630      	mov	r0, r6
 8009982:	b932      	cbnz	r2, 8009992 <_strtoul_l.isra.0+0xd2>
 8009984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009988:	b107      	cbz	r7, 800998c <_strtoul_l.isra.0+0xcc>
 800998a:	4240      	negs	r0, r0
 800998c:	2a00      	cmp	r2, #0
 800998e:	d0f9      	beq.n	8009984 <_strtoul_l.isra.0+0xc4>
 8009990:	b106      	cbz	r6, 8009994 <_strtoul_l.isra.0+0xd4>
 8009992:	1e69      	subs	r1, r5, #1
 8009994:	6011      	str	r1, [r2, #0]
 8009996:	e7f5      	b.n	8009984 <_strtoul_l.isra.0+0xc4>
 8009998:	08009e59 	.word	0x08009e59

0800999c <_strtoul_r>:
 800999c:	f7ff bf90 	b.w	80098c0 <_strtoul_l.isra.0>

080099a0 <__ascii_wctomb>:
 80099a0:	4603      	mov	r3, r0
 80099a2:	4608      	mov	r0, r1
 80099a4:	b141      	cbz	r1, 80099b8 <__ascii_wctomb+0x18>
 80099a6:	2aff      	cmp	r2, #255	@ 0xff
 80099a8:	d904      	bls.n	80099b4 <__ascii_wctomb+0x14>
 80099aa:	228a      	movs	r2, #138	@ 0x8a
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099b2:	4770      	bx	lr
 80099b4:	700a      	strb	r2, [r1, #0]
 80099b6:	2001      	movs	r0, #1
 80099b8:	4770      	bx	lr
	...

080099bc <fiprintf>:
 80099bc:	b40e      	push	{r1, r2, r3}
 80099be:	b503      	push	{r0, r1, lr}
 80099c0:	4601      	mov	r1, r0
 80099c2:	ab03      	add	r3, sp, #12
 80099c4:	4805      	ldr	r0, [pc, #20]	@ (80099dc <fiprintf+0x20>)
 80099c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	f7fe fc27 	bl	8008220 <_vfiprintf_r>
 80099d2:	b002      	add	sp, #8
 80099d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d8:	b003      	add	sp, #12
 80099da:	4770      	bx	lr
 80099dc:	20000018 	.word	0x20000018

080099e0 <abort>:
 80099e0:	b508      	push	{r3, lr}
 80099e2:	2006      	movs	r0, #6
 80099e4:	f000 f834 	bl	8009a50 <raise>
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7f7 fcd7 	bl	800139c <_exit>

080099ee <_malloc_usable_size_r>:
 80099ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f2:	1f18      	subs	r0, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbc      	itt	lt
 80099f8:	580b      	ldrlt	r3, [r1, r0]
 80099fa:	18c0      	addlt	r0, r0, r3
 80099fc:	4770      	bx	lr

080099fe <_raise_r>:
 80099fe:	291f      	cmp	r1, #31
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4605      	mov	r5, r0
 8009a04:	460c      	mov	r4, r1
 8009a06:	d904      	bls.n	8009a12 <_raise_r+0x14>
 8009a08:	2316      	movs	r3, #22
 8009a0a:	6003      	str	r3, [r0, #0]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a14:	b112      	cbz	r2, 8009a1c <_raise_r+0x1e>
 8009a16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a1a:	b94b      	cbnz	r3, 8009a30 <_raise_r+0x32>
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f000 f831 	bl	8009a84 <_getpid_r>
 8009a22:	4622      	mov	r2, r4
 8009a24:	4601      	mov	r1, r0
 8009a26:	4628      	mov	r0, r5
 8009a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2c:	f000 b818 	b.w	8009a60 <_kill_r>
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d00a      	beq.n	8009a4a <_raise_r+0x4c>
 8009a34:	1c59      	adds	r1, r3, #1
 8009a36:	d103      	bne.n	8009a40 <_raise_r+0x42>
 8009a38:	2316      	movs	r3, #22
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	e7e7      	b.n	8009a10 <_raise_r+0x12>
 8009a40:	2100      	movs	r1, #0
 8009a42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a46:	4620      	mov	r0, r4
 8009a48:	4798      	blx	r3
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e7e0      	b.n	8009a10 <_raise_r+0x12>
	...

08009a50 <raise>:
 8009a50:	4b02      	ldr	r3, [pc, #8]	@ (8009a5c <raise+0xc>)
 8009a52:	4601      	mov	r1, r0
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f7ff bfd2 	b.w	80099fe <_raise_r>
 8009a5a:	bf00      	nop
 8009a5c:	20000018 	.word	0x20000018

08009a60 <_kill_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	@ (8009a80 <_kill_r+0x20>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f7f7 fc85 	bl	800137c <_kill>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d102      	bne.n	8009a7c <_kill_r+0x1c>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	b103      	cbz	r3, 8009a7c <_kill_r+0x1c>
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000408 	.word	0x20000408

08009a84 <_getpid_r>:
 8009a84:	f7f7 bc72 	b.w	800136c <_getpid>

08009a88 <_init>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	bf00      	nop
 8009a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8e:	bc08      	pop	{r3}
 8009a90:	469e      	mov	lr, r3
 8009a92:	4770      	bx	lr

08009a94 <_fini>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	bf00      	nop
 8009a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9a:	bc08      	pop	{r3}
 8009a9c:	469e      	mov	lr, r3
 8009a9e:	4770      	bx	lr
